<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LeiHao&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://leihao0.github.io/"/>
  <updated>2020-09-03T00:53:05.604Z</updated>
  <id>https://leihao0.github.io/</id>
  
  <author>
    <name>LeiHao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python vs Java for Kids</title>
    <link href="https://leihao0.github.io/Python-vs-Java-for-Kids/"/>
    <id>https://leihao0.github.io/Python-vs-Java-for-Kids/</id>
    <published>2020-08-12T05:33:04.000Z</published>
    <updated>2020-09-03T00:53:05.604Z</updated>
    
    <content type="html"><![CDATA[<p><em>This</em> <a href="https://junilearning.com/blog/guide/python-vs-java/"><em>article</em></a> <em>originally appeared on</em> <a href="https://junilearning.com/"><em>junilearning.com</em></a></p><h1 id="Python-vs-Java-Uses-Performance-Learning"><a href="#Python-vs-Java-Uses-Performance-Learning" class="headerlink" title="Python vs. Java: Uses, Performance, Learning"></a>Python vs. Java: Uses, Performance, Learning</h1><p>In the world of computer science, there are many programming languages, and no single language is superior to another. In other words, <strong>each language is best suited to solve certain problems</strong>, and in fact there is often no one best language to choose for a given programming project. For this reason, it is important for students who wish to develop software or to solve interesting problems through code to have <strong>strong computer science fundamentals that will apply across any programming language</strong>.</p><a id="more"></a><p>Programming languages tend to share certain characteristics in how they function, for example in the way they deal with memory usage or how heavily they use objects. Students will start seeing these patterns as they are exposed to more languages. This article will focus primarily on Python versus Java, which are two of the most widely used programming languages in the world. While it is hard to measure exactly the rate at which each programming language is growing, <strong>these are two of the most popular programming languages used in industry today</strong>.</p><p>One major difference between Python and Java is that Python is <strong>dynamically typed</strong>, while Java is <strong>statically typed</strong>. Loosely, this means that Java is much more strict about how variables are defined and used in code. <strong>As a result, Java tends to be more verbose in its syntax, which is one of the reasons we recommend learning Python before Java for beginners.</strong> For example, here is how you would create a variable named <code>numbers</code> that holds the numbers 0 through 9 in Python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numbers = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">numbers.append(i)</span><br></pre></td></tr></table></figure><p>Here’s how you would do the same thing in Java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList numbers = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    numbers.add(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Another major difference is that Java generally runs programs more quickly than Python, as it is a <strong>compiled language</strong>. This means that before a program is actually run, the compiler translates the Java code into machine-level code. By contrast, Python is an <strong>interpreted</strong> language, meaning there is no compile step.</p><h2 id="Usage-and-Practicality"><a href="#Usage-and-Practicality" class="headerlink" title="Usage and Practicality"></a>Usage and Practicality</h2><p>Historically, Java has been the more popular language in part due to its lengthy legacy. However, Python is rapidly gaining ground. According to <a href="https://octoverse.github.com/">Github’s State of the Octoberst Report</a>, it has recently surpassed Java as the most widely used programming language. As per the 2018 developer survey, <strong>Python is now the fastest-growing computer programing language</strong>.</p><p>Both Python and Java have large communities of developers to answer questions on websites like <a href="https://stackoverflow.com/">Stack Overflow</a>. As you can see from <a href="https://insights.stackoverflow.com/trends?tags=python%2Cjava">Stack Overflow trends</a>, <strong>Python surpassed Java in terms the percentage of questions asked about it on Stack Overflow in 2017</strong>. At the time of writing, about 13% of the questions on Stack Overflow are tagged with Python, while about 8% are tagged with Java!</p><h2 id="Web-Development"><a href="#Web-Development" class="headerlink" title="Web Development"></a>Web Development</h2><p><strong>Python and Java can both be used for backend web development</strong>. Typically developers will use the <a href="https://stackify.com/python-frameworks/">Django and Flask</a> frameworks for Python and <a href="https://spring.io/">Spring</a> for Java. Python is known for its code readability, meaning Python code is clean, readable, and concise. Python also has a large, comprehensive set of modules, packages, and libraries that exist beyond its standard library, developed by the community of Python enthusiasts. Java has a similar ecosystem, although perhaps to a lesser extent.</p><h2 id="Mobile-App-Development"><a href="#Mobile-App-Development" class="headerlink" title="Mobile App Development"></a>Mobile App Development</h2><p><strong>In terms of mobile app development, Java dominates the field</strong>, as it is the primary langauge used for building Android apps and games. Thanks to the aforementioned tailored libraries, developers have the option to write Android apps by leveraging robust frameworks and development tools built specifically for the operating system. Currently, Python is not used commonly for mobile development, although there are tools like <a href="https://kivy.org/">Kivy</a>and <a href="https://beeware.org/">BeeWare</a> that allow you to write code once and deploy apps across Windows, OS X, iOS, and Android.</p><h2 id="Machine-Learning-and-Big-Data"><a href="#Machine-Learning-and-Big-Data" class="headerlink" title="Machine Learning and Big Data"></a>Machine Learning and Big Data</h2><p>Conversely, in the world of machine learning and <a href="https://junilearning.com/blog/coding-and-data-science">data science</a>, Python is the most popular language. Python is often used for big data, scientific computing, and artificial intelligence (A.I.) projects. <strong>The vast majority of data scientists and machine learning programmers opt for Python over Java while working on projects that involve sentiment analysis</strong>. At the same time, it is important to note that many machine learning programmers may choose to use Java while they work on projects related to network security, cyber attack prevention, and fraud detection.</p><h2 id="Where-to-Start"><a href="#Where-to-Start" class="headerlink" title="Where to Start"></a>Where to Start</h2><p>When it comes to learning the foundations of programming, <strong>many studies have concluded that it is easier to <a href="https://junilearning.com/coding">learn Python</a> over Java</strong>, due to Python’s simple and intuitive syntax, as seen in the earlier example. Java programs often have more boilerplate code - sections of code that have to be included in many places with little or no alteration - than Python. That being said, there are some notable advantages to Java, in particular its speed as a compiled language. <strong>Learning both Python and Java will give students exposure to two languages that lay their foundation on similar computer science concepts, yet differ in educational ways.</strong></p><p>Overall, it is clear that both Python and Java are powerful programming languages in practice, and it would be advisable for any aspiring software developer to learn both languages proficiently. Programmers should compare Python and Java based on the specific needs of each software development project, as opposed to simply learning the one language that they prefer. In short, <strong>neither language is superior to another, and programmers should aim to have both in their coding experience</strong>.</p><table><thead><tr><th></th><th>Python</th><th>Java</th></tr></thead><tbody><tr><td>Runtime Performance</td><td></td><td>Winner</td></tr><tr><td>Ease of Learning</td><td>Winner</td><td></td></tr><tr><td>Practical Agility</td><td>Tie</td><td>Tie</td></tr><tr><td>Mobile App Development</td><td></td><td>Winner</td></tr><tr><td>Big Data</td><td>Winner</td><td></td></tr></tbody></table><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;This&lt;/em&gt; &lt;a href=&quot;https://junilearning.com/blog/guide/python-vs-java/&quot;&gt;&lt;em&gt;article&lt;/em&gt;&lt;/a&gt; &lt;em&gt;originally appeared on&lt;/em&gt; &lt;a href=&quot;https://junilearning.com/&quot;&gt;&lt;em&gt;junilearning.com&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Python-vs-Java-Uses-Performance-Learning&quot;&gt;&lt;a href=&quot;#Python-vs-Java-Uses-Performance-Learning&quot; class=&quot;headerlink&quot; title=&quot;Python vs. Java: Uses, Performance, Learning&quot;&gt;&lt;/a&gt;Python vs. Java: Uses, Performance, Learning&lt;/h1&gt;&lt;p&gt;In the world of computer science, there are many programming languages, and no single language is superior to another. In other words, &lt;strong&gt;each language is best suited to solve certain problems&lt;/strong&gt;, and in fact there is often no one best language to choose for a given programming project. For this reason, it is important for students who wish to develop software or to solve interesting problems through code to have &lt;strong&gt;strong computer science fundamentals that will apply across any programming language&lt;/strong&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python" scheme="https://leihao0.github.io/tags/Python/"/>
    
      <category term="Java" scheme="https://leihao0.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>CN Python vs Java for Kids</title>
    <link href="https://leihao0.github.io/CN-Python-vs-Java-for-Kids/"/>
    <id>https://leihao0.github.io/CN-Python-vs-Java-for-Kids/</id>
    <published>2020-08-12T05:33:04.000Z</published>
    <updated>2020-09-03T00:53:46.925Z</updated>
    
    <content type="html"><![CDATA[<p><em>该</em> <a href="https://junilearning.com/blog/guide/python-vs-java/"><em>文章</em></a> <em>最初出现在</em> <a href="https://junilearning.com/"><em>junilearning.com</em></a></p><h1 id="Python-与-Java：使用，性能，学习"><a href="#Python-与-Java：使用，性能，学习" class="headerlink" title="Python 与 Java：使用，性能，学习"></a>Python 与 Java：使用，性能，学习</h1><p>在计算机科学领域，有许多编程语言，没有一种语言能比另一种语言优越。换句话说，<strong>每种语言最适合解决某些问题</strong>，实际上，对于给定的编程项目，通常没有一种最佳语言可供选择。因此，对于希望开发软件或通过代码解决有趣问题的学生来说，拥有<strong>适用于任何编程语言的强大计算机科学基础非常重要</strong>。</p><a id="more"></a><p>编程语言倾向于在它们的工作方式上共享某些特征，例如，它们在处理内存使用情况或使用对象的强度方面。当学生接触更多语言时，他们将开始看到这些模式。本文将主要关注 Python 与 Java，这是世界上使用最广泛的两种编程语言。虽然很难准确地衡量每种编程语言的增长速度，但<strong>它们是当今工业上使用的两种最受欢迎的编程语言</strong>。</p><p>Python 和 Java 之间的主要区别是 Python 是<strong>动态类型的</strong>，而 Java 是<strong>静态类型的</strong>。宽松地讲，这意味着 Java 对如何在代码中定义和使用变量更加严格。<strong>结果，Java 的语法趋于冗长，这是我们建议初学者在 Java 之前学习 Python 的原因之一。</strong>例如，这是<code>numbers</code>在 Python 中创建一个名称变量的方法，该变量保存数字 0 到 9：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numbers = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">numbers.append(i)</span><br></pre></td></tr></table></figure><p>Here’s how you would do the same thing in Java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList numbers = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    numbers.add(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一个主要区别是，Java 是一种<strong>编译语言</strong>，因此通常比 Python 运行程序的速度更快。这意味着在实际运行程序之前，编译器会将 Java 代码转换为机器级代码。相比之下，Python 是一种<strong>解释型</strong>语言，这意味着没有编译步骤。</p><h2 id="用法和实用性"><a href="#用法和实用性" class="headerlink" title="用法和实用性"></a>用法和实用性</h2><p>从历史上看，Java 之所以成为较流行的语言，部分原因是它的悠久历史。但是，Python 正在迅速普及。根据<a href="https://octoverse.github.com/">Github 的十月状态报告</a>，它最近已经超过 Java，成为使用最广泛的编程语言。根据 2018 年开发人员调查，<strong>Python 现在是增长最快的计算机编程语言</strong>。</p><p>Python 和 Java 都有大量的开发人员社区，可以在<a href="https://stackoverflow.com/">Stack Overflow 之</a>类的网站上回答问题。从<a href="https://insights.stackoverflow.com/trends?tags=python%2Cjava">Stack Overflow 趋势中</a>可以看出，<strong>Python 在 2017 年 Stack Overflow 上所问问题的百分比超过 Java</strong>。在撰写本文时，Stack Overflow 上大约 13％的问题用 Python 标记，而大约 8％的问题用 Java 标记！</p><h2 id="Web-开发"><a href="#Web-开发" class="headerlink" title="Web 开发"></a>Web 开发</h2><p><strong>Python 和 Java 均可用于后端 Web 开发</strong>。通常，开发人员将使用适用于 Python 的<a href="https://stackify.com/python-frameworks/">Django 和 Flask</a>框架以及适用于 Java 的<a href="https://spring.io/">Spring</a>。Python 以其代码的可读性而闻名，这意味着 Python 代码干净，易读且简洁。Python 还拥有大量，全面的模块，软件包和库，这些模块，软件包和库由 Python 发烧友社区开发，而其标准库之外。Java 具有类似的生态系统，尽管程度可能较小。</p><h2 id="移动应用开发"><a href="#移动应用开发" class="headerlink" title="移动应用开发"></a>移动应用开发</h2><p><strong>在移动应用程序开发方面，Java 占据了主导地位</strong>，因为<strong>Java</strong>是用于构建 Android 应用程序和游戏的主要语言。借助上述量身定制的库，开发人员可以选择利用专门为操作系统构建的强大框架和开发工具来编写 Android 应用程序。当前，尽管有<a href="https://kivy.org/">Kivy</a>和<a href="https://beeware.org/">BeeWare 之</a>类的工具可让您编写一次代码并在 Windows，OS X，iOS 和 Android 上部署应用程序，但是 Python 并不常用于移动开发。</p><h2 id="机器学习与大数据"><a href="#机器学习与大数据" class="headerlink" title="机器学习与大数据"></a>机器学习与大数据</h2><p>相反，在机器学习和<a href="https://junilearning.com/blog/coding-and-data-science">数据科学领域</a>，Python 是最受欢迎的语言。Python 通常用于大数据，科学计算和人工智能（AI）项目。<strong>在从事涉及情感分析的项目时，绝大多数数据科学家和机器学习程序员都选择使用 Python 而不是 Java</strong>。同时，值得注意的是，许多机器学习程序员在从事与网络安全，网络攻击预防和欺诈检测有关的项目时可能会选择使用 Java。</p><h2 id="从哪儿开始"><a href="#从哪儿开始" class="headerlink" title="从哪儿开始"></a>从哪儿开始</h2><p>在学习编程的基础时，<strong>许多研究得出的结论是</strong>，由于 Python 的简单直观的语法，因此<strong>比 Java</strong> <strong>更容易**</strong><a href="https://junilearning.com/coding">学习 Python</a><strong>，如前面的示例所示。与 Python 相比，Java 程序通常具有更多的样板代码-必须在许多地方包含很少或没有改动的部分代码。话虽如此，Java 有一些显着的优势，特别是它作为一种编译语言的速度。</strong>学习 Python 和 Java 将使学生接触两种语言，这两种语言基于相似的计算机科学概念，但教育方式不同。**</p><p>总体而言，很明显，Python 和 Java 在实践中都是强大的编程语言，因此，对于任何有抱负的软件开发人员，最好熟练地学习这两种语言。程序员应该根据每个软件开发项目的特定需求比较 Python 和 Java，而不是简单地学习他们喜欢的一种语言。简而言之，<strong>任何一种语言都不比另一种语言优越，因此程序员应力争在两种编码方面都拥有这两种语言</strong>。</p><table><thead><tr><th></th><th>Python</th><th>Java</th></tr></thead><tbody><tr><td>Runtime Performance</td><td></td><td>Winner</td></tr><tr><td>Ease of Learning</td><td>Winner</td><td></td></tr><tr><td>Practical Agility</td><td>Tie</td><td>Tie</td></tr><tr><td>Mobile App Development</td><td></td><td>Winner</td></tr><tr><td>Big Data</td><td>Winner</td><td></td></tr></tbody></table><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;该&lt;/em&gt; &lt;a href=&quot;https://junilearning.com/blog/guide/python-vs-java/&quot;&gt;&lt;em&gt;文章&lt;/em&gt;&lt;/a&gt; &lt;em&gt;最初出现在&lt;/em&gt; &lt;a href=&quot;https://junilearning.com/&quot;&gt;&lt;em&gt;junilearning.com&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Python-与-Java：使用，性能，学习&quot;&gt;&lt;a href=&quot;#Python-与-Java：使用，性能，学习&quot; class=&quot;headerlink&quot; title=&quot;Python 与 Java：使用，性能，学习&quot;&gt;&lt;/a&gt;Python 与 Java：使用，性能，学习&lt;/h1&gt;&lt;p&gt;在计算机科学领域，有许多编程语言，没有一种语言能比另一种语言优越。换句话说，&lt;strong&gt;每种语言最适合解决某些问题&lt;/strong&gt;，实际上，对于给定的编程项目，通常没有一种最佳语言可供选择。因此，对于希望开发软件或通过代码解决有趣问题的学生来说，拥有&lt;strong&gt;适用于任何编程语言的强大计算机科学基础非常重要&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python" scheme="https://leihao0.github.io/tags/Python/"/>
    
      <category term="Java" scheme="https://leihao0.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry Pi 4</title>
    <link href="https://leihao0.github.io/Raspberry-Pi-4/"/>
    <id>https://leihao0.github.io/Raspberry-Pi-4/</id>
    <published>2020-06-11T15:14:06.000Z</published>
    <updated>2020-09-09T10:59:06.287Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Pi-Hole.png" alt=""></p><a id="more"></a><p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Raspberrypi.png" alt=""></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># EEPROM</span></span><br><span class="line">sudo apt -y update</span><br><span class="line">sudo apt -y upgrade</span><br><span class="line">sudo apt -y install rpi-eeprom</span><br><span class="line">sudo rpi-eeprom-update</span><br><span class="line">sudo rpi-eeprom-update -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># oh-my-zsh</span></span><br><span class="line">sudo apt-get install zsh</span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="line">sudo apt -y install vim</span><br><span class="line"></span><br><span class="line">sudo chsh -s /bin/zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># pi-hole</span></span><br><span class="line">curl -sSL https://install.pi-hole.net | bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># piVPN</span></span><br><span class="line">curl -L https://install.pivpn.io | bash</span><br><span class="line">pivpn add</span><br><span class="line">pivpn remove</span><br><span class="line">pivpn list</span><br><span class="line">pivpn -qr</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Passwordless-SSH-access"><a href="#Passwordless-SSH-access" class="headerlink" title="Passwordless SSH access"></a>Passwordless SSH access</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">ssh-keygen</span><br><span class="line"><span class="comment"># raspberrypi</span></span><br><span class="line">cat raspberrypi.pub</span><br><span class="line">cat ~/.ssh/raspberrypi.pub | ssh pi@192.168.2.2 <span class="string">&#x27;mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h2><p><a href="https://magpi.raspberrypi.org/articles/vnc-raspberry-pi">https://magpi.raspberrypi.org/articles/vnc-raspberry-pi</a></p><h2 id="Rclone-amp-Google-Drive"><a href="#Rclone-amp-Google-Drive" class="headerlink" title="Rclone &amp; Google Drive"></a>Rclone &amp; Google Drive</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo apt -y install fuse</span><br><span class="line"></span><br><span class="line">curl -L https://raw.github.com/pageauc/rclone4pi/master/rclone-install.sh | bash</span><br><span class="line">rclone config</span><br><span class="line"></span><br><span class="line">mkdir -p /tmp/gdrive</span><br><span class="line">fusermount -u /tmp/gdrive</span><br><span class="line"></span><br><span class="line">sudo vim /etc/fuse.conf</span><br><span class="line"><span class="comment"># user_allow_other</span></span><br></pre></td></tr></table></figure><h2 id="Auto-Mount"><a href="#Auto-Mount" class="headerlink" title="Auto Mount"></a>Auto Mount</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo blkid</span><br><span class="line"></span><br><span class="line"><span class="comment"># sudo vim /etc/fstab</span></span><br><span class="line"></span><br><span class="line">UUID=633a8bc8 /media/3T ext4 defaults,auto,users,rw,nofail 0 0</span><br><span class="line">UUID=d271d018 /media/TM ext4 defaults,auto,users,rw,nofail 0 0</span><br><span class="line">UUID=53f3ce6b /media/8G ext4 defaults,auto,users,rw,nofail 0 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo chown -R pi:pi /media/3T /media/TM</span><br></pre></td></tr></table></figure><h2 id="Ramdisk-amp-Logs"><a href="#Ramdisk-amp-Logs" class="headerlink" title="Ramdisk &amp; Logs"></a>Ramdisk &amp; Logs</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sudo service rsyslog stop</span></span><br><span class="line"><span class="comment"># sudo systemctl disable rsyslog</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sudo vim /etc/fstab</span></span><br><span class="line"></span><br><span class="line">tmpfs /var/lib/plexmediaserver tmpfs defaults,noatime 0 0</span><br><span class="line">tmpfs /home/pi./cache tmpfs defaults,noatime 0 0</span><br><span class="line">tmpfs /tmp tmpfs defaults,noatime 0 0</span><br><span class="line">tmpfs /var/<span class="built_in">log</span> tmpfs defaults,noatime 0 0</span><br></pre></td></tr></table></figure><h2 id="Fix-Ext4"><a href="#Fix-Ext4" class="headerlink" title="Fix Ext4"></a>Fix Ext4</h2><p><code>sudo fsck.ext4 -vfy /dev/sda2</code></p><h2 id="Swap-space-on-an-external-hard-drive"><a href="#Swap-space-on-an-external-hard-drive" class="headerlink" title="Swap space on an external hard drive"></a>Swap space on an external hard drive</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/dphys-swapfile</span><br><span class="line"></span><br><span class="line">CONF_SWAPFILE=/media/3T/swapfile</span><br><span class="line">CONF_SWAPSIZE=8192</span><br></pre></td></tr></table></figure><h2 id="AFP-amp-Time-Machine"><a href="#AFP-amp-Time-Machine" class="headerlink" title="AFP &amp; Time Machine"></a>AFP &amp; Time Machine</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">sudo apt -y install netatalk gparted</span><br><span class="line"></span><br><span class="line"><span class="comment"># sudo mkfs.ext4 /dev/sda2</span></span><br><span class="line"><span class="comment"># sudo mkfs.ext4 /dev/sda3</span></span><br><span class="line"><span class="comment"># sudo mkdir /media/TM</span></span><br><span class="line"><span class="comment"># sudo mount /dev/sda3 /media/TM</span></span><br><span class="line"><span class="comment"># sudo chown -R pi:pi /media/3T</span></span><br><span class="line"><span class="comment"># sudo chown -R pi:pi /media/TM</span></span><br><span class="line"></span><br><span class="line">sudo vim /etc/netatalk/afp.conf</span><br><span class="line"><span class="comment"># ;[3T]</span></span><br><span class="line"><span class="comment"># ;  path = /media/3T/</span></span><br><span class="line"><span class="comment"># ;[tmp]</span></span><br><span class="line"><span class="comment"># ;  path = /tmp/</span></span><br><span class="line"><span class="comment"># [TM]</span></span><br><span class="line"><span class="comment">#   path = /media/TM/</span></span><br><span class="line"><span class="comment">#   time machine = yes</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo systemctl restart netatalk</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Samba"><a href="#Samba" class="headerlink" title="Samba"></a>Samba</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install samba samba-common-bin</span><br><span class="line"></span><br><span class="line">sudo vim /etc/samba/smb.conf</span><br><span class="line"><span class="comment"># [pimylifeupshare]</span></span><br><span class="line"><span class="comment"># path = /media/3T/</span></span><br><span class="line"><span class="comment"># writeable=Yes</span></span><br><span class="line"><span class="comment"># create mask=0777</span></span><br><span class="line"><span class="comment"># directory mask=0777</span></span><br><span class="line"><span class="comment"># public=no</span></span><br><span class="line"><span class="comment"># [tmp]</span></span><br><span class="line"><span class="comment"># path = /tmp/</span></span><br><span class="line"><span class="comment"># writeable=Yes</span></span><br><span class="line"><span class="comment"># create mask=0777</span></span><br><span class="line"><span class="comment"># directory mask=0777</span></span><br><span class="line"><span class="comment"># public=no</span></span><br><span class="line">sudo smbpasswd -a pi</span><br><span class="line">sudo systemctl restart smbd</span><br></pre></td></tr></table></figure><h2 id="Plex-Server"><a href="#Plex-Server" class="headerlink" title="Plex Server"></a>Plex Server</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="string">&quot;/tmp/plexmediaserver&quot;</span></span><br><span class="line">sudo mount -t tmpfs -o size=1000M tmpfs /tmp/plexmediaserver</span><br><span class="line">sudo chown -R pi:pi /var/lib/plexmediaserver</span><br><span class="line"></span><br><span class="line">sudo apt -y install apt-transport-https</span><br><span class="line">curl https://downloads.plex.tv/plex-keys/PlexSign.key | sudo apt-key add -</span><br><span class="line"><span class="built_in">echo</span> deb https://downloads.plex.tv/repo/deb public main | sudo tee /etc/apt/sources.list.d/plexmediaserver.list</span><br><span class="line">sudo apt -y install plexmediaserver</span><br><span class="line"></span><br><span class="line">sudo vim /etc/default/plexmediaserver</span><br><span class="line"><span class="comment"># export PLEX_MEDIA_SERVER_USER=pi</span></span><br><span class="line"></span><br><span class="line">hostname -I</span><br><span class="line">sudo vim /boot/cmdline.txt</span><br><span class="line"><span class="comment"># ip=IPADDRESS</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sudo apt -y install pmount</span></span><br><span class="line"><span class="comment"># sudo apt-get install ntfs-3g exfat-fuse exfat-utils pmount</span></span><br><span class="line"><span class="comment"># sudo apt-get install hfsplus hfsutils hfsprogs gdisk</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lsblk</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /lib/systemd/system/plexmediaserver.service</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># user plex to pi</span></span><br><span class="line">sudo mkdir -p /etc/systemd/system/plexmediaserver.service.d</span><br><span class="line">sudo vim /etc/systemd/system/plexmediaserver.service.d/override.conf</span><br><span class="line"><span class="comment"># [Service]</span></span><br><span class="line"><span class="comment"># User=pi</span></span><br><span class="line"><span class="comment"># Group=pi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [Service]</span></span><br><span class="line"><span class="comment"># ExecStartPre=/bin/sleep 120;/bin/sh -c &#x27;/usr/bin/test -d &quot;$&#123;PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR&#125;&quot; || /bin/mkdir -p &quot;$&#123;PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR&#125;&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># data folder</span></span><br><span class="line"></span><br><span class="line">sudo systemctl stop plexmediaserver</span><br><span class="line"></span><br><span class="line">sudo service plexmediaserver stop</span><br><span class="line"></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> plexmediaserver.service</span><br><span class="line">sudo systemctl restart plexmediaserver.service</span><br></pre></td></tr></table></figure><h2 id="Crontab-e"><a href="#Crontab-e" class="headerlink" title="Crontab -e"></a>Crontab -e</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt -y install php php-curl</span><br></pre></td></tr></table></figure><p><code>crontab -e</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># rclone</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#x27;</span><span class="string">&#x27;mkdir -p /tmp/gdrive</span></span><br><span class="line"><span class="string">fusermount -u /tmp/gdrive</span></span><br><span class="line"><span class="string">/usr/bin/rclone mount Plex:Plex /tmp/gdrive --umask 0000 --default-permissions --allow-non-empty --allow-other --buffer-size 64M --dir-cache-time 48h --vfs-read-chunk-size 128M --vfs-read-chunk-size-limit 1500M &amp;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span> &gt; rclone.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Backup</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tar --exclude=&quot;$PlexPath/Logs&quot; --exclude=&quot;$PlexPath/Cache&quot; --exclude=&quot;$PlexPath/Crash Reports&quot; -czf /tmp/gdrive/backup/plex.tar.gz /var/lib/plexmediaserver</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">mkdir -p /tmp/gdrive/backup/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">PlexPath=&quot;/var/lib/plexmediaserver/Library/Application Support/Plex Media Server&quot;</span></span><br><span class="line"><span class="string">tar cf - --exclude=&quot;$PlexPath/Logs&quot; --exclude=&quot;$PlexPath/Cache&quot; --exclude=&quot;$PlexPath/Crash Reports&quot; /var/lib/plexmediaserver | lz4 -f - /tmp/gdrive/backup/plex.tar.lz4</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span> &gt; backup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Restore</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">lz4 -d /tmp/gdrive/backup/plex.tar.lz4 | tar -xC /</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">PlexPath=&quot;/var/lib/plexmediaserver/Library/Application Support/Plex Media Server&quot;</span></span><br><span class="line"><span class="string">mkdir -p &quot;$PlexPath/Logs&quot; &quot;$PlexPath/Cache&quot; &quot;$PlexPath/Crash Reports&quot;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span> &gt; restore.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chmod a+x backup.sh restore.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Update</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">sudo apt update &amp;&amp; sudo apt upgrade &amp;&amp; sudo apt autoremove &amp;&amp; sudo apt clean</span></span><br><span class="line"><span class="string">pihole -up &amp;&amp; pihole -g</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span> &gt; update.sh</span><br><span class="line"></span><br><span class="line">chmod a+x update.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@reboot vncserver</span><br><span class="line"></span><br><span class="line"><span class="comment"># @reboot pmount sda2 3T</span></span><br><span class="line"><span class="comment"># @reboot pmount sda3 TM</span></span><br><span class="line"></span><br><span class="line">@reboot /home/pi/rclone.sh</span><br><span class="line">@reboot sleep 30 &amp;&amp; /home/pi/restore.sh</span><br><span class="line"></span><br><span class="line">*/30 * * * * /home/pi/backup.sh</span><br><span class="line">0 3 * * * /home/pi/update.sh</span><br><span class="line"></span><br><span class="line">0 22 * * * <span class="built_in">cd</span> ~/Bot;python3 autoPill.py</span><br><span class="line">0 9 * * * php ~/Bot/bilibiliRun.ph</span><br></pre></td></tr></table></figure><p><code>sudo crontab -e</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 0 4 * * * &#x2F;sbin&#x2F;shutdown -r</span><br><span class="line">@reboot sleep 90 &amp;&amp; sudo service plexmediaserver start</span><br></pre></td></tr></table></figure><h2 id="Jellyfin"><a href="#Jellyfin" class="headerlink" title="Jellyfin"></a><del>Jellyfin</del></h2><p><a href="https://jellyfin.org/">https://jellyfin.org/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install apt-transport-https</span><br><span class="line">wget -O - https://repo.jellyfin.org/jellyfin_team.gpg.key | sudo apt-key add -</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$( dpkg --print-architecture )</span>] https://repo.jellyfin.org/<span class="subst">$( awk -F&#x27;=&#x27; &#x27;/^ID=/&#123; print $NF &#125;&#x27; /etc/os-release )</span> <span class="subst">$( awk -F&#x27;=&#x27; &#x27;/^VERSION_CODENAME=/&#123; print $NF &#125;&#x27; /etc/os-release )</span> main&quot;</span> | sudo tee /etc/apt/sources.list.d/jellyfin.list</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install jellyfin</span><br><span class="line"></span><br><span class="line"><span class="comment"># service jellyfin status</span></span><br><span class="line"><span class="comment"># systemctl restart jellyfin</span></span><br><span class="line"><span class="comment"># sudo /etc/init.d/jellyfin stop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .local/share/jellyfin</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#x27;</span><span class="string">&#x27;#!/bin/zsh</span></span><br><span class="line"><span class="string">JELLYFINTMP=&quot;/tmp/jellyfin&quot;</span></span><br><span class="line"><span class="string">USRBIN=&quot;/usr/bin&quot;</span></span><br><span class="line"><span class="string">mkdir -p $JELLYFINTMP/log $JELLYFINTMP/cache $JELLYFINTMP/transcodes \</span></span><br><span class="line"><span class="string">$JELLYFINTMP/data \</span></span><br><span class="line"><span class="string">$JELLYFINTMP/metadata \</span></span><br><span class="line"><span class="string">$JELLYFINTMP/config</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$USRBIN/jellyfin \</span></span><br><span class="line"><span class="string"> -C $JELLYFINTMP/cache \</span></span><br><span class="line"><span class="string"> -l $JELLYFINTMP/log \</span></span><br><span class="line"><span class="string"> -d $JELLYFINTMP/data \</span></span><br><span class="line"><span class="string"> -c $JELLYFINTMP/config \</span></span><br><span class="line"><span class="string"> --ffmpeg $USRBIN/ffmpeg &amp;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span> &gt; jellyfin.sh</span><br><span class="line"></span><br><span class="line">chmod a+x jellyfin.sh</span><br><span class="line">nohup ./jellyfin.sh &lt;/dev/null &amp;</span><br><span class="line"></span><br><span class="line">sudo systemctl <span class="built_in">disable</span> jellyfin</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://jellyfin.org/docs/general/administration/hardware-acceleration.html</span></span><br><span class="line">sudo usermod -aG video jellyfin</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Pi-Hole.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Raspberry" scheme="https://leihao0.github.io/tags/Raspberry/"/>
    
  </entry>
  
  <entry>
    <title>iOS Token-Based APNs</title>
    <link href="https://leihao0.github.io/iOS-Token-Based-APNs/"/>
    <id>https://leihao0.github.io/iOS-Token-Based-APNs/</id>
    <published>2020-05-29T09:23:18.000Z</published>
    <updated>2020-09-09T10:58:39.961Z</updated>
    
    <content type="html"><![CDATA[<p>Apple provides a new way (Authentication Tokens) to do APNs.</p><p>Comparing to the previous way (Provider Certificates) which cert <code>*.p12</code> will expire each year</p><p>The Token-Based <code>*.p8</code> will <strong>never expired</strong></p><a id="more"></a><ul><li><a href="https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/establishing_a_token-based_connection_to_apns">Establishing a Token-Based Connection to APNs</a></li><li><a href="https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CommunicatingwithAPNs.html">Communicating with APNs</a></li></ul><h2 id="For-Client"><a href="#For-Client" class="headerlink" title="For Client"></a>For Client</h2><p>The only different things for the client-side are</p><ol><li>Creating an authentication token signing key on <a href="https://developer.apple.com/">https://developer.apple.com/</a></li><li>Download the <code>*.p8</code> and send it to backend engineer</li></ol><h2 id="For-Backend"><a href="#For-Backend" class="headerlink" title="For Backend"></a>For Backend</h2><p>Many frameworks have support <code>*.p8</code>.</p><p>For example:</p><p><a href="https://firebase.google.com/docs/cloud-messaging/ios/certs">Firebase</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Apple provides a new way (Authentication Tokens) to do APNs.&lt;/p&gt;
&lt;p&gt;Comparing to the previous way (Provider Certificates) which cert &lt;code&gt;*.p12&lt;/code&gt; will expire each year&lt;/p&gt;
&lt;p&gt;The Token-Based &lt;code&gt;*.p8&lt;/code&gt; will &lt;strong&gt;never expired&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="iOS" scheme="https://leihao0.github.io/tags/iOS/"/>
    
      <category term="APNs" scheme="https://leihao0.github.io/tags/APNs/"/>
    
  </entry>
  
  <entry>
    <title>Threading Programming Guide</title>
    <link href="https://leihao0.github.io/Threading-Programming-Guide/"/>
    <id>https://leihao0.github.io/Threading-Programming-Guide/</id>
    <published>2020-05-27T06:19:00.000Z</published>
    <updated>2020-09-03T00:53:27.996Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i-CH1-SW1">Threading Programming Guide</a></p><p>最近总是被问到 Runloop<br>那么什么是 运行循环 呢<br>直接看  2014-07-15 就停止修订的文档吧 👆 ～～～</p><p>官方解说 异常清晰呢</p><a id="more"></a><p>👇 是 Google AI 翻译 (jifan)</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>线程是使在单个应用程序中同时执行多个代码路径成为可能的几种技术之一。尽管诸如操作对象和 Grand Central Dispatch（GCD）之类的较新技术为实现并发提供了更现代，更高效的基础架构，但是 OS X 和 iOS 还提供了用于创建和管理线程的接口。</p><p>本文档介绍了 OS X 中可用的线程包，并向您展示了如何使用它们。本文档还描述了为支持应用程序内的线程化和多线程代码同步而提供的相关技术。</p><p><strong>重要说明：</strong> 如果要开发新的应用程序，建议您研究用于实现并发性的替代 OS X 技术。如果您还不熟悉实现线程应用程序所需的设计技术，则尤其如此。这些替代技术可简化实现并发执行路径的工作量，并提供比传统线程更好的性能。有关这些技术的信息，请参见《_<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091">并发编程指南》</a>_。</p><h4 id="本文件的组织"><a href="#本文件的组织" class="headerlink" title="本文件的组织"></a>本文件的组织</h4><p>本文档包含以下章节和附录：</p><ul><li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/AboutThreads/AboutThreads.html#//apple_ref/doc/uid/10000057i-CH6-SW2">关于线程编程</a>介绍了线程的概念及其在应用程序设计中的作用。</li><li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html#//apple_ref/doc/uid/10000057i-CH15-SW2">线程管理</a>提供有关 OS X 中的线程技术以及如何使用它们的信息。</li><li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW1">运行循环</a>提供有关如何在辅助线程中管理事件处理循环的信息。</li><li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW1">同步</a>描述了同步问题以及用于防止多个线程破坏数据或使程序崩溃的工具。</li><li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafetySummary/ThreadSafetySummary.html#//apple_ref/doc/uid/10000057i-CH12-SW1">线程安全摘要</a>提供了 OS X 和 iOS 及其一些关键框架的固有线程安全的高级摘要。</li></ul><h4 id="也可以看看"><a href="#也可以看看" class="headerlink" title="也可以看看"></a>也可以看看</h4><p>有关线程替代方法的信息，请参见《_<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091">并发编程指南》</a>_。</p><p>本文档仅简要介绍 POSIX 线程 API 的用法。有关可用的 POSIX 线程例程的更多信息，请参见<code>pthread</code>手册页。有关 POSIX 线程及其用法的更深入说明，请参阅 David R. Butenhof 撰写的“ <em>使用 POSIX 线程编程</em> ”。</p><h2 id="线程管理"><a href="#线程管理" class="headerlink" title="线程管理"></a>线程管理</h2><p>OS X 或 iOS 中的每个进程（应用程序）都由一个或多个线程组成，每个线程代表通过应用程序代码执行的单个路径。每个应用程序都从一个线程开始，该线程运行该应用程序的<code>main</code>功能。应用程序可以产生其他线程，每个线程都执行特定功能的代码。</p><p>当应用程序产生新线程时，该线程将成为应用程序进程空间内的一个独立实体。每个线程都有其自己的执行堆栈，并由内核分别计划在运行时运行。线程可以与其他线程和其他进程通信，执行 I / O 操作以及执行您可能需要执行的其他任何操作。但是，由于它们位于同一进程空间内，因此单个应用程序中的所有线程共享同一虚拟内存空间，并且与进程本身具有相同的访问权限。</p><p>本章概述了 OS X 和 iOS 中可用的线程技术以及如何在应用程序中使用这些技术的示例。</p><p><strong>注意：</strong> 有关 Mac OS 线程体系结构的历史记录以及有关线程的其他背景信息，请参阅技术说明 TN2028，“线程体系结构”。</p><h4 id="线程成本"><a href="#线程成本" class="headerlink" title="线程成本"></a>线程成本</h4><p>就内存使用和性能而言，线程化会给您的程序（和系统）带来实际成本。每个线程都需要在内核内存空间和程序的内存空间中分配内存。使用有线内存将管理线程和协调其调度所需的核心结构存储在内核中。线程的堆栈空间和每个线程的数据存储在程序的内存空间中。这些结构中的大多数是在您首次创建线程时创建和初始化的，由于与内核之间的交互作用，该过程可能相对昂贵。</p><p>表 2-1 量化了与在应用程序中创建新的用户级线程相关的近似成本。其中一些成本是可配置的，例如分配给辅助线程的堆栈空间量。创建线程的时间成本是一个近似值，应仅用于彼此之间的相对比较。线程创建时间会因处理器负载，计算机速度以及可用系统和程序内存的数量而有很大不同。</p><table><thead><tr><th align="left">项目</th><th align="left">大概费用</th><th align="left">笔记</th></tr></thead><tbody><tr><td align="left">内核数据结构</td><td align="left">大约 1 KB</td><td align="left">该内存用于存储线程数据结构和属性，其中许多数据结构和属性分配为有线内存，因此无法分页到磁盘。</td></tr><tr><td align="left">堆叠空间</td><td align="left">512 KB（辅助线程）8 MB（OS X 主线程）1 MB（iOS 主线程）</td><td align="left">辅助线程允许的最小堆栈大小为 16 KB，并且堆栈大小必须为 4 KB 的倍数。在线程创建时会在进程空间中预留此内存的空间，但是直到需要它们时，才会创建与该内存关联的实际页面。</td></tr><tr><td align="left">创作时间</td><td align="left">大约 90 微秒</td><td align="left">该值反映了从创建线程的初始调用到线程的入口点例程开始执行之间的时间。这些数字是通过分析在基于 Intel 的 iMac（具有 2 GHz Core Duo 处理器和 1 GB 运行 OS X v10.5 的 RAM）上的线程创建过程中生成的平均值和中值确定的。</td></tr></tbody></table><p><strong>注意：</strong> 由于具有底层内核支持，因此操作对象通常可以更快地创建线程。他们不是每次都从头开始创建线程，而是使用内核中已经存在的线程池来节省分配时间。有关使用操作对象的更多信息，请参见《_<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091">并发编程指南》</a>_。</p><p>编写线程代码时要考虑的另一个成本是生产成本。设计线程化的应用程序有时可能需要对组织应用程序的数据结构的方式进行根本性的更改。为避免使用同步，可能需要进行这些更改，否则同步本身可能对设计不良的应用程序造成巨大的性能损失。设计这些数据结构以及调试线程代码中的问题可能会增加开发线程应用程序所需的时间。但是，如果线程花费太多时间等待锁或不执行任何操作，则避免这些开销会在运行时产生更大的问题。</p><h4 id="创建一个线程"><a href="#创建一个线程" class="headerlink" title="创建一个线程"></a>创建一个线程</h4><p>创建低级线程相对简单。在所有情况下，您都必须具有充当线程的主要入口点的函数或方法，并且必须使用可用的线程例程之一来启动线程。以下各节显示了更常用的线程技术的基本创建过程。使用这些技术创建的线程将继承一组默认属性，这些属性由您使用的技术确定。有关如何配置线程的信息，请参阅“ <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html#//apple_ref/doc/uid/10000057i-CH15-SW8">配置线程属性”</a>。</p><h6 id="使用-NSThread"><a href="#使用-NSThread" class="headerlink" title="使用 NSThread"></a>使用 NSThread</h6><p>有两种使用<code>NSThread</code>该类创建线程的方法：</p><ul><li>使用<code>detachNewThreadSelector:toTarget:withObject:</code>class 方法产生新线程。</li><li>创建一个新<code>NSThread</code>对象并调用其<code>start</code>方法。（仅在 iOS 和 OS X v10.5 及更高版本中受支持。）</li></ul><p>两种技术都会在您的应用程序中创建一个分离线程。分离的线程意味着线程退出时系统会自动回收线程的资源。这也意味着您的代码以后不必与线程显式连接。</p><p>由于该<code>detachNewThreadSelector:toTarget:withObject:</code>方法在 OS X 的所有版本中均受支持，因此经常在使用线程的现有 Cocoa 应用程序中找到。要分离新线程，只需提供要用作线程入口点的方法名称（指定为选择器），定义该方法的对象以及要在启动时传递给线程的任何数据。 。以下示例显示了此方法的基本调用，该调用使用当前对象的自定义方法生成一个线程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[NSThread detachNewThreadSelector：@selector（myThreadMainMethod :) toTarget：self withObject：nil];</span><br></pre></td></tr></table></figure><p>在 OS X v10.5 之前，您<code>NSThread</code>主要使用该类生成线程。尽管您可以获取<code>NSThread</code>对象并访问某些线程属性，但是只能在线程运行之后从线程本身进行操作。在 OS X v10.5 中，添加了对创建<code>NSThread</code>对象的支持，而无需立即产生相应的新线程。（此支持在 iOS 中也可用。）此支持使得可以在启动线程之前获取和设置各种线程属性。这也使得以后可以使用该线程对象来引用正在运行的线程。</p><p><code>NSThread</code>在 OS X v10.5 及更高版本中初始化对象的简单方法是使用该<code>initWithTarget:selector:object:</code>方法。此方法<code>detachNewThreadSelector:toTarget:withObject:</code>使用与该方法完全相同的信息，并使用它来初始化新<code>NSThread</code>实例。但是，它不会启动线程。要启动线程，请<code>start</code>显式调用线程对象的方法，如以下示例所示：</p><table><thead><tr><th><code>NSThread * myThread = [[NSThread分配] initWithTarget：self</code></th></tr></thead><tbody><tr><td><code>选择器：@选择器（myThreadMainMethod :)</code></td></tr><tr><td><code>对象：无]；</code></td></tr><tr><td><code>[myThread开始]; //实际创建线程</code></td></tr></tbody></table><p><strong>注意：</strong> 使用该<code>initWithTarget:selector:object:</code>方法的另一种方法是继承<code>NSThread</code>并覆盖其<code>main</code>方法。您将使用此方法的重写版本来实现线程的主入口点。有关更多信息，请参见《*<a href="https://developer.apple.com/documentation/foundation/nsthread">NSThread 类参考》中</a>*的子类注释。</p><p>如果您有一个<code>NSThread</code>对象的线程当前正在运行，则可以向该线程发送消息的<code>performSelector:onThread:withObject:waitUntilDone:</code>一种方法是使用应用程序中几乎所有对象的方法。OS X v10.5 中引入了对在线程（主线程除外）上执行选择器的支持，这是在线程之间进行通信的便捷方式。（此支持在 iOS 中也可用。）使用此技术发送的消息由另一个线程直接执行，作为其正常运行循环处理的一部分。（当然，这确实意味着目标线程必须在其运行循环中运行；请参阅<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW1">“运行循环”</a>。）以这种方式进行通信时，您可能仍需要某种形式的同步，但是比在线程之间设置通信端口更简单。线程。</p><p><strong>注意：</strong> 尽管对于线程间的偶尔通信很有用，但是您不应将 <code>performSelector:onThread:withObject:waitUntilDone:</code>方法用于时间紧迫或线程间的频繁通信。</p><p>有关其他线程通信选项的列表，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html#//apple_ref/doc/uid/10000057i-CH15-SW3">设置</a>线程<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html#//apple_ref/doc/uid/10000057i-CH15-SW3">的分离状态</a>。</p><h6 id="使用-POSIX-线程"><a href="#使用-POSIX-线程" class="headerlink" title="使用 POSIX 线程"></a>使用 POSIX 线程</h6><p>OS X 和 iOS 为使用 POSIX 线程 API 创建线程提供了基于 C 的支持。该技术实际上可以在任何类型的应用程序（包括 Cocoa 和 Cocoa Touch 应用程序）中使用，如果您要为多个平台编写软件，则可能会更加方便。适当地调用了用于创建线程的 POSIX 例程<code>pthread_create</code>。</p><p>清单 2-1 显示了两个使用 POSIX 调用创建线程的自定义函数。该<code>LaunchThread</code>函数创建一个新线程，其主例程在该<code>PosixThreadMainRoutine</code>函数中实现。由于 POSIX 默认将线程创建为可连接线程，因此本示例更改了线程的属性以创建分离的线程。将线程标记为已分离使系统有机会在退出时立即回收该线程的资源。</p><p><strong>清单 2-1</strong> 在 C 中创建线程</p><table><thead><tr><th><code>#include</code></th></tr></thead><tbody><tr><td><code>#include</code></td></tr><tr><td>``</td></tr><tr><td><code>void * PosixThreadMainRoutine（void *数据）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//在这里做一些工作。</code></td></tr><tr><td>``</td></tr><tr><td><code>返回NULL;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>无效LaunchThread（）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//使用POSIX例程创建线程。</code></td></tr><tr><td><code>pthread_attr_t attr;</code></td></tr><tr><td><code>pthread_t posixThreadID;</code></td></tr><tr><td><code>int returnVal;</code></td></tr><tr><td>``</td></tr><tr><td><code>returnVal = pthread_attr_init（＆attr）;</code></td></tr><tr><td><code>assert（！returnVal）;</code></td></tr><tr><td><code>returnVal = pthread_attr_setdetachstate（＆attr，PTHREAD_CREATE_DETACHED）;</code></td></tr><tr><td><code>assert（！returnVal）;</code></td></tr><tr><td>``</td></tr><tr><td><code>int threadError = pthread_create（＆posixThreadID，＆attr，＆PosixThreadMainRoutine，NULL）;</code></td></tr><tr><td>``</td></tr><tr><td><code>returnVal = pthread_attr_destroy（＆attr）;</code></td></tr><tr><td><code>assert（！returnVal）;</code></td></tr><tr><td><code>如果（threadError！= 0）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//报告错误。</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>如果将上述清单中的代码添加到一个源文件中并调用该<code>LaunchThread</code>函数，它将在您的应用程序中创建一个新的分离线程。当然，使用此代码创建的新线程将无用。线程将启动，几乎立即退出。为了使事情变得更有趣，您需要向该<code>PosixThreadMainRoutine</code>函数添加代码以完成一些实际工作。为了确保线程知道要执行的工作，可以在创建时将其传递给一些数据的指针。您将此指针作为<code>pthread_create</code>函数的最后一个参数传递。</p><p>要将信息从新创建的线程传递回应用程序的主线程，您需要在目标线程之间建立通信路径。对于基于 C 的应用程序，有多种方法可以在线程之间进行通信，包括使用端口，条件或共享内存。对于寿命长的线程，几乎应该始终设置某种线程间通信机制，以为应用程序的主线程提供一种检查线程状态或在应用程序退出时将其干净关闭的方法。</p><p>有关 POSIX 线程功能的更多信息，请参见<code>pthread</code>手册页。</p><h6 id="使用-NSObject-生成线程"><a href="#使用-NSObject-生成线程" class="headerlink" title="使用 NSObject 生成线程"></a>使用 NSObject 生成线程</h6><p>在 iOS 和 OS X v10.5 及更高版本中，所有对象都可以生成新线程并使用它执行其方法之一。该<code>performSelectorInBackground:withObject:</code>方法创建一个新的分离线程，并使用指定的方法作为新线程的入口点。例如，如果您有某个对象（由表示<code>myObj</code>），并且该对象具有一个<code>doSomething</code>要在后台线程中运行的方法，则可以使用以下代码来执行该操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[myObj performSelectorInBackground：@selector（doSomething）withObject：nil];</span><br></pre></td></tr></table></figure><p>调用此方法的效果是一样的，如果你调用<code>detachNewThreadSelector:toTarget:withObject:</code>的方法<code>NSThread</code>与当前对象，选择和参数对象作为参数。立即使用默认配置生成新线程并开始运行。在选择器内部，必须像配置任何线程一样配置线程。例如，如果您打算使用自动释放池（如果您不使用垃圾回收），则需要设置它，并配置线程的运行循环。有关如何配置新线程的信息，请参阅“ <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html#//apple_ref/doc/uid/10000057i-CH15-SW8">配置线程属性”</a>。</p><h6 id="在-Cocoa-应用程序中使用-POSIX-线程"><a href="#在-Cocoa-应用程序中使用-POSIX-线程" class="headerlink" title="在 Cocoa 应用程序中使用 POSIX 线程"></a>在 Cocoa 应用程序中使用 POSIX 线程</h6><p>尽管<code>NSThread</code>该类是在 Cocoa 应用程序中创建线程的主要接口，但是您可以自由使用 POSIX 线程，如果这样做对您更方便。例如，如果您已经有使用 POSIX 线程的代码并且不想重写它，则可以使用。如果确实打算在 Cocoa 应用程序中使用 POSIX 线程，则仍应了解 Cocoa 和线程之间的交互作用，并遵守以下各节中的准则。</p><p>######## 保护可可框架</p><p>对于多线程应用程序，Cocoa 框架使用锁和其他形式的内部同步来确保它们的行为正确。但是，为了防止这些锁在单线程情况下降低性能，在应用程序使用<code>NSThread</code>类产生其第一个新线程之前，Cocoa 不会创建它们。如果仅使用 POSIX 线程例程生成线程，则 Cocoa 不会收到需要知道您的应用程序现在是多线程的通知。发生这种情况时，涉及 Cocoa 框架的操作可能会使您的应用程序不稳定或崩溃。</p><p>为了让 Cocoa 知道您打算使用多个线程，您所要做的就是使用<code>NSThread</code>类产生一个线程，然后立即退出该线程。您的线程入口点无需执行任何操作。仅使用生成一个线程的行为<code>NSThread</code>就足以确保将 Cocoa 框架所需的锁放置到位。</p><p>如果不确定 Cocoa 是否认为您的应用程序是多线程的，则可以使用的<code>isMultiThreaded</code>方法<code>NSThread</code>进行检查。</p><p>######## 混合 POSIX 和可可锁</p><p>在同一应用程序中混合使用 POSIX 和 Cocoa 锁是安全的。可可锁和条件对象实际上只是 POSIX 互斥对象和条件的包装。但是，对于给定的锁，必须始终使用相同的接口来创建和操作该锁。换句话说，您不能使用 Cocoa <code>NSLock</code>对象来操纵使用该<code>pthread_mutex_init</code>函数创建的互斥对象，反之亦然。</p><h4 id="配置线程属性"><a href="#配置线程属性" class="headerlink" title="配置线程属性"></a>配置线程属性</h4><p>在创建线程之后，有时甚至在创建线程之前，您可能需要配置线程环境的不同部分。以下各节描述了可以进行的某些更改以及何时进行更改。</p><h6 id="配置线程的堆栈大小"><a href="#配置线程的堆栈大小" class="headerlink" title="配置线程的堆栈大小"></a>配置线程的堆栈大小</h6><p>对于您创建的每个新线程，系统都会在进程空间中分配特定数量的内存，以充当该线程的堆栈。堆栈管理堆栈帧，也是声明线程的任何局部变量的地方。为线程分配的内存量在“ <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html#//apple_ref/doc/uid/10000057i-CH15-SW7">线程成本”中</a>列出。</p><p>如果要更改给定线程的堆栈大小，则必须在创建线程之前进行更改。尽管<code>NSThread</code>只有 iOS 和 OS X v10.5 及更高版本才提供使用设置堆栈大小的功能，但是所有线程技术都提供了一些设置堆栈大小的方法。表 2-2 列出了每种技术的不同选项。</p><table><thead><tr><th align="left">技术</th><th align="left">选项</th></tr></thead><tbody><tr><td align="left">可可</td><td align="left">在 iOS 和 OS X v10.5 及更高版本中，分配和初始化<code>NSThread</code>对象（请勿使用<code>detachNewThreadSelector:toTarget:withObject:</code>方法）。在调用<code>start</code>线程对象的方法之前，请使用该<code>setStackSize:</code>方法指定新的堆栈大小。</td></tr><tr><td align="left">POSIX</td><td align="left">创建一个新<code>pthread_attr_t</code>结构，并使用该<code>pthread_attr_setstacksize</code>函数更改默认堆栈大小。<code>pthread_create</code>创建线程时，将属性传递给函数。</td></tr><tr><td align="left">多处理服务</td><td align="left"><code>MPCreateTask</code>创建线程时，将适当的堆栈大小值传递给函数。</td></tr></tbody></table><h6 id="配置线程本地存储"><a href="#配置线程本地存储" class="headerlink" title="配置线程本地存储"></a>配置线程本地存储</h6><p>每个线程维护一个键-值对的字典，可以从线程中的任何位置进行访问。您可以使用此词典存储要在整个线程执行过程中保留的信息。例如，您可以使用它存储要在线程运行循环的多次迭代中保留的状态信息。</p><p>Cocoa 和 POSIX 以不同的方式存储线程字典，因此您不能混合和匹配对这两种技术的调用。但是，只要您在线程代码中坚持使用一种技术，最终结果应该是相似的。在 Cocoa 中，可以使用对象的<code>threadDictionary</code>方法<code>NSThread</code>来检索<code>NSMutableDictionary</code>对象，可以在该对象中添加线程所需的任何键。在 POSIX 中，您可以使用<code>pthread_setspecific</code>和<code>pthread_getspecific</code>函数来设置和获取线程的键和值。</p><h6 id="设置线程的分离状态"><a href="#设置线程的分离状态" class="headerlink" title="设置线程的分离状态"></a>设置线程的分离状态</h6><p>默认情况下，大多数高级线程技术都会创建分离的线程。在大多数情况下，最好使用分离的线程，因为它们允许系统在线程完成后立即释放线程的数据结构。分离的线程也不需要与程序进行显式交互。从线程中检索结果的方法由您自行决定。相比之下，系统不会为可连接线程回收资源，直到另一个线程与该线程显式连接为止，该过程可能会阻塞执行该连接的线程。</p><p>您可以将可连接线程视为类似于子线程。尽管它们仍然作为独立线程运行，但是在系统可以回收其资源之前，可连接线程必须由另一个线程连接。可连接线程还提供了一种显式的方法，可将数据从退出线程传递到另一个线程。在连接退出之前，可连接线程可以将数据指针或其他返回值传递给该<code>pthread_exit</code>函数。然后另一个线程可以通过调用该<code>pthread_join</code>函数来声明此数据。</p><p><strong>重要：</strong> 在应用程序退出时，分离的线程可以立即终止，但可连接的线程不能终止。在允许进程退出之前，必须先连接每个可连接线程。因此，在线程正在执行不应中断的关键工作（例如将数据保存到磁盘）的情况下，可连接线程可能更可取。</p><p>如果确实要创建可连接线程，则唯一的方法是使用 POSIX 线程。POSIX 默认将线程创建为可连接线程。要将线程标记为分离的或可联接的，请<code>pthread_attr_setdetachstate</code>在创建线程之前使用函数修改线程属性。线程开始后，您可以通过调用<code>pthread_detach</code>函数将可连接线程更改为分离线程。有关这些 POSIX 线程功能的更多信息，请参见<code>pthread</code>手册页。有关如何加入线程的信息，请参见<code>pthread_join</code>手册页。</p><h6 id="设置线程优先级"><a href="#设置线程优先级" class="headerlink" title="设置线程优先级"></a>设置线程优先级</h6><p>您创建的任何新线程都具有与之关联的默认优先级。内核的调度算法在确定要运行的线程时会考虑线程优先级，与优先级较低的线程相比，优先级较高的线程更有可能运行。较高的优先级并不能保证您的线程有特定的执行时间，只是与较低优先级的线程相比，调度程序更可能选择该时间。</p><p><strong>重要说明：</strong> 通常最好将线程的优先级保留为默认值。增加某些线程的优先级也会增加低优先级线程之间出现饥饿的可能性。如果您的应用程序包含必须彼此交互的高优先级和低优先级线程，则低优先级线程的饥饿可能会阻塞其他线程并造成性能瓶颈。</p><p>如果您确实想修改线程优先级，那么 Cocoa 和 POSIX 都提供了一种方法。对于 Cocoa 线程，可以使用的<code>setThreadPriority:</code>class 方法<code>NSThread</code>来设置当前正在运行的线程的优先级。对于 POSIX 线程，请使用<code>pthread_setschedparam</code>函数。有关更多信息，请参见*<a href="https://developer.apple.com/documentation/foundation/nsthread">NSThread 类参考</a>*或<code>pthread_setschedparam</code>手册页。</p><h4 id="编写线程输入例程"><a href="#编写线程输入例程" class="headerlink" title="编写线程输入例程"></a>编写线程输入例程</h4><p>在大多数情况下，OS X 中线程入口点例程的结构与其他平台上的相同。您可以初始化数据结构，进行一些工作或有选择地设置运行循环，并在线程代码完成后进行清理。根据您的设计，编写输入例程时可能需要执行一些其他步骤。</p><h6 id="创建一个自动释放池"><a href="#创建一个自动释放池" class="headerlink" title="创建一个自动释放池"></a>创建一个自动释放池</h6><p>在 Objective-C 框架中链接的应用程序通常必须在其每个线程中至少创建一个自动释放池。如果应用程序使用托管模型（该应用程序负责对象的保留和释放），则自动释放池将捕获从该线程自动释放的所有对象。</p><p>如果应用程序使用垃圾回收而不是托管内存模型，则不一定必须创建自动释放池。垃圾收集应用程序中自动释放池的存在无害，并且在大多数情况下都将被忽略。在代码模块必须同时支持垃圾回收和托管内存模型的情况下，允许使用此方法。在这种情况下，必须存在自动释放池以支持托管内存模型代码，并且如果在启用垃圾回收的情况下运行应用程序，则将自动忽略该释放池。</p><p>如果您的应用程序使用托管内存模型，则创建自动释放池应该是您在线程输入例程中要做的第一件事。同样，销毁此自动释放池应该是线程中的最后一件事。该池确保捕获自动释放的对象，尽管它直到线程本身退出才释放它们。清单 2-2 显示了使用自动释放池的基本线程输入例程的结构。</p><p><strong>清单 2-2</strong> 定义线程入口点例程</p><table><thead><tr><th><code>-（无效）myThreadMainRoutine</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init]; //顶级池</code></td></tr><tr><td>``</td></tr><tr><td><code>//在这里做线程工作。</code></td></tr><tr><td>``</td></tr><tr><td><code>[池释放]; //释放池中的对象。</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>由于顶级自动释放池在线程退出之前不会释放其对象，因此长寿命的线程应创建其他自动释放池以更频繁地释放对象。例如，使用运行循环的线程可能每次通过该运行循环都会创建并释放一个自动释放池。更频繁地释放对象可以防止应用程序的内存占用量过大，从而可能导致性能问题。但是，与任何与性能相关的行为一样，您应该测量代码的实际性能，并适当调整自动释放池的使用。</p><p>有关内存管理和自动释放池的更多信息，请参见《_<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html#//apple_ref/doc/uid/10000011i">高级内存管理编程指南》</a>_。</p><h6 id="设置异常处理程序"><a href="#设置异常处理程序" class="headerlink" title="设置异常处理程序"></a>设置异常处理程序</h6><p>如果您的应用程序捕获并处理了异常，则应准备好线程代码以捕获可能发生的任何异常。尽管最好在可能发生异常的地方处理异常，但是未能捕获线程中引发的异常会导致应用程序退出。在线程输入例程中安装最终的 try / catch 可以捕获任何未知的异常并提供适当的响应。</p><p>在 Xcode 中构建项目时，可以使用 C ++或 Objective-C 异常处理样式。有关在 Objective-C 中设置如何引发和捕获异常的信息，请参见*<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Exceptions/Exceptions.html#//apple_ref/doc/uid/10000012i">异常编程主题</a>*。</p><h6 id="设置运行循环"><a href="#设置运行循环" class="headerlink" title="设置运行循环"></a>设置运行循环</h6><p>在编写要在单独的线程上运行的代码时，有两个选择。第一种选择是将线程的代码编写为一个很长的任务而几乎不中断执行，也不会中断，并在完成时退出线程。第二种选择是将您的线程置于循环中，并使其在到达请求时动态处理请求。第一个选项不需要为您的代码进行特殊设置。您只需开始做您想做的工作。但是，第二个选项涉及设置线程的运行循环。</p><p>OS X 和 iOS 为在每个线程中实现运行循环提供了内置支持。应用程序框架会自动启动应用程序主线程的运行循环。如果创建任何辅助线程，则必须配置运行循环并手动启动它。</p><p>有关使用和配置运行循环的信息，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW1">“运行循环”</a>。</p><h4 id="终止线程"><a href="#终止线程" class="headerlink" title="终止线程"></a>终止线程</h4><p>建议的退出线程的方法是让其正常退出其入口点例程。尽管 Cocoa，POSIX 和 Multiprocessing Services 提供了直接杀死线程的例程，但强烈建议不要使用此类例程。杀死线程可防止该线程在其自身清除后清理。线程分配的内存可能会泄漏，线程当前正在使用的任何其他资源可能无法正确清理，从而在以后产生潜在的问题。</p><p>如果您预计需要在操作过程中终止线程，则应从一开始就设计线程以响应取消或退出消息。对于长时间运行的操作，这可能意味着要定期停止工作并检查是否收到此消息。如果确实有消息要求线程退出，则该线程将有机会执行所需的清理并正常退出；否则，它可以简单地返回工作并处理下一个数据块。</p><p>响应取消消息的一种方法是使用运行循环输入源接收此类消息。清单 2-3 显示了该代码在线程的主入口例程中的外观结构。（该示例仅显示了主循环部分，不包括设置自动释放池或配置要执行的实际工作的步骤。）该示例在运行循环上安装了一个自定义输入源，该输入源大概可以从另一个您的线程；有关设置输入源的信息，请参阅<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW7">配置运行循环源</a>。在完成全部工作量的一部分后，线程会短暂运行运行循环，以查看消息是否到达输入源。如果不是，则运行循环立即退出，并且循环继续进行下一个工作块。因为处理程序无法直接访问<code>exitNow</code>局部变量，所以退出条件通过线程字典中的键值对传达。</p><p><strong>清单 2-3</strong> 在长时间工作期间检查退出条件</p><table><thead><tr><th><code>-（无效）threadMainRoutine</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>BOOL moreWorkToDo = YES;</code></td></tr><tr><td><code>BOOL exitNow = NO;</code></td></tr><tr><td><code>NSRunLoop * runLoop = [NSRunLoop currentRunLoop];</code></td></tr><tr><td>``</td></tr><tr><td><code>//将exitNow BOOL添加到线程字典中。</code></td></tr><tr><td><code>NSMutableDictionary * threadDict = [[[NSThread currentThread] threadDictionary];</code></td></tr><tr><td><code>[threadDict setValue：[NSNumber numberWithBool：exitNow] forKey：@“ ThreadShouldExitNow”];</code></td></tr><tr><td>``</td></tr><tr><td><code>//安装输入源。</code></td></tr><tr><td><code>[self myInstallCustomInputSource];</code></td></tr><tr><td>``</td></tr><tr><td><code>同时（moreWorkToDo &amp;&amp;！exitNow）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//在这里做一大块工作。</code></td></tr><tr><td><code>//完成后更改moreWorkToDo布尔值。</code></td></tr><tr><td>``</td></tr><tr><td><code>//运行运行循环，但如果输入源不等待触发，则立即超时。</code></td></tr><tr><td><code>[runLoop runUntilDate：[NSDate date]];</code></td></tr><tr><td>``</td></tr><tr><td><code>//检查输入源处理程序是否更改了exitNow值。</code></td></tr><tr><td><code>exitNow = [[threadDict valueForKey：@“ ThreadShouldExitNow”] boolValue];</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><h2 id="运行循环"><a href="#运行循环" class="headerlink" title="运行循环"></a>运行循环</h2><p>运行循环是与线程关联的基础架构的一部分。一个<em>运行循环</em>是一个事件处理循环，你用它来安排工作，并协调接收传入的事件。运行循环的目的是在有工作要做时让线程忙，而在没有工作时让线程进入睡眠状态。</p><p>运行循环管理不是完全自动的。您仍然必须设计线程的代码以在适当的时间启动运行循环并响应传入的事件。Cocoa 和 Core Foundation 都提供了<em>运行循环对象，</em>以帮助您配置和管理线程的运行循环。您的应用程序不需要显式创建这些对象。每个线程（包括应用程序的主线程）都有一个关联的运行循环对象。但是，只有辅助线程需要显式地运行其运行循环。在应用程序启动过程中，应用程序框架会自动在主线程上设置并运行运行循环。</p><p>以下各节提供有关运行循环以及如何为应用程序配置循环的更多信息。有关运行循环对象的其他信息，请参见《*<a href="https://developer.apple.com/documentation/foundation/nsrunloop">NSRunLoop 类参考》</a>*和《_<a href="https://developer.apple.com/documentation/corefoundation/cfrunloop">CFRunLoop 参考》</a>_。</p><h4 id="运行循环的解剖"><a href="#运行循环的解剖" class="headerlink" title="运行循环的解剖"></a>运行循环的解剖</h4><p>运行循环非常像其名称听起来。这是您的线程进入的一个循环，用于响应传入事件而运行事件处理程序。您的代码提供了用于实现运行循环的实际循环部分的控制语句-换句话说，您的代码提供了驱动运行循环的<code>while</code>or <code>for</code>循环。在循环内，您可以使用运行循环对象来“运行”事件处理代码，以接收事件并调用已安装的处理程序。</p><p>运行循环从两种不同类型的源接收事件。<em>输入源</em>传递异步事件，通常是来自另一个线程或其他应用程序的消息。<em>计时器源</em>传递同步事件，这些事件在计划的时间或重复的间隔发生。两种类型的源都使用特定于应用程序的处理程序例程来处理事件到达时的事件。</p><p>图 3-1 显示了运行循环和各种来源的概念结构。输入源将异步事件传递给相应的处理程序，并导致<code>runUntilDate:</code>方法（在线程的关联<code>NSRunLoop</code>对象上调用）退出。计时器源将事件传递到其处理程序例程，但不会导致运行循环退出。</p><p><strong>图 3-1</strong> 运行循环的结构及其来源<img src="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Art/runloop.jpg" alt="运行循环的结构及其来源"></p><p>除了处理输入源之外，运行循环还生成有关运行循环行为的通知。注册的<em>运行循环观察者</em>可以接收这些通知，并使用它们在线程上进行其他处理。您可以使用 Core Foundation 在线程上安装运行循环观察器。</p><p>以下各节提供有关运行循环的组件及其运行方式的更多信息。它们还描述了事件处理期间在不同时间生成的通知。</p><h6 id="运行循环模式"><a href="#运行循环模式" class="headerlink" title="运行循环模式"></a>运行循环模式</h6><p>一个<em>运行的循环模式</em>是输入源和定时器的集合进行监测和运行循环观察员集合通知。每次运行运行循环时，都可以（显式或隐式）指定运行的特定“模式”。在运行循环的整个过程中，仅监视与该模式关联的源，并允许其传递事件。（类似地，仅将与该模式关联的观察者通知运行循环的进度。）与其他模式关联的源将保留任何新事件，直到随后以适当的模式通过循环。</p><p>在代码中，您可以通过名称识别模式。Cocoa 和 Core Foundation 都定义了默认模式和几种常用模式，以及用于在代码中指定这些模式的字符串。您可以通过简单地为模式名称指定自定义字符串来定义自定义模式。尽管您分配给自定义模式的名称是任意的，但是这些模式的内容不是任意的。您必须确保将一个或多个输入源，计时器或运行循环观察器添加到您创建的任何模式中，以使其有用。</p><p>您可以使用模式从运行循环的特定遍历中过滤掉有害来源的事件。大多数情况下，您将需要在系统定义的“默认”模式下运行运行循环。但是，模式面板可以在“模式”模式下运行。在这种模式下，只有与模式面板相关的源才将事件传递给线程。对于辅助线程，您可以使用自定义模式来防止低优先级源在时间紧迫的操作期间传递事件。</p><p><strong>注意：</strong> 模式是根据事件的来源而不是事件的类型来区分的。例如，您不会使用仅匹配鼠标按下事件或仅匹配键盘事件的模式。您可以使用模式来侦听另一组端口，暂时暂停计时器，或者以其他方式更改源并运行当前正在监视的循环观察器。</p><p>表 3-1 列出了 Cocoa 和 Core Foundation 定义的标准模式，以及何时使用该模式的说明。名称列列出了用于在代码中指定模式的实际常量。</p><table><thead><tr><th align="left">模式</th><th align="left">名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">默认</td><td align="left"><code>NSDefaultRunLoopMode</code> （可可）<code>kCFRunLoopDefaultMode</code> （核心基金会）</td><td align="left">默认模式是用于大多数操作的模式。大多数时候，您应该使用此模式来启动运行循环并配置输入源。</td></tr><tr><td align="left">连接</td><td align="left"><code>NSConnectionReplyMode</code> （可可）</td><td align="left">可可将此模式与<code>NSConnection</code>对象结合使用以监视答复。您很少需要自己使用此模式。</td></tr><tr><td align="left">模态</td><td align="left"><code>NSModalPanelRunLoopMode</code> （可可）</td><td align="left">可可使用此模式来识别用于模式面板的事件。</td></tr><tr><td align="left">事件追踪</td><td align="left"><code>NSEventTrackingRunLoopMode</code> （可可）</td><td align="left">可可使用此模式来限制鼠标拖动循环和其他类型的用户界面跟踪循环期间的传入事件。</td></tr><tr><td align="left">普通模式</td><td align="left"><code>NSRunLoopCommonModes</code> （可可）<code>kCFRunLoopCommonModes</code> （核心基金会）</td><td align="left">这是一组可配置的常用模式。将输入源与此模式相关联还将其与组中的每个模式相关联。对于 Cocoa 应用程序，此集合默认包括默认，模式和事件跟踪模式。最初，Core Foundation 仅包括默认模式。您可以使用该<code>CFRunLoopAddCommonMode</code>功能将自定义模式添加到集合中。</td></tr></tbody></table><h6 id="输入源"><a href="#输入源" class="headerlink" title="输入源"></a>输入源</h6><p>输入源将事件异步传递到您的线程。事件的来源取决于输入来源的类型，通常是两个类别之一。基于端口的输入源监视您的应用程序的 Mach 端口。定制输入源监视事件的定制源。就您的运行循环而言，输入源是基于端口的还是定制的都无关紧要。系统通常实现两种类型的输入源，您可以按原样使用。两种信号源之间的唯一区别是信号的发送方式。基于端口的源由内核自动发出信号，而自定义源必须从另一个线程手动发出信号。</p><p>创建输入源时，可以将其分配给运行循环的一种或多种模式。模式会影响在任何给定时刻监视哪些输入源。大多数情况下，您会在默认模式下运行运行循环，但也可以指定自定义模式。如果输入源不在当前监视的模式下，则它生成的任何事件都将保留，直到运行循环以正确的模式运行。</p><p>以下各节描述了一些输入源。</p><p>######## 基于端口的源</p><p>Cocoa 和 Core Foundation 提供了内置支持，用于使用与端口相关的对象和功能创建基于端口的输入源。例如，在可可中，您根本不必直接创建输入源。您只需创建一个端口对象，然后使用的方法<code>NSPort</code>将该端口添加到运行循环中。端口对象为您处理所需输入源的创建和配置。</p><p>在 Core Foundation 中，您必须手动创建端口及其运行循环源。在这两种情况下，您使用的端口类型不透明（相关的功能<code>CFMachPortRef</code>，<code>CFMessagePortRef</code>或<code>CFSocketRef</code>）创建合适的对象。</p><p>有关如何设置和配置基于端口的自定义源的示例，请参阅“ <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-131281">配置基于端口的输入源”</a>。</p><p>######## 自定义输入源</p><p>要创建自定义输入源，必须使用与<code>CFRunLoopSourceRef</code>Core Foundation 中的不透明类型关联的功能。您可以使用多个回调函数配置自定义输入源。当从运行循环中删除源时，Core Foundation 会在不同位置调用这些函数以配置源，处理所有传入事件并拆除源。</p><p>除了定义事件到达时自定义源的行为外，还必须定义事件传递机制。源代码的这一部分在单独的线程上运行，负责为输入源提供其数据，并在准备好处理数据时向其发出信号。事件传递机制取决于您，但不必过于复杂。</p><p>有关如何创建自定义输入源的示例，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW3">定义自定义输入源</a>。有关自定义输入源的参考信息，另请参见*<a href="https://developer.apple.com/documentation/corefoundation/cfrunloopsource-rhr">CFRunLoopSource 参考</a>*。</p><p>######## 可可执行选择器来源</p><p>除了基于端口的源代码外，Cocoa 还定义了一个自定义输入源，使您可以在任何线程上执行选择器。像基于端口的源一样，执行选择器请求在目标线程上被序列化，从而减轻了在一个线程上运行多个方法时可能发生的许多同步问题。与基于端口的源不同，执行选择器源在执行选择器后将其自身从运行循环中删除。</p><p><strong>注意：</strong> 在 OS X v10.5 之前，执行选择器源主要用于将消息发送到主线程，但是在 OS X v10.5 和更高版本以及 iOS 中，可以使用它们将消息发送到任何线程。</p><p>在另一个线程上执行选择器时，目标线程必须具有活动的运行循环。对于您创建的线程，这意味着等到您的代码显式启动运行循环。但是，由于主线程启动了自己的运行循环，因此您可以在应用程序调用<code>applicationDidFinishLaunching:</code>应用程序委托的方法后立即开始在该线程上发出调用 。每次循环时，运行循环都会处理所有排队的执行选择器调用，而不是在每次循环迭代时都处理一个。</p><p>表 3-2 列出了<code>NSObject</code>可在其他线程上执行选择器的方法。由于这些方法是在上声明的<code>NSObject</code>，因此可以在可以访问 Objective-C 对象的任何线程（包括 POSIX 线程）中使用它们。这些方法实际上不会创建新线程来执行选择器。</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>performSelectorOnMainThread:withObject:waitUntilDone:``performSelectorOnMainThread:withObject:waitUntilDone:modes:</code></td><td align="left">在该线程的下一个运行循环周期内，在该应用程序的主线程上执行指定的选择器。这些方法使您可以选择阻塞当前线程，直到执行选择器为止。</td></tr><tr><td align="left"><code>performSelector:onThread:withObject:waitUntilDone:``performSelector:onThread:withObject:waitUntilDone:modes:</code></td><td align="left">在具有<code>NSThread</code>对象的任何线程上执行指定的选择器。这些方法使您可以选择阻塞当前线程，直到执行选择器为止。</td></tr><tr><td align="left"><code>performSelector:withObject:afterDelay:``performSelector:withObject:afterDelay:inModes:</code></td><td align="left">在下一个运行循环周期和一个可选的延迟时间之后，在当前线程上执行指定的选择器。因为它一直等到下一个运行循环周期执行选择器，所以这些方法提供了当前执行代码的最小自动延迟。多个排队的选择器按照排队的顺序依次执行。</td></tr><tr><td align="left"><code>cancelPreviousPerformRequestsWithTarget:``cancelPreviousPerformRequestsWithTarget:selector:object:</code></td><td align="left">使您可以使用<code>performSelector:withObject:afterDelay:</code>or <code>performSelector:withObject:afterDelay:inModes:</code>方法取消发送到当前线程的消息。</td></tr></tbody></table><p>有关每种方法的详细信息，请参见《_<a href="https://developer.apple.com/documentation/objectivec/nsobject">NSObject 类参考》</a>_。</p><h6 id="计时器来源"><a href="#计时器来源" class="headerlink" title="计时器来源"></a>计时器来源</h6><p>计时器源在将来的预设时间将事件同步传递到您的线程。计时器是线程通知自己执行某事的一种方式。例如，一旦在来自用户的连续击键之间经过了一定的时间量，则搜索字段可以使用计时器来启动自动搜索。使用此延迟时间使用户有机会在开始搜索之前键入尽可能多的所需搜索字符串。</p><p>尽管计时器生成基于时间的通知，但它不是实时机制。像输入源一样，计时器与运行循环的特定模式相关联。如果计时器不在运行循环当前正在监视的模式下，则在您以计时器支持的一种模式运行运行循环之前，它不会触发。同样，如果运行循环在执行处理程序例程的中间触发计时器，则计时器将等到下一次通过运行循环调用其处理例程。如果运行循环根本没有运行，则计时器永远不会触发。</p><p>您可以将计时器配置为仅一次或重复生成事件。重复计时器会根据计划的触发时间（而不是实际的触发时间）自动重新计划自身。例如，如果计划将计时器在特定时间触发，然后每 5 秒触发一次，则即使实际触发时间被延迟，计划的触发时间也将始终落在原始的 5 秒时间间隔上。如果触发时间延迟得太多，以致错过了一个或多个计划的触发时间，则计时器将在错过的时间段内仅触发一次。在错过了一段时间后触发后，计时器将重新安排为下一个计划的触发时间。</p><p>有关配置计时器源的更多信息，请参见“ <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW6">配置计时器源”</a>。有关参考信息，请参见《*<a href="https://developer.apple.com/documentation/foundation/timer">NSTimer 类参考》</a>*或《_<a href="https://developer.apple.com/documentation/corefoundation/cfrunlooptimer-rhk">CFRunLoopTimer 参考》</a>_。</p><h6 id="运行循环观察者"><a href="#运行循环观察者" class="headerlink" title="运行循环观察者"></a>运行循环观察者</h6><p>与在适当的异步或同步事件发生时触发的源相反，运行循环观察者在运行循环本身执行期间的特定位置触发。您可以使用运行循环观察器来准备线程以处理给定事件，或者在线程进入睡眠之前准备线程。您可以将运行循环观察者与运行循环中的以下事件相关联：</p><ul><li>运行循环的入口。</li><li>当运行循环将要处理计时器时。</li><li>当运行循环将要处理输入源时。</li><li>当运行循环即将进入睡眠状态时。</li><li>当运行循环醒来但在处理事件之前将其唤醒。</li><li>运行循环的退出。</li></ul><p>您可以使用 Core Foundation 将运行循环观察器添加到应用程序。要创建运行循环观察器，请创建<code>CFRunLoopObserverRef</code>不透明类型的新实例。此类型跟踪您的自定义回调函数及其感兴趣的活动。</p><p>与计时器类似，运行循环观察器可以使用一次或重复使用。一次触发的观察者在触发后将自己从运行循环中删除，而重复的观察者仍保持连接。您可以指定创建观察者时是运行一次还是重复运行。</p><p>有关如何创建运行循环观察器的示例，请参见“ <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW18">配置运行循环”</a>。有关参考信息，请参见*<a href="https://developer.apple.com/documentation/corefoundation/cfrunloopobserver">CFRunLoopObserver 参考</a>*。</p><h6 id="事件的运行循环序列"><a href="#事件的运行循环序列" class="headerlink" title="事件的运行循环序列"></a>事件的运行循环序列</h6><p>每次运行它时，线程的运行循环都会处理未决事件并为任何附加的观察者生成通知。它执行此操作的顺序非常具体，如下所示：</p><ol><li>通知观察者已进入运行循环。</li><li>通知观察者任何准备就绪的计时器即将触发。</li><li>通知观察者任何不基于端口的输入源都将被触发。</li><li>触发所有准备触发的非基于端口的输入源。</li><li>如果基于端口的输入源已准备好并等待启动，请立即处理事件。转到步骤 9。</li><li>通知观察者线程即将进入睡眠状态。</li><li>使线程进入睡眠状态，直到发生以下事件之一：<ul><li>事件到达基于端口的输入源。</li><li>计时器触发。</li><li>为运行循环设置的超时值到期。</li><li>运行循环被明确唤醒。</li></ul></li><li>通知观察者线程刚刚醒来。</li><li>处理未决事件。<ul><li>如果触发了用户定义的计时器，请处理计时器事件并重新启动循环。转到步骤 2。</li><li>如果触发了输入源，则传递事件。</li><li>如果运行循环已显式唤醒，但尚未超时，请重新启动循环。转到步骤 2。</li></ul></li><li>通知观察者运行循环已退出。</li></ol><p>由于计时器和输入源的观察者通知是在这些事件实际发生之前传递的，因此通知时间和实际事件时间之间可能会有差距。如果这些事件之间的时间很关键，则可以使用睡眠和从睡眠中唤醒通知来帮助您关联实际事件之间的时间。</p><p>由于在运行运行循环时会传递计时器和其他定期事件，因此规避该循环会中断这些事件的传递。每当您通过进入循环并重复从应用程序请求事件来实现鼠标跟踪例程时，就会出现此行为的典型示例。因为您的代码直接捕获事件，而不是让应用程序正常分配事件，所以活动计时器将无法触发，直到您的鼠标跟踪例程退出并将控制权返回给应用程序为止。</p><p>可以使用运行循环对象显式唤醒运行循环。其他事件也可能导致运行循环被唤醒。例如，添加另一个非基于端口的输入源将唤醒运行循环，以便可以立即处理输入源，而不是等到发生其他事件为止。</p><h4 id="什么时候使用运行循环？"><a href="#什么时候使用运行循环？" class="headerlink" title="什么时候使用运行循环？"></a>什么时候使用运行循环？</h4><p>唯一需要明确运行运行循环的时间是在为应用程序创建辅助线程时。应用程序主线程的运行循环是基础架构的关键部分。结果，应用程序框架提供了用于运行主应用程序循环并自动启动该循环的代码。在 iOS（或 OS X）<code>run</code>中<code>UIApplication</code>，的方法<code>NSApplication</code>作为正常启动顺序的一部分启动应用程序的主循环。如果使用 Xcode 模板项目创建应用程序，则永远不必显式调用这些例程。</p><p>对于辅助线程，您需要确定是否需要运行循环，如果需要，请自行配置并启动它。您无需在所有情况下都启动线程的运行循环。例如，如果您使用线程来执行一些长时间运行且预定的任务，则可以避免启动运行循环。运行循环用于需要与线程更多交互的情况。例如，如果您打算执行以下任一操作，则需要启动运行循环：</p><ul><li>使用端口或自定义输入源与其他线程进行通信。</li><li>在线程上使用计时器。</li><li><code>performSelector</code>在 Cocoa 应用程序中使用任何…方法。</li><li>保持线程执行定期任务。</li></ul><p>如果确实选择使用运行循环，则配置和设置非常简单。与所有线程编程一样，您应该有一个计划，在适当的情况下退出辅助线程。最好通过让线程退出干净地结束线程，而不是强制终止线程。<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW5">使用运行循环对象中</a>介绍了有关如何配置和退出<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW5">运行循环的信息</a>。</p><h4 id="使用运行循环对象"><a href="#使用运行循环对象" class="headerlink" title="使用运行循环对象"></a>使用运行循环对象</h4><p>运行循环对象提供了用于将输入源，计时器和运行循环观察器添加到您的运行循环然后运行它的主界面。每个线程都有一个与之关联的运行循环对象。在可可中，此对象是<code>NSRunLoop</code>类的实例。在低级应用程序中，它是指向<code>CFRunLoopRef</code>不透明类型的指针。</p><h6 id="获取运行循环对象"><a href="#获取运行循环对象" class="headerlink" title="获取运行循环对象"></a>获取运行循环对象</h6><p>要获取当前线程的运行循环，请使用以下方法之一：</p><ul><li>在 Cocoa 应用程序中，使用的<code>currentRunLoop</code>类方法<code>NSRunLoop</code>检索<code>NSRunLoop</code>对象。</li><li>使用<code>CFRunLoopGetCurrent</code>功能。</li></ul><p>尽管它们不是免费的桥接类型，但是您可以在需要时<code>CFRunLoopRef</code>从<code>NSRunLoop</code>对象获取不透明类型。本<code>NSRunLoop</code>类定义了一个<code>getCFRunLoop</code>返回的方法<code>CFRunLoopRef</code>类型，你可以传递给 Core Foundation 的例程。由于两个对象都引用相同的运行循环，因此您可以根据需要混合对<code>NSRunLoop</code>对象和<code>CFRunLoopRef</code>不透明类型的调用。</p><h6 id="配置运行循环"><a href="#配置运行循环" class="headerlink" title="配置运行循环"></a>配置运行循环</h6><p>在辅助线程上运行运行循环之前，必须向其添加至少一个输入源或计时器。如果运行循环没有任何要监视的源，则当您尝试运行它时，它将立即退出。有关如何将源添加到运行循环的示例，请参见《<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW7">配置运行循环源》</a>。</p><p>除了安装源代码，您还可以安装运行循环观察器，并使用它们来检测运行循环的不同执行阶段。要安装运行循环观察器，请创建一个<code>CFRunLoopObserverRef</code>不透明类型，然后使用该<code>CFRunLoopAddObserver</code>函数将其添加到您的运行循环中。即使使用 Cocoa 应用程序，也必须使用 Core Foundation 创建运行循环观察器。</p><p>清单 3-1 显示了将运行循环观察器附加到其运行循环的线程的主例程。该示例的目的是向您展示如何创建运行循环观察器，因此代码仅设置了一个运行循环观察器以监视所有运行循环活动。基本处理程序例程（未显示）在处理计时器请求时仅记录运行循环活动。</p><p><strong>清单 3-1</strong> 创建一个运行循环观察器</p><table><thead><tr><th><code>-（无效）threadMain</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>//该应用程序使用垃圾回收，因此不需要自动释放池。</code></td></tr><tr><td><code>NSRunLoop * myRunLoop = [NSRunLoop currentRunLoop];</code></td></tr><tr><td>``</td></tr><tr><td><code>//创建一个运行循环观察器，并将其附加到运行循环。</code></td></tr><tr><td><code>CFRunLoopObserverContext context = &#123;0，self，NULL，NULL，NULL&#125;;</code></td></tr><tr><td><code>CFRunLoopObserverRef观察者= CFRunLoopObserverCreate（kCFAllocatorDefault，</code></td></tr><tr><td><code>kCFRunLoopAllActivities，是，0，＆myRunLoopObserver，＆context）；</code></td></tr><tr><td>``</td></tr><tr><td><code>如果（观察者）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>CFRunLoopRef cfLoop = [myRunLoop getCFRunLoop];</code></td></tr><tr><td><code>CFRunLoopAddObserver（cfLoop，观察者，kCFRunLoopDefaultMode）;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>//创建并安排计时器。</code></td></tr><tr><td><code>[NSTimer ScheduledTimerWithTimeInterval：0.1目标：自我</code></td></tr><tr><td><code>选择器：@选择器（doFireTimer ：） userInfo：无重复：是]；</code></td></tr><tr><td>``</td></tr><tr><td><code>NSInteger loopCount = 10;</code></td></tr><tr><td><code>做</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//运行运行循环10次以使计时器启动。</code></td></tr><tr><td><code>[myRunLoop runUntilDate：[NSDate dateWithTimeIntervalSinceNow：1]];</code></td></tr><tr><td><code>loopCount--;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>while（loopCount）;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>为长寿命线程配置运行循环时，最好添加至少一个输入源以接收消息。尽管您可以仅连接一个计时器即可进入运行循环，但是一旦计时器触发，它通常就会失效，这将导致运行循环退出。附加重复计时器可以使运行循环在更长的时间内运行，但是会涉及定期触发计时器以唤醒线程，这实际上是轮询的另一种形式。相比之下，输入源会等待事件发生，使线程保持睡眠状态直到事件发生。</p><h6 id="启动运行循环"><a href="#启动运行循环" class="headerlink" title="启动运行循环"></a>启动运行循环</h6><p>仅对于应用程序中的辅助线程，才需要启动运行循环。一个运行循环必须至少有一个输入源或计时器要监视。如果未连接，运行循环将立即退出。</p><p>有几种启动运行循环的方法，包括以下几种：</p><ul><li>无条件</li><li>设定时间限制</li><li>在特定模式下</li></ul><p>无条件进入运行循环是最简单的选择，但也是最不希望的。无条件运行运行循环会将线程置于永久循环，这使您几乎无法控制运行循环本身。您可以添加和删除输入源和计时器，但是停止运行循环的唯一方法是终止运行循环。也没有办法在自定义模式下运行运行循环。</p><p>与其无条件地运行运行循环，不如使用超时值运行运行循环。当您使用超时值时，运行循环将运行直到事件到达或指定的时间到期为止。如果事件到达，则将该事件调度到处理程序进行处理，然后退出运行循环。然后，您的代码可以重新启动运行循环以处理下一个事件。如果分配的时间到期了，您可以简单地重新启动运行循环或使用该时间进行任何必要的内务处理。</p><p>除了超时值之外，您还可以使用特定模式运行运行循环。模式和超时值不是互斥的，并且在启动运行循环时都可以使用。模式限制了将事件传递到运行循环的源的类型，<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW12">运行循环模式中</a>对此进行了详细描述。</p><p>清单 3-2 显示了线程的主进入例程的框架版本。此示例的关键部分显示了运行循环的基本结构。本质上，您将输入源和计时器添加到运行循环中，然后重复调用例程之一以启动运行循环。每次运行循环例程返回时，您都要检查是否出现了可能保证退出线程的条件。该示例使用 Core Foundation 运行循环例程，以便它可以检查返回结果并确定为什么退出运行循环。<code>NSRunLoop</code>如果您使用的是 Cocoa，并且不需要检查返回值，则也可以使用类的方法以类似的方式运行运行循环。（有关调用<code>NSRunLoop</code>类的方法的运行循环的示例，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW9">清单 3-14</a>。）</p><p><strong>清单 3-2</strong> 运行一个运行循环</p><table><thead><tr><th><code>-（void）skeletonThreadMain</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>//如果不使用垃圾回收，请在此处设置一个自动释放池。</code></td></tr><tr><td><code>BOOL完成=否；</code></td></tr><tr><td>``</td></tr><tr><td><code>//将您的源代码或计时器添加到运行循环中，然后进行其他任何设置。</code></td></tr><tr><td>``</td></tr><tr><td><code>做</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//开始运行循环，但在处理完每个源之后返回。</code></td></tr><tr><td><code>SInt32结果= CFRunLoopRunInMode（kCFRunLoopDefaultMode，10，是）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//如果源明确停止了运行循环，或者没有</code></td></tr><tr><td><code>//来源或计时器，请继续并退出。</code></td></tr><tr><td>`如果（（结果== kCFRunLoopRunStopped）</td></tr><tr><td><code>完成=是;</code></td></tr><tr><td>``</td></tr><tr><td><code>//在此处检查其他退出条件，并设置</code></td></tr><tr><td><code>//根据需要完成变量。</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>同时（！完成）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//在此处清理代码。确保释放所有分配的自动释放池。</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>可以递归运行运行循环。换句话说，您可以在输入源或计时器的处理程序例程中调用<code>CFRunLoopRun</code>，<code>CFRunLoopRunInMode</code>或任何<code>NSRunLoop</code>用于启动运行循环的方法。这样做时，可以使用任何要运行嵌套运行循环的模式，包括外部运行循环使用的模式。</p><h6 id="退出运行循环"><a href="#退出运行循环" class="headerlink" title="退出运行循环"></a>退出运行循环</h6><p>在处理事件之前，有两种方法可以使运行循环退出：</p><ul><li>配置运行循环以使用超时值运行。</li><li>告诉运行循环停止。</li></ul><p>如果可以管理，使用超时值无疑是首选。指定超时值可使运行循环在退出之前完成其所有正常处理，包括将通知传递给运行循环观察器。</p><p>使用该<code>CFRunLoopStop</code>函数显式停止运行循环会产生类似于超时的结果。运行循环将发出所有剩余的运行循环通知，然后退出。区别在于您可以在无条件启动的运行循环中使用此技术。</p><p>尽管删除运行循环的输入源和计时器也可能导致运行循环退出，但这不是停止运行循环的可靠方法。一些系统例程将输入源添加到运行循环中以处理所需的事件。因为您的代码可能不知道这些输入源，所以它将无法删除它们，这将阻止运行循环退出。</p><h6 id="线程安全和运行循环对象"><a href="#线程安全和运行循环对象" class="headerlink" title="线程安全和运行循环对象"></a>线程安全和运行循环对象</h6><p>线程安全性取决于您用来操纵运行循环的 API。Core Foundation 中的函数通常是线程安全的，可以从任何线程中调用。但是，如果您执行的操作会更改运行循环的配置，则仍然最好从拥有运行循环的线程中进行更改。</p><p>可可<code>NSRunLoop</code>类在本质上不如其 Core Foundation 同类线程安全。如果要使用<code>NSRunLoop</code>该类来修改运行循环，则只能从拥有该运行循环的同一线程进行。将输入源或计时器添加到属于不同线程的运行循环中可能会导致代码崩溃或行为异常。</p><h4 id="配置运行循环源"><a href="#配置运行循环源" class="headerlink" title="配置运行循环源"></a>配置运行循环源</h4><p>以下各节显示了如何在 Cocoa 和 Core Foundation 中设置不同类型的输入源的示例。</p><h6 id="定义自定义输入源"><a href="#定义自定义输入源" class="headerlink" title="定义自定义输入源"></a>定义自定义输入源</h6><p>创建自定义输入源涉及定义以下内容：</p><ul><li>您希望输入源处理的信息。</li><li>调度程序，让感兴趣的客户知道如何联系您的输入源。</li><li>处理程序例程，用于执行任何客户端发送的请求。</li><li>取消例程使您的输入源无效。</li></ul><p>因为您创建了一个定制输入源来处理定制信息，所以实际配置被设计为灵活的。调度程序，处理程序和取消例程是自定义输入源几乎始终需要的关键例程。但是，其余大多数输入源行为都发生在那些处理程序例程之外。例如，由您决定定义用于将数据传递到输入源以及将输入源的存在传达给其他线程的机制。</p><p>图 3-2 显示了定制输入源的样本配置。在此示例中，应用程序的主线程维护对输入源，该输入源的定制命令缓冲区以及安装该输入源的运行循环的引用。当主线程有一个要移交给工作线程的任务时，它将一个命令以及工作线程启动该任务所需的所有信息发布到命令缓冲区。（由于主线程和工作线程的输入源都可以访问命令缓冲区，因此必须同步该访问。）一旦发布命令，主线程将向输入源发出信号并唤醒工作线程的运行循环。收到唤醒命令后，运行循环将调用输入源的处理程序，该处理程序将处理在命令缓冲区中找到的命令。</p><p><strong>图 3-2</strong> 操作自定义输入源<img src="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Art/custominputsource.jpg" alt="操作自定义输入源"></p><p>以下各节说明了上图中自定义输入源的实现，并显示了您需要实现的关键代码。</p><p>######## 定义输入源</p><p>定义自定义输入源需要使用 Core Foundation 例程来配置您的运行循环源并将其附加到运行循环。尽管基本处理程序是基于 C 的函数，但这并不妨碍您编写这些函数的包装程序并使用 Objective-C 或 C ++实现代码主体。</p><p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW31">图 3-2 中</a>引入的输入源使用一个 Objective-C 对象来管理命令缓冲区并与运行循环协调。清单 3-3 显示了此对象的定义。该<code>RunLoopSource</code>对象管理命令缓冲区，并使用该缓冲区从其他线程接收消息。此清单还显示了<code>RunLoopContext</code>对象的定义，它实际上只是一个容器对象，用于传递<code>RunLoopSource</code>对象和对应用程序主线程的运行循环引用。</p><p><strong>清单 3-3</strong> 定制输入源对象定义</p><table><thead><tr><th><code>@interface RunLoopSource：NSObject</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>CFRunLoopSourceRef runLoopSource;</code></td></tr><tr><td><code>NSMutableArray *命令；</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>-（id）init;</code></td></tr><tr><td><code>-（void）addToCurrentRunLoop;</code></td></tr><tr><td><code>-（无效）无效；</code></td></tr><tr><td>``</td></tr><tr><td><code>//处理程序方法</code></td></tr><tr><td><code>-（void）sourceFired;</code></td></tr><tr><td>``</td></tr><tr><td><code>//客户端接口，用于注册要处理的命令</code></td></tr><tr><td><code>-（void）addCommand：（NSInteger）命令withData：（id）data;</code></td></tr><tr><td><code>-（void）fireAllCommandsOnRunLoop：（CFRunLoopRef）runloop;</code></td></tr><tr><td>``</td></tr><tr><td><code>@结束</code></td></tr><tr><td>``</td></tr><tr><td><code>//这些是CFRunLoopSourceRef回调函数。</code></td></tr><tr><td><code>void RunLoopSourceScheduleRoutine（void * info，CFRunLoopRef rl，CFStringRef模式）;</code></td></tr><tr><td><code>void RunLoopSourcePerformRoutine（void * info）;</code></td></tr><tr><td><code>void RunLoopSourceCancelRoutine（void * info，CFRunLoopRef rl，CFStringRef模式）;</code></td></tr><tr><td>``</td></tr><tr><td><code>// RunLoopContext是在输入源注册期间使用的容器对象。</code></td></tr><tr><td><code>@interface RunLoopContext：NSObject</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>CFRunLoopRef runLoop;</code></td></tr><tr><td><code>RunLoopSource *源；</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>@property（只读）CFRunLoopRef runLoop;</code></td></tr><tr><td><code>@property（只读）RunLoopSource *源；</code></td></tr><tr><td>``</td></tr><tr><td><code>-（id）initWithSource：（RunLoopSource *）src和Loop：（CFRunLoopRef）loop;</code></td></tr><tr><td><code>@结束</code></td></tr></tbody></table><p>尽管 Objective-C 代码管理输入源的自定义数据，但是将输入源附加到运行循环需要基于 C 的回调函数。当您将运行循环源实际附加到运行循环时，将调用其中的第一个函数，如清单 3-4 所示。因为此输入源只有一个客户端（主线程），所以它使用调度程序功能发送消息以在该线程上的应用程序委托中注册自己。当委托人想要与输入源进行通信时，它将使用<code>RunLoopContext</code>object 中的信息进行通信。</p><p><strong>清单 3-4</strong> 安排运行循环源</p><table><thead><tr><th><code>void RunLoopSourceScheduleRoutine（void * info，CFRunLoopRef rl，CFStringRef模式）</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>RunLoopSource * obj =（RunLoopSource *）info;</code></td></tr><tr><td><code>AppDelegate * del = [AppDelegate sharedAppDelegate];</code></td></tr><tr><td><code>RunLoopContext * theContext = [[[RunLoopContext alloc] initWithSource：obj和Loop：rl];</code></td></tr><tr><td>``</td></tr><tr><td><code>[del performSelectorOnMainThread：@selector（registerSource :)</code></td></tr><tr><td><code>withObject：theContext waitUntilDone：NO];</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>最重要的回调例程之一是当输入源被信号通知时用于处理自定义数据的例程。清单 3-5 显示了与<code>RunLoopSource</code>对象关联的 perform 回调例程。该功能只是将完成工作的请求转发给<code>sourceFired</code>方法，该方法然后处理命令缓冲区中存在的所有命令。</p><p><strong>清单 3-5</strong> 在输入源中执行工作</p><table><thead><tr><th><code>void RunLoopSourcePerformRoutine（void * info）</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>RunLoopSource * obj =（RunLoopSource *）info;</code></td></tr><tr><td><code>[obj sourceFired];</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>如果使用该<code>CFRunLoopSourceInvalidate</code>功能从运行循环中删除输入源，系统将调用输入源的取消例程。您可以使用此例程来通知客户端您的输入源不再有效，并且他们应删除对其的任何引用。 清单 3-6 显示了向该<code>RunLoopSource</code>对象注册的取消回调例程。此函数将另一个<code>RunLoopContext</code>对象发送给应用程序委托，但这一次要求委托删除对运行循环源的引用。</p><p><strong>清单 3-6</strong> 使输入源无效</p><table><thead><tr><th><code>void RunLoopSourceCancelRoutine（无效* info，CFRunLoopRef rl，CFStringRef模式）</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>RunLoopSource * obj =（RunLoopSource *）info;</code></td></tr><tr><td><code>AppDelegate * del = [AppDelegate sharedAppDelegate];</code></td></tr><tr><td><code>RunLoopContext * theContext = [[[RunLoopContext alloc] initWithSource：obj和Loop：rl];</code></td></tr><tr><td>``</td></tr><tr><td><code>[del performSelectorOnMainThread：@selector（removeSource :)</code></td></tr><tr><td><code>withObject：theContext waitUntilDone：YES];</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p><strong>注意：</strong><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW37">与输入源的客户端协调中</a>显示 了应用程序委托<code>registerSource:</code>和<code>removeSource:</code>方法<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW37">的代码</a>。</p><p>######## 在运行循环上安装输入源</p><p>清单 3-7 显示了该类的<code>init</code>和<code>addToCurrentRunLoop</code>方法<code>RunLoopSource</code>。该<code>init</code>方法创建<code>CFRunLoopSourceRef</code>实际上必须附加到运行循环的不透明类型。它将<code>RunLoopSource</code>对象本身作为上下文信息传递，以便回调例程具有指向该对象的指针。在工作线程调用该<code>addToCurrentRunLoop</code>方法之前，不会安装输入源，此时将<code>RunLoopSourceScheduleRoutine</code>调用回调函数。将输入源添加到运行循环后，线程可以运行其运行循环以等待它。</p><p><strong>清单 3-7</strong> 安装运行循环源</p><table><thead><tr><th><code>-（id）初始化</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>CFRunLoopSourceContext context = &#123;0，self，NULL，NULL，NULL，NULL，NULL，</code></td></tr><tr><td><code>＆RunLoopSourceScheduleRoutine，</code></td></tr><tr><td><code>RunLoopSourceCancelRoutine，</code></td></tr><tr><td><code>RunLoopSourcePerformRoutine&#125;;</code></td></tr><tr><td>``</td></tr><tr><td><code>runLoopSource = CFRunLoopSourceCreate（NULL，0，＆context）;</code></td></tr><tr><td><code>命令= [[[NSMutableArray alloc] init];</code></td></tr><tr><td>``</td></tr><tr><td><code>返回自我</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>-（void）addToCurrentRunLoop</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>CFRunLoopRef runLoop = CFRunLoopGetCurrent（）;</code></td></tr><tr><td><code>CFRunLoopAddSource（runLoop，runLoopSource，kCFRunLoopDefaultMode）;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>######## 与输入源的客户协调</p><p>为了使您的输入源有用，您需要对其进行操作并从另一个线程发出信号。输入源的全部目的是使其关联线程处于休眠状态，直到有事要做。这个事实使得您的应用程序中的其他线程必须了解输入源并有一种与之通信的方法。</p><p>通知客户有关您的输入源的一种方法是在您的输入源首次安装在其运行循环中时发出注册请求。您可以向任意数量的客户注册您的输入源，也可以简单地向某个中央机构注册它，然后将您的输入源出售给感兴趣的客户。清单 3-8 显示了由应用程序委托定义的注册方法，该方法在调用<code>RunLoopSource</code>对象的调度程序函数时调用。此方法接收该<code>RunLoopContext</code>对象提供的<code>RunLoopSource</code>对象，并将其添加到其源列表中。此清单还显示了从运行循环中删除输入源时用于注销输入源的例程。</p><p><strong>清单 3-8</strong> 使用应用程序委托注册和删除输入源</p><table><thead><tr><th><code>-（void）registerSource：（RunLoopContext *）sourceInfo;</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>[sourcesToPing addObject：sourceInfo];</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>-（无效）removeSource：（RunLoopContext *）sourceInfo</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>id objToRemove = nil;</code></td></tr><tr><td>``</td></tr><tr><td><code>用于（SourcesToPing中的RunLoopContext *上下文）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>如果（[context isEqual：sourceInfo]）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>objToRemove =上下文；</code></td></tr><tr><td><code>打破;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>如果（objToRemove）</code></td></tr><tr><td><code>[sourcesToPing removeObject：objToRemove];</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p><strong>注意：</strong><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW32">清单 3-4</a>和<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW34">清单 3-6</a> 中显示了调用前面清单中的方法的回调函数。</p><p>######## 用信号通知输入源</p><p>在将其数据交给输入源后，客户端必须向该源发出信号并唤醒其运行循环。向源发出信号会使运行循环知道该源已准备好进行处理。并且由于当信号出现时线程可能处于睡眠状态，因此您应该始终明确地唤醒运行循环。否则，可能会导致输入源处理延迟。</p><p>清单 3-9 显示了<code>fireCommandsOnRunLoop</code>该<code>RunLoopSource</code>对象的方法。客户端准备好让源处理它们添加到缓冲区的命令时，客户端将调用此方法。</p><p><strong>清单 3-9</strong> 唤醒运行循环</p><table><thead><tr><th><code>-（void）fireCommandsOnRunLoop：（CFRunLoopRef）runloop</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>CFRunLoopSourceSignal（runLoopSource）;</code></td></tr><tr><td><code>CFRunLoopWakeUp（runloop）;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p><strong>注意：</strong> 永远不要尝试<code>SIGHUP</code>通过传递自定义输入源来处理一个或其他类型的过程级信号。唤醒运行循环的 Core Foundation 函数不是信号安全的，不应在应用程序的信号处理程序例程中使用。有关信号处理程序例程的更多信息，请参见<code>sigaction</code>手册页。</p><h6 id="配置计时器源"><a href="#配置计时器源" class="headerlink" title="配置计时器源"></a>配置计时器源</h6><p>要创建计时器源，您要做的就是创建一个计时器对象并将其安排在运行循环中。在 Cocoa 中，您可以使用<code>NSTimer</code>该类来创建新的计时器对象，而在 Core Foundation 中，您可以使用<code>CFRunLoopTimerRef</code>不透明类型。在内部，<code>NSTimer</code>该类只是 Core Foundation 的扩展，提供了一些便利功能，例如使用同一方法创建和安排计时器的功能。</p><p>在 Cocoa 中，您可以使用以下两种方法之一同时创建和安排计时器：</p><ul><li><code>scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:</code></li><li><code>scheduledTimerWithTimeInterval:invocation:repeats:</code></li></ul><p>这些方法创建计时器并将其以默认模式（<code>NSDefaultRunLoopMode</code>）添加到当前线程的运行循环中。如果需要，还可以通过创建<code>NSTimer</code>对象然后使用的<code>addTimer:forMode:</code>方法将其添加到运行循环中来手动安排计时器<code>NSRunLoop</code>。两种技术基本上都做同样的事情，但是给您对计时器配置的不同级别的控制。例如，如果您创建计时器并将其手动添加到运行循环中，则可以使用默认模式以外的其他模式来执行此操作。清单 3-10 显示了如何使用这两种技术创建计时器。第一个计时器的初始延迟为 1 秒，但此后每隔 0.1 秒定期触发一次。第二个计时器在最初的 0.2 秒延迟后开始触发，然后在此之后每 0.2 秒触发一次。</p><p><strong>清单 3-10</strong> 使用 NSTimer 创建和调度计时器</p><table><thead><tr><th><code>NSRunLoop * myRunLoop = [NSRunLoop currentRunLoop];</code></th></tr></thead><tbody><tr><td>``</td></tr><tr><td><code>//创建并安排第一个计时器。</code></td></tr><tr><td><code>NSDate * futureDate = [NSDate dateWithTimeIntervalSinceNow：1.0];</code></td></tr><tr><td><code>NSTimer * myTimer = [[NSTimer分配] initWithFireDate：futureDate</code></td></tr><tr><td><code>间隔：0.1</code></td></tr><tr><td><code>目标：自我</code></td></tr><tr><td><code>选择器：@选择器（myDoFireTimer1 :)</code></td></tr><tr><td><code>userInfo：无</code></td></tr><tr><td><code>重复：是]；</code></td></tr><tr><td><code>[myRunLoop addTimer：myTimer的模式：NSDefaultRunLoopMode]；</code></td></tr><tr><td>``</td></tr><tr><td><code>//创建并安排第二个计时器。</code></td></tr><tr><td><code>[NSTimer ScheduledTimerWithTimeInterval：0.2</code></td></tr><tr><td><code>目标：自我</code></td></tr><tr><td><code>选择器：@选择器（myDoFireTimer2 :)</code></td></tr><tr><td><code>userInfo：无</code></td></tr><tr><td><code>重复：是]；</code></td></tr></tbody></table><p>清单 3-11 显示了使用 Core Foundation 函数配置计时器所需的代码。尽管此示例未在上下文结构中传递任何用户定义的信息，但是您可以使用此结构传递计时器所需的任何自定义数据。有关此结构的内容的更多信息，请参见*<a href="https://developer.apple.com/documentation/corefoundation/cfrunlooptimer-rhk">CFRunLoopTimer 参考中的</a>*描述。</p><p><strong>清单 3-11</strong> 使用 Core Foundation 创建和安排计时器</p><table><thead><tr><th><code>CFRunLoopRef runLoop = CFRunLoopGetCurrent（）;</code></th></tr></thead><tbody><tr><td><code>CFRunLoopTimerContext context = &#123;0，NULL，NULL，NULL，NULL&#125;;</code></td></tr><tr><td><code>CFRunLoopTimerRef timer = CFRunLoopTimerCreate（kCFAllocatorDefault，0.1，0.3，0，0，</code></td></tr><tr><td><code>＆myCFTimerCallback，＆context）;</code></td></tr><tr><td>``</td></tr><tr><td><code>CFRunLoopAddTimer（runLoop，timer，kCFRunLoopCommonModes）;</code></td></tr></tbody></table><h6 id="配置基于端口的输入源"><a href="#配置基于端口的输入源" class="headerlink" title="配置基于端口的输入源"></a>配置基于端口的输入源</h6><p>Cocoa 和 Core Foundation 都提供了基于端口的对象，用于在线程之间或进程之间进行通信。以下各节说明如何使用几种不同类型的端口来设置端口通信。</p><p>######## 配置 NSMachPort 对象</p><p>要与<code>NSMachPort</code>对象建立本地连接，请创建端口对象并将其添加到主线程的运行循环中。启动辅助线程时，将同一对象传递给线程的入口点函数。辅助线程可以使用同一对象将消息发送回您的主线程。</p><p>########## 实施主线程代码</p><p>清单 3-12 显示了用于启动辅助工作线程的主要线程代码。因为 Cocoa 框架执行了许多配置端口和运行循环的干预步骤，所以该<code>launchThread</code>方法明显短于其 Core Foundation 等效方法（<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-139726-BAJBGHHB">清单 3-17</a>）。但是，两者的行为几乎相同。一个区别是，此方法不是将本地端口的名称发送到工作线程，而是<code>NSPort</code>直接发送对象。</p><p><strong>清单 3-12</strong> 主线程启动方法</p><table><thead><tr><th><code>-（无效）launchThread</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>NSPort * myPort = [NSMachPort端口]；</code></td></tr><tr><td><code>如果（myPort）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//此类处理传入的端口消息。</code></td></tr><tr><td><code>[myPort setDelegate：self];</code></td></tr><tr><td>``</td></tr><tr><td><code>//将端口安装为当前运行循环上的输入源。</code></td></tr><tr><td><code>[[NSRunLoop currentRunLoop] addPort：myPort forMode：NSDefaultRunLoopMode];</code></td></tr><tr><td>``</td></tr><tr><td><code>//分离线程。让工作人员释放端口。</code></td></tr><tr><td><code>[NSThread detachNewThreadSelector：@selector（LaunchThreadWithPort :)</code></td></tr><tr><td><code>toTarget：[MyWorkerClass class] withObject：myPort];</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>为了在线程之间建立双向通信通道，您可能希望工作线程在签入消息中将其自己的本地端口发送到主线程。接收到签入消息可以使您的主线程知道在启动第二个线程时一切进展顺利，还为您提供了一种向该线程发送更多消息的方法。</p><p>清单 3-13 显示<code>handlePortMessage:</code>了主线程的方法。当数据到达线程自己的本地端口时，将调用此方法。当签入消息到达时，该方法直接从端口消息中检索辅助线程的端口，并将其保存以供以后使用。</p><p><strong>清单 3-13</strong> 处理 Mach 端口消息</p><table><thead><tr><th><code>#define kCheckinMessage 100</code></th></tr></thead><tbody><tr><td>``</td></tr><tr><td><code>//处理来自辅助线程的响应。</code></td></tr><tr><td><code>-（void）handlePortMessage：（NSPortMessage *）portMessage</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>unsigned int消息= [portMessage msgid];</code></td></tr><tr><td><code>NSPort * distantPort = nil;</code></td></tr><tr><td>``</td></tr><tr><td><code>如果（消息== kCheckinMessage）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//获取辅助线程的通信端口。</code></td></tr><tr><td><code>distantPort = [portMessage sendPort];</code></td></tr><tr><td>``</td></tr><tr><td><code>//保留并保存工作端口，以备后用。</code></td></tr><tr><td><code>[self storeDistantPort：distantPort];</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>其他</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//处理其他消息。</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>########## 实施辅助线程代码</p><p>对于辅助工作线程，您必须配置线程并使用指定的端口将信息传递回主线程。</p><p>清单 3-14 显示了设置工作线程的代码。在为线程创建自动释放池之后，该方法将创建一个工作器对象以驱动线程执行。worker 对象的<code>sendCheckinMessage:</code>方法（如<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW10">清单 3-15</a>所示）为 worker 线程创建一个本地端口，并将签入消息发送回主线程。</p><p><strong>清单 3-14</strong> 使用 Mach 端口启动工作线程</p><table><thead><tr><th><code>+（无效）LaunchThreadWithPort：（id）inData</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];</code></td></tr><tr><td>``</td></tr><tr><td><code>//设置此线程与主线程之间的连接。</code></td></tr><tr><td><code>NSPort * distantPort =（NSPort *）inData;</code></td></tr><tr><td>``</td></tr><tr><td><code>MyWorkerClass * workerObj = [[self alloc] init];</code></td></tr><tr><td><code>[workerObj sendCheckinMessage：distantPort];</code></td></tr><tr><td><code>[distantPort版本]；</code></td></tr><tr><td>``</td></tr><tr><td><code>//让运行循环处理事物。</code></td></tr><tr><td><code>做</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>[[NSRunLoop currentRunLoop] runMode：NSDefaultRunLoopMode</code></td></tr><tr><td><code>beforeDate：[NSDate distantFuture]];</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>while（！[workerObj shouldExit]）;</code></td></tr><tr><td>``</td></tr><tr><td><code>[workerObj发布]；</code></td></tr><tr><td><code>[池释放];</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>使用时<code>NSMachPort</code>，本地线程和远程线程可以将相同的端口对象用于线程之间的单向通信。换句话说，一个线程创建的本地端口对象成为另一线程的远程端口对象。</p><p>清单 3-15 显示了辅助线程的签入例程。此方法设置自己的本地端口以用于将来的通信，然后将签入消息发送回主线程。该方法将方法中接收到的端口对象<code>LaunchThreadWithPort:</code>用作消息的目标。</p><p><strong>清单 3-15</strong> 使用 Mach 端口发送签入消息</p><table><thead><tr><th><code>//工作线程签入方法</code></th></tr></thead><tbody><tr><td><code>-（void）sendCheckinMessage：（NSPort *）outPort</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//保留并保存远程端口以备将来使用。</code></td></tr><tr><td><code>[self setRemotePort：outPort];</code></td></tr><tr><td>``</td></tr><tr><td><code>//创建并配置工作线程端口。</code></td></tr><tr><td><code>NSPort * myPort = [NSMachPort端口]；</code></td></tr><tr><td><code>[myPort setDelegate：self];</code></td></tr><tr><td><code>[[NSRunLoop currentRunLoop] addPort：myPort forMode：NSDefaultRunLoopMode];</code></td></tr><tr><td>``</td></tr><tr><td><code>//创建签到消息。</code></td></tr><tr><td><code>NSPortMessage * messageObj = [[NSPortMessage alloc] initWithSendPort：outPort</code></td></tr><tr><td><code>receivePort：myPort组件：无]；</code></td></tr><tr><td>``</td></tr><tr><td><code>如果（messageObj）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//完成消息配置并立即发送。</code></td></tr><tr><td><code>[messageObj setMsgId：setMsgid：kCheckinMessage]；</code></td></tr><tr><td><code>[messageObj sendBeforeDate：[NSDate date]]；</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>######## 配置 NSMessagePort 对象</p><p>要与<code>NSMessagePort</code>对象建立本地连接，不能简单地在线程之间传递端口对象。远程消息端口必须按名称获取。要在 Cocoa 中实现此功能，需要使用特定名称注册您的本地端口，然后将该名称传递给远程线程，以便它可以获得用于通信的适当端口对象。清单 3-16 显示了要使用消息端口的情况下的端口创建和注册过程。</p><p><strong>清单 3-16</strong> 注册消息端口</p><table><thead><tr><th><code>NSPort * localPort = [[NSMessagePort alloc] init];</code></th></tr></thead><tbody><tr><td>``</td></tr><tr><td><code>//配置对象并将其添加到当前运行循环中。</code></td></tr><tr><td><code>[localPort setDelegate：self];</code></td></tr><tr><td><code>[[NSRunLoop currentRunLoop] addPort：localPort forMode：NSDefaultRunLoopMode];</code></td></tr><tr><td>``</td></tr><tr><td><code>//使用特定名称注册端口。名称必须唯一。</code></td></tr><tr><td><code>NSString * localPortName = [NSString stringWithFormat：@“ MyPortName”];</code></td></tr><tr><td><code>[[NSMessagePortNameServer sharedInstance] registerPort：localPort</code></td></tr><tr><td><code>name：localPortName];</code></td></tr></tbody></table><p>######## 在 Core Foundation 中配置基于端口的输入源</p><p>本节说明如何使用 Core Foundation 在应用程序的主线程和辅助线程之间建立双向通信通道。</p><p>清单 3-17 显示了由应用程序的主线程调用以启动工作线程的代码。代码要做的第一件事是建立一个<code>CFMessagePortRef</code>不透明类型，以侦听来自工作线程的消息。工作线程需要使用端口名称进行连接，以便将字符串值传递到工作线程的入口点函数。在当前用户上下文中，端口名称通常应该是唯一的；否则，您可能会遇到冲突。</p><p><strong>清单 3-17</strong> 将 Core Foundation 消息端口附加到新线程</p><table><thead><tr><th><code>＃定义kThreadStackSize（8 * 4096）</code></th></tr></thead><tbody><tr><td>``</td></tr><tr><td><code>OSStatus MySpawnThread（）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//创建一个本地端口以接收响应。</code></td></tr><tr><td><code>CFStringRef myPortName;</code></td></tr><tr><td><code>CFMessagePortRef myPort;</code></td></tr><tr><td><code>CFRunLoopSourceRef rlSource;</code></td></tr><tr><td><code>CFMessagePortContext context = &#123;0，NULL，NULL，NULL，NULL&#125;;</code></td></tr><tr><td><code>布尔值shouldFreeInfo;</code></td></tr><tr><td>``</td></tr><tr><td><code>//用端口名创建一个字符串。</code></td></tr><tr><td><code>myPortName = CFStringCreateWithFormat（NULL，NULL，CFSTR（“ com.myapp.MainThread”））;</code></td></tr><tr><td>``</td></tr><tr><td><code>//创建端口。</code></td></tr><tr><td><code>myPort = CFMessagePortCreateLocal（NULL，</code></td></tr><tr><td><code>myPortName，</code></td></tr><tr><td><code>＆MainThreadResponseHandler，</code></td></tr><tr><td><code>＆context，</code></td></tr><tr><td><code>＆shouldFreeInfo）;</code></td></tr><tr><td>``</td></tr><tr><td><code>如果（myPort！= NULL）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//端口已成功创建。</code></td></tr><tr><td><code>//现在为其创建一个运行循环源。</code></td></tr><tr><td><code>rlSource = CFMessagePortCreateRunLoopSource（NULL，myPort，0）;</code></td></tr><tr><td>``</td></tr><tr><td><code>如果（rlSource）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//将源添加到当前的运行循环中。</code></td></tr><tr><td><code>CFRunLoopAddSource（CFRunLoopGetCurrent（），rlSource，kCFRunLoopDefaultMode）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//一旦安装，就可以释放它们。</code></td></tr><tr><td><code>CFRelease（myPort）;</code></td></tr><tr><td><code>CFRelease（rlSource）;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>//创建线程并继续处理。</code></td></tr><tr><td><code>MPTaskID taskID;</code></td></tr><tr><td><code>return（MPCreateTask（＆ServerThreadEntryPoint，</code></td></tr><tr><td><code>（void *）myPortName，</code></td></tr><tr><td><code>kThreadStackSize，</code></td></tr><tr><td><code>空值，</code></td></tr><tr><td><code>空值，</code></td></tr><tr><td><code>空值，</code></td></tr><tr><td><code>0，</code></td></tr><tr><td><code>＆taskID））;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>安装端口并启动线程后，主线程可以在等待线程检入的同时继续其常规执行。当检入消息到达时，它将分派给主线程的<code>MainThreadResponseHandler</code>函数，如清单 3-18 所示。。此函数提取工作线程的端口名，并创建用于将来通信的管道。</p><p><strong>清单 3-18</strong> 接收签入消息</p><table><thead><tr><th><code>#define kCheckinMessage 100</code></th></tr></thead><tbody><tr><td>``</td></tr><tr><td><code>//主线程端口消息处理程序</code></td></tr><tr><td><code>CFDataRef MainThreadResponseHandler（CFMessagePortRef local，</code></td></tr><tr><td><code>SInt32 msgid，</code></td></tr><tr><td><code>CFDataRef数据，</code></td></tr><tr><td><code>无效*信息）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>如果（msgid == kCheckinMessage）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>CFMessagePortRef messagePort;</code></td></tr><tr><td><code>CFStringRef threadPortName;</code></td></tr><tr><td><code>CFIndex bufferLength = CFDataGetLength（data）;</code></td></tr><tr><td><code>UInt8 * buffer = CFAllocatorAllocate（NULL，bufferLength，0）;</code></td></tr><tr><td>``</td></tr><tr><td><code>CFDataGetBytes（data，CFRangeMake（0，bufferLength），buffer）;</code></td></tr><tr><td><code>threadPortName = CFStringCreateWithBytes（NULL，buffer，bufferLength，kCFStringEncodingASCII，FALSE）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//您必须按名称获取远程消息端口。</code></td></tr><tr><td><code>messagePort = CFMessagePortCreateRemote（NULL，（CFStringRef）threadPortName）;</code></td></tr><tr><td>``</td></tr><tr><td><code>如果（messagePort）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//保留并保存线程的通讯端口，以备将来参考。</code></td></tr><tr><td><code>AddPortToListOfActiveThreads（messagePort）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//由于该端口由上一个函数保留，因此释放</code></td></tr><tr><td><code>// 在这里。</code></td></tr><tr><td><code>CFRelease（messagePort）;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>// 清理。</code></td></tr><tr><td><code>CFRelease（threadPortName）;</code></td></tr><tr><td><code>CFAllocatorDeallocate（NULL，buffer）;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>其他</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//处理其他消息。</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>返回NULL;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>配置了主线程后，剩下的唯一事情就是新创建的工作线程创建自己的端口并签入。清单 3-19 显示了工作线程的入口点函数。该函数提取主线程的端口名，并使用它来创建返回到主线程的远程连接。然后，该函数为其自身创建一个本地端口，将该端口安装在线程的运行循环上，并向主线程发送包含本地端口名称的签入消息。</p><p><strong>清单 3-19</strong> 设置线程结构</p><table><thead><tr><th><code>OSStatus ServerThreadEntryPoint（void *参数）</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>//创建到主线程的远程端口。</code></td></tr><tr><td><code>CFMessagePortRef mainThreadPort;</code></td></tr><tr><td><code>CFStringRef portName =（CFStringRef）param;</code></td></tr><tr><td>``</td></tr><tr><td><code>mainThreadPort = CFMessagePortCreateRemote（NULL，portName）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//释放在参数中传递的字符串。</code></td></tr><tr><td><code>CFRelease（端口名）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//为工作线程创建一个端口。</code></td></tr><tr><td><code>CFStringRef myPortName = CFStringCreateWithFormat（NULL，NULL，CFSTR（“ com.MyApp.Thread-％d”），MPCurrentTaskID（））;</code></td></tr><tr><td>``</td></tr><tr><td><code>//将端口存储在此线程的上下文信息中，以供以后参考。</code></td></tr><tr><td><code>CFMessagePortContext context = &#123;0，mainThreadPort，NULL，NULL，NULL&#125;;</code></td></tr><tr><td><code>布尔值shouldFreeInfo;</code></td></tr><tr><td><code>布尔值shouldAbort = TRUE;</code></td></tr><tr><td>``</td></tr><tr><td><code>CFMessagePortRef myPort = CFMessagePortCreateLocal（NULL，</code></td></tr><tr><td><code>myPortName，</code></td></tr><tr><td><code>＆ProcessClientRequest，</code></td></tr><tr><td><code>＆context，</code></td></tr><tr><td><code>＆shouldFreeInfo）;</code></td></tr><tr><td>``</td></tr><tr><td><code>如果（shouldFreeInfo）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//无法创建本地端口，因此请终止线程。</code></td></tr><tr><td><code>MPExit（0）;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>CFRunLoopSourceRef rlSource = CFMessagePortCreateRunLoopSource（NULL，myPort，0）;</code></td></tr><tr><td><code>如果（！rlSource）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//无法创建本地端口，因此请终止线程。</code></td></tr><tr><td><code>MPExit（0）;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>//将源添加到当前的运行循环中。</code></td></tr><tr><td><code>CFRunLoopAddSource（CFRunLoopGetCurrent（），rlSource，kCFRunLoopDefaultMode）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//一旦安装，就可以释放它们。</code></td></tr><tr><td><code>CFRelease（myPort）;</code></td></tr><tr><td><code>CFRelease（rlSource）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//打包端口名称并发送签入消息。</code></td></tr><tr><td><code>CFDataRef returnData = nil;</code></td></tr><tr><td><code>CFDataRef outData;</code></td></tr><tr><td><code>CFIndex stringLength = CFStringGetLength（myPortName）;</code></td></tr><tr><td><code>UInt8 * buffer = CFAllocatorAllocate（NULL，stringLength，0）;</code></td></tr><tr><td>``</td></tr><tr><td><code>CFStringGetBytes（myPortName，</code></td></tr><tr><td><code>CFRangeMake（0，stringLength），</code></td></tr><tr><td><code>kCFStringEncodingASCII，</code></td></tr><tr><td><code>0，</code></td></tr><tr><td><code>假，</code></td></tr><tr><td><code>缓冲，</code></td></tr><tr><td><code>stringLength，</code></td></tr><tr><td><code>空值）;</code></td></tr><tr><td>``</td></tr><tr><td><code>outData = CFDataCreate（NULL，buffer，stringLength）;</code></td></tr><tr><td>``</td></tr><tr><td><code>CFMessagePortSendRequest（mainThreadPort，kCheckinMessage，outData，0.1，0.0，NULL，NULL）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//清理线程数据结构。</code></td></tr><tr><td><code>CFRelease（outData）;</code></td></tr><tr><td><code>CFAllocatorDeallocate（NULL，buffer）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//进入运行循环。</code></td></tr><tr><td><code>CFRunLoopRun（）;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>一旦进入运行循环，该<code>ProcessClientRequest</code>函数将处理所有将来发送到线程端口的事件。该函数的实现取决于线程执行的工作类型，此处未显示。</p><h2 id="同步化"><a href="#同步化" class="headerlink" title="同步化"></a>同步化</h2><p>应用程序中存在多个线程带来了与从多个执行线程安全访问资源有关的潜在问题。修改同一资源的两个线程可能会以意想不到的方式相互干扰。例如，一个线程可能会覆盖另一个线程的更改，或者将应用程序置于未知且可能无效的状态。如果幸运的话，损坏的资源可能会导致明显的性能问题或崩溃，这些问题相对容易跟踪和修复。但是，如果您不走运，损坏可能会导致细微的错误，直到很久以后才会显现出来，或者这些错误可能需要对基础的编码假设进行重大检查。</p><p>在线程安全方面，好的设计是您拥有的最佳保护。避免共享资源并最小化线程之间的交互，使这些线程相互干扰的可能性降低。但是，并非总是可以实现完全无干扰的设计。如果您的线程必须进行交互，则需要使用同步工具来确保它们在交互时安全地进行交互。</p><p>OS X 和 iOS 提供了许多同步工具供您使用，从提供互斥访问的工具到在应用程序中正确排序事件的工具。以下各节描述了这些工具以及如何在代码中使用它们以影响对程序资源的安全访问。</p><h4 id="同步工具"><a href="#同步工具" class="headerlink" title="同步工具"></a>同步工具</h4><p>为了防止不同的线程意外更改数据，可以将应用程序设计为不存在同步问题，也可以使用同步工具。尽管最好完全避免同步问题，但这并不总是可能的。以下各节介绍了可供您使用的同步工具的基本类别。</p><h6 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h6><p>原子操作是一种简单的同步形式，适用于简单的数据类型。原子操作的优点是它们不会阻塞竞争线程。对于简单的操作（例如增加计数器变量），这比使用锁可以带来更好的性能。</p><p>OS X 和 iOS 包含许多操作，可以对 32 位和 64 位值执行基本的数学和逻辑运算。这些操作包括比较和交换，测试和设置以及测试和清除操作的原子版本。有关受支持的原子操作的列表，请参见<code>/usr/include/libkern/OSAtomic.h</code>头文件或<code>atomic</code>手册页。</p><h6 id="内存壁垒和易失性变量"><a href="#内存壁垒和易失性变量" class="headerlink" title="内存壁垒和易失性变量"></a>内存壁垒和易失性变量</h6><p>为了获得最佳性能，编译器经常对汇编级指令进行重新排序，以使处理器的指令流水线尽可能完整。作为此优化的一部分，当编译器认为这样做不会产生不正确的数据时，可能会对访问主内存的指令进行重新排序。不幸的是，编译器并非总是能够检测到所有与内存相关的操作。如果看似独立的变量实际上相互影响，则编译器优化可能会以错误的顺序更新这些变量，从而产生可能不正确的结果。</p><p>内存屏障是一种非阻塞同步工具，用于确保内存操作以正确的顺序发生。内存屏障的作用类似于围栏，迫使处理器在允许执行位于屏障之后的加载和存储操作之前，完成位于屏障前面的所有加载和存储操作。内存屏障通常用于确保一个线程（但另一线程可见）的内存操作始终按预期的顺序发生。在这种情况下缺少内存屏障可能会使其他线程看到看似不可能的结果。（有关示例，请参阅 Wikipedia 条目中的<a href="http://en.wikipedia.org/wiki/Memory_barrier">内存障碍</a>。）要使用内存障碍，只需<code>OSMemoryBarrier</code>在代码中的适当位置调用该函数。</p><p>易失性变量将另一种类型的内存约束应用于单个变量。编译器通常通过将变量的值加载到寄存器中来优化代码。对于局部变量，这通常不是问题。但是，如果从另一个线程可见该变量，则这种优化可能会阻止另一个线程注意到对该变量的任何更改。将<code>volatile</code>关键字应用于变量会强制编译器每次使用时从内存中加载该变量。您可以声明一个变量，<code>volatile</code>好像它的值可以随时被编译器可能无法检测到的外部源更改一样。</p><p>由于内存屏障和易失性变量都减少了编译器可执行的优化次数，因此应谨慎使用它们，并且仅在需要确保正确性的地方使用它们。有关使用内存屏障的信息，请参见 <code>OSMemoryBarrier</code>手册页。</p><h6 id="锁具"><a href="#锁具" class="headerlink" title="锁具"></a>锁具</h6><p>锁是最常用的同步工具之一。您可以使用锁来保护代码的<em>关键部分</em>，这是一段代码，一次只能允许一个线程访问。例如，关键部分可能操纵特定的数据结构或一次使用最多支持一个客户端的某些资源。通过在此部分周围加锁，可以排除其他线程进行可能影响代码正确性的更改。</p><p>表 4-1 列出了程序员常用的一些锁。OS X 和 iOS 提供了大多数此类锁类型的实现，但并非全部。对于不受支持的锁类型，描述列说明了未在平台上直接实现这些锁的原因。</p><table><thead><tr><th align="left">锁</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">互斥体</td><td align="left">互斥（或<em>互斥</em>）锁充当资源周围的保护性屏障。互斥锁是一种信号量，它一次只能授予对一个线程的访问权限。如果正在使用互斥锁，而另一个线程试图获取该互斥锁，则该线程将阻塞，直到该互斥锁被其原始持有者释放为止。如果多个线程竞争同一个互斥锁，则一次只能访问一个。</td></tr><tr><td align="left">递归锁</td><td align="left">递归锁是互斥锁的一种变体。递归锁允许单个线程在释放它之前多次获取该锁。其他线程将保持阻塞状态，直到锁的所有者以与获取锁相同的次数释放锁。递归锁主要在递归迭代期间使用，但也可以在多个方法各自需要分别获取锁的情况下使用。</td></tr><tr><td align="left">读写锁</td><td align="left">读写锁也称为共享独占锁。这种类型的锁通常用于较大规模的操作，如果经常读取受保护的数据结构并仅偶尔进行修改，则可以显着提高性能。在正常操作期间，多个读取器可以同时访问数据结构。但是，当线程要写入结构时，它将阻塞，直到所有读取器都释放锁为止，此时，它获取了锁并可以更新结构。当写入线程正在等待锁定时，新的读取器线程将阻塞，直到写入线程完成。系统仅支持使用 POSIX 线程的读写锁。有关如何使用这些锁的更多信息，请参见<code>pthread</code>手册页。</td></tr><tr><td align="left">分布式锁</td><td align="left">分布式锁在进程级别提供互斥访问。与真正的互斥锁不同，分布式锁不会阻止进程或阻止其运行。它仅报告锁何时繁忙，并让进程决定如何进行。</td></tr><tr><td align="left">自旋锁</td><td align="left">自旋锁反复轮询其锁定条件，直到该条件变为 true。自旋锁最常用于多处理器系统，其中锁的预期等待时间很小。在这些情况下，轮询通常比阻塞线程更有效，这需要上下文切换和线程数据结构的更新。由于它们具有轮询性质，因此系统不提供自旋锁的任何实现，但是您可以在特定情况下轻松地实现它们。有关在内核中实现自旋锁的信息，请参见《_<a href="https://developer.apple.com/library/archive/documentation/Darwin/Conceptual/KernelProgramming/About/About.html#//apple_ref/doc/uid/TP30000905">内核编程指南》</a>_。</td></tr><tr><td align="left">双重检查锁</td><td align="left">双重检查锁是通过在获取锁之前测试锁定条件来减少获取锁的开销的尝试。由于双重检查的锁可能不安全，因此系统不会为它们提供明确的支持，因此不建议使用它们。</td></tr></tbody></table><p><strong>注意：</strong> 大多数类型的锁还包含一个内存屏障，以确保在进入关键部分之前完成所有先前的装载和存储指令。</p><p>有关如何使用锁的信息，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW16">使用锁</a>。</p><h6 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h6><p>条件是信号量的另一种类型，当某个条件为真时，它允许线程彼此发信号。条件通常用于指示资源的可用性或确保任务以特定顺序执行。当线程测试条件时，除非该条件已经为真，否则它将阻塞。它保持阻塞状态，直到其他线程显式更改并发出条件信号为止。条件和互斥锁之间的区别在于，可以允许多个线程同时访问该条件。条件更多是看门人，它根据某些指定的标准让不同的线程通过门。</p><p>使用条件的一种方法是管理未决事件池。当事件队列中有事件时，事件队列将使用条件变量来通知等待线程。如果一个事件到达，则队列将适当地发出条件信号。如果一个线程已经在等待，它将被唤醒，随后它将把事件从队列中拉出并进行处理。如果两个事件几乎同时进入队列，则队列将两次发出信号通知状态以唤醒两个线程。</p><p>该系统为几种不同技术的条件提供支持。条件的正确实现需要仔细的编码，因此，在将其用于自己的代码之前，应先查看“ <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW4">使用条件”</a>中的示例。</p><h6 id="执行选择器例程"><a href="#执行选择器例程" class="headerlink" title="执行选择器例程"></a>执行选择器例程</h6><p>可可应用程序具有一种以同步方式将消息传递到单个线程的便捷方法。在<code>NSObject</code>类声明对应用程序的活动线程的一个进行选择的方法。这些方法使您的线程可以异步传递消息，并确保它们将由目标线程同步执行。例如，您可以使用执行选择器消息将结果从分布式计算传递到应用程序的主线程或指定的协调器线程。每个执行选择器的请求都在目标线程的运行循环中排队，然后按照接收顺序对请求进行顺序处理。</p><p>有关执行选择器例程的摘要以及有关如何使用它们的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW44">Cocoa Perform Selector Sources</a>。</p><h4 id="同步成本和性能"><a href="#同步成本和性能" class="headerlink" title="同步成本和性能"></a>同步成本和性能</h4><p>同步有助于确保代码的正确性，但这样做会牺牲性能。即使在无争议的情况下，使用同步工具也会带来延迟。锁和原子操作通常涉及内存屏障和内核级同步的使用，以确保代码得到适当的保护。如果存在争用锁的情况，您的线程可能会阻塞并经历更大的延迟。</p><p>表 4-2 列出了在无争议的情况下与互斥锁和原子操作相关的一些近似成本。这些测量值代表了数千个样本的平均时间。但是，与线程创建时间一样，互斥锁获取时间（即使在无争议的情况下）也可能因处理器负载，计算机速度以及可用系统和程序内存量的不同而有很大差异。</p><table><thead><tr><th align="left">项目</th><th align="left">大概费用</th><th align="left">笔记</th></tr></thead><tbody><tr><td align="left">互斥体获取时间</td><td align="left">约 0.2 微秒</td><td align="left">这是无争议情况下的锁获取时间。如果该锁由另一个线程持有，则获取时间可能会更长。这些数字是通过分析在基于 Intel 的 iMac（具有 2 GHz Core Duo 处理器和 1 GB 运行 OS X v10.5 的 RAM）上的互斥锁获取期间生成的平均值和中值确定的。</td></tr><tr><td align="left">原子比较和交换</td><td align="left">约 0.05 微秒</td><td align="left">这是无争议情况下的比较和交换时间。这些数字是通过分析操作的平均值和中值确定的，是在基于 Intel 的 iMac 上生成的，该 iMac 具有 2 GHz Core Duo 处理器和 1 GB 运行 OS X v10.5 的 RAM。</td></tr></tbody></table><p>在设计并发任务时，正确性始终是最重要的因素，但是您也应该考虑性能因素。在多个线程下可以正确执行的代码，但是比在单个线程上运行的相同代码慢的代码，几乎没有改进。</p><p>如果要翻新现有的单线程应用程序，则应始终对关键任务的性能进行一组基准测量。添加其他线程后，您应该对这些相同的任务进行新的测量，并将多线程案例与单线程案例的性能进行比较。如果在调整代码后，线程无法提高性能，则您可能需要重新考虑您的特定实现或线程的使用。</p><p>有关性能和用于收集指标的工具的信息，请参阅*<a href="https://developer.apple.com/library/archive/documentation/Performance/Conceptual/PerformanceOverview/Introduction/Introduction.html#//apple_ref/doc/uid/TP40001410">性能概述</a>*。有关锁和原子操作成本的特定信息，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html#//apple_ref/doc/uid/10000057i-CH15-SW7">线程成本</a>。</p><h4 id="线程安全和信号"><a href="#线程安全和信号" class="headerlink" title="线程安全和信号"></a>线程安全和信号</h4><p>对于线程化应用程序，没有什么比处理信号问题引起更多的恐惧或困惑了。信号是一种低级 BSD 机制，可用于将信息传递给流程或以某种方式操纵它。一些程序使用信号来检测某些事件，例如子进程的死亡。系统使用信号终止失控过程并传达其他类型的信息。</p><p>信号的问题不是它们的作用，而是应用程序具有多个线程时的行为。在单线程应用程序中，所有信号处理程序都在主线程上运行。在多线程应用程序中，与特定硬件错误（例如非法指令）无关的信号会传递到当时正在运行的任何线程。如果同时运行多个线程，则将信号传递给系统碰巧的任何一个。换句话说，信号可以传递到应用程序的任何线程。</p><p>在应用程序中实现信号处理程序的第一条规则是避免假设哪个线程正在处理信号。如果特定线程要处理给定的信号，则需要制定某种方法在信号到达时通知该线程。您不能仅仅假设从该线程安装信号处理程序将导致信号传递到同一线程。</p><p>有关信号和安装信号处理程序的更多信息，请参见<code>signal</code>和<code>sigaction</code>手册页。</p><h4 id="线程安全设计的提示"><a href="#线程安全设计的提示" class="headerlink" title="线程安全设计的提示"></a>线程安全设计的提示</h4><p>同步工具是使代码线程安全的一种有用方法，但不是万能药。与非线程性能相比，使用过多的锁和其他类型的同步原语实际上会降低应用程序的线程性能。在安全和性能之间找到合适的平衡是一门需要经验的艺术。以下各节提供了一些技巧，以帮助您为应用程序选择适当的同步级别。</p><h6 id="完全避免同步"><a href="#完全避免同步" class="headerlink" title="完全避免同步"></a>完全避免同步</h6><p>对于您正在从事的任何新项目，甚至对于现有项目，设计代码和数据结构来避免需要同步都是最佳的解决方案。尽管锁和其他同步工具很有用，但它们确实会影响任何应用程序的性能。而且，如果总体设计导致特定资源之间的争用较高，则您的线程可能会等待更长的时间。</p><p>实施并发的最佳方法是减少并发任务之间的交互和相互依赖性。如果每个任务都在其自己的私有数据集上运行，则无需使用锁来保护该数据。即使在两个任务确实共享一个公共数据集的情况下，您也可以查看对该集进行分区的方式或为每个任务提供自己的副本。当然，复制数据集也有其成本，因此在做出决定之前，您必须权衡这些成本和同步成本。</p><h6 id="了解同步的局限性"><a href="#了解同步的局限性" class="headerlink" title="了解同步的局限性"></a>了解同步的局限性</h6><p>同步工具仅在应用程序中的所有线程一致使用时才有效。如果创建互斥量以限制对特定资源的访问，则所有线程在尝试操作该资源之前必须获取相同的互斥量。否则会破坏互斥锁提供的保护，这是程序员的错误。</p><h6 id="注意代码正确性的威胁"><a href="#注意代码正确性的威胁" class="headerlink" title="注意代码正确性的威胁"></a>注意代码正确性的威胁</h6><p>使用锁和内存屏障时，应始终仔细考虑它们在代码中的位置。即使是看似位置正确的锁，实际上也会使您陷入一种错误的安全感。以下一系列示例试图通过指出看似无害的代码中的缺陷来说明这个问题。基本前提是您具有一个包含一组不可变对象的可变数组。假设您要调用数组中第一个对象的方法。您可以使用以下代码进行操作：</p><table><thead><tr><th><code>NSLock * arrayLock = GetArrayLock（）;</code></th></tr></thead><tbody><tr><td><code>NSMutableArray * myArray = GetSharedArray（）;</code></td></tr><tr><td><code>id anObject;</code></td></tr><tr><td>``</td></tr><tr><td><code>[arrayLock锁];</code></td></tr><tr><td><code>anObject = [myArray objectAtIndex：0];</code></td></tr><tr><td><code>[arrayLock解锁]；</code></td></tr><tr><td>``</td></tr><tr><td><code>[anObject doSomething];</code></td></tr></tbody></table><p>由于数组是可变的，因此数组周围的锁可防止其他线程修改数组，直到获得所需的对象为止。并且由于您检索的对象本身是不可变的，因此在<code>doSomething</code>方法调用周围不需要锁定。</p><p>但是，前面的示例存在问题。如果释放锁并有另一个线程进入并从数组中删除所有对象，然后才有可能执行该<code>doSomething</code>方法，会发生什么？在没有垃圾回收的应用程序中，可以释放代码所持有的对象，而<code>anObject</code>指向无效的内存地址。要解决此问题，您可以决定简单地重新排列现有代码，并在调用后释放锁<code>doSomething</code>，如下所示：</p><table><thead><tr><th><code>NSLock * arrayLock = GetArrayLock（）;</code></th></tr></thead><tbody><tr><td><code>NSMutableArray * myArray = GetSharedArray（）;</code></td></tr><tr><td><code>id anObject;</code></td></tr><tr><td>``</td></tr><tr><td><code>[arrayLock锁];</code></td></tr><tr><td><code>anObject = [myArray objectAtIndex：0];</code></td></tr><tr><td><code>[anObject doSomething];</code></td></tr><tr><td><code>[arrayLock解锁]；</code></td></tr></tbody></table><p>通过<code>doSomething</code>在锁内移动调用，您的代码可确保在调用该方法时该对象仍然有效。不幸的是，如果该<code>doSomething</code>方法需要很长时间才能执行，则可能导致您的代码长时间保持锁定，从而可能导致性能瓶颈。</p><p>代码的问题不是关键区域定义不正确，而是实际问题未被理解。真正的问题是仅由其他线程的存在触发的内存管理问题。因为它可以被另一个线程释放，所以更好的解决方案是<code>anObject</code>在释放锁之前保留它。该解决方案解决了对象被释放的实际问题，并且这样做不会造成潜在的性能损失。</p><table><thead><tr><th><code>NSLock * arrayLock = GetArrayLock（）;</code></th></tr></thead><tbody><tr><td><code>NSMutableArray * myArray = GetSharedArray（）;</code></td></tr><tr><td><code>id anObject;</code></td></tr><tr><td>``</td></tr><tr><td><code>[arrayLock锁];</code></td></tr><tr><td><code>anObject = [myArray objectAtIndex：0];</code></td></tr><tr><td><code>[anObject保留]；</code></td></tr><tr><td><code>[arrayLock解锁]；</code></td></tr><tr><td>``</td></tr><tr><td><code>[anObject doSomething];</code></td></tr><tr><td><code>[anObject版本]；</code></td></tr></tbody></table><p>尽管以上示例本质上非常简单，但是它们确实说明了非常重要的一点。当涉及到正确性时，您必须超越明显的问题进行思考。内存管理和设计的其他方面也可能会受到多个线程的影响，因此您必须预先考虑这些问题。另外，您应该始终假设编译器在安全方面会做最坏的事情。这种了解和警惕应有助于您避免潜在的问题，并确保您的代码正常运行。</p><p>有关如何使程序具有线程安全性的其他示例，请参见“ <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafetySummary/ThreadSafetySummary.html#//apple_ref/doc/uid/10000057i-CH12-SW1">线程安全性摘要”</a>。</p><h6 id="当心死锁和活锁"><a href="#当心死锁和活锁" class="headerlink" title="当心死锁和活锁"></a>当心死锁和活锁</h6><p>每当线程尝试同时获取多个锁时，都有可能发生死锁。当两个不同的线程持有另一个线程需要的锁，然后尝试获取另一个线程持有的锁时，就会发生死锁。结果是每个线程都永久阻塞，因为它永远无法获取另一个锁。</p><p>活动锁类似于死锁，当两个线程竞争同一组资源时发生。在活动锁情况下，线程放弃其第一把锁，以尝试获取其第二把锁。一旦获得第二个锁，它将返回并尝试再次获取第一个锁。它之所以锁定，是因为它花费了所有时间释放一个锁并试图获取另一个锁，而不是进行任何实际工作。</p><p>避免出现死锁和活锁情况的最佳方法是一次只锁定一个。如果一次必须获取多个锁，则应确保其他线程不要尝试执行类似的操作。</p><h6 id="正确使用易失性变量"><a href="#正确使用易失性变量" class="headerlink" title="正确使用易失性变量"></a>正确使用易失性变量</h6><p>如果您已经在使用互斥锁来保护代码部分，则不要自动假定您需要使用<code>volatile</code>关键字来保护该部分中的重要变量。互斥锁包括一个内存屏障，以确保正确地排序装入和存储操作。将<code>volatile</code>关键字添加到关键部分中的变量后，每次访问该值时都会强制将其从内存中加载。两种同步技术的组合在特定情况下可能是必需的，但也会导致明显的性能损失。如果仅互斥量足以保护变量，请省略<code>volatile</code>关键字。</p><p>同样重要的是，不要使用易失性变量来避免使用互斥体。通常，互斥锁和其他同步机制是比易失性变量更好的方法来保护数据结构的完整性。的<code>volatile</code>关键字仅确保一个变量被从存储器加载，而不是存储在寄存器中。它不能确保您的代码正确访问该变量。</p><h4 id="使用原子操作"><a href="#使用原子操作" class="headerlink" title="使用原子操作"></a>使用原子操作</h4><p>非阻塞同步是一种执行某些类型的操作并避免锁定费用的方式。尽管锁是同步两个线程的有效方法，但是即使在无争议的情况下，获取锁也是相对昂贵的操作。相比之下，许多原子操作仅需花费一小部分时间即可完成，并且与锁一样有效。</p><p>原子运算使您可以对 32 位或 64 位值执行简单的数学和逻辑运算。这些操作依靠特殊的硬件指令（和可选的内存屏障）来确保给定的操作在再次访问受影响的内存之前完成。在多线程情况下，应始终使用包含内存屏障的原子操作来确保内存在线程之间正确同步。</p><p>表 4-3 列出了可用的原子数学和逻辑运算以及相应的函数名称。这些函数都在<code>/usr/include/libkern/OSAtomic.h</code>头文件中声明，您还可以在其中找到完整的语法。这些功能的 64 位版本仅在 64 位进程中可用。</p><table><thead><tr><th align="left">运作方式</th><th align="left">功能名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">加</td><td align="left"><code>OSAtomicAdd32``OSAtomicAdd32Barrier``OSAtomicAdd64``OSAtomicAdd64Barrier</code></td><td align="left">将两个整数值相加并将结果存储在指定的变量之一中。</td></tr><tr><td align="left">增量</td><td align="left"><code>OSAtomicIncrement32``OSAtomicIncrement32Barrier``OSAtomicIncrement64``OSAtomicIncrement64Barrier</code></td><td align="left">将指定的整数值增加 1。</td></tr><tr><td align="left">减量</td><td align="left"><code>OSAtomicDecrement32``OSAtomicDecrement32Barrier``OSAtomicDecrement64``OSAtomicDecrement64Barrier</code></td><td align="left">将指定的整数值减 1。</td></tr><tr><td align="left">逻辑或</td><td align="left"><code>OSAtomicOr32``OSAtomicOr32Barrier</code></td><td align="left">在指定的 32 位值和 32 位掩码之间执行逻辑或。</td></tr><tr><td align="left">逻辑与</td><td align="left"><code>OSAtomicAnd32``OSAtomicAnd32Barrier</code></td><td align="left">在指定的 32 位值和 32 位掩码之间执行逻辑与。</td></tr><tr><td align="left">逻辑异或</td><td align="left"><code>OSAtomicXor32``OSAtomicXor32Barrier</code></td><td align="left">在指定的 32 位值和 32 位掩码之间执行逻辑 XOR。</td></tr><tr><td align="left">比较并交换</td><td align="left"><code>OSAtomicCompareAndSwap32``OSAtomicCompareAndSwap32Barrier``OSAtomicCompareAndSwap64``OSAtomicCompareAndSwap64Barrier``OSAtomicCompareAndSwapPtr``OSAtomicCompareAndSwapPtrBarrier``OSAtomicCompareAndSwapInt``OSAtomicCompareAndSwapIntBarrier``OSAtomicCompareAndSwapLong``OSAtomicCompareAndSwapLongBarrier</code></td><td align="left">将变量与指定的旧值进行比较。如果两个值相等，则此函数将指定的新值分配给变量；否则，它什么都不做。比较和赋值作为一个原子操作完成，并且该函数返回一个布尔值，该布尔值指示是否实际发生了交换。</td></tr><tr><td align="left">测试并设定</td><td align="left"><code>OSAtomicTestAndSet``OSAtomicTestAndSetBarrier</code></td><td align="left">测试指定变量中的某个位，将该位设置为 1，然后将旧位的值作为布尔值返回。根据<code>(0x80 &gt;&gt; (n &amp; 7))</code>字节的公式测试位，<code>((char*)address + (n &gt;&gt; 3))</code>其中<code>n</code>是位号，<code>address</code>是指向变量的指针。该公式有效地将变量分解为 8 位大小的块，并按相反的顺序对每个块中的位进行排序。例如，要测试 32 位整数的最低位（位 0），您实际上应将位数指定为 7；同样，要测试最高阶位（位 32），请为位号指定 24。</td></tr><tr><td align="left">测试并清除</td><td align="left"><code>OSAtomicTestAndClear``OSAtomicTestAndClearBarrier</code></td><td align="left">测试指定变量中的某个位，将该位设置为 0，然后将旧位的值作为布尔值返回。根据<code>(0x80 &gt;&gt; (n &amp; 7))</code>字节的公式测试位，<code>((char*)address + (n &gt;&gt; 3))</code>其中<code>n</code>是位号，<code>address</code>是指向变量的指针。该公式有效地将变量分解为 8 位大小的块，并按相反的顺序对每个块中的位进行排序。例如，要测试 32 位整数的最低位（位 0），您实际上应将位数指定为 7；同样，要测试最高阶位（位 32），请为位号指定 24。</td></tr></tbody></table><p>大多数原子函数的行为应相对简单明了，并具有您所期望的。但是，清单 4-1 显示了原子测试设置和比较交换操作的行为，这些操作稍微复杂一些。对<code>OSAtomicTestAndSet</code>函数的前三个调用说明了对整数值使用的位操作公式及其结果可能与您期望的不同。最后两个调用显示了该<code>OSAtomicCompareAndSwap32</code>函数的行为。在所有情况下，当没有其他线程在操纵这些值时，将在无争议的情况下调用这些函数。</p><p><strong>清单 4-1</strong> 执行原子操作</p><table><thead><tr><th><code>int32_t theValue = 0;</code></th></tr></thead><tbody><tr><td><code>OSAtomicTestAndSet（0，＆theValue）;</code></td></tr><tr><td><code>// theValue现在为128。</code></td></tr><tr><td>``</td></tr><tr><td><code>theValue = 0;</code></td></tr><tr><td><code>OSAtomicTestAndSet（7，＆theValue）;</code></td></tr><tr><td><code>// theValue现在为1。</code></td></tr><tr><td>``</td></tr><tr><td><code>theValue = 0;</code></td></tr><tr><td><code>OSAtomicTestAndSet（15，＆theValue）</code></td></tr><tr><td><code>// theValue现在为256。</code></td></tr><tr><td>``</td></tr><tr><td><code>OSAtomicCompareAndSwap32（256，512，＆theValue）;</code></td></tr><tr><td><code>// theValue现在为512。</code></td></tr><tr><td>``</td></tr><tr><td><code>OSAtomicCompareAndSwap32（256，1024，＆theValue）;</code></td></tr><tr><td><code>// theValue仍然是512。</code></td></tr></tbody></table><p>有关原子操作的信息，请参见<code>atomic</code>手册页和<code>/usr/include/libkern/OSAtomic.h</code>头文件。</p><h4 id="使用锁"><a href="#使用锁" class="headerlink" title="使用锁"></a>使用锁</h4><p>锁是用于线程编程的基本同步工具。锁使您可以轻松保护大部分代码，从而可以确保该代码的正确性。OS X 和 iOS 为所有应用程序类型提供基本互斥锁，并且 Foundation 框架为特殊情况定义了互斥锁的一些其他变体。以下各节说明如何使用这些锁类型中的几种。</p><h6 id="使用-POSIX-互斥锁"><a href="#使用-POSIX-互斥锁" class="headerlink" title="使用 POSIX 互斥锁"></a>使用 POSIX 互斥锁</h6><p>POSIX 互斥锁在任何应用程序中都非常易于使用。要创建互斥锁，您需要声明并初始化一个<code>pthread_mutex_t</code>结构。要锁定和解锁互斥锁，请使用<code>pthread_mutex_lock</code> 和 <code>pthread_mutex_unlock</code>功能。清单 4-2 显示了初始化和使用 POSIX 线程互斥锁所需的基本代码。完成锁后，只需致电<code>pthread_mutex_destroy</code> 释放锁数据结构。</p><p><strong>清单 4-2</strong> 使用互斥锁</p><table><thead><tr><th><code>pthread_mutex_t互斥体;</code></th></tr></thead><tbody><tr><td><code>void MyInitFunction（）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>pthread_mutex_init（＆mutex，NULL）;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>void MyLockingFunction（）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>pthread_mutex_lock（＆mutex）;</code></td></tr><tr><td><code>// 做工作。</code></td></tr><tr><td><code>pthread_mutex_unlock（＆mutex）;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p><strong>注意：</strong> 前面的代码是一个简化的示例，旨在显示 POSIX 线程互斥函数的基本用法。您自己的代码应检查这些函数返回的错误代码并进行适当处理。</p><h6 id="使用-NSLock-类"><a href="#使用-NSLock-类" class="headerlink" title="使用 NSLock 类"></a>使用 NSLock 类</h6><p>一个 <code>NSLock</code>对象为 Cocoa 应用程序实现基本互斥量。所有锁（包括<code>NSLock</code>）的接口实际上都是由<code>NSLocking</code>协议定义的，协议定义了<code>lock</code>和<code>unlock</code>方法。您可以像使用任何互斥锁一样使用这些方法来获取和释放锁。</p><p>除了标准的锁定行为外，<code>NSLock</code>该类还添加了<code>tryLock</code> 和 <code>lockBeforeDate:</code>方法。该<code>tryLock</code>方法尝试获取锁，但是如果锁不可用则不会阻塞；相反，该方法仅返回<code>NO</code>。如果未在指定的时间限制内获取锁，则该<code>lockBeforeDate:</code>方法尝试获取锁，但取消阻塞线程（并返回<code>NO</code>）。</p><p>下面的示例演示如何使用<code>NSLock</code>对象来协调视觉显示的更新，该视觉显示的数据是由多个线程计算的。如果线程无法立即获取锁，则仅继续执行计算，直到可以获取锁并更新显示。</p><table><thead><tr><th><code>BOOL moreToDo = YES;</code></th></tr></thead><tbody><tr><td><code>NSLock * theLock = [[NSLock alloc] init];</code></td></tr><tr><td><code>...</code></td></tr><tr><td><code>而（moreToDo）&#123;</code></td></tr><tr><td><code>/ *再进行一次计算* /</code></td></tr><tr><td><code>/ *，直到没有其他事情可做为止。* /</code></td></tr><tr><td><code>如果（[theLock tryLock]）&#123;</code></td></tr><tr><td><code>/ *更新所有线程使用的显示。* /</code></td></tr><tr><td><code>[theLock解锁]；</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><h6 id="使用-synchronized-指令"><a href="#使用-synchronized-指令" class="headerlink" title="使用@synchronized 指令"></a>使用@synchronized 指令</h6><p>该<code>@synchronized</code>指令是在 Objective-C 代码中动态创建互斥锁的便捷方法。该<code>@synchronized</code>指令执行任何其他互斥锁将执行的操作-防止不同的线程同时获取同一锁。但是，在这种情况下，您不必直接创建互斥量或锁定对象。相反，您只需将任何 Objective-C 对象用作锁定令牌，如以下示例所示：</p><table><thead><tr><th><code>-（void）myMethod：（id）anObj</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>@synchronized（anObj）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//大括号之间的所有内容均受@synchronized指令保护。</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>传递给<code>@synchronized</code>指令的对象是用于区分受保护块的唯一标识符。如果在两个不同的线程中执行上述方法，并<code>anObj</code>在每个线程上为参数传递一个不同的对象，则每个线程将获得其锁并继续进行处理而不会被另一个线程阻塞。但是，如果在两种情况下都传递相同的对象，则其中一个线程将首先获取锁，而另一个线程将阻塞，直到第一个线程完成关键部分。</p><p>作为一种预防措施，该<code>@synchronized</code>块会向受保护的代码隐式添加一个异常处理程序。如果抛出异常，此处理程序将自动释放互斥量。这意味着，为了使用该<code>@synchronized</code>指令，还必须在代码中启用 Objective-C 异常处理。如果您不希望由隐式异常处理程序引起的额外开销，则应考虑使用锁类。</p><p>有关<code>@synchronized</code>指令的更多信息，请参见*<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjectiveC/Introduction/introObjectiveC.html#//apple_ref/doc/uid/TP30001163">Objective-C 编程语言</a>*。</p><h6 id="使用其他可可锁"><a href="#使用其他可可锁" class="headerlink" title="使用其他可可锁"></a>使用其他可可锁</h6><p>以下各节描述了使用其他几种类型的可可锁的过程。</p><p>######## 使用 NSRecursiveLock 对象</p><p>该<code>NSRecursiveLock</code>班定义一个锁，同一线程可以多次获取该锁，而不会导致线程死锁。递归锁跟踪成功获取了多少次。每次成功获取锁，必须通过相应的调用来平衡以解锁该锁。仅当所有锁定和解锁调用均达到平衡时，才实际释放该锁定，以便其他线程可以获取它。</p><p>顾名思义，这种类型的锁通常在递归函数内部使用，以防止递归阻塞线程。在非递归情况下，您可以类似地使用它来调用函数，这些函数的语义要求它们也具有锁定功能。这是一个简单的递归函数示例，该函数通过递归获取锁。如果您没有<code>NSRecursiveLock</code>为此代码使用对象，则当再次调用该函数时，线程将死锁。</p><table><thead><tr><th><code>NSRecursiveLock * theLock = [[NSRecursiveLock alloc] init];</code></th></tr></thead><tbody><tr><td>``</td></tr><tr><td><code>void MyRecursiveFunction（int value）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>[theLock锁];</code></td></tr><tr><td><code>如果（值！= 0）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>- 值;</code></td></tr><tr><td><code>MyRecursiveFunction（value）;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>[theLock解锁]；</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>MyRecursiveFunction（5）;</code></td></tr></tbody></table><p><strong>注意：</strong> 由于在所有锁调用与解锁调用平衡之前不会释放递归锁，因此您应仔细权衡使用性能锁的决定与潜在的性能影响。长时间持有任何锁都可能导致其他线程阻塞，直到递归完成为止。如果您可以重写代码以消除递归或不需要使用递归锁，则可能会获得更好的性能。</p><p>######## 使用 NSConditionLock 对象</p><p>一个<code>NSConditionLock</code>对象定义了一个互斥锁，该互斥锁可以使用特定的值进行锁定和解锁。您不应将这种类型的锁与条件混淆（请参阅<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-126424">条件</a>）。该行为在某种程度上类似于条件，但实现方式却大不相同。</p><p>通常，<code>NSConditionLock</code>当线程需要按特定顺序执行任务时（例如，当一个线程产生另一个线程消耗的数据时），您可以使用一个对象。生产者执行时，消费者使用特定于您的程序的条件来获取锁。（条件本身只是您定义的整数值。）生产者完成时，它将解锁锁，并将锁定条件设置为适当的整数值以唤醒使用者线程，然后消费者线程继续处理数据。</p><p><code>NSConditionLock</code>对象响应的锁定和解锁方法可以任意组合使用。例如，您可以将一条<code>lock</code>消息与<code>unlockWithCondition:</code>或 <code>lockWhenCondition:</code>的消息<code>unlock</code>。当然，后一种组合可以解锁该锁，但可能不会释放等待特定条件值的任何线程。</p><p>下面的示例显示如何使用条件锁来处理生产者－消费者问题。想象一个应用程序包含一个数据队列。生产者线程将数据添加到队列，而消费者线程从队列中提取数据。生产者不必等待特定的条件，但是必须等待锁可用，以便可以安全地将数据添加到队列中。</p><table><thead><tr><th><code>id condLock = [[NSConditionLock alloc] initWithCondition：NO_DATA];</code></th></tr></thead><tbody><tr><td>``</td></tr><tr><td><code>而（真）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>[condLock锁定]；</code></td></tr><tr><td><code>/ *将数据添加到队列。* /</code></td></tr><tr><td><code>[condLock unlockWithCondition：HAS_DATA];</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>因为锁的初始条件设置为<code>NO_DATA</code>，所以生产者线程应该在最初获取锁时没有任何麻烦。它用数据填充队列，并将条件设置为<code>HAS_DATA</code>。在后续迭代期间，生产者线程可以在到达时添加新数据，而不管队列是空还是仍有一些数据。它唯一阻止的时间是使用者线程从队列中提取数据。</p><p>因为使用者线程必须要处理数据，所以它使用特定条件在队列上等待。当生产者将数据放入队列时，消费者线程将唤醒并获取其锁。然后，它可以从队列中提取一些数据并更新队列状态。以下示例显示了使用者线程处理循环的基本结构。</p><table><thead><tr><th><code>而（真）</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>[condLock lockWhenCondition：HAS_DATA];</code></td></tr><tr><td><code>/ *从队列中删除数据。* /</code></td></tr><tr><td><code>[condLock unlockWithCondition：（isEmpty？NO_DATA：HAS_DATA）]；</code></td></tr><tr><td>``</td></tr><tr><td><code>//在本地处理数据。</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>######## 使用 NSDistributedLock 对象</p><p>该<code>NSDistributedLock</code>班 可以被多个主机上的多个应用程序用来限制对某些共享资源（例如文件）的访问。该锁本身实际上是使用文件系统项（如文件或目录）实现的互斥锁。为了使<code>NSDistributedLock</code>对象可用，该锁必须可由使用它的所有应用程序写入。这通常意味着将其放置在运行该应用程序的所有计算机都可以访问的文件系统上。</p><p>与其他类型的锁不同，<code>NSDistributedLock</code>它不符合<code>NSLocking</code>协议，因此没有<code>lock</code>方法。一种<code>lock</code>方法将阻止线程的执行，并要求系统以预定速率轮询锁。与其对您的代码强加惩罚，不如<code>NSDistributedLock</code>提供<code>tryLock</code> 方法，让您决定是否要轮询。</p><p>因为它是使用文件系统实现的，所以<code>NSDistributedLock</code>除非所有者明确释放对象，否则不会释放对象。如果您的应用程序在持有分布式锁的同时崩溃，则其他客户端将无法访问受保护的资源。在这种情况下，您可以使用<code>breakLock</code>打破现有锁的方法，以便您可以获取它。但是，通常应该避免破坏锁，除非您确定拥有进程已死并且无法释放锁。</p><p>与其他类型的锁一样，使用<code>NSDistributedLock</code>完对象后，可以通过调用<code>unlock</code>方法来释放它。</p><h4 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h4><p>条件是一种特殊类型的锁，可用于同步操作必须执行的顺序。它们与互斥锁有一个微妙的区别。等待某个条件的线程保持阻塞状态，直到该条件被另一个线程显式发出信号为止。</p><p>由于实现操作系统所涉及的微妙之处，即使代码未真正发出条件锁，也允许伪造成功返回条件锁。为了避免由这些虚假信号引起的问题，您应始终将谓词与条件锁结合使用。谓词是确定线程继续执行是否安全的更具体方法。该条件只是让您的线程处于睡眠状态，直到可以由信令线程设置谓词为止。</p><p>以下各节说明如何在代码中使用条件。</p><h6 id="使用-NSCondition-类"><a href="#使用-NSCondition-类" class="headerlink" title="使用 NSCondition 类"></a>使用 NSCondition 类</h6><p>的<code>NSCondition</code>类提供相同的语义 POSIX 的条件，但在单个对象包装二者所需的锁和条件数据结构。结果是可以像互斥锁一样锁定对象，然后像条件一样等待。</p><p>清单 4-3 显示了一个代码片段，演示了等待<code>NSCondition</code>对象的事件序列。该<code>cocoaCondition</code>变量包含一个<code>NSCondition</code>对象，并且该<code>timeToDoWork</code>变量是一个整数，在发出该信号之前立即从另一个线程递增。</p><p><strong>清单 4-3</strong> 使用可可条件</p><table><thead><tr><th><code>[cocoaCondition锁];</code></th></tr></thead><tbody><tr><td><code>一会儿（timeToDoWork &lt;= 0）</code></td></tr><tr><td><code>[cocoaCondition等待]；</code></td></tr><tr><td>``</td></tr><tr><td><code>timeToDoWork--;</code></td></tr><tr><td>``</td></tr><tr><td><code>//在这里做真实的工作。</code></td></tr><tr><td>``</td></tr><tr><td><code>[cocoaCondition解锁]；</code></td></tr></tbody></table><p>清单 4-4 显示了用于发出可可条件信号并增加谓词变量的代码。您应该始终在发出信号之前锁定该条件。</p><p><strong>清单 4-4</strong> 发出可可状况信号</p><table><thead><tr><th><code>[cocoaCondition锁];</code></th></tr></thead><tbody><tr><td><code>timeToDoWork ++;</code></td></tr><tr><td><code>[可可状态信号]；</code></td></tr><tr><td><code>[cocoaCondition解锁]；</code></td></tr></tbody></table><h6 id="使用-POSIX-条件"><a href="#使用-POSIX-条件" class="headerlink" title="使用 POSIX 条件"></a>使用 POSIX 条件</h6><p>POSIX 线程条件锁需要同时使用条件数据结构和互斥量。尽管两个锁结构是分开的，但互斥锁在运行时与条件结构密切相关。等待信号的线程应始终一起使用相同的互斥锁和条件结构。更改配对会导致错误。</p><p>清单 4-5 显示了条件和谓词的基本初始化和用法。在初始化条件和互斥锁之后，等待线程使用该<code>ready_to_go</code>变量作为其谓词进入 while 循环。仅当谓词已设置且随后发出条件通知时，等待线程才会唤醒并开始执行其工作。</p><p><strong>清单 4-5</strong> 使用 POSIX 条件</p><table><thead><tr><th><code>pthread_mutex_t互斥体;</code></th></tr></thead><tbody><tr><td><code>pthread_cond_t条件;</code></td></tr><tr><td><code>布尔值ready_to_go = true;</code></td></tr><tr><td>``</td></tr><tr><td><code>void MyCondInitFunction（）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>pthread_mutex_init（＆mutex）;</code></td></tr><tr><td><code>pthread_cond_init（＆condition，NULL）;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>void MyWaitOnConditionFunction（）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//锁定互斥锁。</code></td></tr><tr><td><code>pthread_mutex_lock（＆mutex）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//如果谓词已经设置，则while循环被绕过；</code></td></tr><tr><td><code>//否则，线程将休眠直到谓词被设置。</code></td></tr><tr><td><code>while（ready_to_go == false）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>pthread_cond_wait（＆condition，＆mutex）;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>// 做工作。（互斥锁应保持锁定状态。）</code></td></tr><tr><td>``</td></tr><tr><td><code>//重置谓词并释放互斥量。</code></td></tr><tr><td><code>ready_to_go = false;</code></td></tr><tr><td><code>pthread_mutex_unlock（＆mutex）;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>信令线程既负责设置谓词，也负责将信号发送到条件锁。 清单 4-6 显示了实现此行为的代码。在此示例中，条件在互斥锁内部发出信号，以防止在等待条件的线程之间发生竞争条件。</p><p><strong>清单 4-6 发</strong> 信号通知条件锁定</p><table><thead><tr><th><code>void SignalThreadUsingCondition（）</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>//此时，应该有另一个线程要做的工作。</code></td></tr><tr><td><code>pthread_mutex_lock（＆mutex）;</code></td></tr><tr><td><code>ready_to_go = true;</code></td></tr><tr><td>``</td></tr><tr><td><code>//通知另一个线程开始工作。</code></td></tr><tr><td><code>pthread_cond_signal（＆condition）;</code></td></tr><tr><td>``</td></tr><tr><td><code>pthread_mutex_unlock（＆mutex）;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p><strong>注意：</strong> 前面的代码是一个简化的示例，旨在显示 POSIX 线程条件函数的基本用法。您自己的代码应检查这些函数返回的错误代码并进行适当处理。</p><h2 id="线程安全摘要"><a href="#线程安全摘要" class="headerlink" title="线程安全摘要"></a>线程安全摘要</h2><p>本附录描述了 OS X 和 iOS 中某些关键框架的高级线程安全性。本附录中的信息可能会更改。</p><h4 id="可可"><a href="#可可" class="headerlink" title="可可"></a>可可</h4><p>从多个线程使用可可的准则包括：</p><ul><li>不可变对象通常是线程安全的。创建它们之后，就可以安全地在线程之间传递这些对象。另一方面，可变对象通常不是线程安全的。要在线程应用程序中使用可变对象，应用程序必须适当地同步。有关更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafetySummary/ThreadSafetySummary.html#//apple_ref/doc/uid/20000736-126010">可变与不可变</a>。</li><li>许多被认为“线程不安全”的对象仅在多个线程中使用是不安全的。只要一次仅一个线程，就可以从任何线程使用许多这些对象。专门调出应用程序主线程的对象就这样被调出。</li><li>应用程序的主线程负责处理事件。尽管如果事件路径中包含其他线程，Application Kit 仍可以继续工作，但是操作可能会不按顺序进行。</li><li>如果要使用线程绘制视图，请在的<code>lockFocusIfCanDraw</code>和<code>unlockFocus</code>方法之间将所有绘制代码括在括号中<code>NSView</code>。</li><li>要将 POSIX 线程与 Cocoa 一起使用，必须首先将 Cocoa 置于多线程模式。有关更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html#//apple_ref/doc/uid/20000738-125024">在 Cocoa 应用程序中使用 POSIX 线程</a>。</li></ul><h6 id="基础框架线程安全"><a href="#基础框架线程安全" class="headerlink" title="基础框架线程安全"></a>基础框架线程安全</h6><p>有一个误解，认为 Foundation 框架是线程安全的，而 Application Kit 框架不是。不幸的是，这是一个粗略的概括并且有些误导。每个框架都有线程安全的区域和不是线程安全的区域。以下各节描述了 Foundation 框架的一般线程安全性。</p><p>######## 线程安全的类和函数</p><p>以下类和函数通常被认为是线程安全的。您可以从多个线程使用同一实例，而无需先获取锁。</p><ul><li><code>NSArray</code></li><li><code>NSAssertionHandler</code></li><li><code>NSAttributedString</code></li><li><code>NSBundle</code></li><li><code>NSCalendar</code></li><li><code>NSCalendarDate</code></li><li><code>NSCharacterSet</code></li><li><code>NSConditionLock</code></li><li><code>NSConnection</code></li><li><code>NSData</code></li><li><code>NSDate</code></li><li><code>NSDateFormatter</code></li><li><code>NSDecimal</code> 功能</li><li><code>NSDecimalNumber</code></li><li><code>NSDecimalNumberHandler</code></li><li><code>NSDeserializer</code></li><li><code>NSDictionary</code></li><li><code>NSDistantObject</code></li><li><code>NSDistributedLock</code></li><li><code>NSDistributedNotificationCenter</code></li><li><code>NSException</code></li><li><code>NSFileManager</code></li><li><code>NSFormatter</code></li><li><code>NSHost</code></li><li><code>NSJSONSerialization</code></li><li><code>NSLock</code></li><li><code>NSLog</code>/<code>NSLogv</code></li><li><code>NSMethodSignature</code></li><li><code>NSNotification</code></li><li><code>NSNotificationCenter</code></li><li><code>NSNumber</code></li><li><code>NSNumberFormatter</code></li><li><code>NSObject</code></li><li><code>NSOrderedSet</code></li><li><code>NSPortCoder</code></li><li><code>NSPortMessage</code></li><li><code>NSPortNameServer</code></li><li><code>NSProgress</code></li><li><code>NSProtocolChecker</code></li><li><code>NSProxy</code></li><li><code>NSRecursiveLock</code></li><li><code>NSSet</code></li><li><code>NSString</code></li><li><code>NSThread</code></li><li><code>NSTimer</code></li><li><code>NSTimeZone</code></li><li><code>NSUserDefaults</code></li><li><code>NSValue</code></li><li><code>NSXMLParser</code></li><li>对象分配和保留计数功能</li><li>区域和记忆功能</li></ul><p>######## 线程不安全类</p><p>以下类和函数通常不是线程安全的。在大多数情况下，您可以从任何线程使用这些类，只要一次仅从一个线程使用它们即可。检查类文档以获取更多详细信息。</p><ul><li><code>NSArchiver</code></li><li><code>NSAutoreleasePool</code></li><li><code>NSCoder</code></li><li><code>NSCountedSet</code></li><li><code>NSEnumerator</code></li><li><code>NSFileHandle</code></li><li><code>NSHashTable</code> 功能</li><li><code>NSInvocation</code></li><li><code>NSMapTable</code> 功能</li><li><code>NSMutableArray</code></li><li><code>NSMutableAttributedString</code></li><li><code>NSMutableCharacterSet</code></li><li><code>NSMutableData</code></li><li><code>NSMutableDictionary</code></li><li><code>NSMutableOrderedSet</code></li><li><code>NSMutableSet</code></li><li><code>NSMutableString</code></li><li><code>NSNotificationQueue</code></li><li><code>NSPipe</code></li><li><code>NSPort</code></li><li><code>NSProcessInfo</code></li><li><code>NSRunLoop</code></li><li><code>NSScanner</code></li><li><code>NSSerializer</code></li><li><code>NSTask</code></li><li><code>NSUnarchiver</code></li><li><code>NSUndoManager</code></li><li>用户名和主目录功能</li></ul><p>请注意，尽管<code>NSArchiver</code>，<code>NSCoder</code>和<code>NSEnumerator</code>对象本身都是线程安全的，但在此处列出它们是因为在使用它们时更改由它们包装的数据对象并不安全。例如，对于归档器，更改要归档的对象图是不安全的。对于枚举，任何线程更改枚举集合都是不安全的。</p><p>######## 仅主线程类</p><p>只能在应用程序的主线程中使用以下类。</p><ul><li><code>NSAppleScript</code></li></ul><p>######## 可变与不可变</p><p>不变的对象通常是线程安全的；创建它们之后，就可以安全地在线程之间传递这些对象。当然，当使用不可变对象时，您仍然需要记住正确使用引用计数。如果不当释放了一个未保留的对象，则稍后可能会导致异常。</p><p>可变对象通常不是线程安全的。要在线程应用程序中使用可变对象，应用程序必须使用锁同步对它们的访问。（有关更多信息，请参阅<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW2">原子操作</a>）。通常，当涉及到突变时，收集类（例如<code>NSMutableArray</code>，<code>NSMutableDictionary</code>）不是线程安全的。也就是说，如果一个或多个线程正在更改同一阵列，则可能会出现问题。您必须锁定发生读写的地方，以确保线程安全。</p><p>即使某个方法声称要返回一个不可变的对象，您也绝不能简单地假设返回的对象是不可变的。根据方法的实现，返回的对象可能是可变的或不可变的。例如，返回类型为的方法<code>NSString</code>可能会<code>NSMutableString</code>由于其实现而实际上返回 a 。如果要保证所拥有的对象是不可变的，则应制作不可变的副本。</p><p>######## 再入</p><p>只有在操作“调出”同一对象或不同对象上的其他操作的情况下，才可以重入。保留和释放物体是一种有时被忽略的“召唤”。</p><p>下表列出了 Foundation 框架中明确可重入的部分。所有其他类别可能会也可能不会重入，或者将来可能会重入。尚未对折返进行完整的分析，此列表可能并不详尽。</p><ul><li>分布式对象</li><li><code>NSConditionLock</code></li><li><code>NSDistributedLock</code></li><li><code>NSLock</code></li><li><code>NSLog</code>/<code>NSLogv</code></li><li><code>NSNotificationCenter</code></li><li><code>NSRecursiveLock</code></li><li><code>NSRunLoop</code></li><li><code>NSUserDefaults</code></li></ul><p>######## 类初始化</p><p>Objective-C 运行时系统发送一个 <code>initialize</code>在类收到任何其他消息之前，向每个类对象发送消息。这使该类有机会设置其运行时环境在使用之前。在多线程应用程序中，运行时保证只有一个线程（恰好将第一条消息发送给类的线程）执行该<code>initialize</code>方法。如果在第一个线程仍在该<code>initialize</code>方法中时第二个线程尝试向该类发送消息，则第二个线程将阻塞直到该<code>initialize</code>方法完成执行。同时，第一个线程可以继续调用该类上的其他方法。该<code>initialize</code>方法不应依赖于该类的第二个线程调用方法。如果是这样，则两个线程将陷入僵局。</p><p>由于 OS X 版本 10.1.x 和更早版本中的错误，一个线程可以在另一个线程完成执行该类的<code>initialize</code>方法之前将消息发送给该类。然后，线程可以访问尚未完全初始化的值，这可能会使应用程序崩溃。如果遇到此问题，则需要引入锁以防止在初始化值之前访问值，或者强制类在成为多线程之前对其进行初始化。</p><p>######## 自动释放池</p><p>每个线程维护自己的<code>NSAutoreleasePool</code>对象堆栈。Cocoa 希望在当前线程的堆栈上始终有一个自动释放池。如果池不可用，则不会释放对象，并且会泄漏内存。一个<code>NSAutoreleasePool</code>对象会自动创建并在基于应用程序套件应用的主线程摧毁，但辅助线程（和基金会只应用）必须在使用前，可可创建自己的。如果您的线程是长期存在的，并可能生成许多自动释放的对象，您应该定期销毁并创建自动释放池（就像 Application Kit 在主线程上一样）；否则，自动释放的对象会堆积，并且您的内存占用也会增加。如果分离的线程不使用 Cocoa，则无需创建自动释放池。</p><p>######## 运行循环</p><p>每个线程只有一个运行循环。但是，每个运行循环以及每个线程都有自己的一组输入模式，这些输入模式确定运行运行循环时侦听哪些输入源。一个运行循环中定义的输入模式不会影响另一个运行循环中定义的输入模式，即使它们的名称相同。</p><p>如果您的应用程序基于 Application Kit，则主线程的运行循环将自动运行，但是辅助线程（和仅基金会的应用程序）必须自己运行运行循环。如果分离的线程未进入运行循环，则该线程将在分离的方法完成执行后立即退出。</p><p>尽管有一些外表，但<code>NSRunLoop</code>该类不是线程安全的。您只能从拥有它的线程中调用此类的实例方法。</p><h6 id="应用套件框架线程安全"><a href="#应用套件框架线程安全" class="headerlink" title="应用套件框架线程安全"></a>应用套件框架线程安全</h6><p>以下各节描述了 Application Kit 框架的一般线程安全性。</p><p>######## 线程不安全类</p><p>以下类和函数通常不是线程安全的。在大多数情况下，您可以从任何线程使用这些类，只要一次仅从一个线程使用它们即可。检查类文档以获取更多详细信息。</p><ul><li><code>NSGraphicsContext</code>。有关更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafetySummary/ThreadSafetySummary.html#//apple_ref/doc/uid/10000057i-CH12-126712">NSGraphicsContext 限制</a>。</li><li><code>NSImage</code>。有关更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafetySummary/ThreadSafetySummary.html#//apple_ref/doc/uid/10000057i-CH12-126728">NSImage 限制</a>。</li><li><code>NSResponder</code></li><li><code>NSWindow</code>及其所有后代。有关更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafetySummary/ThreadSafetySummary.html#//apple_ref/doc/uid/10000057i-CH12-123364">窗口限制</a>。</li></ul><p>######## 仅主线程类</p><p>只能在应用程序的主线程中使用以下类。</p><ul><li><code>NSCell</code> 及其所有后代</li><li><code>NSView</code>及其所有后代。有关更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafetySummary/ThreadSafetySummary.html#//apple_ref/doc/uid/10000057i-CH12-123427">NSView 限制</a>。</li></ul><p>######## 窗口限制</p><p>您可以在辅助线程上创建一个窗口。应用程序包确保与窗口关联的数据结构在主线程上被重新分配，以避免出现竞争情况。窗口对象可能会在同时处理大量窗口的应用程序中泄漏。</p><p>您可以在辅助线程上创建模式窗口。当主线程运行模式循环时，应用程序工具包将阻止正在调用的辅助线程。</p><p>######## 事件处理限制</p><p>应用程序的主线程负责处理事件。主线程是的<code>run</code>方法中被阻塞的线程<code>NSApplication</code>，通常在应用程序的<code>main</code>函数中调用。如果事件路径中涉及其他线程，则 Application Kit 继续工作时，操作可能会不按顺序进行。例如，如果两个不同的线程正在响应按键事件，则可能会乱序接收按键。通过让主线程处理事件，您可以获得更一致的用户体验。接收到事件后，如果需要，可以将事件调度到辅助线程进行进一步处理。</p><p>您可以从辅助线程调用<code>postEvent:atStart:</code>方法，<code>NSApplication</code>以将事件发布到主线程的事件队列中。但是，不能保证有关用户输入事件的顺序。应用程序的主线程仍负责处理事件队列中的事件。</p><p>######## 绘图限制</p><p>使用其图形功能和类（包括<code>NSBezierPath</code>和<code>NSString</code>类）进行绘制时，Application Kit 通常是线程安全的。以下各节介绍了使用特定类的详细信息。有关绘图和螺纹的更多信息，请参见《_<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CocoaDrawingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40003290">可可绘图指南》</a>_。</p><p>########## NSView 限制</p><p>该<code>NSView</code>班通常不是线程安全的。您<code>NSView</code>仅应从应用程序的主线程创建，销毁，调整大小，移动对象并执行其他操作。从辅助线程进行绘图是线程安全的，只要将绘图调用与<code>lockFocusIfCanDraw</code> 和 <code>unlockFocus</code>。</p><p>如果一个应用程序的一个次级线程想要使视图的部分是主要的线程上重新绘制，它必须这样做使用的方法，如<code>display</code>，<code>setNeedsDisplay:</code>，<code>setNeedsDisplayInRect:</code>，或<code>setViewsNeedDisplay:</code>。相反，它应该向主线程发送一条消息，或使用<code>performSelectorOnMainThread:withObject:waitUntilDone:</code> 方法代替。</p><p>视图系统的图形状态（gstates）是每个线程的。使用图形状态曾经是在单线程应用程序上获得更好绘图性能的一种方式，但是现在不再如此。错误使用图形状态实际上会导致绘制代码的效率低于在主线程中绘制的效率。</p><p>########## NSGraphicsContext 限制</p><p>该<code>NSGraphicsContext</code>班表示基础图形系统提供的绘图上下文。每个<code>NSGraphicsContext</code>实例都拥有自己独立的图形状态：坐标系，剪辑，当前字体等。在每个<code>NSWindow</code>实例的主线程上自动创建该类的实例。如果您从辅助线程进行任何绘图，<code>NSGraphicsContext</code>则会专门为该线程创建一个新的实例。</p><p>如果从辅助线程进行任何绘图，则必须手动刷新绘图调用。Cocoa 不会自动使用从辅助线程绘制的内容来更新视图，因此您需要在完成绘制时调用<code>flushGraphics</code>方法<code>NSGraphicsContext</code>。如果您的应用程序仅从主线程绘制内容，则无需刷新绘制调用。</p><p>########## NSImage 限制</p><p>一个线程可以创建一个<code>NSImage</code>对象，绘制到图像缓冲区，然后将其传递给主线程进行绘制。基础图像缓存在所有线程之间共享。有关图像以及缓存如何工作的更多信息，请参见*<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CocoaDrawingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40003290">Cocoa Drawing Guide</a>*。</p><h6 id="核心数据框架"><a href="#核心数据框架" class="headerlink" title="核心数据框架"></a>核心数据框架</h6><p>尽管有一些使用注意事项，但 Core Data 框架通常支持线程化。有关这些警告信息，请参阅并发与核心数据的*<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreData/index.html#//apple_ref/doc/uid/TP40001075">核心数据编程指南</a>*。</p><h4 id="核心基础"><a href="#核心基础" class="headerlink" title="核心基础"></a>核心基础</h4><p>Core Foundation 具有足够的线程安全性，因此，如果谨慎编程，就不会遇到与竞争线程有关的任何问题。在常见情况下，例如查询，保留，释放和传递不可变对象时，它是线程安全的。即使是可能从多个线程中查询的中央共享对象，也是可靠的线程安全的。</p><p>像 Cocoa 一样，当涉及对象或其内容的突变时，Core Foundation 也不是线程安全的。例如，正如您可能期望的那样，修改可变数据或可变数组对象不是线程安全的，但修改不可变数组内部的对象也不是线程安全的。原因之一就是性能，这在这些情况下至关重要。此外，通常无法在此级别上实现绝对线程安全。例如，您不能排除由于保留从集合中获取的对象而导致的不确定行为。在进行调用以保留包含的对象之前，可能会释放集合本身。</p><p>在要从多个线程访问和变异的 Core Foundation 对象的情况下，您的代码应通过在访问点使用锁来防止同时访问。例如，枚举 Core Foundation 数组对象的代码应在枚举块周围使用适当的锁定调用，以防止其他人更改该数组。</p><h2 id="词汇表"><a href="#词汇表" class="headerlink" title="词汇表"></a>词汇表</h2><ul><li><p>应用</p><p>一种特定的<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Glossary/Glossary.html#//apple_ref/doc/uid/10000057i-CH13-SW3">程序</a>样式，向用户显示图形界面。</p></li><li><p>健康）状况</p><p>用于同步对资源的访问的构造。在其他条件明确指示条件之前，不允许等待条件的线程继续进行。</p></li><li><p>关键部分</p><p>一次只能由一个线程执行的一部分代码。</p></li><li><p>输入源</p><p>线程的异步事件的源。输入源可以基于端口或手动触发，并且必须附加到线程的运行循环中。</p></li><li><p>可连接线程</p><p>终止后不会立即回收其资源的线程。必须先显式地分离可连接线程，否则必须由另一个线程将其连接，才能回收资源。可连接线程为与它们连接的线程提供返回值。</p></li><li><p>主线</p><p>创建其拥有进程时创建的一种特殊类型的<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Glossary/Glossary.html#//apple_ref/doc/uid/10000057i-CH13-SW1">线程</a>。当程序的主线程退出时，该过程结束。</p></li><li><p>互斥体</p><p>提供互斥访问共享资源的锁。互斥锁一次只能由一个线程持有。尝试获取由其他线程持有的互斥锁会使当前线程进入休眠状态，直到最终获取该锁为止。</p></li><li><p>操作对象</p><p><code>NSOperation</code>类的实例。操作对象将与任务关联的代码和数据包装到可执行单元中。</p></li><li><p>操作队列</p><p><code>NSOperationQueue</code>类的实例。操作队列管理操作对象的执行。</p></li><li><p>处理</p><p>应用程序或程序的运行时实例。进程具有自己的虚拟内存空间和系统资源（包括端口权限），与分配给其他程序的资源无关。一个进程始终至少包含一个线程（主线程），并且可以包含任意数量的附加线程。</p></li><li><p>程序</p><p>可以运行代码和资源以执行某些任务的组合。程序无需具有图形用户界面，尽管图形应用程序也被视为程序。</p></li><li><p>递归锁</p><p>可以由同一线程多次锁定的锁。</p></li><li><p>运行循环</p><p>事件处理循环，在此循环中，事件被接收并调度到适当的处理程序。</p></li><li><p>运行循环模式</p><p>与特定名称关联的输入源，计时器源和运行循环观察器的集合。当以特定的“模式”运行时，运行循环仅监视与该模式关联的源和观察者。</p></li><li><p>运行循环对象</p><p><code>NSRunLoop</code>类或<code>CFRunLoopRef</code>不透明类型的实例。这些对象提供了用于在线程中实现事件处理循环的接口。</p></li><li><p>运行循环观察器</p><p>运行循环执行的不同阶段中的通知的接收者。</p></li><li><p>信号</p><p>受保护的变量，用于限制对共享资源的访问。互斥量和条件都是信号灯的不同类型。</p></li><li><p>任务</p><p>要执行的工作量。</p></li><li><p>线</p><p>流程中的执行流程。每个线程都有自己的堆栈空间，但在同一进程中与其他线程共享内存。</p></li><li><p>计时器源</p><p>线程的同步事件的源。计时器在预定的将来时间生成一次或重复事件。</p></li></ul><h2 id="文档修订历史"><a href="#文档修订历史" class="headerlink" title="文档修订历史"></a>文档修订历史</h2><p>下表描述了对《<em>线程编程指南》</em>的更改。</p><table><thead><tr><th><strong>日期</strong></th><th><strong>笔记</strong></th></tr></thead><tbody><tr><td>2014-07-15</td><td>从线程安全的类列表中删除了 NSXMLDocument。</td></tr><tr><td>2013-10-22</td><td>将 NSXMLParser 和 NSXMLDocument 添加到线程安全对象列表。</td></tr><tr><td>2013-08-08</td><td>删除了过时的信息。</td></tr><tr><td>2010-04-28</td><td>更正了错别字。</td></tr><tr><td>2009-05-22</td><td>有关操作对象的信息已移至《并发编程指南》。仅将本书重点放在线程上。</td></tr><tr><td>2008-10-15</td><td>更新了有关操作对象和操作队列的示例代码。</td></tr><tr><td>2008-03-21</td><td>已针对 iOS 更新。</td></tr><tr><td>2008-02-08</td><td>对线程相关的概念和任务进行了重大的重写和更新。</td></tr><tr><td></td><td>添加了有关配置线程的更多信息。</td></tr><tr><td></td><td>将同步工具部分重组为一章，并添加了有关原子操作，内存屏障和易失变量的信息。</td></tr><tr><td></td><td>添加了有关运行循环的使用和配置的更多详细信息。</td></tr><tr><td></td><td>更改了<em>多线程编程主题中的</em>文档标题。</td></tr><tr><td>2007-10-31</td><td>添加了有关 NSOperation 和 NSOperationQueue 对象的信息。</td></tr><tr><td>2006-04-04</td><td>添加了一些新准则并更新了有关运行循环的信息。验证了分布式目标代码示例的准确性，并在其他几篇文章中更新了代码示例。</td></tr><tr><td>2005-03-03</td><td>更新了端口示例，以使用 NSPort 而不是 NSMessagePort。</td></tr><tr><td>2005-01-11</td><td>重组文章和扩展文档，使其不仅涵盖可可线程技术。</td></tr><tr><td></td><td>更新了线程概念信息，并添加了涵盖 OS X 中不同线程包的信息。</td></tr><tr><td></td><td>合并了 Core Foundation 多线程文档中的材料。</td></tr><tr><td></td><td>添加了有关在线程之间执行基于套接字的通信的信息。</td></tr><tr><td></td><td>添加了有关创建和使用 Carbon 线程的示例代码和信息。</td></tr><tr><td></td><td>添加了线程安全准则。</td></tr><tr><td></td><td>添加了有关 POSIX 线程和锁的信息。</td></tr><tr><td></td><td>添加了示例代码，以演示基于端口的通信。</td></tr><tr><td></td><td>本文档替换了以前在“ <em>多</em>线程”中发布的有关线程的信息。</td></tr><tr><td>2003-07-28</td><td>更新了有关在第三方库中使用锁的建议。</td></tr><tr><td>2003-04-08</td><td>在第三方库中有关锁定/解锁平衡的已重述信息。</td></tr><tr><td>2002-11-12</td><td>修订历史记录已添加到现有主题。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i-CH1-SW1&quot;&gt;Threading Programming Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近总是被问到 Runloop&lt;br&gt;那么什么是 运行循环 呢&lt;br&gt;直接看  2014-07-15 就停止修订的文档吧 👆 ～～～&lt;/p&gt;
&lt;p&gt;官方解说 异常清晰呢&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="iOS" scheme="https://leihao0.github.io/tags/iOS/"/>
    
      <category term="Interview" scheme="https://leihao0.github.io/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>Concurrency Programming Guide</title>
    <link href="https://leihao0.github.io/Concurrency-Programming-Guide/"/>
    <id>https://leihao0.github.io/Concurrency-Programming-Guide/</id>
    <published>2020-05-27T06:07:04.000Z</published>
    <updated>2020-09-03T00:53:32.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Concurrency-Programming-Guide"><a href="#Concurrency-Programming-Guide" class="headerlink" title="Concurrency Programming Guide"></a><a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091-CH1-SW1">Concurrency Programming Guide</a></h1><p>感觉线程相关的面试题都能在 👆 这个 🔗 里找到答案呢</p><a id="more"></a><p>👇 是 Google AI 翻译 (jifan)</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>并发是指同时发生多件事的概念。随着多核 CPU 的激增以及每个处理器中核数只会增加的认识，软件开发人员需要新的方法来利用它们。尽管 OS X 和 iOS 之类的操作系统能够并行运行多个程序，但是其中大多数程序都在后台运行，并执行需要很少的连续处理器时间的任务。当前的前台应用程序既可以吸引用户的注意力，又可以使计算机保持繁忙。如果应用程序有很多工作要做，但只占用了一部分可用内核，那么这些额外的处理资源就会被浪费掉。</p><p>过去，将并发引入应用程序需要创建一个或多个其他线程。不幸的是，编写线程代码具有挑战性。线程是必须手动管理的低级工具。鉴于应用程序的最佳线程数可以根据当前系统负载和底层硬件动态变化，因此即使不是不可能实现，实现正确的线程解决方案也变得非常困难。另外，通常与线程一起使用的同步机制增加了软件设计的复杂性和风险，而没有任何保证性能提高的保证。</p><p>与传统的基于线程的系统和应用程序相比，OS X 和 iOS 都采用了更多的异步方法来执行并发任务。应用程序无需直接创建线程，而仅需要定义特定任务，然后让系统执行它们。通过让系统管理线程，应用程序可以获得原始线程无法实现的可伸缩性级别。应用程序开发人员还可以获得更简单，更有效的编程模型。</p><p>本文档介绍了应在应用程序中实现并发的一种或多种技术。本文档中描述的技术在 OS X 和 iOS 中均可用。</p><h4 id="本文件的组织"><a href="#本文件的组织" class="headerlink" title="本文件的组织"></a>本文件的组织</h4><p>本文档包含以下章节：</p><ul><li><a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/ConcurrencyandApplicationDesign/ConcurrencyandApplicationDesign.html#//apple_ref/doc/uid/TP40008091-CH100-SW1">并发和应用程序设计</a>介绍了异步应用程序设计的基础知识以及用于异步执行自定义任务的技术。</li><li><a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW1">“操作队列”</a>向您展示了如何使用 Objective-C 对象封装和执行任务。</li><li><a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW1">调度队列</a>显示了如何在基于 C 的应用程序中同时执行任务。</li><li><a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW1">调度源</a>向您展示如何异步处理系统事件。</li><li><a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/ThreadMigration/ThreadMigration.html#//apple_ref/doc/uid/TP40008091-CH105-SW1">远离线程迁移</a>提供了一些技巧和技术，可以将现有的基于线程的代码迁移到新的技术上。</li></ul><p>本文档还包括定义相关术语的词汇表。</p><h4 id="有关术语的注释"><a href="#有关术语的注释" class="headerlink" title="有关术语的注释"></a>有关术语的注释</h4><p>在讨论并发之前，有必要定义一些相关术语以防止混淆。对 UNIX 系统或较早的 OS X 技术更加熟悉的开发人员可能会在本文中发现“任务”，“进程”和“线程”这两个词的用法有所不同。本文档以下列方式使用这些术语：</p><ul><li>术语<em>线程</em>用于指代代码的独立执行路径。OS X 中线程的基础实现基于 POSIX 线程 API。</li><li>术语“ <em>进程”</em>用于指代一个正在运行的可执行文件，它可以包含多个线程。</li><li>术语“ <em>任务”</em>用于指代需要执行的工作的抽象概念。</li></ul><p>有关本文档使用的这些术语和其他关键术语的完整定义，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW2">词汇表</a>。</p><h4 id="也可以看看"><a href="#也可以看看" class="headerlink" title="也可以看看"></a>也可以看看</h4><p>本文档重点介绍在您的应用程序中实现并发性的首选技术，并且不涉及线程的使用。如果您需要有关使用线程和其他线程相关技术的信息，请参见《_<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i">线程编程指南》</a>_。</p><h2 id="并发与应用程序设计"><a href="#并发与应用程序设计" class="headerlink" title="并发与应用程序设计"></a>并发与应用程序设计</h2><p>在计算的早期，计算机可以执行的每单位时间的最大工作量取决于 CPU 的时钟速度。但是，随着技术的进步和处理器设计变得更加紧凑，热量和其他物理限制开始限制处理器的最大时钟速度。因此，芯片制造商正在寻找其他方法来提高其芯片的总体性能。他们确定的解决方案是增加每个芯片上的处理器内核数量。通过增加内核数量，单个芯片可以每秒执行更多指令，而无需提高 CPU 速度或更改芯片尺寸或散热特性。唯一的问题是如何利用额外的内核。</p><p>为了利用多个内核，计算机需要可以同时执行多项操作的软件。对于像 OS X 或 iOS 这样的现代多任务操作系统，在任何给定时间可以运行一百个或更多程序，因此应该可以在不同的内核上调度每个程序。但是，这些程序大多数是系统守护程序或后台应用程序，它们消耗很少的实际处理时间。相反，真正需要的是使各个应用程序更有效地利用额外内核的方式。</p><p>应用程序使用多个内核的传统方式是创建多个线程。但是，随着内核数量的增加，线程解决方案存在问题。最大的问题是线程代码无法很好地扩展到任意数量的内核。您不能创建与内核一样多的线程，并且期望程序运行良好。您需要知道的是可以有效使用的内核数量，这对于应用程序自己进行计算是一项挑战。即使您设法使数字正确，也仍然面临着对如此多的线程进行编程，使其高效运行以及防止它们相互干扰的挑战。</p><p>因此，总结问题，需要为应用程序提供一种利用可变数量的计算机内核的方法。单个应用程序执行的工作量还需要能够动态扩展以适应不断变化的系统条件。解决方案必须足够简单，以免增加利用这些内核所需的工作量。好消息是，Apple 的操作系统为所有这些问题提供了解决方案，本章介绍了构成该解决方案的技术以及可以对代码进行的设计调整，以利用它们。</p><h4 id="远离线程"><a href="#远离线程" class="headerlink" title="远离线程"></a>远离线程</h4><p>尽管线程已经存在很多年了并且继续使用它们，但是它们并不能解决以可伸缩方式执行多个任务的一般问题。使用线程，创建可伸缩解决方案的负担完全由开发人员承担。您必须决定要创建多少个线程，并随着系统条件的变化动态地调整该数量。另一个问题是您的应用程序承担了与创建和维护其使用的任何线程相关的大部分成本。</p><p>OS X 和 iOS 无需依赖线程，而是采用<em>异步设计方法</em>解决并发问题。异步功能已经存在于操作系统中多年，通常用于启动可能需要很长时间的任务，例如从磁盘读取数据。调用异步函数时，它会在后台执行一些工作以启动任务运行，但在该任务可能实际完成之前返回。通常，这项工作涉及获取后台线程，在该线程上启动所需的任务，然后在任务完成时向调用者发送通知（通常通过回调函数）。过去，如果要执行的操作不存在异步函数，则必须编写自己的异步函数并创建自己的线程。但现在，</p><p>异步启动任务的技术之一是<em>大中央调度（GCD）</em>。该技术采用了您通常在自己的应用程序中编写的线程管理代码，并将该代码下移至系统级别。您所要做的就是定义要执行的任务，并将其添加到适当的调度队列中。GCD 负责创建所需的线程，并安排任务在这些线程上运行。由于线程管理现在是系统的一部分，因此 GCD 提供了一种用于任务管理和执行的整体方法，比传统线程提供了更高的效率。</p><p><em>操作队列</em>是 Objective-C 对象，其行为与分派队列非常相似。您定义要执行的任务，然后将它们添加到操作队列中，该队列处理这些任务的调度和执行。与 GCD 一样，操作队列为您处理所有线程管理，以确保任务在系统上尽可能快且高效地执行。</p><p>以下各节提供有关可在应用程序中使用的调度队列，操作队列和其他一些相关异步技术的更多信息。</p><h6 id="调度队列"><a href="#调度队列" class="headerlink" title="调度队列"></a>调度队列</h6><p>调度队列是用于执行自定义任务的基于 C 的机制。一个<em>调度队列</em>执行任务的顺序或同时却总是先入先出的顺序。（换句话说，调度队列始终以添加任务到队列的顺序出队列并启动任务。）串行调度队列一次仅运行一个任务，直到该任务完成后才出队列并启动任务。新的一个。相比之下，并发调度队列可以启动尽可能多的任务，而不必等待已经启动的任务完成。</p><p>调度队列还有其他好处：</p><ul><li>它们提供了简单明了的编程界面。</li><li>它们提供自动的整体线程池管理。</li><li>它们提供了调优装配的速度。</li><li>它们具有更高的内存效率（因为线程堆栈不会停留在应用程序内存中）。</li><li>它们不会在负载下捕获到内核。</li><li>任务到调度队列的异步调度不能使队列死锁。</li><li>他们在竞争中优雅地扩展。</li><li>串行分派队列为锁和其他同步原语提供了更有效的替代方法。</li></ul><p>您提交给分派队列的任务必须封装在函数或块对象中。<em>块对象</em>是 OS X v10.6 和 iOS 4.0 中引入的 C 语言功能，从概念上讲类似于函数指针，但还有一些其他好处。通常，不是在自己的词法范围内定义块，而是通常在另一个函数或方法内定义块，以便它们可以从该函数或方法访问其他变量。块也可以移出其原始范围并复制到堆上，这是将它们提交到调度队列时发生的情况。所有这些语义使得使用相对较少的代码即可实现非常动态的任务。</p><p>调度队列是 Grand Central Dispatch 技术的一部分，并且是 C 运行时的一部分。有关在应用程序中使用调度队列的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW1">调度队列</a>。有关块及其好处的更多信息，请参见*<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40007502">块编程主题</a>*。</p><h6 id="派遣来源"><a href="#派遣来源" class="headerlink" title="派遣来源"></a>派遣来源</h6><p>调度源是一种基于 C 的机制，用于异步处理特定类型的系统事件。调度源封装有关特定类型系统事件的信息，并在该事件发生时将特定的块对象或功能提交给调度队列。您可以使用调度源来监视以下类型的系统事件：</p><ul><li>计时器</li><li>信号处理器</li><li>描述符相关事件</li><li>与流程相关的事件</li><li>马赫港口事件</li><li>您触发的自定义事件</li></ul><p>调度源是大中央调度技术的一部分。有关使用调度源接收应用程序中的事件的信息，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW1">调度源</a>。</p><h6 id="操作队列"><a href="#操作队列" class="headerlink" title="操作队列"></a>操作队列</h6><p>操作队列在 Cocoa 中等同于并发调度队列，由<code>NSOperationQueue</code>类实现。调度队列始终按先进先出的顺序执行任务，而操作队列在确定任务的执行顺序时会考虑其他因素。这些因素中最主要的是给定任务是否取决于其他任务的完成。您可以在定义任务时配置依赖关系，并可以使用它们来为任务创建复杂的执行顺序图。</p><p>您提交给操作队列的任务必须是<code>NSOperation</code>该类的实例。的<em>操作对象</em>是 Objective-C 的对象，它封装了要执行的工作，并执行它所需要的任何数据。因为<code>NSOperation</code>该类实质上是抽象基类，所以通常定义自定义子类来执行任务。但是，Foundation 框架确实包含一些具体的子类，您可以直接创建和使用这些子类来执行任务。</p><p>操作对象会生成键值观察（KVO）通知，这可以是监视任务进度的有用方法。尽管操作队列总是同时执行操作，但是您可以使用依赖项来确保在需要时按顺序执行它们。</p><p>有关如何使用操作队列以及如何定义自定义操作对象的更多信息，请参见《<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW1">操作队列》</a>。</p><h4 id="异步设计技术"><a href="#异步设计技术" class="headerlink" title="异步设计技术"></a>异步设计技术</h4><p>在甚至考虑重新设计代码以支持并发之前，您应该问自己是否这样做。并发可以确保您的主线程可以自由地响应用户事件，从而可以提高代码的响应速度。通过利用更多的内核在相同的时间内完成更多的工作，它甚至可以提高代码的效率。但是，这也增加了开销并增加了代码的整体复杂性，从而使编写和调试代码变得更加困难。</p><p>因为并发性增加了复杂性，所以您不能在产品周期结束时将并发性移植到应用程序上。正确执行此操作需要仔细考虑应用程序执行的任务以及用于执行这些任务的数据结构。如果处理不正确，您可能会发现代码运行速度比以前慢，并且对用户的响应速度也较慢。因此，值得在设计周期开始时花一些时间设定一些目标并考虑需要采取的方法。</p><p>每个应用程序都有不同的要求和执行的不同任务集。文档不可能准确地告诉您如何设计应用程序及其相关任务。但是，以下各节试图提供一些指导，以帮助您在设计过程中做出正确的选择。</p><h6 id="定义应用程序的预期行为"><a href="#定义应用程序的预期行为" class="headerlink" title="定义应用程序的预期行为"></a>定义应用程序的预期行为</h6><p>在甚至考虑向应用程序添加并发之前，您应该始终从定义您认为正确的应用程序行为开始。了解应用程序的预期行为为您提供了一种稍后验证设计的方法。它还应该使您对通过引入并发可能获得的预期性能收益有所了解。</p><p>您应该做的第一件事是枚举应用程序执行的任务以及与每个任务关联的对象或数据结构。最初，您可能想从用户选择菜单项或单击按钮时执行的任务开始。这些任务提供了离散的行为，并具有明确定义的起点和终点。您还应该枚举应用程序无需用户交互即可执行的其他类型的任务，例如基于计时器的任务。</p><p>在获得高级任务列表之后，开始将每个任务进一步细分为成功完成任务必须采取的步骤。在此级别上，您应该主要关注需要对任何数据结构和对象进行的修改，以及这些修改如何影响应用程序的整体状态。您还应该注意对象与数据结构之间的任何依赖关系。例如，如果一项任务涉及对一组对象进行相同的更改，则值得注意的是对一个对象的更改是否会影响其他任何对象。如果可以相互独立地修改对象，则可能是可以同时进行这些修改的地方。</p><h6 id="排除可执行的工作单元"><a href="#排除可执行的工作单元" class="headerlink" title="排除可执行的工作单元"></a>排除可执行的工作单元</h6><p>通过了解应用程序的任务，您应该已经能够确定代码可以从并发中受益的地方。如果更改任务中一个或多个步骤的顺序会改变结果，则可能需要继续按顺序继续执行这些步骤。但是，如果更改顺序对输出没有影响，则应考虑同时执行这些步骤。在这两种情况下，您都定义了代表要执行的一个或多个步骤的可执行工作单元。然后，该工作单元将成为您使用块或操作对象封装的内容，并分派到适当的队列中。</p><p>对于您标识的每个可执行工作单元，至少在最初阶段，不必过多担心执行的工作量。尽管拆分线程始终会产生成本，但是分派队列和操作队列的优点之一是，在许多情况下，这些成本比传统线程要小得多。因此，与使用线程相比，使用队列可以更有效地执行较小的工作单元。当然，您应该始终测量实际性能并根据需要调整任务的大小，但是一开始，不应将任何任务视为太小。</p><h6 id="确定您需要的队列"><a href="#确定您需要的队列" class="headerlink" title="确定您需要的队列"></a>确定您需要的队列</h6><p>现在，您的任务已分解为不同的工作单元，并使用块对象或操作对象进行了封装，现在您需要定义要用于执行该代码的队列。对于给定的任务，请检查您创建的块或操作对象以及必须执行它们才能正确执行任务的顺序。</p><p>如果使用块来实现任务，则可以将块添加到串行或并发调度队列中。如果需要特定的命令，则始终将块添加到串行调度队列中。如果不需要特定的顺序，则可以根据需要将块添加到并发调度队列中，或将它们添加到几个不同的调度队列中。</p><p>如果使用操作对象实现任务，则选择队列通常比配置对象有趣。要串行执行操作对象，必须配置相关对象之间的依赖关系。依赖关系会阻止一个操作执行到它所依赖的对象完成工作为止。</p><h6 id="提高效率的技巧"><a href="#提高效率的技巧" class="headerlink" title="提高效率的技巧"></a>提高效率的技巧</h6><p>除了简单地将代码分解为较小的任务并将其添加到队列之外，还有其他方法可以使用队列来提高代码的整体效率：</p><ul><li><strong>如果内存使用是一个因素，请考虑直接在任务中计算值。</strong>如果您的应用程序已经受内存限制，那么现在直接计算值可能比从主内存加载缓存的值要快。计算值直接使用给定处理器内核的寄存器和缓存，这比主内存快得多。当然，只有在测试表明这是性能上的胜利时，才应该这样做。</li><li><strong>尽早识别串行任务，并尽力使它们更加并行。</strong>如果由于某个任务依赖某些共享资源而必须串行执行该任务，请考虑更改体系结构以删除该共享资源。您可以考虑为每个需要一个的客户端制作资源副本，或者完全消除该资源。</li><li><strong>避免使用锁。</strong>分派队列和操作队列提供的支持使得在大多数情况下不需要锁。与其使用锁来保护某些共享资源，不如指定一个串行队列（或使用操作对象依赖项）以正确的顺序执行任务。</li><li><strong>尽可能依靠系统框架。</strong>实现并发的最佳方法是利用系统框架提供的内置并发。许多框架在内部使用线程和其他技术来实现并发行为。在定义任务时，请查看现有框架是否定义了可以完全满足您期望并同时实现的功能或方法。使用该 API 可以节省您的精力，并且更有可能为您提供最大的并发性。</li></ul><h4 id="性能影响"><a href="#性能影响" class="headerlink" title="性能影响"></a>性能影响</h4><p>提供了操作队列，调度队列和调度源，使您可以更轻松地同时执行更多代码。但是，这些技术不能保证提高应用程序的效率或响应能力。使用队列既可以满足您的需求，又不会给应用程序的其他资源带来过多负担，仍然是您的责任。例如，尽管您可以创建 10,000 个操作对象并将其提交到操作队列，但是这样做将导致您的应用程序分配潜在的重要内存量，这可能导致分页和性能下降。</p><p>在为代码引入任何数量的并发之前（无论使用队列还是线程），您应该始终收集一组反映应用程序当前性能的基准度量。引入更改后，您应该收集其他指标并将其与基准进行比较，以查看应用程序的整体效率是否有所提高。如果并发性引入使您的应用程序效率或响应速度降低，则应使用可用的性能工具来检查潜在原因。</p><p>有关性能和可用性能工具的介绍，以及指向更多与性能相关的高级主题的链接，请参见*<a href="https://developer.apple.com/library/archive/documentation/Performance/Conceptual/PerformanceOverview/Introduction/Introduction.html#//apple_ref/doc/uid/TP40001410">性能概述</a>*。</p><h4 id="并发和其他技术"><a href="#并发和其他技术" class="headerlink" title="并发和其他技术"></a>并发和其他技术</h4><p>将代码分解为模块化任务是尝试并提高应用程序中并发性的最佳方法。但是，这种设计方法可能无法满足每种情况下每种应用程序的需求。根据您的任务，可能还有其他选项可以为应用程序的整体并发性提供其他改进。本节概述了设计中要考虑使用的其他一些技术。</p><h6 id="OpenCL-和并发"><a href="#OpenCL-和并发" class="headerlink" title="OpenCL 和并发"></a>OpenCL 和并发</h6><p>在 OS X 中，<em>开放计算语言（OpenCL）</em>是一种基于标准的技术，用于在计算机的图形处理器上执行通用计算。如果您要对大型数据集应用一组定义明确的计算，则 OpenCL 是一项很好的技术。例如，您可以使用 OpenCL 对图像的像素执行过滤器计算，或一次对多个值执行复杂的数学计算。换句话说，OpenCL 更适合问题集，这些问题集的数据可以并行处理。</p><p>尽管 OpenCL 可以很好地执行大量数据并行操作，但它不适用于更通用的计算。将数据和所需的工作内核准备并传输到图形卡需要大量的精力，以便可以通过 GPU 对其进行操作。同样，检索 OpenCL 生成的任何结果都需要花费大量精力。因此，通常不建议与系统交互的任何任务与 OpenCL 一起使用。例如，您不会使用 OpenCL 处理文件或网络流中的数据。相反，您使用 OpenCL 执行的工作必须更加独立，以便可以将其传输到图形处理器并进行独立计算。</p><p>有关 OpenCL 及其使用方式的详细信息，请参阅*<a href="https://developer.apple.com/library/archive/documentation/Performance/Conceptual/OpenCL_MacProgGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008312">《适用于 Mac 的 OpenCL 编程指南》</a>*。</p><h6 id="何时使用线程"><a href="#何时使用线程" class="headerlink" title="何时使用线程"></a>何时使用线程</h6><p>尽管操作队列和调度队列是同时执行任务的首选方式，但它们不是万能药。根据您的应用程序，有时仍然需要创建自定义线程。如果确实创建自定义线程，则应努力自己创建尽可能少的线程，并且应仅将这些线程用于无法以其他任何方式实现的特定任务。</p><p>线程仍然是实现必须实时运行的代码的好方法。调度队列会尽一切努力尽可能快地运行其任务，但不能解决实时约束。如果您需要从后台运行的代码中获得更多可预测的行为，则线程可能仍然是更好的选择。</p><p>与任何线程编程一样，您应始终明智地使用线程，并且仅在绝对必要时使用。有关线程包及其使用方式的更多信息，请参见《_<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i">线程编程指南》</a>_。</p><h2 id="操作队列-1"><a href="#操作队列-1" class="headerlink" title="操作队列"></a>操作队列</h2><p>可可操作是一种面向对象的方法，用于封装要异步执行的工作。操作被设计为与操作队列结合使用或单独使用。由于它们基于 Objective-C，因此在 OS X 和 iOS 的基于 Cocoa 的应用程序中最常使用操作。</p><p>本章介绍如何定义和使用操作。</p><h4 id="关于操作对象"><a href="#关于操作对象" class="headerlink" title="关于操作对象"></a>关于操作对象</h4><p>的<em>操作对象</em>是的实例<code>NSOperation</code>类（Foundation 框架），您使用您希望您的应用程序执行封装工作。在<code>NSOperation</code>类本身是一个抽象基类，必须按顺序做任何有用的工作被继承。尽管是抽象类，但此类确实提供了大量的基础结构，以最大程度地减少您必须在自己的子类中完成的工作量。另外，Foundation 框架提供了两个具体的子类，您可以按原样使用现有代码。表 2-1 列出了这些类，以及如何使用每种类的摘要。</p><table><thead><tr><th align="left">类</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>NSInvocationOperation</code></td><td align="left">您原样使用的类基于应用程序中的对象和选择器创建操作对象。如果您具有已经执行所需任务的现有方法，则可以使用此类。由于不需要子类，因此您也可以使用此类以更动态的方式创建操作对象。有关如何使用此类的信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW6">创建 NSInvocationOperation 对象</a>。</td></tr><tr><td align="left"><code>NSBlockOperation</code></td><td align="left">按原样使用的类可同时执行一个或多个块对象。因为可以执行多个块，所以块操作对象使用组语义进行操作；仅当所有相关块已完成执行时，操作本身才视为完成。有关如何使用此类的信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW2">创建 NSBlockOperation 对象</a>。此类在 OS X v10.6 和更高版本中可用。有关块的更多信息，请参见*<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40007502">块编程主题</a>*。</td></tr><tr><td align="left"><code>NSOperation</code></td><td align="left">定义自定义操作对象的基类。子类化<code>NSOperation</code>使您可以完全控制自己的操作的实现，包括更改操作执行和报告其状态的默认方式的能力。有关如何定义自定义操作对象的信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW16">定义自定义操作对象</a>。</td></tr></tbody></table><p>所有操作对象都支持以下关键功能：</p><ul><li>支持在操作对象之间建立基于图的依赖关系。这些依赖关系会阻止给定操作运行，直到它所依赖的所有操作都已运行完毕。有关如何配置依赖关系的信息，请参阅《<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW17">配置互操作依赖关系》</a>。</li><li>支持可选的完成块，该块在操作的主要任务完成后执行。（仅适用于 OS X v10.6 和更高版本。）有关如何设置完成块的信息，请参阅《<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW33">设置完成块》</a>。</li><li>支持使用 KVO 通知监视对操作的执行状态的更改。有关如何观察 KVO 通知的信息，请参阅《_<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177i">键值观察编程指南》</a>_。</li><li>支持对操作进行优先级排序，从而影响其相对执行顺序。有关更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW31">更改操作的执行优先级</a>。</li><li>支持取消语义，使您可以在执行过程中暂停操作。有关如何取消操作的信息，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW39">取消操作</a>。有关如何在自己的操作中支持取消的信息，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW24">响应取消事件</a>。</li></ul><p>操作旨在帮助您提高应用程序中的并发级别。操作也是将应用程序的行为组织和封装为简单的离散块的好方法。您可以在一个队列中提交一个或多个操作对象，而不是在应用程序的主线程上运行一些代码，而可以在一个或多个单独的线程上异步执行相应的工作。</p><h4 id="并行与非并行操作"><a href="#并行与非并行操作" class="headerlink" title="并行与非并行操作"></a>并行与非并行操作</h4><p>尽管通常通过将操作添加到操作队列来执行操作，但这不是必需的。也可以通过调用操作对象的<code>start</code>方法来手动执行操作对象，但这样做不能保证操作与代码的其余部分同时运行。该类的<code>isConcurrent</code>方法<code>NSOperation</code>告诉您操作相对于<code>start</code>调用其方法的线程是同步还是异步运行。默认情况下，此方法返回<code>NO</code>，这意味着该操作在调用线程中同步运行。</p><p>如果要实现<em>并发操作（</em>即相对于调用线程异步运行的<em>操作</em>），则必须编写其他代码以异步启动操作。例如，您可以生成单独的线程，调用异步系统函数或执行任何其他操作以确保该<code>start</code>方法启动任务并立即返回，并且很可能在任务完成之前返回。</p><p>大多数开发人员永远都不需要实现并发操作对象。如果始终将操作添加到操作队列中，则无需实现并发操作。当您将非并行操作提交给操作队列时，队列本身会创建一个线程来在其上运行您的操作。因此，向操作队列中添加非并发操作仍然会导致操作目标代码的异步执行。仅在需要异步执行操作而不将其添加到操作队列的情况下，才需要定义并发操作的功能。</p><p>有关如何创建并发操作的信息，请参阅《<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW8">配置</a>并发操作和*<a href="https://developer.apple.com/documentation/foundation/nsoperation">NSOperation 类参考》</a>*。</p><h4 id="创建一个-NSInvocationOperation-对象"><a href="#创建一个-NSInvocationOperation-对象" class="headerlink" title="创建一个 NSInvocationOperation 对象"></a>创建一个 NSInvocationOperation 对象</h4><p>该<code>NSInvocationOperation</code>班是一个具体子类<code>NSOperation</code>是在运行时调用选择你指定的对象上注明。使用此类可避免为应用程序中的每个任务定义大量的自定义操作对象；特别是如果您正在修改现有应用程序，并且已经具有执行必要任务所需的对象和方法。当您要调用的方法可以根据情况改变时，也可以使用它。例如，您可以使用调用操作来执行根据用户输入动态选择的选择器。</p><p>创建调用操作的过程很简单。您创建并初始化该类的新实例，并将所需的对象和选择器传递给初始化方法。清单 2-1 显示了来自自定义类的两种方法，它们演示了创建过程。该<code>taskWithData:</code>方法创建一个新的调用对象，并为其提供另一个方法的名称，该名称包含任务实现。</p><p><strong>清单 2-1</strong> 创建一个<code>NSInvocationOperation</code>对象</p><table><thead><tr><th><code>@implementation MyCustomClass</code></th></tr></thead><tbody><tr><td><code>-（NSOperation *）taskWithData：（id）data &#123;</code></td></tr><tr><td><code>NSInvocationOperation * theOp = [[NSInvocationOperation alloc] initWithTarget：self</code></td></tr><tr><td><code>选择器：@选择器（myTaskMethod :)对象：数据];</code></td></tr><tr><td>``</td></tr><tr><td><code>返回theOp;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>//这是执行任务实际工作的方法。</code></td></tr><tr><td><code>-（void）myTaskMethod：（id）data &#123;</code></td></tr><tr><td><code>//执行任务。</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>@结束</code></td></tr></tbody></table><h4 id="创建一个-NSBlockOperation-对象"><a href="#创建一个-NSBlockOperation-对象" class="headerlink" title="创建一个 NSBlockOperation 对象"></a>创建一个 NSBlockOperation 对象</h4><p>的<code>NSBlockOperation</code>类是的具体子类<code>NSOperation</code>充当用于一个或多个的包装块的对象。此类为已经在使用操作队列并且不想创建调度队列的应用程序提供面向对象的包装。您还可以使用块操作来利用操作依赖性，KVO 通知和分派队列可能不提供的其他功能。</p><p>创建块操作时，通常在初始化时至少添加一个块。您可以稍后根据需要添加更多块。当需要执行一个<code>NSBlockOperation</code>对象时，该对象将其所有块提交给默认优先级的并发调度队列。然后，对象等待直到所有块完成执行。当最后一个块完成执行时，操作对象将自身标记为完成。因此，您可以使用块操作来跟踪一组正在执行的块，就像使用线程联接合并来自多个线程的结果一样。区别在于，由于块操作本身在单独的线程上运行，因此应用程序的其他线程可以在等待块操作完成的同时继续进行工作。</p><p>清单 2-2 显示了如何创建<code>NSBlockOperation</code>对象的简单示例。该块本身没有参数，也没有明显的返回结果。</p><p><strong>清单 2-2</strong> 创建一个<code>NSBlockOperation</code>对象</p><table><thead><tr><th><code>NSBlockOperation * theOp = [NSBlockOperation blockOperationWithBlock：^ &#123;</code></th></tr></thead><tbody><tr><td><code>NSLog（@“开始操作。\ n”）;</code></td></tr><tr><td><code>// 做一些工作。</code></td></tr><tr><td><code>&#125;];</code></td></tr></tbody></table><p>创建块操作对象后，可以使用该<code>addExecutionBlock:</code>方法向其添加更多块。如果需要顺序执行块，则必须将它们直接提交给所需的调度队列。</p><h4 id="定义自定义操作对象"><a href="#定义自定义操作对象" class="headerlink" title="定义自定义操作对象"></a>定义自定义操作对象</h4><p>如果块操作和调用操作对象不能完全满足应用程序的需求，则可以<code>NSOperation</code>直接子类化并添加所需的任何行为。本<code>NSOperation</code>类提供的所有操作对象的通用子类点。该类还提供了大量的基础结构来处理依赖项和 KVO 通知所需的大部分工作。但是，有时仍然需要补充现有的基础架构以确保您的操作正常进行。您必须执行的额外工作量取决于您要实现的是非并发操作还是并发操作。</p><p>定义非并发操作比定义并发操作要简单得多。对于非并行操作，您所需要做的就是执行主要任务并适当地响应取消事件；现有的班级基础架构会为您完成所有其他工作。对于并发操作，必须用自定义代码替换一些现有的基础结构。以下各节向您展示如何实现两种类型的对象。</p><h6 id="执行主要任务"><a href="#执行主要任务" class="headerlink" title="执行主要任务"></a>执行主要任务</h6><p>每个操作对象至少应实现至少以下方法：</p><ul><li>自定义初始化方法</li><li><code>main</code></li></ul><p>您需要一个自定义的初始化方法来将操作对象置于已知状态，并需要一个自定义的<code>main</code>方法来执行任务。当然，您可以根据需要实现其他方法，例如：</p><ul><li>您计划从<code>main</code>方法的实现中调用的自定义方法</li><li>用于设置数据值和访问操作结果的访问器方法</li><li><code>NSCoding</code>允许您归档和取消归档操作对象的协议方法</li></ul><p>清单 2-3 显示了自定义<code>NSOperation</code>子类的起始模板。（此清单未显示如何处理取消，但显示了通常具有的方法。有关处理取消的信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW24">响应取消事件</a>。）此类的初始化方法将单个对象作为数据参数并存储一个对象。在操作对象内部对其的引用。该<code>main</code>方法表面上将对该数据对象起作用，然后再将结果返回给您的应用程序。</p><p><strong>清单 2-3</strong> 定义一个简单的操作对象</p><table><thead><tr><th><code>@interface MyNonConcurrentOperation：NSOperation</code></th></tr></thead><tbody><tr><td><code>@property id（strong）myData;</code></td></tr><tr><td><code>-（id）initWithData：（id）数据;</code></td></tr><tr><td><code>@结束</code></td></tr><tr><td>``</td></tr><tr><td><code>@implementation MyNonConcurrentOperation</code></td></tr><tr><td><code>-（id）initWithData：（id）data &#123;</code></td></tr><tr><td><code>如果（自我= [超级初始化]）</code></td></tr><tr><td><code>myData =数据；</code></td></tr><tr><td><code>返回自我</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>-（void）main &#123;</code></td></tr><tr><td><code>@尝试&#123;</code></td></tr><tr><td><code>//对myData做一些工作并报告结果。</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>@catch（...）&#123;</code></td></tr><tr><td><code>//不要抛出异常。</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>@结束</code></td></tr><tr><td>``</td></tr></tbody></table><p>有关如何实现<code>NSOperation</code>子类的详细示例，请参见*<a href="https://developer.apple.com/library/archive/samplecode/NSOperationSample/Introduction/Intro.html#//apple_ref/doc/uid/DTS10004184">NSOperationSample</a>*。</p><h6 id="响应取消事件"><a href="#响应取消事件" class="headerlink" title="响应取消事件"></a>响应取消事件</h6><p>操作开始执行后，它将继续执行其任务，直到完成为止，或者直到您的代码明确取消了该操作。取消可以随时发生，甚至在操作开始执行之前。尽管<code>NSOperation</code>该类为客户提供了取消操作的方法，但是识别取消事件是必要的，是自愿的。如果操作被彻底终止，则可能没有办法回收已分配的资源。结果，期望操作对象检查取消事件，并在它们出现在操作中间时正常退出。</p><p>为了支持取消操作对象中的操作，您要做的就是<code>isCancelled</code>从您的自定义代码中定期调用该对象的方法，并在返回时立即返回<code>YES</code>。无论操作时间长短，是<code>NSOperation</code>直接子类化还是使用其具体子类之一，支持取消都很重要。该<code>isCancelled</code>方法本身非常轻巧，可以频繁调用而不会造成任何明显的性能损失。设计操作对象时，应考虑<code>isCancelled</code>在代码的以下位置调用该方法：</p><ul><li>在您执行任何实际工作之前</li><li>在循环的每次迭代中至少一次，如果每次迭代相对较长，则更频繁</li><li>在代码中的任何时候，相对容易中止操作</li></ul><p>清单 2-4 提供了一个非常简单的示例，说明如何以<code>main</code>操作对象的方法响应取消事件。在这种情况下，<code>isCancelled</code>每次通过<code>while</code>循环都会调用该方法，这样可以在工作开始之前快速退出，并有规律地间隔一次。</p><p><strong>清单 2-4</strong> 响应取消请求</p><table><thead><tr><th><code>-（void）main &#123;</code></th></tr></thead><tbody><tr><td><code>@尝试&#123;</code></td></tr><tr><td><code>BOOL isDone = NO;</code></td></tr><tr><td>``</td></tr><tr><td><code>while（！[self isCancelled] &amp;&amp;！isDone）&#123;</code></td></tr><tr><td><code>//做一些工作，完成后将isDone设置为YES</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>@catch（...）&#123;</code></td></tr><tr><td><code>//不要抛出异常。</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>尽管前面的示例不包含清除代码，但是您自己的代码应确保释放您的自定义代码分配的所有资源。</p><h6 id="配置并发执行操作"><a href="#配置并发执行操作" class="headerlink" title="配置并发执行操作"></a>配置并发执行操作</h6><p>默认情况下，操作对象以同步方式执行-也就是说，它们在调用其<code>start</code>方法的线程中执行其任务。但是，由于操作队列为非并发操作提供了线程，因此大多数操作仍然异步运行。但是，如果您打算手动执行操作，但仍希望它们异步运行，则必须采取适当的措施以确保它们能够执行。通过将操作对象定义为并发操作来执行此操作。</p><p>表 2-2 列出了通常为实现并发操作而重写的方法。</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>start</code></td><td align="left">（必需）所有并发操作都必须重写此方法，并用其自己的自定义实现替换默认行为。要手动执行操作，请调用其<code>start</code>方法。因此，此方法的实现是您操作的起点，并且是您在其中设置执行任务的线程或其他执行环境的地方。您的实现不得<code>super</code>在任何时候调用。</td></tr><tr><td align="left"><code>main</code></td><td align="left">（可选）此方法通常用于实现与操作对象关联的任务。尽管您可以在<code>start</code>方法中执行任务，但是使用此方法实现任务可以使您的设置和任务代码更加清晰。</td></tr><tr><td align="left"><code>isExecuting``isFinished</code></td><td align="left">（必需）并发操作负责设置其执行环境，并向外部客户端报告该环境的状态。因此，并发操作必须维护一些状态信息，以了解何时执行任务以及何时完成该任务。然后，必须使用这些方法报告该状态。您可以安全地同时从其他线程调用这些方法的实现。在更改这些方法报告的值时，还必须为预期的键路径生成适当的 KVO 通知。</td></tr><tr><td align="left"><code>isConcurrent</code></td><td align="left">（必需）要将操作标识为并发操作，请覆盖此方法并返回<code>YES</code>。</td></tr></tbody></table><p>本节的其余部分显示了<code>MyOperation</code>该类的示例实现，该示例演示了实现并发操作所需的基本代码。将<code>MyOperation</code>类简单地执行它自己的<code>main</code>一个单独的线程方法，它创造。该<code>main</code>方法执行的实际工作无关紧要。该示例的重点是演示定义并发操作时需要提供的基础结构。</p><p>清单 2-5 显示了<code>MyOperation</code>该类的接口和部分实现。的的实现<code>isConcurrent</code>，<code>isExecuting</code>和<code>isFinished</code>方法的<code>MyOperation</code>类是相对简单的。该<code>isConcurrent</code>方法应该简单地返回<code>YES</code>以指示这是一个并发操作。该<code>isExecuting</code>和<code>isFinished</code>方法简单地返回保存在类本身的实例变量的值。</p><p><strong>清单 2-5</strong> 定义并发操作</p><table><thead><tr><th><code>@interface MyOperation：NSOperation &#123;</code></th></tr></thead><tbody><tr><td><code>布尔执行；</code></td></tr><tr><td><code>BOOL完成；</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>-（void）completeOperation；</code></td></tr><tr><td><code>@结束</code></td></tr><tr><td>``</td></tr><tr><td><code>@implementation MyOperation</code></td></tr><tr><td><code>-（id）init &#123;</code></td></tr><tr><td><code>自我= [超级初始化];</code></td></tr><tr><td><code>如果（自己）&#123;</code></td></tr><tr><td><code>执行=否;</code></td></tr><tr><td><code>完成=否；</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>返回自我</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>-（BOOL）是并发&#123;</code></td></tr><tr><td><code>返回是；</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>-（BOOL）正在执行&#123;</code></td></tr><tr><td><code>返回执行；</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>-（BOOL）已完成&#123;</code></td></tr><tr><td><code>返回完成；</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>@结束</code></td></tr></tbody></table><p>清单 2-6 显示了的<code>start</code>方法<code>MyOperation</code>。此方法的实现是最少的，以便演示您绝对必须执行的任务。在这种情况下，该方法仅启动一个新线程并将其配置为调用该<code>main</code>方法。该方法还更新<code>executing</code>成员变量并为<code>isExecuting</code>键路径生成 KVO 通知以反映该值的更改。完成工作后，此方法将简单地返回，保留新分离的线程来执行实际任务。</p><p><strong>清单 2-6</strong> start 方法</p><table><thead><tr><th><code>-（void）开始&#123;</code></th></tr></thead><tbody><tr><td><code>//在启动任务之前，请务必检查是否取消。</code></td></tr><tr><td><code>如果（[self isCancelled]）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//如果取消操作，则必须将操作移至完成状态。</code></td></tr><tr><td><code>[self willChangeValueForKey：@“ isFinished”]；</code></td></tr><tr><td><code>完成=是；</code></td></tr><tr><td><code>[self didChangeValueForKey：@“ isFinished”]；</code></td></tr><tr><td><code>返回;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>//如果未取消操作，则开始执行任务。</code></td></tr><tr><td><code>[self willChangeValueForKey：@“ isExecuting”];</code></td></tr><tr><td><code>[NSThread detachNewThreadSelector：@selector（main）toTarget：self withObject：nil];</code></td></tr><tr><td><code>执行=是;</code></td></tr><tr><td><code>[self didChangeValueForKey：@“ isExecuting”];</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>清单 2-7 显示了<code>MyOperation</code>该类的其余实现。如<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW11">清单 2-6 所示</a>，该<code>main</code>方法是新线程的入口点。它执行与操作对象关联的工作，并在<code>completeOperation</code>最终完成该工作时调用自定义方法。<code>completeOperation</code>然后，该方法为<code>isExecuting</code>和<code>isFinished</code>路径生成所需的 KVO 通知，以反映操作状态的变化。</p><p><strong>清单 2-7</strong> 在完成时更新操作</p><table><thead><tr><th><code>-（void）main &#123;</code></th></tr></thead><tbody><tr><td><code>@尝试&#123;</code></td></tr><tr><td>``</td></tr><tr><td><code>//在此执行操作的主要工作。</code></td></tr><tr><td>``</td></tr><tr><td><code>[自我完成操作];</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>@catch（...）&#123;</code></td></tr><tr><td><code>//不要抛出异常。</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>-（void）completeOperation &#123;</code></td></tr><tr><td><code>[self willChangeValueForKey：@“ isFinished”]；</code></td></tr><tr><td><code>[self willChangeValueForKey：@“ isExecuting”];</code></td></tr><tr><td>``</td></tr><tr><td><code>执行=否;</code></td></tr><tr><td><code>完成=是；</code></td></tr><tr><td>``</td></tr><tr><td><code>[self didChangeValueForKey：@“ isExecuting”];</code></td></tr><tr><td><code>[self didChangeValueForKey：@“ isFinished”]；</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>即使取消了操作，也应始终通知 KVO 观察者您的操作现已完成。当一个操作对象依赖于其他操作对象的完成时，它将监视<code>isFinished</code>那些对象的键路径。仅当所有对象都报告它们完成时，相关操作才会发出信号，表明它已准备好运行。因此，无法生成完成通知可能会阻止应用程序中其他操作的执行。</p><h6 id="保持-KVO-合规性"><a href="#保持-KVO-合规性" class="headerlink" title="保持 KVO 合规性"></a>保持 KVO 合规性</h6><p>的<code>NSOperation</code>类是键-值观察（KVO）兼容以下关键路径：</p><ul><li><code>isCancelled</code></li><li><code>isConcurrent</code></li><li><code>isExecuting</code></li><li><code>isFinished</code></li><li><code>isReady</code></li><li><code>dependencies</code></li><li><code>queuePriority</code></li><li><code>completionBlock</code></li></ul><p>如果您重写该<code>start</code>方法或对<code>NSOperation</code>对象进行任何重要的自定义（而不是 override）<code>main</code>，则必须确保您的自定义对象对这些关键路径保持 KVO 兼容。覆盖该<code>start</code>方法时，您应该最关注的关键路径是<code>isExecuting</code>和<code>isFinished</code>。这些是重新实现该方法最常影响的关键路径。</p><p>如果要实现对除其他操作对象之外的其他对象的依赖关系的支持，则还可以重写该<code>isReady</code>方法并强制其返回，<code>NO</code>直到满足您的自定义依赖关系为止。（如果实现自定义依赖项，则如果仍然支持该类提供的默认依赖项管理系统，请确保<code>super</code>从<code>isReady</code>方法中调用<code>NSOperation</code>。）当操作对象的就绪状态更改时，请为<code>isReady</code>关键路径生成 KVO 通知以报告这些更改。除非您重写<code>addDependency:</code>or <code>removeDependency:</code>方法，否则您不必担心会为<code>dependencies</code>密钥路径生成 KVO 通知。</p><p>尽管您可以为的其他关键路径生成 KVO 通知<code>NSOperation</code>，但您不太可能需要这样做。如果您需要取消操作，则只需调用现有<code>cancel</code>方法即可。同样，您几乎不需要修改操作对象中的队列优先级信息。最后，除非您的操作能够动态更改其并发状态，否则您不需要为<code>isConcurrent</code>密钥路径提供 KVO 通知。</p><p>有关键值观察以及如何在自定义对象中支持键值的更多信息，请参见《_<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177i">键值观察编程指南》</a>_。</p><h4 id="自定义操作对象的执行行为"><a href="#自定义操作对象的执行行为" class="headerlink" title="自定义操作对象的执行行为"></a>自定义操作对象的执行行为</h4><p>操作对象的配置在创建对象之后但将它们添加到队列之前进行。本节中描述的配置类型可以应用于所有操作对象，而不管您是<code>NSOperation</code>自己继承还是使用现有的子类。</p><h6 id="配置互操作依赖性"><a href="#配置互操作依赖性" class="headerlink" title="配置互操作依赖性"></a>配置互操作依赖性</h6><p>依赖关系是您序列化不同操作对象的执行的一种方法。依赖于其他操作的操作要等到它所依赖的所有操作完成执行后才能开始执行。因此，您可以使用依赖关系在两个操作对象之间创建简单的一对一依赖关系或构建复杂的对象依赖关系图。</p><p>要建立两个操作对象之间的依赖关系，请使用的<code>addDependency:</code>方法<code>NSOperation</code>。此方法创建从当前操作对象到您指定为参数的目标操作的单向依赖关系。这种依赖性意味着在目标对象完成执行之前，当前对象无法开始执行。依赖关系也不限于同一队列中的操作。操作对象管理它们自己的依赖关系，因此完全可以在操作之间创建依赖关系并将它们全部添加到不同的队列中。但是，不可接受的一件事是在操作之间创建循环依赖关系。这样做是程序员的错误，它将阻止受影响的操作运行。</p><p>当所有操作的依赖项本身都已完成执行时，操作对象通常可以执行。（如果自定义<code>isReady</code>方法的行为，则操作的就绪状态由您设置的条件决定。）如果操作对象在队列中，则该队列可随时开始执行该操作。如果您打算手动执行该操作，则取决于您调用该操作的<code>start</code>方法。</p><p><strong>要点：</strong> 在运行操作或将它们添加到操作队列之前，应始终配置依赖关系。之后添加的依赖关系可能不会阻止给定的操作对象运行。</p><p>依赖关系依赖于每一个操作对象每当对象状态发生变化时就发出适当的 KVO 通知。如果自定义操作对象的行为，则可能需要从自定义代码生成适当的 KVO 通知，以避免引起依赖关系问题。有关 KVO 通知和操作对象的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW10">维护 KVO 合规性</a>。有关配置依赖项的其他信息，请参见《_<a href="https://developer.apple.com/documentation/foundation/nsoperation">NSOperation 类参考》</a>_。</p><h6 id="更改工序的执行优先级"><a href="#更改工序的执行优先级" class="headerlink" title="更改工序的执行优先级"></a>更改工序的执行优先级</h6><p>对于添加到队列中的操作，执行顺序首先由排队的操作的就绪状态确定，然后由其相对优先级确定。就绪状态由操作对其他操作的依赖关系确定，但是优先级是操作对象本身的属性。默认情况下，所有新操作对象都具有“普通”优先级，但是您可以根据需要通过调用对象的<code>setQueuePriority:</code>方法来增加或减少该优先级。</p><p>优先级仅适用于同一操作队列中的操作。如果您的应用程序具有多个操作队列，则每个队列都将独立于其他队列的优先级分配给自己的操作。因此，低优先级操作仍然有可能在不同队列中先于高优先级操作执行。</p><p>优先级不能替代依赖关系。优先级确定操作队列开始仅执行当前准备就绪的那些操作的顺序。例如，如果队列同时包含高优先级和低优先级操作，并且两个操作都准备就绪，则该队列首先执行高优先级操作。但是，如果高优先级操作尚未准备就绪，但低优先级操作已就绪，则队列首先执行低优先级操作。如果要阻止一个操作在另一个操作完成之前开始，则必须使用依赖项（如<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW17">配置互操作依赖项中所述</a>）。</p><h6 id="更改底层线程优先级"><a href="#更改底层线程优先级" class="headerlink" title="更改底层线程优先级"></a>更改底层线程优先级</h6><p>在 OS X v10.6 和更高版本中，可以配置操作的基础线程的执行优先级。系统中的线程策略本身由内核管理，但通常，优先级较高的线程比低优先级的线程有更多的运行机会。在操作对象中，将线程优先级指定为 0.0 到 1.0 范围内的浮点值，其中 0.0 是最低优先级，而 1.0 是最高优先级。如果未指定显式线程优先级，则该操作将以默认线程优先级 0.5 运行。</p><p>若要设置操作的线程优先级，必须先将<code>setThreadPriority:</code>操作对象的方法添加到队列中（或手动执行），然后再调用该方法。当需要执行该操作时，默认<code>start</code>方法将使用您指定的值来修改当前线程的优先级。此新优先级<code>main</code>仅在您的操作方法期间有效。所有其他代码（包括操作的完成块）均以默认线程优先级运行。如果创建并发操作并因此覆盖该<code>start</code>方法，则必须自己配置线程优先级。</p><h6 id="设定完成区块"><a href="#设定完成区块" class="headerlink" title="设定完成区块"></a>设定完成区块</h6><p>在 OS X v10.6 和更高版本中，某个操作可以在其主要任务完成执行时执行完成块。您可以使用完成块来执行任何不属于主要任务的工作。例如，您可以使用此块来通知感兴趣的客户端操作本身已完成。并发操作对象可能使用此块来生成其最终的 KVO 通知。</p><p>要设置完成块，请使用的<code>setCompletionBlock:</code>方法<code>NSOperation</code>。传递给此方法的块应该没有参数，也没有返回值。</p><h4 id="实施操作对象的技巧"><a href="#实施操作对象的技巧" class="headerlink" title="实施操作对象的技巧"></a>实施操作对象的技巧</h4><p>尽管操作对象相当容易实现，但是在编写代码时，您应该注意几件事。以下各节描述了为操作对象编写代码时应考虑的因素。</p><h6 id="管理操作对象中的内存"><a href="#管理操作对象中的内存" class="headerlink" title="管理操作对象中的内存"></a>管理操作对象中的内存</h6><p>以下各节描述了操作对象中良好的内存管理的关键元素。有关 Objective-C 程序中的内存管理的一般信息，请参阅《_<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html#//apple_ref/doc/uid/10000011i">高级内存管理编程指南》</a>_。</p><p>######## 避免按线程存储</p><p>尽管大多数操作在线程上执行，但在非并行操作的情况下，该线程通常由操作队列提供。如果操作队列为您提供了一个线程，则应考虑该线程归队列所有，而不应被您的操作触及。特别是，您永远不要将任何数据与您自己创建或管理的线程无关。由操作队列管理的线程来来往往取决于系统和应用程序的需求。因此，使用每线程存储在操作之间传递数据是不可靠的，并且很可能失败。</p><p>对于操作对象，无论如何都没有理由使用每线程存储。初始化操作对象时，应为该对象提供完成其工作所需的一切。因此，操作对象本身提供了所需的上下文存储。所有传入和传出的数据都应存储在此处，直到可以将其重新集成到您的应用程序中或不再需要为止。</p><p>######## 根据需要保留对操作对象的引用</p><p>仅仅因为操作对象是异步运行的，您不应该假设您可以创建它们而忘记它们。它们仍然只是对象，您需要管理代码需要的对它们的任何引用。如果您需要在操作完成后从结果数据中检索结果，这尤其重要。</p><p>您应该始终保留自己对操作的引用的原因是，您以后可能没有机会向该队列询问对象。队列尽一切努力尽快分配和执行操作。在许多情况下，队列在添加后几乎立即开始执行操作。等到您自己的代码返回队列以获取对该操作的引用时，该操作可能已经完成并从队列中删除。</p><h6 id="处理错误和异常"><a href="#处理错误和异常" class="headerlink" title="处理错误和异常"></a>处理错误和异常</h6><p>因为操作本质上是应用程序内部的离散实体，所以它们负责处理出现的任何错误或异常。在 OS X v10.6 和更高版本中，该类<code>start</code>提供的默认方法<code>NSOperation</code>不会捕获异常。（在 OS X v10.5 中，start 方法确实捕获和抑制异常。）您自己的代码应始终直接捕获和抑制异常。它还应检查错误代码，并根据需要通知应用程序的适当部分。并且，如果替换了该<code>start</code>方法，则必须类似地在自定义实现中捕获任何异常，以防止它们离开基础线程的范围。</p><p>在错误情况类型中，您应该准备处理以下几种：</p><ul><li>检查并处理 UNIX <code>errno</code>风格的错误代码。</li><li>检查方法和函数返回的显式错误代码。</li><li>捕获由您自己的代码或其他系统框架引发的异常。</li><li>捕获由<code>NSOperation</code>类本身引发的异常，在以下情况下会引发异常：<ul><li>当操作尚未准备好执行但其<code>start</code>方法被调用时</li><li>当操作正在执行或完成时（可能是因为已取消），并且<code>start</code>再次调用了其方法</li><li>当您尝试将完成块添加到已执行或已完成的操作中时</li><li>当您尝试检索<code>NSInvocationOperation</code>已取消对象的结果时</li></ul></li></ul><p>如果您的自定义代码确实遇到异常或错误，则应采取所需的任何步骤将该错误传播到应用程序的其余部分。本<code>NSOperation</code>类不沿着错误的结果代码或例外传递给你的应用程序的其他部分提供了明确的方法。因此，如果此类信息对您的应用程序很重要，则必须提供必要的代码。</p><h4 id="确定操作对象的适当范围"><a href="#确定操作对象的适当范围" class="headerlink" title="确定操作对象的适当范围"></a>确定操作对象的适当范围</h4><p>尽管可以向操作队列中添加任意数量的操作，但是这样做通常是不切实际的。像任何对象一样，<code>NSOperation</code>该类的实例会消耗内存，并具有与其执行相关的实际成本。如果每个操作对象仅执行少量工作，并且创建了数以万计的对象，则可能会发现与实际工作相比，您花费的时间更多。而且，如果您的应用程序已经受到内存的限制，您可能会发现，在内存中只有成千上万个操作对象可能会进一步降低性能。</p><p>有效使用操作的关键是在需要做的工作量和保持计算机忙之间找到适当的平衡。尝试确保您的操作完成了合理的工作量。例如，如果您的应用程序创建了 100 个操作对象以对 100 个不同的值执行相同的任务，请考虑创建 10 个操作对象以分别处理 10 个值。</p><p>您还应该避免一次将大量操作添加到队列中，或者避免将操作对象连续添加到队列中的速度比处理对象快。而不是用操作对象填充队列，而是分批创建这些对象。当一个批处理完成执行时，请使用完成块告诉您的应用程序创建一个新的批处理。当您有很多工作要做时，您希望使队列中充满足够的操作，以使计算机保持繁忙状态，但是您不想一次创建太多的操作，而导致应用程序内存不足。</p><p>当然，您创建的操作对象的数量以及在每个对象中执行的工作量是可变的，并且完全取决于您的应用程序。您应该始终使用仪器之类的工具来帮助您在效率和速度之间找到适当的平衡。有关可用于收集代码指标的工具和其他性能工具的<em><a href="https://developer.apple.com/library/archive/documentation/Performance/Conceptual/PerformanceOverview/Introduction/Introduction.html#//apple_ref/doc/uid/TP40001410">概述</a>*，请参见</em><a href="https://developer.apple.com/library/archive/documentation/Performance/Conceptual/PerformanceOverview/Introduction/Introduction.html#//apple_ref/doc/uid/TP40001410">性能概述</a>*。</p><h4 id="执行操作"><a href="#执行操作" class="headerlink" title="执行操作"></a>执行操作</h4><p>最终，您的应用程序需要执行操作才能完成关联的工作。在本节中，您将学习几种执行操作的方法，以及如何在运行时操纵操作的执行。</p><h6 id="将操作添加到操作队列"><a href="#将操作添加到操作队列" class="headerlink" title="将操作添加到操作队列"></a>将操作添加到操作队列</h6><p>到目前为止，执行操作的最简单方法是使用操作队列，它是<code>NSOperationQueue</code>类的实例。您的应用程序负责创建和维护打算使用的任何操作队列。一个应用程序可以有任意数量的队列，但是在给定的时间点可能要执行多少操作有实际的限制。操作队列与系统一起使用，以将并发操作的数量限制为适合于可用核心和系统负载的值。因此，创建其他队列并不意味着您可以执行其他操作。</p><p>要创建队列，可以像在任何其他对象中一样在应用程序中分配它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSOperationQueue * aQueue &#x3D; [[NSOperationQueue alloc] init];</span><br></pre></td></tr></table></figure><p>要将操作添加到队列，请使用<code>addOperation:</code>方法。在 OS X v10.6 和更高版本中，您可以使用<code>addOperations:waitUntilFinished:</code>方法添加操作组，也可以使用以下方法将块对象直接添加到队列中（没有相应的操作对象）<code>addOperationWithBlock:</code>方法。这些方法中的每一个都将一个操作（或多个操作）排队，并通知队列它应该开始处理它们。在大多数情况下，操作会在添加到队列后立即执行，但是由于多种原因，操作队列可能会延迟排队操作的执行。具体来说，如果排队的操作依赖于尚未完成的其他操作，则执行可能会延迟。如果操作队列本身被挂起或已经在执行其最大数量的并发操作，则执行也可能会延迟。以下示例显示了将操作添加到队列的基本语法。</p><table><thead><tr><th><code>[aQueue addOperation：anOp]; //添加一个操作</code></th></tr></thead><tbody><tr><td><code>[aQueue addOperations：anArrayOfOps waitUntilFinished：NO]；//添加多个操作</code></td></tr><tr><td><code>[aQueue addOperationWithBlock：^ &#123;</code></td></tr><tr><td><code>/* 做一点事。* /</code></td></tr><tr><td><code>&#125;];</code></td></tr></tbody></table><p><strong>重要：</strong></p><p>在将操作对象添加到队列之前，应该对其进行所有必要的配置和修改，因为一旦添加了操作对象，该操作就可以在任何时间运行，对于进行更改以达到预期效果而言可能为时已晚。</p><p>尽管<code>NSOperationQueue</code>该类是为同时执行操作而设计的，但是可以强制单个队列一次仅运行一个操作。的<code>setMaxConcurrentOperationCount:</code>方法可让您配置操作队列对象的最大并发操作数。将值 1 传递给此方法将导致队列一次仅执行一个操作。尽管一次只能执行一个操作，但是执行的顺序仍然基于其他因素，例如每个操作的就绪性及其分配的优先级。因此，串行化操作队列所提供的行为与 Grand Central Dispatch 中的串行调度队列所提供的行为完全不同。如果操作对象的执行顺序对您很重要，则应在将操作添加到队列之前使用依赖关系来建立顺序。有关配置依赖关系的信息，请参阅《<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW17">配置互操作依赖关系》</a>。</p><p>有关使用操作队列的信息，请参见*<a href="https://developer.apple.com/documentation/foundation/nsoperationqueue">NSOperationQueue 类参考</a>*。有关串行调度队列的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW6">创建串行调度队列</a>。</p><h6 id="手动执行操作"><a href="#手动执行操作" class="headerlink" title="手动执行操作"></a>手动执行操作</h6><p>尽管操作队列是运行操作对象的最方便的方法，但是也可以在没有队列的情况下执行操作。但是，如果选择手动执行操作，则应在代码中采取一些预防措施。特别是，该操作必须准备就绪可以运行，并且您必须始终使用其<code>start</code>方法启动它。</p><p>直到操作的<code>isReady</code>方法返回后，才认为该操作可以运行<code>YES</code>。该<code>isReady</code>方法被集成到<code>NSOperation</code>该类的依赖管理系统中，以提供操作的依赖状态。只有清除了其依赖性后，才可以开始执行操作。</p><p>手动执行操作时，应始终使用该<code>start</code>方法开始执行。您使用此方法，而不是<code>main</code>其他方法，因为该<code>start</code>方法在实际运行您的自定义代码之前会执行多项安全检查。特别是，默认<code>start</code>方法会生成操作正确处理其依赖关系所需的 KVO 通知。如果该操作已被取消，则此方法还可以正确避免执行该操作，并且如果您的操作实际上尚未准备好运行，则该方法将引发异常。</p><p>如果您的应用程序定义了并发操作对象，则还应该考虑<code>isConcurrent</code>在启动它们之前调用操作方法。在此方法返回的情况下<code>NO</code>，您的本地代码可以决定是在当前线程中同步执行操作还是首先创建单独的线程。但是，实施这种检查完全取决于您。</p><p>清单 2-8 显示了在手动执行操作之前应执行的检查类型的简单示例。如果该方法返回<code>NO</code>，则可以安排一个计时器，稍后再调用该方法。然后，您将继续重新安排计时器的时间，直到方法返回<code>YES</code>，这可能是由于操作被取消而发生的。</p><p><strong>清单 2-8</strong> 手动执行操作对象</p><table><thead><tr><th><code>-（BOOL）performOperation：（NSOperation *）anOp</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>BOOL ranIt = NO;</code></td></tr><tr><td>``</td></tr><tr><td><code>如果（[anOp isReady] &amp;&amp;！[anOp isCancelled]）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>如果（！[anOp isConcurrent]）</code></td></tr><tr><td><code>[anOp开始]；</code></td></tr><tr><td><code>其他</code></td></tr><tr><td><code>[NSThread detachNewThreadSelector：@selector（开始）</code></td></tr><tr><td><code>toTarget：anOp withObject：nil];</code></td></tr><tr><td><code>ranIt =是；</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>否则，如果（[anOp isCancelled]）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//如果在开始之前已将其取消，</code></td></tr><tr><td><code>//将操作移至完成状态。</code></td></tr><tr><td><code>[self willChangeValueForKey：@“ isFinished”]；</code></td></tr><tr><td><code>[self willChangeValueForKey：@“ isExecuting”];</code></td></tr><tr><td><code>执行=否;</code></td></tr><tr><td><code>完成=是；</code></td></tr><tr><td><code>[self didChangeValueForKey：@“ isExecuting”];</code></td></tr><tr><td><code>[self didChangeValueForKey：@“ isFinished”]；</code></td></tr><tr><td>``</td></tr><tr><td><code>//将ranIt设置为YES，以防止操作</code></td></tr><tr><td><code>//将来再次传递给此方法。</code></td></tr><tr><td><code>ranIt =是；</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>返回ranIt;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><h6 id="取消操作"><a href="#取消操作" class="headerlink" title="取消操作"></a>取消操作</h6><p>一旦添加到操作队列中，操作对象将有效地归队列所有，并且无法删除。使操作出队的唯一方法是取消操作。您可以通过调用单个操作对象的<code>cancel</code>方法来取消它，也可以通过调用<code>cancelAllOperations</code>队列对象的方法来取消队列中的所有操作对象。</p><p>仅当确定不再需要操作时，才应取消操作。发出取消命令会将操作对象置于“已取消”状态，这将阻止其运行。由于取消的操作仍被认为是“完成”的，因此依赖于该操作的对象将收到适当的 KVO 通知以清除该依赖关系。因此，更常见的是响应某些重大事件来取消所有排队的操作，例如应用程序退出或用户明确要求取消，而不是有选择地取消操作。</p><h6 id="等待操作完成"><a href="#等待操作完成" class="headerlink" title="等待操作完成"></a>等待操作完成</h6><p>为了获得最佳性能，您应将操作设计为尽可能异步，使应用程序在执行操作时可以自由执行其他工作。如果创建操作的代码也处理该操作的结果，则可以使用<code>waitUntilFinished</code>方法<code>NSOperation</code>来阻止该代码，直到操作完成。但是，通常，如果可以帮助，最好避免调用此方法。阻塞当前线程可能是一个方便的解决方案，但是它的确在代码中引入了更多的序列化，并限制了并发的总量。</p><p><strong>重要：</strong> 永远不要等待应用程序主线程中的操作。您只能从辅助线程或其他操作中执行此操作。阻塞主线程会阻止您的应用程序响应用户事件，并可能使您的应用程序显示为无响应。</p><p>除了等待单个操作完成之外，您还可以通过调用的<code>waitUntilAllOperationsAreFinished</code>方法来等待队列中的所有操作<code>NSOperationQueue</code>。等待整个队列结束时，请注意您的应用程序的其他线程仍可以向队列添加操作，从而延长了等待时间。</p><h6 id="挂起和恢复队列"><a href="#挂起和恢复队列" class="headerlink" title="挂起和恢复队列"></a>挂起和恢复队列</h6><p>如果要暂时停止操作的执行，则可以使用<code>setSuspended:</code>方法暂停相应的操作队列。暂停队列不会导致已经执行的操作在其任务中间暂停。它只是防止新操作被安排执行。您可能会暂停队列以响应用户暂停任何正在进行的工作的请求，因为期望用户最终可能希望恢复该工作。</p><h2 id="调度队列-1"><a href="#调度队列-1" class="headerlink" title="调度队列"></a>调度队列</h2><p>大中央调度（GCD）调度队列是执行任务的强大工具。调度队列使您可以相对于调用者异步或同步执行任意代码块。您可以使用调度队列来执行几乎在单独的线程上执行过的所有任务。调度队列的优点是，与相应的线程代码相比，它们更易于使用并且在执行这些任务时效率更高。</p><p>本章介绍了分派队列，以及有关如何在应用程序中使用它们执行常规任务的信息。如果要用调度队列替换现有的线程代码，可以在<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/ThreadMigration/ThreadMigration.html#//apple_ref/doc/uid/TP40008091-CH105-SW1">《从线程迁移》中</a>找到一些其他技巧。</p><h4 id="关于调度队列"><a href="#关于调度队列" class="headerlink" title="关于调度队列"></a>关于调度队列</h4><p>调度队列是在应用程序中异步并发执行任务的简便方法。一个<em>任务</em>很简单，就是你的应用程序需要执行一些工作。例如，您可以定义任务来执行一些计算，创建或修改数据结构，处理从文件中读取的某些数据或任何其他事物。通过将相应的代码放在函数或块对象内并将其添加到调度队列中，可以定义任务。</p><p>调度队列是一个类似对象的结构，用于管理您提交给它的任务。所有调度队列均为先进先出数据结构。因此，添加到队列中的任务始终以与添加任务相同的顺序启动。GCD 自动为您提供了一些调度队列，但您可以为特定目的创建其他调度队列。表 3-1 列出了可用于您的应用程序的调度队列的类型以及如何使用它们。</p><table><thead><tr><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">序列号</td><td align="left">串行队列（也称为<em>专用调度队列</em>）按添加到队列的顺序一次执行一个任务。当前执行的任务在分派队列管理的不同线程（随任务的不同而不同）上运行。串行队列通常用于同步对特定资源的访问。您可以根据需要创建任意数量的串行队列，并且每个队列相对于所有其他队列可以同时运行。换句话说，如果创建四个串行队列，则每个队列一次只能执行一个任务，但是最多仍可以同时执行四个任务，每个队列一个。有关如何创建串行队列的信息，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW6">创建串行调度队列</a>。</td></tr><tr><td align="left">同时</td><td align="left">并发队列（也称为<em>全局调度队列的一种</em>）可以并发执行一个或多个任务，但是任务仍然按照它们添加到队列中的顺序启动。当前执行的任务在分派队列管理的不同线程上运行。在任何给定点执行的任务的确切数量是可变的，并且取决于系统条件。在 iOS 5 及更高版本中，您可以通过指定<code>DISPATCH_QUEUE_CONCURRENT</code>作为队列类型来自己创建并发调度队列。另外，有四个预定义的全局并发队列供您的应用程序使用。有关如何获取全局并发队列的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW5">获取全局并发调度队列</a>。</td></tr><tr><td align="left">主调度队列</td><td align="left">主调度队列是全局可用的串行队列，可在应用程序的主线程上执行任务。该队列与应用程序的运行循环（如果存在）一起工作，以使排队任务的执行与附加到运行循环的其他事件源的执行交织在一起。因为它在应用程序的主线程上运行，所以通常将其用作应用程序的关键同步点。尽管您无需创建主调度队列，但仍需要确保应用程序适当地耗尽它。有关如何管理此队列的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW15">在主线程上执行任务</a>。</td></tr></tbody></table><p>当涉及到向应用程序添加并发时，分派队列提供了一些优于线程的优点。最直接的好处是工作队列编程模型的简单性。使用线程，您必须为要执行的工作以及线程本身的创建和管理编写代码。调度队列使您可以专注于实际要执行的工作，而不必担心线程的创建和管理。而是由系统为您处理所有线程的创建和管理。优点是该系统比任何单个应用程序都能够更有效地管理线程。系统可以根据可用资源和当前系统状况动态扩展线程数量。此外，</p><p>尽管您可能认为很难为调度队列重写代码，但是为调度队列编写代码通常比为线程编写代码容易。编写代码的关键是设计独立且能够异步运行的任务。（实际上，这对于线程和调度队列都是正确的。）但是，调度队列具有优势的是可预测性。如果您有两个任务访问相同的共享资源但在不同的线程上运行，则每个线程都可以首先修改资源，并且您需要使用锁来确保这两个任务不会同时修改该资源。使用调度队列，您可以将两个任务都添加到串行调度队列中，以确保在任何给定时间只有一个任务修改了资源。</p><p>尽管您可能正确地指出了在串行队列中运行的两个任务不能同时运行，但是您必须记住，如果两个线程同时进行锁定，则线程提供的任何并发性都会丢失或显着减少。更重要的是，线程模型需要创建两个线程，这两个线程同时占用内核和用户空间内存。调度队列不会为它们的线程支付相同的内存损失，并且它们使用的线程将保持繁忙并且不会被阻塞。</p><p>关于调度队列，需要记住的其他一些关键点包括：</p><ul><li>调度队列相对于其他调度队列同时执行其任务。任务的序列化仅限于单个调度队列中的任务。</li><li>系统确定任何一次执行的任务总数。因此，在 100 个不同的队列中具有 100 个任务的应用程序可能不会并发执行所有这些任务（除非它具有 100 个或更多个有效内核）。</li><li>选择要启动的新任务时，系统会考虑队列优先级。有关如何设置串行队列的优先级的信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW7">为</a>队列<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW7">提供清理功能</a>。</li><li>队列中的任务在添加到队列时必须准备就绪才能执行。（如果您以前使用过 Cocoa 操作对象，请注意，此行为不同于模型操作使用的行为。）</li><li>专用调度队列是引用计数的对象。请注意，除了将队列保留在您自己的代码中之外，还可以将调度源附加到队列并增加其保留计数。因此，您必须确保取消所有调度源，并通过适当的释放调用平衡所有保留调用。有关保留和释放队列的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW11">调度队列的内存管理</a>。有关调度源的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW12">关于调度源</a>。</li></ul><p>有关用于操作调度队列的接口的更多信息，请参见<em>Grand Central Dispatch（GCD）参考</em>。</p><h4 id="队列相关技术"><a href="#队列相关技术" class="headerlink" title="队列相关技术"></a>队列相关技术</h4><p>除了调度队列，Grand Central Dispatch 还提供了几种使用队列的技术来帮助您管理代码。表 3-2 列出了这些技术，并提供了指向您可以找到有关它们的更多信息的链接。</p><table><thead><tr><th align="left">技术</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">派遣组</td><td align="left">调度组是一种监视一组块对象是否完成的方法。（您可以根据需要同步或异步监视这些块。）组为依赖于其他任务完成的代码提供了一种有用的同步机制。有关使用组的更多信息，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW25">等待队列中的任务组</a>。</td></tr><tr><td align="left">调度信号量</td><td align="left">调度信号量与传统信号量相似，但通常更为有效。仅当由于信号量不可用而需要阻塞调用线程时，调度信号量才调用内核。如果信号灯可用，则不进行内核调用。有关如何使用调度信号量的示例，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW24">使用调度信号量来调节有限资源的使用</a>。</td></tr><tr><td align="left">派遣来源</td><td align="left">调度源响应于特定类型的系统事件而生成通知。您可以使用调度源来监视事件，例如流程通知，信号和描述符事件。发生事件时，调度源将您的任务代码异步提交到指定的调度队列进行处理。有关创建和使用调度源的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW1">调度源</a>。</td></tr></tbody></table><h4 id="使用块实现任务"><a href="#使用块实现任务" class="headerlink" title="使用块实现任务"></a>使用块实现任务</h4><p>块对象是一种基于 C 的语言功能，可以在 C， Objective-C 和 C ++代码中使用。块使定义一个独立的工作单元变得容易。尽管它们看起来类似于函数指针，但实际上是由类似于对象的基础数据结构表示一个块，并由编译器为您创建和管理该块。编译器打包您提供的代码（以及所有相关数据），并将其封装为可存在于堆中并在应用程序中传递的形式。</p><p>块的主要优点之一是它们能够使用其词法范围之外的变量。当您在函数或方法中定义一个块时，该块在某些方面可以充当传统代码块。例如，一个块可以读取在父作用域中定义的变量的值。块访问的变量被复制到堆上的块数据结构中，以便块稍后可以访问它们。将块添加到调度队列时，通常必须将这些值保留为只读格式。但是，同步执行的块也可以使用带有<code>__block</code>关键字前缀的变量，以将数据返回到父级的调用范围。</p><p>您可以使用类似于函数指针的语法来声明与代码内联的块。块和函数指针之间的主要区别在于，块名前面带有脱字符号（<code>^</code>）而不是星号（<code>*</code>）。像函数指针一样，您可以将参数传递给块并从中接收返回值。清单 3-1 显示了如何在代码中同步声明和执行块。该变量<code>aBlock</code>声明为采用单个整数参数且不返回任何值的块。然后将与该原型匹配的实际块分配给<code>aBlock</code>并声明为内联。最后一行立即执行该块，将指定的整数打印到标准输出中。</p><p><strong>清单 3-1</strong> 一个简单的块示例</p><table><thead><tr><th><code>int x = 123;</code></th></tr></thead><tbody><tr><td><code>整数y = 456;</code></td></tr><tr><td>``</td></tr><tr><td><code>//块声明和赋值</code></td></tr><tr><td><code>无效（^ aBlock）（int）= ^（int z）&#123;</code></td></tr><tr><td><code>printf（“％d％d％d \ n”，x，y，z）;</code></td></tr><tr><td><code>&#125;;</code></td></tr><tr><td>``</td></tr><tr><td><code>//执行块</code></td></tr><tr><td><code>aBlock（789）; //打印：123456789</code></td></tr></tbody></table><p>以下是设计模块时应考虑的一些关键准则的摘要：</p><ul><li>对于计划使用分派队列异步执行的块，可以从父函数或方法中捕获标量变量并将其用于块中，这是安全的。但是，您不应尝试捕获由调用上下文分配和删除的大型结构或其他基于指针的变量。在您的块执行时，该指针引用的内存可能会消失。当然，自己分配内存（或对象）并将该内存的所有权明确移交给该块是安全的。</li><li>调度队列复制添加到其中的块，并在完成执行时释放块。换句话说，在将块添加到队列之前，无需显式复制块。</li><li>尽管在执行小任务时，队列比原始线程更有效，但是创建块并在队列上执行它们仍然有开销。如果一个块的工作量太少，则以内联方式执行它比将其分配到队列中要便宜。判断某个块是否工作量太少的方法是使用性能工具收集每个路径的指标并进行比较。</li><li>不要缓存相对于基础线程的数据，并希望可以从其他块访问该数据。如果同一队列中的任务需要共享数据，请改用分派队列的上下文指针存储数据。有关如何访问调度队列的上下文数据的更多信息，请参见使用队列<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW13">存储自定义上下文信息</a>。</li><li>如果您的块创建了多个 Objective-C 对象，则可能需要将部分代码的代码封装在@autorelease 块中，以处理这些对象的内存管理。尽管 GCD 调度队列具有自己的自动释放池，但它们不保证这些池何时耗尽。如果您的应用程序受内存限制，则创建自己的自动释放池可让您以更规则的时间间隔释放自动释放对象的内存。</li></ul><p>有关块的更多信息，包括如何声明和使用它们，请参见*<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40007502">块编程主题</a>*。有关如何将块添加到调度队列中的信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW20">将任务添加到队列中</a>。</p><h4 id="创建和管理调度队列"><a href="#创建和管理调度队列" class="headerlink" title="创建和管理调度队列"></a>创建和管理调度队列</h4><p>在将任务添加到队列之前，必须确定要使用的队列类型以及打算如何使用它。调度队列可以串行或并行执行任务。另外，如果您对队列有特定的用途，则可以相应地配置队列属性。以下各节说明如何创建调度队列并配置它们以供使用。</p><h6 id="获取全局并发调度队列"><a href="#获取全局并发调度队列" class="headerlink" title="获取全局并发调度队列"></a>获取全局并发调度队列</h6><p>当您有多个可以并行运行的任务时，并发调度队列很有用。并发队列仍然是一个队列，因为它按照先进先出的顺序使任务出队。但是，并发队列可能会在其他先前任务完成之前使其他任务出队。并发队列在任何给定时刻执行的实际任务数是可变的，并且可以随着应用程序条件的变化而动态变化。许多因素会影响并发队列执行的任务数量，包括可用核心的数量，其他进程正在完成的工作量以及其他串行调度队列中任务的数量和优先级。</p><p>系统为每个应用程序提供四个并发调度队列。这些队列对于应用程序是全局的，仅按优先级进行区分。因为它们是全局的，所以您无需显式创建它们。相反，您可以使用<code>dispatch_get_global_queue</code>函数来请求队列之一，如以下示例所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t aQueue &#x3D; dispatch_get_global_queue（DISPATCH_QUEUE_PRIORITY_DEFAULT，0）;</span><br></pre></td></tr></table></figure><p>除了获取默认的并发队列外，还可以通过将<code>DISPATCH_QUEUE_PRIORITY_HIGH</code>和<code>DISPATCH_QUEUE_PRIORITY_LOW</code>常量传递给函数来获取高优先级和低优先级级别的队列，或者通过传递常量来获取背景队列<code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code>。如您所料，高优先级并发队列中的任务比默认队列和低优先级队列中的任务先执行。同样，默认队列中的任务在低优先级队列中的任务之前执行。</p><p><strong>注意：</strong> 该<code>dispatch_get_global_queue</code>函数的第二个参数保留给以后的扩展。现在，您应该始终通过<code>0</code>此参数。</p><p>尽管调度队列是引用计数的对象，但是您无需保留和释放全局并发队列。因为它们对于您的应用程序是全局的，所以将忽略对这些队列的保留和释放调用。因此，您不需要存储对这些队列的引用。<code>dispatch_get_global_queue</code>只要需要引用其中之一，就可以调用该函数。</p><h6 id="创建串行调度队列"><a href="#创建串行调度队列" class="headerlink" title="创建串行调度队列"></a>创建串行调度队列</h6><p>当您希望任务以特定顺序执行时，串行队列很有用。串行队列一次只执行一个任务，并且总是从队列的开头拉任务。您可以使用串行队列而不是锁来保护共享资源或可变数据结构。与锁不同，串行队列可确保任务以可预测的顺序执行。而且，只要您异步地将任务提交到串行队列，该队列就永远不会死锁。</p><p>与为您创建的并发队列不同，您必须显式创建和管理要使用的任何串行队列。您可以为您的应用程序创建任意数量的串行队列，但应避免创建大量串行队列，这仅仅是为了同时执行尽可能多的任务。如果要同时执行大量任务，请将其提交到全局并发队列之一。创建串行队列时，请尝试确定每个队列的用途，例如保护资源或同步应用程序的某些关键行为。</p><p>清单 3-2 显示了创建自定义串行队列所需的步骤。该<code>dispatch_queue_create</code>函数有两个参数：队列名称和一组队列属性。调试器和性能工具显示队列名称，以帮助您跟踪任务的执行方式。队列属性保留供将来使用，应为<code>NULL</code>。</p><p><strong>清单 3-2</strong> 创建一个新的串行队列</p><table><thead><tr><th><code>dispatch_queue_t队列；</code></th></tr></thead><tbody><tr><td><code>队列= dispatch_queue_create（“ com.example.MyQueue”，NULL）;</code></td></tr></tbody></table><p>除了您创建的任何自定义队列之外，系统还会自动创建一个串行队列并将其绑定到应用程序的主线程。有关获取主线程队列的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW3">在运行时获取公共队列</a>。</p><h6 id="在运行时获取通用队列"><a href="#在运行时获取通用队列" class="headerlink" title="在运行时获取通用队列"></a>在运行时获取通用队列</h6><p>Grand Central Dispatch 提供的功能使您可以从应用程序访问几个常见的调度队列：</p><ul><li>使用该<code>dispatch_get_current_queue</code>功能进行调试或测试当前队列的身份。从一个块对象内部调用该函数将返回该块已提交到的队列（现在大概在该队列上运行）。从块外部调用此函数将为您的应用程序返回默认的并发队列。</li><li>使用该<code>dispatch_get_main_queue</code>函数获取与应用程序的主线程关联的串行调度队列。此队列是为 Cocoa 应用程序以及在主线程上调用该<code>dispatch_main</code>函数或配置运行循环（使用<code>CFRunLoopRef</code>类型或<code>NSRunLoop</code>对象）的应用程序自动创建的。</li><li>使用该<code>dispatch_get_global_queue</code>函数获取任何共享的并发队列。有关更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW5">获取全局并发调度队列</a>。</li></ul><h6 id="调度队列的内存管理"><a href="#调度队列的内存管理" class="headerlink" title="调度队列的内存管理"></a>调度队列的内存管理</h6><p>调度队列和其他调度对象是引用计数的数据类型。创建串行调度队列时，它的初始引用计数为 1。可以使用<code>dispatch_retain</code>和<code>dispatch_release</code>函数根据需要增加和减少引用计数。当队列的引用计数达到零时，系统异步取消分配该队列。</p><p>保留和释放调度对象（例如队列）很重要，以确保它们在使用时仍保留在内存中。与内存管理的 Cocoa 对象一样，一般规则是，如果计划使用传递给代码的队列，则应在使用该队列之前保留该队列，并在不再需要时释放它。这种基本模式可确保队列在您使用期间一直保留在内存中。</p><p><strong>注意：</strong> 您不需要保留或释放任何全局调度队列，包括并发调度队列或主调度队列。保留或释放队列的任何尝试都将被忽略。</p><p>即使实现垃圾收集的应用程序，您仍然必须保留并释放您的调度队列和其他调度对象。Grand Central Dispatch 不支持垃圾回收模型来回收内存。</p><h6 id="使用队列存储自定义上下文信息"><a href="#使用队列存储自定义上下文信息" class="headerlink" title="使用队列存储自定义上下文信息"></a>使用队列存储自定义上下文信息</h6><p>所有调度对象（包括调度队列）都允许您将自定义上下文数据与该对象相关联。要在给定对象上设置并获取此数据，请使用<code>dispatch_set_context</code>和<code>dispatch_get_context</code>函数。系统不会以任何方式使用您的自定义数据，这取决于您在适当的时间分配和取消分配数据。</p><p>对于队列，您可以使用上下文数据来存储指向 Objective-C 对象或其他数据结构的指针，该指针或数据结构有助于识别队列或其在代码中的预期用途。您可以使用队列的终结器函数在释放上下文数据之前从队列中取消分配（或取消关联）您的上下文数据。<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW8">清单 3-3</a>给出了如何编写一个终结器函数来清除队列上下文数据的示例。</p><h6 id="提供队列的清理功能"><a href="#提供队列的清理功能" class="headerlink" title="提供队列的清理功能"></a>提供队列的清理功能</h6><p>创建串行调度队列后，可以附加终结器函数，以在释放队列时执行任何自定义清除。调度队列是引用计数的对象，您可以使用该<code>dispatch_set_finalizer_f</code>函数指定当队列的引用计数达到零时要执行的函数。您可以使用此函数清除与队列关联的上下文数据，并且仅当上下文指针不是时才调用该函数<code>NULL</code>。</p><p>清单 3-3 显示了一个自定义的终结器函数和一个创建队列并安装该终结器的函数。队列使用终结器功能释放存储在队列上下文指针中的数据。（从代码引用的<code>myInitializeDataContextFunction</code>和<code>myCleanUpDataContextFunction</code>函数是自定义函数，您将提供这些函数来初始化和清除数据结构本身的内容。）传递给 finalizer 函数的上下文指针包含与队列关联的数据对象。</p><p><strong>清单 3-3</strong> 安装队列清除功能</p><table><thead><tr><th><code>无效myFinalizerFunction（无效*上下文）</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>MyDataContext * theData =（MyDataContext *）上下文;</code></td></tr><tr><td>``</td></tr><tr><td><code>//清理结构的内容</code></td></tr><tr><td><code>myCleanUpDataContextFunction（theData）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//现在释放结构本身。</code></td></tr><tr><td><code>免费（theData）;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>dispatch_queue_t createMyQueue（）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>MyDataContext *数据=（MyDataContext *）malloc（sizeof（MyDataContext））;</code></td></tr><tr><td><code>myInitializeDataContextFunction（data）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//创建队列并设置上下文数据。</code></td></tr><tr><td><code>dispatch_queue_t serialQueue = dispatch_queue_create（“ com.example.CriticalTaskQueue”，NULL）;</code></td></tr><tr><td><code>dispatch_set_context（serialQueue，data）;</code></td></tr><tr><td><code>dispatch_set_finalizer_f（serialQueue，＆myFinalizerFunction）;</code></td></tr><tr><td>``</td></tr><tr><td><code>返回serialQueue;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><h4 id="将任务添加到队列"><a href="#将任务添加到队列" class="headerlink" title="将任务添加到队列"></a>将任务添加到队列</h4><p>要执行任务，必须将其分派到适当的分派队列。您可以同步或异步分配任务，也可以单个或成组分配任务。进入队列后，鉴于队列的约束和队列中已有的任务，该队列将负责尽快执行您的任务。本节介绍了一些将任务分配到队列的技术，并介绍了每种方法的优点。</p><h6 id="将单个任务添加到队列"><a href="#将单个任务添加到队列" class="headerlink" title="将单个任务添加到队列"></a>将单个任务添加到队列</h6><p>有两种将任务添加到队列的方法：异步或同步。如果可能，与同步方法相比，首选使用<code>dispatch_async</code>和<code>dispatch_async_f</code>函数进行异步执行。将块对象或函数添加到队列时，无法知道该代码何时执行。结果，异步添加块或函数使您可以调度代码的执行，并继续从调用线程执行其他工作。如果您是从应用程序的主线程中调度任务的，那么这尤其重要-可能是响应某些用户事件。</p><p>尽管您应该尽可能异步地添加任务，但是有时仍然需要同步添加任务以防止出现竞争情况或其他同步错误。在这些情况下，可以使用<code>dispatch_sync</code>和<code>dispatch_sync_f</code>函数将任务添加到队列中。这些函数将阻止当前执行线程，直到指定任务完成执行为止。</p><p><strong>重要说明：</strong> 切勿在计划传递给该函数的队列中执行的任务中调用<code>dispatch_sync</code>or <code>dispatch_sync_f</code>函数。这对于保证死锁的串行队列特别重要，但对于并发队列也应避免。</p><p>以下示例显示如何使用基于块的变体异步和同步地调度任务：</p><table><thead><tr><th><code>dispatch_queue_t myCustomQueue;</code></th></tr></thead><tbody><tr><td><code>myCustomQueue = dispatch_queue_create（“ com.example.MyCustomQueue”，NULL）;</code></td></tr><tr><td>``</td></tr><tr><td><code>dispatch_async（myCustomQueue，^ &#123;</code></td></tr><tr><td><code>printf（“在这里做一些工作。\ n”）;</code></td></tr><tr><td><code>&#125;）;</code></td></tr><tr><td>``</td></tr><tr><td><code>printf（“第一个块可能已经运行，也可能没有运行。\ n”）;</code></td></tr><tr><td>``</td></tr><tr><td><code>dispatch_sync（myCustomQueue，^ &#123;</code></td></tr><tr><td><code>printf（“在这里做更多的工作。\ n”）;</code></td></tr><tr><td><code>&#125;）;</code></td></tr><tr><td><code>printf（“两个块都已完成。\ n”）;</code></td></tr></tbody></table><h6 id="完成任务后执行补全"><a href="#完成任务后执行补全" class="headerlink" title="完成任务后执行补全"></a>完成任务后执行补全</h6><p>就其性质而言，分派到队列的任务独立于创建任务的代码运行。但是，当任务完成后，您的应用程序可能仍希望得到该事实的通知，以便可以合并结果。在传统的异步编程中，您可以使用回调机制来执行此操作，但是对于调度队列，您可以使用完成块。</p><p>完成块只是您在原始任务结束时分派到队列的另一段代码。调用代码通常在启动任务时将完成块作为参数提供。任务代码要做的就是在完成工作后将指定的块或函数提交到指定的队列。</p><p>清单 3-4 显示了使用 blocks 实现的平均函数。平均函数的最后两个参数允许调用者指定在报告结果时要使用的队列和块。在求平均值函数的值之后，它将结果传递到指定的块并将其分派到队列。为了防止过早释放队列，至关重要的是首先保留该队列，并在分派完成块后将其释放。</p><p><strong>清单 3-4</strong> 在任务执行后执行完成回调</p><table><thead><tr><th><code>void average_async（int * data，size_t len，</code></th></tr></thead><tbody><tr><td><code>dispatch_queue_t队列，无效（^ block）（int））</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//保留用户提供的队列</code></td></tr><tr><td><code>//确保它在完成之前不会消失</code></td></tr><tr><td><code>//可以调用块。</code></td></tr><tr><td><code>dispatch_retain（queue）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//在默认的并发队列上进行工作，然后</code></td></tr><tr><td><code>//用结果调用用户提供的块。</code></td></tr><tr><td><code>dispatch_async（dispatch_get_global_queue（DISPATCH_QUEUE_PRIORITY_DEFAULT，0），^ &#123;</code></td></tr><tr><td><code>int avg = average（data，len）;</code></td></tr><tr><td><code>dispatch_async（queue，^ &#123;block（avg）;&#125;）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//完成后释放用户提供的队列</code></td></tr><tr><td><code>dispatch_release（queue）;</code></td></tr><tr><td><code>&#125;）;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><h6 id="同时执行循环迭代"><a href="#同时执行循环迭代" class="headerlink" title="同时执行循环迭代"></a>同时执行循环迭代</h6><p>并发调度队列可能会提高性能的一个地方是您的循环执行固定数量的迭代。例如，假设您有一个<code>for</code>循环，该循环在每次循环迭代中都完成了一些工作：</p><table><thead><tr><th>`对于（i = 0; i</th></tr></thead><tbody><tr><td><code>printf（“％u \ n”，i）;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>如果在每次迭代过程中执行的工作与在所有其他迭代过程中执行的工作不同，并且每个连续循环的完成顺序并不重要，则可以使用<code>dispatch_apply</code>或<code>dispatch_apply_f</code>函数的调用来替换循环。这些函数为每次循环迭代将指定的块或函数提交到队列一次。因此，当调度到并发队列时，可以同时执行多个循环迭代。</p><p>您可以在调用<code>dispatch_apply</code>或时指定串行队列或并发队列<code>dispatch_apply_f</code>。传递并发队列使您可以同时执行多个循环迭代，这是使用这些功能的最常用方法。尽管使用串行队列是允许的，并且可以为您的代码做正确的事，但是使用这种队列与将循环保留在原处相比并没有真正的性能优势。</p><p><strong>重要说明：</strong> 和常规<code>for</code>循环一样，<code>dispatch_apply</code>and <code>dispatch_apply_f</code>函数直到所有循环迭代完成后才返回。因此，当从已经从队列上下文执行的代码中调用它们时，应该小心。如果您作为参数传递给函数的队列是一个串行队列，并且与执行当前代码的队列相同，则调用这些函数将使队列死锁。</p><p>因为它们有效地阻塞了当前线程，所以从主线程调用这些函数时也应小心，因为它们可能阻止事件处理循环及时响应事件。如果您的循环代码需要大量的处理时间，则可能需要从其他线程调用这些函数。</p><p>清单 3-5 显示了如何<code>for</code>用<code>dispatch_apply</code>语法替换前面的循环。传递给<code>dispatch_apply</code>函数的块必须包含一个标识当前循环迭代的参数。执行该块时，此参数的值<code>0</code>用于第一次迭代，<code>1</code>用于第二次迭代，依此类推。最后一次迭代的参数值是<code>count - 1</code>，其中<code>count</code>是迭代的总数。</p><p><strong>清单 3-5 同时</strong> 执行<code>for</code>循环的迭代</p><table><thead><tr><th><code>dispatch_queue_t队列= dispatch_get_global_queue（DISPATCH_QUEUE_PRIORITY_DEFAULT，0）;</code></th></tr></thead><tbody><tr><td>``</td></tr><tr><td><code>dispatch_apply（count，queue，^（size_t i）&#123;</code></td></tr><tr><td><code>printf（“％u \ n”，i）;</code></td></tr><tr><td><code>&#125;）;</code></td></tr></tbody></table><p>您应该确保您的任务代码在每次迭代中都进行合理的工作量。与您调度到队列中的任何块或函数一样，安排该代码执行的开销。如果循环的每次迭代仅执行少量工作，则调度代码的开销可能会超过将其分派到队列可能带来的性能收益。如果在测试期间发现这是正确的，则可以使用跨步来增加每次循环迭代期间执行的工作量。通过跨步，您可以将原始循环的多个迭代组合到一个块中，并按比例减少迭代计数。例如，如果您最初执行 100 次迭代，但决定使用 4 的步幅，则现在从每个块执行 4 次循环迭代，您的迭代计数为 25。<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/ThreadMigration/ThreadMigration.html#//apple_ref/doc/uid/TP40008091-CH105-SW2">循环代码的改进</a>。</p><h6 id="在主线程上执行任务"><a href="#在主线程上执行任务" class="headerlink" title="在主线程上执行任务"></a>在主线程上执行任务</h6><p>Grand Central Dispatch 提供了一个特殊的调度队列，您可以使用该队列在应用程序的主线程上执行任务。该队列是为所有应用程序自动提供的，并由在其主线程上设置运行循环（由<code>CFRunLoopRef</code>类型或<code>NSRunLoop</code>对象管理）的任何应用程序自动耗尽。如果您不是要创建 Cocoa 应用程序，并且不想显式设置运行循环，则必须调用该<code>dispatch_main</code>函数以显式消耗主调度队列。您仍然可以将任务添加到队列中，但是如果不调用此函数，则这些任务将永远不会执行。</p><p>您可以通过调用该<code>dispatch_get_main_queue</code>函数来获取应用程序主线程的调度队列。添加到此队列的任务在主线程本身上串行执行。因此，您可以将此队列用作在应用程序其他部分中完成工作的同步点。</p><h6 id="在任务中使用-Objective-C-对象"><a href="#在任务中使用-Objective-C-对象" class="headerlink" title="在任务中使用 Objective-C 对象"></a>在任务中使用 Objective-C 对象</h6><p>GCD 为 Cocoa 内存管理技术提供了内置支持，因此您可以在提交给分派队列的块中自由使用 Objective-C 对象。每个调度队列都维护自己的自动释放池，以确保自动释放的对象在某个时刻被释放；队列不保证它们实际释放这些对象的时间。</p><p>如果您的应用程序受内存限制，并且您的块创建了多个自动释放的对象，则创建自己的自动释放池是确保及时释放对象的唯一方法。如果您的块创建了数百个对象，则可能要创建多个自动释放池或定期排空池。</p><p>有关自动释放池和 Objective-C 内存管理的更多信息，请参见《_<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html#//apple_ref/doc/uid/10000011i">高级内存管理编程指南》</a>_。</p><h4 id="挂起和恢复队列-1"><a href="#挂起和恢复队列-1" class="headerlink" title="挂起和恢复队列"></a>挂起和恢复队列</h4><p>您可以通过挂起队列来阻止队列临时执行块对象。您可以使用<code>dispatch_suspend</code>函数挂起调度队列，然后使用函数来恢复它<code>dispatch_resume</code>。调用<code>dispatch_suspend</code>增加队列的挂起引用计数，调用<code>dispatch_resume</code>减少引用计数。当引用计数大于零时，队列保持挂起状态。因此，您必须平衡所有挂起的调用与匹配的恢复调用，以恢复处理块。</p><p><strong>重要：</strong> 挂起和恢复调用是异步的，仅在执行块之间生效。挂起队列不会导致已经执行的块停止。</p><h4 id="使用调度信号量来调节有限资源的使用"><a href="#使用调度信号量来调节有限资源的使用" class="headerlink" title="使用调度信号量来调节有限资源的使用"></a>使用调度信号量来调节有限资源的使用</h4><p>如果要提交给分派队列的任务访问某些有限资源，则可能要使用分派信号量来调节同时访问该资源的任务数。调度信号量的工作方式类似于常规信号量，但有一个例外。当资源可用时，获取调度信号的时间比获取传统系统信号的时间要少。这是因为对于这种特殊情况，Grand Central Dispatch 不会调用内核。它唯一调用内核的时间是当资源不可用时，系统需要停放线程，直到发信号为止。</p><p>使用调度信号量的语义如下：</p><ol><li>创建信号量（使用<code>dispatch_semaphore_create</code>函数）时，可以指定一个正整数，指示可用资源的数量。</li><li>在每个任务中，呼叫<code>dispatch_semaphore_wait</code>以等待信号量。</li><li>等待调用返回时，获取资源并进行工作。</li><li>处理完资源后，请释放该资源并通过调用该<code>dispatch_semaphore_signal</code>函数来指示信号量。</li></ol><p>有关这些步骤如何工作的示例，请考虑在系统上使用文件描述符。每个应用程序都可以使用有限数量的文件描述符。如果您有一个处理大量文件的任务，那么您不想一次打开这么多文件而导致文件描述符用尽。相反，您可以使用信号量来限制文件处理代码在任何时候使用的文件描述符的数量。您将合并到任务中的基本代码如下：</p><table><thead><tr><th><code>//创建信号量，指定初始池大小</code></th></tr></thead><tbody><tr><td><code>dispatch_semaphore_t fd_sema = dispatch_semaphore_create（getdtablesize（）/ 2）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//等待一个免费的文件描述符</code></td></tr><tr><td><code>dispatch_semaphore_wait（fd_sema，DISPATCH_TIME_FOREVER）;</code></td></tr><tr><td><code>fd = open（“ / etc / services”，O_RDONLY）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//完成后释放文件描述符</code></td></tr><tr><td><code>关闭（FD）;</code></td></tr><tr><td><code>dispatch_semaphore_signal（fd_sema）;</code></td></tr></tbody></table><p>创建信号量时，请指定可用资源的数量。该值成为信号量的初始计数变量。每次您等待信号量时，该<code>dispatch_semaphore_wait</code>函数都会将变量 count 减 1。如果结果值为负，则该函数告诉内核阻塞您的线程。另一方面，该<code>dispatch_semaphore_signal</code>函数将 count 变量增加 1 以指示资源已释放。如果有任务被阻塞并等待资源，则随后其中一个将被解除阻塞并被允许执行其工作。</p><h4 id="等待排队的任务组"><a href="#等待排队的任务组" class="headerlink" title="等待排队的任务组"></a>等待排队的任务组</h4><p>调度组是一种阻塞线程的方法，直到一个或多个任务完成执行。您可以在所有指定任务完成之前无法取得进展的地方使用此行为。例如，在分派了多个任务以计算一些数据之后，您可以使用一个组来等待这些任务，然后在完成时处理结果。使用调度组的另一种方法是替代线程连接。您可以将相应的任务添加到调度组中，然后等待整个组，而不是启动几个子线程然后再与每个子线程联接。</p><p>清单 3-6 显示了建立组，向其分派任务并等待结果的基本过程。<code>dispatch_async</code>您可以使用<code>dispatch_group_async</code>函数代替使用该函数将任务调度到队列。此功能将任务与组关联，并将其排队等待执行。要等待一组任务完成，请使用该<code>dispatch_group_wait</code>函数，传入适当的组。</p><p><strong>清单 3-6</strong> 等待异步任务</p><table><thead><tr><th><code>dispatch_queue_t队列= dispatch_get_global_queue（DISPATCH_QUEUE_PRIORITY_DEFAULT，0）;</code></th></tr></thead><tbody><tr><td><code>dispatch_group_t组= dispatch_group_create（）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//将任务添加到组</code></td></tr><tr><td><code>dispatch_group_async（group，queue，^ &#123;</code></td></tr><tr><td><code>//一些异步工作</code></td></tr><tr><td><code>&#125;）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//在任务执行时做其他工作。</code></td></tr><tr><td>``</td></tr><tr><td><code>//如果无法再取得进步，</code></td></tr><tr><td><code>//等待组阻止当前线程。</code></td></tr><tr><td><code>dispatch_group_wait（group，DISPATCH_TIME_FOREVER）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//不再需要该组时，将其释放。</code></td></tr><tr><td><code>dispatch_release（group）;</code></td></tr></tbody></table><h4 id="调度队列和线程安全"><a href="#调度队列和线程安全" class="headerlink" title="调度队列和线程安全"></a>调度队列和线程安全</h4><p>在调度队列的上下文中谈论线程安全性似乎很奇怪，但是线程安全性仍然是一个相关主题。每当您在应用程序中实现并发时，您应该了解以下几点：</p><ul><li>调度队列本身是线程安全的。换句话说，您可以从系统上的任何线程将任务提交到调度队列，而无需先获取锁或同步对该队列的访问。</li><li>不要<code>dispatch_sync</code>从传递给函数调用的同一队列中正在执行的任务中调用函数。这样做将死锁队列。如果需要分派到当前队列，请使用<code>dispatch_async</code>函数异步进行。</li><li>避免从提交到调度队列的任务中获取锁定。尽管可以安全地从任务中使用锁，但是当您获取锁时，如果该锁不可用，则可能会完全阻塞串行队列。同样，对于并发队列，等待锁可能会阻止其他任务执行。如果需要同步部分代码，请使用串行分派队列而不是锁。</li><li>尽管您可以获得有关运行任务的基础线程的信息，但最好避免这样做。有关调度队列与线程的兼容性的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/ThreadMigration/ThreadMigration.html#//apple_ref/doc/uid/TP40008091-CH105-SW18">与 POSIX 线程的兼容性</a>。</li></ul><p>有关如何更改现有线程代码以使用调度队列的其他提示，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/ThreadMigration/ThreadMigration.html#//apple_ref/doc/uid/TP40008091-CH105-SW1">《从线程迁移》</a>。</p><h2 id="派遣来源-1"><a href="#派遣来源-1" class="headerlink" title="派遣来源"></a>派遣来源</h2><p>每当您与基础系统进行交互时，您都必须为该任务做好准备而花费大量时间。调用内核或其他系统层涉及上下文的更改，与您自己的进程中发生的调用相比，更改成本相当高。结果，许多系统库提供了异步接口，以使您的代码可以向系统提交请求，并在处理该请求时继续执行其他工作。通过允许您提交请求并使用块和调度队列将结果报告回代码，Grand Central Dispatch 以此一般行为为基础。</p><h4 id="关于调度源"><a href="#关于调度源" class="headerlink" title="关于调度源"></a>关于调度源</h4><p>甲<em>调度源</em>是一个基本数据类型的坐标特定低层系统事件的处理。大中央调度支持以下类型的调度源：</p><ul><li><em>计时器调度源</em>生成定期通知。</li><li>UNIX 信号到达时，<em>信号分发源会</em>通知您。</li><li><em>描述符源会</em>通知您各种基于文件和套接字的操作，例如：<ul><li>当数据可供读取时</li><li>何时可以写入数据</li><li>在文件系统中删除，移动或重命名文件时</li><li>文件元信息更改时</li></ul></li><li><em>流程调度源会</em>通知您与流程相关的事件，例如：<ul><li>进程退出时</li><li>当流程发出呼叫<code>fork</code>或<code>exec</code>呼叫类型时</li><li>当信号传递到过程时</li></ul></li><li><em>Mach 端口调度源会</em>通知您与 Mach 相关的事件。</li><li><em>自定义调度源</em>是您定义并触发自己的源。</li></ul><p>调度源替换了通常用于处理系统相关事件的异步回调函数。配置调度源时，可以指定要监视的事件以及用于处理这些事件的调度队列和代码。您可以使用块对象或功能指定代码。当感兴趣的事件到达时，调度源将您的块或函数提交到指定的调度队列以执行。</p><p>与您手动提交到队列的任务不同，调度源为应用程序提供了连续的事件源。调度源将一直附加到其调度队列，直到您明确取消它为止。附加后，无论何时发生相应事件，它都会将其关联的任务代码提交到调度队列。某些事件（例如计时器事件）以固定的间隔发生，但大多数仅在特定条件出现时才偶尔发生。因此，调度源保留其关联的调度队列，以防止在事件可能仍未决时过早地将其释放。</p><p>为了防止事件积压在调度队列中，调度源实施事件合并方案。如果新事件到达前一个事件的事件处理程序之前已经出队并执行，则调度源将新事件数据中的数据与旧事件中的数据合并。根据事件的类型，合并可能会替换旧事件或更新其持有的信息。例如，基于信号的调度源仅提供有关最新信号的信息，而且还报告自从上次调用事件处理程序以来已传递了多少总信号。</p><h4 id="创建调度源"><a href="#创建调度源" class="headerlink" title="创建调度源"></a>创建调度源</h4><p>创建调度源涉及创建事件源和调度源本身。事件的来源是处理事件所需的任何本机数据结构。例如，对于基于描述符的调度源，您将需要打开描述符，而对于基于进程的源，则需要获取目标程序的进程 ID。有了事件源后，就可以按照以下方式创建相应的调度源：</p><ol><li>使用<code>dispatch_source_create</code>函数创建调度源。</li><li>配置调度源：<ul><li>将事件处理程序分配给调度源；请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW13">编写和安装事件处理程序</a>。</li><li>对于计时器源，使用<code>dispatch_source_set_timer</code>功能设置计时器信息；请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW2">创建计时器</a>。</li></ul></li><li>（可选）将取消处理程序分配给调度源；请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW14">安装取消处理程序</a>。</li><li>调用该<code>dispatch_resume</code>函数以开始处理事件；请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW8">暂停和恢复派遣源</a>。</li></ol><p>由于调度源在使用前需要进行一些其他配置，因此该<code>dispatch_source_create</code>函数以挂起状态返回调度源。挂起时，调度源将接收事件，但不对其进行处理。这使您有时间安装事件处理程序并执行处理实际事件所需的任何其他配置。</p><p>以下各节向您展示如何配置调度源的各个方面。有关显示如何配置特定类型的调度源的详细示例，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW22">调度源示例</a>。有关用于创建和配置调度源的功能的其他信息，请参阅《_Grand Central Dispatch（GCD）参考》_。</p><h6 id="编写和安装事件处理程序"><a href="#编写和安装事件处理程序" class="headerlink" title="编写和安装事件处理程序"></a>编写和安装事件处理程序</h6><p>要处理由调度源生成的事件，必须定义事件处理程序以处理这些事件。事件处理程序是您使用或函数安装在调度源上的函数或块对象。当事件到达时，调度源将您的事件处理程序提交到指定的调度队列以进行处理。<code>dispatch_source_set_event_handler``dispatch_source_set_event_handler_f</code></p><p>事件处理程序的主体负责处理任何到达的事件。如果事件处理程序已经排队，并在新事件到达时等待处理事件，则调度源将两个事件合并。事件处理程序通常只看到有关最新事件的信息，但是根据调度源的类型，事件处理程序也可能能够获取有关发生并合并的其他事件的信息。如果在事件处理程序开始执行之后到达一个或多个新事件，则调度源将保留这些事件，直到当前事件处理程序完成执行为止。此时，它将使用新事件再次将事件处理程序提交到队列。</p><p>基于函数的事件处理程序采用单个上下文指针，其中包含调度源对象，并且不返回任何值。基于块的事件处理程序不带参数，也没有返回值。</p><table><thead><tr><th><code>//基于块的事件处理程序</code></th></tr></thead><tbody><tr><td><code>无效（^ dispatch_block_t）（无效）</code></td></tr><tr><td>``</td></tr><tr><td><code>//基于函数的事件处理程序</code></td></tr><tr><td><code>无效（* dispatch_function_t）（无效*）</code></td></tr></tbody></table><p>在事件处理程序内部，您可以从调度源本身获取有关给定事件的信息。尽管将基于函数的事件处理程序作为参数传递给调度源的指针，但是基于块的事件处理程序必须自己捕获该指针。您可以通过正常引用包含调度源的变量来为您的块执行此操作。例如，以下代码片段捕获了<code>source</code>在块范围之外声明的变量。</p><table><thead><tr><th><code>dispatch_source_t source = dispatch_source_create（DISPATCH_SOURCE_TYPE_READ，</code></th></tr></thead><tbody><tr><td><code>myDescriptor，0，myQueue）；</code></td></tr><tr><td><code>dispatch_source_set_event_handler（source，^ &#123;</code></td></tr><tr><td><code>//从捕获的源变量中获取一些数据</code></td></tr><tr><td><code>//来自父上下文。</code></td></tr><tr><td><code>估计的size_t = dispatch_source_get_data（source）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//继续阅读描述符...</code></td></tr><tr><td><code>&#125;）;</code></td></tr><tr><td><code>dispatch_resume（源）;</code></td></tr></tbody></table><p>通常会在块内部捕获变量，以实现更大的灵活性和动态性。当然，默认情况下，捕获的变量在块内是只读的。尽管块功能提供了在特定情况下修改捕获的变量的支持，但您不应在与分派源关联的事件处理程序中尝试这样做。调度源始终异步执行其事件处理程序，因此捕获的所有变量的定义范围可能在事件处理程序执行时就消失了。有关如何在块内捕获和使用变量的更多信息，请参见*<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40007502">块编程主题</a>*。</p><p>表 4-1 列出了可以从事件处理程序代码中调用以获取有关事件的信息的功能。</p><table><thead><tr><th align="left">功能</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>dispatch_source_get_handle</code></td><td align="left">此函数返回调度源管理的基础系统数据类型。对于描述符调度源，此函数返回一个<code>int</code>包含与调度源关联的描述符的类型。对于信号分配源，此函数返回一个<code>int</code>类型，该类型包含最近事件的信号编号。对于流程调度源，此函数返回<code>pid_t</code>要监视的流程的数据结构。对于马赫端口分配源，此函数返回<code>mach_port_t</code>数据结构。对于其他调度源，此函数返回的值是不确定的。</td></tr><tr><td align="left"><code>dispatch_source_get_data</code></td><td align="left">此函数返回与事件关联的所有未决数据。对于从文件读取数据的描述符调度源，此函数返回可读取的字节数。对于将数据写入文件的描述符分派源，如果有可用的写入空间，则此函数返回正整数。对于监视文件系统活动的描述符分发源，此函数返回一个常量，指示发生的事件的类型。有关常量的列表，请参见<code>dispatch_source_vnode_flags_t</code>枚举类型。对于流程调度源，此函数返回一个常量，指示发生的事件的类型。有关常量的列表，请参见<code>dispatch_source_proc_flags_t</code>枚举类型。对于 Mach 端口调度源，此函数返回一个常量，指示发生的事件的类型。有关常量的列表，请参见<code>dispatch_source_machport_flags_t</code>枚举类型。对于自定义调度源，此函数返回从现有数据创建的新数据值以及传递给该<code>dispatch_source_merge_data</code>函数的新数据。</td></tr><tr><td align="left"><code>dispatch_source_get_mask</code></td><td align="left">此函数返回用于创建调度源的事件标志。对于流程调度源，此函数返回调度源接收的事件的掩码。有关常量的列表，请参见<code>dispatch_source_proc_flags_t</code>枚举类型。对于具有发送权限的 Mach 端口调度源，此函数返回所需事件的掩码。有关常量的列表，请参见<code>dispatch_source_mach_send_flags_t</code>枚举类型。对于自定义 OR 调度源，此函数返回用于合并数据值的掩码。</td></tr></tbody></table><p>有关如何为特定类型的调度源编写和安装事件处理程序的<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW22">示例</a>，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW22">调度源示例</a>。</p><h6 id="安装取消处理程序"><a href="#安装取消处理程序" class="headerlink" title="安装取消处理程序"></a>安装取消处理程序</h6><p>取消处理程序用于在发布源之前对其进行清理。对于大多数类型的调度源，取消处理程序是可选的，并且仅当您有一些与调度源相关联的自定义行为也需要更新时才需要取消处理程序。但是，对于使用描述符或 Mach 端口的调度源，必须提供取消处理程序以关闭描述符或释放 Mach 端口。否则，由于代码或系统其他部分无意识地重用了那些结构，可能导致代码中的细微错误。</p><p>您可以随时安装取消处理程序，但通常在创建调度源时会这样做。您可以使用<code>dispatch_source_set_cancel_handler</code>或<code>dispatch_source_set_cancel_handler_f</code>函数来安装取消处理程序，具体取决于您是要在实现中使用块对象还是函数。以下示例显示了一个简单的取消处理程序，该处理程序关闭了为调度源打开的描述符。该<code>fd</code>变量是包含描述符的捕获变量。</p><table><thead><tr><th><code>dispatch_source_set_cancel_handler（mySource，^ &#123;</code></th></tr></thead><tbody><tr><td><code>关闭（FD）; //关闭先前打开的文件描述符。</code></td></tr><tr><td><code>&#125;）;</code></td></tr></tbody></table><p>要查看使用取消处理程序的调度源的完整代码示例，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW6">从描述符读取数据</a>。</p><h6 id="更改目标队列"><a href="#更改目标队列" class="headerlink" title="更改目标队列"></a>更改目标队列</h6><p>尽管在创建调度源时指定了要在其上运行事件和取消处理程序的队列，但是您可以随时使用该<code>dispatch_set_target_queue</code>函数来更改该队列。您可以这样做来更改处理分发源事件的优先级。</p><p>更改调度源的队列是异步操作，调度源会尽最大努力尽快进行更改。如果事件处理程序已经在队列中并等待处理，它将在前一个队列上执行。但是，大约在您进行更改时到达的其他事件可以在任一队列中处理。</p><h6 id="将自定义数据与调度源关联"><a href="#将自定义数据与调度源关联" class="headerlink" title="将自定义数据与调度源关联"></a>将自定义数据与调度源关联</h6><p>与 Grand Central Dispatch 中的许多其他数据类型一样，您可以使用该<code>dispatch_set_context</code>功能将自定义数据与调度源相关联。您可以使用上下文指针存储事件处理程序处理事件所需的任何数据。如果你存储在上下文指针任何自定义数据，您还应该安装的取消处理程序（如中所述<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW14">安装取消处理程序</a>来释放数据时，不再需要派遣源）。</p><p>如果使用 blocks 实现事件处理程序，则还可以捕获局部变量并在基于块的代码中使用它们。尽管这可以减轻将数据存储在调度源的上下文指针中的需要，但您应始终谨慎使用此功能。因为调度源可能在您的应用程序中存在很长一段时间，所以在捕获包含指针的变量时应格外小心。如果可以随时释放指针所指向的数据，则应该复制数据或保留数据以防止发生这种情况。无论哪种情况，您都需要提供一个取消处理程序，以便以后释放数据。</p><h6 id="调度源的内存管理"><a href="#调度源的内存管理" class="headerlink" title="调度源的内存管理"></a>调度源的内存管理</h6><p>与其他调度对象一样，调度源也是引用计数的数据类型。调度源的初始引用计数为 1，可以使用<code>dispatch_retain</code>和<code>dispatch_release</code>函数保留和释放该调度源。当队列的引用计数达到零时，系统将自动取消分配调度源数据结构。</p><p>由于使用了它们的方式，可以在调度源本身内部或外部管理调度源的所有权。有了外部所有权，另一个对象或代码段就拥有了调度源的所有权，并负责在不再需要时释放它。对于内部所有权，调度源拥有自己，并负责在适当的时间释放自己。尽管外部所有权很常见，但是在要创建自主调度源并让其管理代码的某些行为而无需任何进一步交互的情况下，可以使用内部所有权。例如，如果调度源被设计为响应单个全局事件，则可以让它处理该事件然后立即退出。</p><h4 id="调度源示例"><a href="#调度源示例" class="headerlink" title="调度源示例"></a>调度源示例</h4><p>以下各节说明如何创建和配置一些更常用的调度源。有关配置特定类型的调度源的更多信息，请参见<em>Grand Central Dispatch（GCD）参考</em>。</p><h6 id="创建一个计时器"><a href="#创建一个计时器" class="headerlink" title="创建一个计时器"></a>创建一个计时器</h6><p>计时器分派源按规则的基于时间的间隔生成事件。您可以使用计时器来启动需要定期执行的特定任务。例如，游戏和其他图形密集型应用程序可能使用计时器来启动屏幕或动画更新。您还可以设置计时器并使用产生的事件来检查频繁更新的服务器上的新信息。</p><p>所有计时器分派源都是间隔计时器，也就是说，一旦创建，它们就会以您指定的间隔传递常规事件。创建计时器分派源时，必须指定的值之一是回旋值，以使系统对计时器事件的期望精度有所了解。Leeway 的价值使系统在管理电源和唤醒内核方面具有一定的灵活性。例如，系统可以使用余量值来提前或延迟点火时间，并使它与其他系统事件更好地保持一致。因此，您应尽可能为自己的计时器指定一个回程值。</p><p><strong>注意：</strong> 即使您指定的回程值为 0，也永远不要期望计时器在您要求的确切纳秒时触发。该系统会尽力满足您的需求，但不能保证准确的点火时间。</p><p>当计算机进入睡眠状态时，所有计时器分派源都将被挂起。当计算机唤醒时，这些计时器分派源也会自动唤醒。根据计时器的配置，这种性质的暂停可能会影响计时器的下一次触发时间。如果使用<code>dispatch_time</code>函数或<code>DISPATCH_TIME_NOW</code>常量设置计时器分派源，则计时器分派源将使用默认系统时钟来确定何时触发。但是，计算机睡眠时默认时钟不会提前。相比之下，当您使用<code>dispatch_walltime</code>功能，计时器分派源将其触发时间跟踪到挂钟时间。后一个选项通常适用于触发间隔相对较大的计时器，因为它可以防止事件时间之间的漂移过大。</p><p>清单 4-1 展示了一个计时器的示例，该计时器每 30 秒触发一次，回旋值为 1 秒。因为计时器间隔相对较大，所以使用该<code>dispatch_walltime</code>函数创建了调度源。计时器的第一次触发立即发生，随后的事件每 30 秒到达一次。该<code>MyPeriodicTask</code>和<code>MyStoreTimer</code>符号代表的自定义功能，你会写实施定时行为，并存储在应用程序中的数据结构的定时器地方。</p><p><strong>清单 4-1</strong> 创建计时器分派源</p><table><thead><tr><th><code>dispatch_source_t CreateDispatchTimer（uint64_t时间间隔，</code></th></tr></thead><tbody><tr><td><code>uint64_t leeway，</code></td></tr><tr><td><code>dispatch_queue_t队列，</code></td></tr><tr><td><code>dispatch_block_t块）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>dispatch_source_t计时器= dispatch_source_create（DISPATCH_SOURCE_TYPE_TIMER，</code></td></tr><tr><td><code>0，0，队列）；</code></td></tr><tr><td><code>如果（定时器）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>dispatch_source_set_timer（timer，dispatch_walltime（NULL，0），interval，leeway）;</code></td></tr><tr><td><code>dispatch_source_set_event_handler（timer，block）;</code></td></tr><tr><td><code>dispatch_resume（timer）;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>返回计时器；</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>无效的MyCreateTimer（）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>dispatch_source_t aTimer = CreateDispatchTimer（30ull * NSEC_PER_SEC，</code></td></tr><tr><td><code>1ull * NSEC_PER_SEC，</code></td></tr><tr><td><code>dispatch_get_main_queue（），</code></td></tr><tr><td><code>^ &#123;MyPeriodicTask（）; &#125;）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//将其存储在以后的地方。</code></td></tr><tr><td><code>如果（aTimer）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>MyStoreTimer（aTimer）;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr></tbody></table><p>尽管创建计时器分派源是接收基于时间的事件的主要方法，但是还有其他可用选项。如果要在指定的时间间隔后执行一次块，可以使用<code>dispatch_after</code>或<code>dispatch_after_f</code>函数。该函数的行为与该<code>dispatch_async</code>函数非常相似，不同之处在于，它允许您指定将块提交到队列的时间值。可以根据需要将时间值指定为相对或绝对时间值。</p><h6 id="从描述符读取数据"><a href="#从描述符读取数据" class="headerlink" title="从描述符读取数据"></a>从描述符读取数据</h6><p>要从文件或套接字读取数据，必须打开文件或套接字并创建类型的调度源<code>DISPATCH_SOURCE_TYPE_READ</code>。您指定的事件处理程序应该能够读取和处理文件描述符的内容。对于文件，这相当于读取文件数据（或该数据的子集）并为您的应用程序创建适当的数据结构。对于网络套接字，这涉及处理新接收到的网络数据。</p><p>每当读取数据时，都应始终将描述符配置为使用非阻塞操作。尽管您可以使用该<code>dispatch_source_get_data</code>函数查看可读取的数据量，但该函数返回的数字可能会在调用时间和实际读取数据的时间之间发生变化。如果基础文件被截断或发生网络错误，则从阻止当前线程的描述符读取将使事件处理程序停滞在执行中，并阻止调度队列调度其他任务。对于串行队列，这可能会死锁您的队列，甚至对于并发队列，这也会减少可以启动的新任务的数量。</p><p>清单 4-2 显示了一个示例，该示例将调度源配置为从文件读取数据。在此示例中，事件处理程序将指定文件的全部内容读取到缓冲区中，并调用自定义函数（您将在自己的代码中定义）以处理数据。（此函数的调用者将在读取操作完成后使用返回的分派源将其取消。）为确保在没有要读取的数据时分派队列不会不必要地阻塞，此示例使用此<code>fcntl</code>函数来配置文件描述符以执行非阻塞操作。安装在调度源上的取消处理程序可确保在读取数据后关闭文件描述符。</p><p><strong>清单 4-2</strong> 从文件读取数据</p><table><thead><tr><th><code>dispatch_source_t ProcessContentsOfFile（const char *文件名）</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>//准备要读取的文件。</code></td></tr><tr><td><code>int fd = open（文件名，O_RDONLY）;</code></td></tr><tr><td><code>如果（fd == -1）</code></td></tr><tr><td><code>返回NULL;</code></td></tr><tr><td><code>fcntl（fd，F_SETFL，O_NONBLOCK）; //避免阻塞读取操作</code></td></tr><tr><td>``</td></tr><tr><td><code>dispatch_queue_t队列= dispatch_get_global_queue（DISPATCH_QUEUE_PRIORITY_DEFAULT，0）;</code></td></tr><tr><td><code>dispatch_source_t readSource = dispatch_source_create（DISPATCH_SOURCE_TYPE_READ，</code></td></tr><tr><td><code>fd，0，队列）;</code></td></tr><tr><td><code>如果（！readSource）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>关闭（FD）;</code></td></tr><tr><td><code>返回NULL;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>//安装事件处理程序</code></td></tr><tr><td><code>dispatch_source_set_event_handler（readSource，^ &#123;</code></td></tr><tr><td><code>估计的size_t = dispatch_source_get_data（readSource）+ 1;</code></td></tr><tr><td><code>//将数据读入文本缓冲区。</code></td></tr><tr><td><code>char *缓冲区=（char *）malloc（估计）;</code></td></tr><tr><td><code>如果（缓冲区）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>ssize_t actual = read（fd，buffer，（estimated））;</code></td></tr><tr><td><code>布尔值完成= MyProcessFileData（缓冲区，实际）; //处理数据。</code></td></tr><tr><td>``</td></tr><tr><td><code>//完成后释放缓冲区。</code></td></tr><tr><td><code>免费（缓冲区）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//如果没有更多数据，请取消源。</code></td></tr><tr><td><code>如果（完成）</code></td></tr><tr><td><code>dispatch_source_cancel（readSource）;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>&#125;）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//安装取消处理程序</code></td></tr><tr><td><code>dispatch_source_set_cancel_handler（readSource，^ &#123;close（fd）;&#125;）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//开始读取文件。</code></td></tr><tr><td><code>dispatch_resume（readSource）;</code></td></tr><tr><td><code>返回readSource;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>在前面的示例中，自定义<code>MyProcessFileData</code>函数确定何时已读取足够的文件数据以及可以取消调度源。默认情况下，配置为从描述符读取的调度源在仍有数据需要读取的情况下重复调度其事件处理程序。如果套接字连接关闭或到达文件末尾，则调度源将自动停止调度事件处理程序。如果您知道自己不需要调度源，则可以直接取消它。</p><h6 id="将数据写入描述符"><a href="#将数据写入描述符" class="headerlink" title="将数据写入描述符"></a>将数据写入描述符</h6><p>将数据写入文件或套接字的过程与读取数据的过程非常相似。配置用于写操作的描述符后，您将创建类型的调度源<code>DISPATCH_SOURCE_TYPE_WRITE</code>。创建该调度源后，系统将调用事件处理程序，使其有机会开始将数据写入文件或套接字。完成数据写入后，请使用该<code>dispatch_source_cancel</code>功能取消调度源。</p><p>每当写入数据时，都应始终将文件描述符配置为使用非阻塞操作。尽管可以使用该<code>dispatch_source_get_data</code>函数查看有多少空间可用于写入，但是该函数返回的值仅是建议性的，并且可能在调用时间和实际写入数据的时间之间发生变化。如果发生错误，将数据写入阻塞文件描述符可能会使事件处理程序停滞在执行中，并阻止调度队列调度其他任务。对于串行队列，这可能会死锁您的队列，甚至对于并发队列，这也会减少可以启动的新任务的数量。</p><p>清单 4-3 显示了使用调度源将数据写入文件的基本方法。创建新文件后，此函数将结果文件描述符传递到其事件处理程序。该<code>MyGetData</code>函数提供了放入文件中的数据，您可以将其替换为生成文件数据所需的任何代码。将数据写入文件后，事件处理程序将取消调度源，以防止再次调用该调度源。然后，调度源的所有者将负责释放它。</p><p><strong>清单 4-3</strong> 将数据写入文件</p><table><thead><tr><th><code>dispatch_source_t WriteDataToFile（const char *文件名）</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td>`int fd = open（filename，O_WRONLY</td></tr><tr><td>`（S_IRUSR</td></tr><tr><td><code>如果（fd == -1）</code></td></tr><tr><td><code>返回NULL;</code></td></tr><tr><td><code>fcntl（fd，F_SETFL）; //在写入期间阻塞。</code></td></tr><tr><td>``</td></tr><tr><td><code>dispatch_queue_t队列= dispatch_get_global_queue（DISPATCH_QUEUE_PRIORITY_DEFAULT，0）;</code></td></tr><tr><td><code>dispatch_source_t writeSource = dispatch_source_create（DISPATCH_SOURCE_TYPE_WRITE，</code></td></tr><tr><td><code>fd，0，队列）;</code></td></tr><tr><td><code>如果（！writeSource）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>关闭（FD）;</code></td></tr><tr><td><code>返回NULL;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td>``</td></tr><tr><td><code>dispatch_source_set_event_handler（writeSource，^ &#123;</code></td></tr><tr><td><code>size_t bufferSize = MyGetDataSize（）;</code></td></tr><tr><td><code>void * buffer = malloc（bufferSize）;</code></td></tr><tr><td>``</td></tr><tr><td><code>size_t实际= MyGetData（缓冲区，bufferSize）;</code></td></tr><tr><td><code>写（fd，缓冲区，实际）;</code></td></tr><tr><td>``</td></tr><tr><td><code>免费（缓冲区）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//完成后取消并释放调度源。</code></td></tr><tr><td><code>dispatch_source_cancel（writeSource）;</code></td></tr><tr><td><code>&#125;）;</code></td></tr><tr><td>``</td></tr><tr><td><code>dispatch_source_set_cancel_handler（writeSource，^ &#123;close（fd）;&#125;）;</code></td></tr><tr><td><code>dispatch_resume（writeSource）;</code></td></tr><tr><td><code>返回（writeSource）;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><h6 id="监视文件系统对象"><a href="#监视文件系统对象" class="headerlink" title="监视文件系统对象"></a>监视文件系统对象</h6><p>如果要监视文件系统对象的更改，则可以设置类型的调度源<code>DISPATCH_SOURCE_TYPE_VNODE</code>。当文件被删除，写入或重命名时，可以使用这种类型的调度源来接收通知。当文件的特定类型的元信息（例如文件的大小和链接数）发生变化时，您还可以使用它来发出警报。</p><p><strong>注意：</strong> 当源本身正在处理事件时，您为调度源指定的文件描述符必须保持打开状态。</p><p>清单 4-4 显示了一个示例，该示例监视文件的名称更改并在文件更改时执行一些自定义行为。（您将提供实际的行为来代替<code>MyUpdateFileName</code>示例中所调用的函数。）由于已为调度源专门打开了描述符，所以调度源包括一个取消处理程序，用于关闭描述符。因为该示例创建的文件描述符与基础文件系统对象相关联，所以可以使用此相同的调度源来检测任意数量的文件名更改。</p><p><strong>清单 4-4</strong> 监视文件名更改</p><table><thead><tr><th><code>dispatch_source_t MonitorNameChangesToFile（const char *文件名）</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>int fd = open（文件名，O_EVTONLY）;</code></td></tr><tr><td><code>如果（fd == -1）</code></td></tr><tr><td><code>返回NULL;</code></td></tr><tr><td>``</td></tr><tr><td><code>dispatch_queue_t队列= dispatch_get_global_queue（DISPATCH_QUEUE_PRIORITY_DEFAULT，0）;</code></td></tr><tr><td><code>dispatch_source_t source = dispatch_source_create（DISPATCH_SOURCE_TYPE_VNODE，</code></td></tr><tr><td><code>fd，DISPATCH_VNODE_RENAME，队列）；</code></td></tr><tr><td><code>如果（来源）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>//复制文件名以供以后使用。</code></td></tr><tr><td><code>int length = strlen（文件名）;</code></td></tr><tr><td><code>char * newString =（char *）malloc（长度+1）;</code></td></tr><tr><td><code>newString = strcpy（newString，文件名）;</code></td></tr><tr><td><code>dispatch_set_context（source，newString）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//安装事件处理程序以处理名称更改</code></td></tr><tr><td><code>dispatch_source_set_event_handler（source，^ &#123;</code></td></tr><tr><td><code>const char * oldFilename =（char *）dispatch_get_context（源）;</code></td></tr><tr><td><code>MyUpdateFileName（oldFilename，fd）;</code></td></tr><tr><td><code>&#125;）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//安装取消处理程序以释放描述符</code></td></tr><tr><td><code>//和存储的字符串。</code></td></tr><tr><td><code>dispatch_source_set_cancel_handler（来源，^ &#123;</code></td></tr><tr><td><code>char * fileStr =（char *）dispatch_get_context（源）;</code></td></tr><tr><td><code>free（fileStr）;</code></td></tr><tr><td><code>关闭（FD）;</code></td></tr><tr><td><code>&#125;）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//开始处理事件。</code></td></tr><tr><td><code>dispatch_resume（源）;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>其他</code></td></tr><tr><td><code>关闭（FD）;</code></td></tr><tr><td>``</td></tr><tr><td><code>返回源</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><h6 id="监控信号"><a href="#监控信号" class="headerlink" title="监控信号"></a>监控信号</h6><p>UNIX 信号允许从其域外部操纵应用程序。应用程序可以接收许多不同类型的信号，范围从不可恢复的错误（例如非法指令）到有关重要信息的通知（例如子进程退出时）。传统上，应用程序使用该<code>sigaction</code>功能来安装信号处理程序功能，该功能在信号到达后立即进行同步处理。如果您只想收到信号到达的通知，而实际上却不想处理该信号，则可以使用信号分配源来异步处理信号。</p><p>信号分发源不能替代您使用该<code>sigaction</code>功能安装的同步信号处理程序。同步信号处理程序实际上可以捕获信号并防止其终止您的应用程序。信号分发源允许您仅监视信号的到达。此外，您不能使用信号分发源来检索所有类型的信号。特别是，你不能用它们来监控<code>SIGILL</code>，<code>SIGBUS</code>以及<code>SIGSEGV</code>信号。</p><p>因为信号调度源在调度队列上异步执行，所以它们不受与同步信号处理程序相同的限制。例如，您可以从信号分配源的事件处理程序调用的函数没有任何限制。这种灵活性的折衷是，在信号到达的时间与调度源的事件处理程序被调用之间的延迟可能会有所增加。</p><p>清单 4-5 显示了如何配置信号分发源来处理<code>SIGHUP</code>信号。调度源的事件处理程序调用该<code>MyProcessSIGHUP</code>函数，您可以在应用程序中将其替换为用于处理信号的代码。</p><p><strong>清单 4-5</strong> 安装一个监视信号的块</p><table><thead><tr><th><code>无效InstallSignalHandler（）</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>//确保信号不会终止应用程序。</code></td></tr><tr><td><code>信号（SIGHUP，SIG_IGN）;</code></td></tr><tr><td>``</td></tr><tr><td><code>dispatch_queue_t队列= dispatch_get_global_queue（DISPATCH_QUEUE_PRIORITY_DEFAULT，0）;</code></td></tr><tr><td><code>dispatch_source_t source = dispatch_source_create（DISPATCH_SOURCE_TYPE_SIGNAL，SIGHUP，0，队列）;</code></td></tr><tr><td>``</td></tr><tr><td><code>如果（来源）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>dispatch_source_set_event_handler（source，^ &#123;</code></td></tr><tr><td><code>MyProcessSIGHUP（）;</code></td></tr><tr><td><code>&#125;）;</code></td></tr><tr><td>``</td></tr><tr><td><code>//开始处理信号</code></td></tr><tr><td><code>dispatch_resume（源）;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>如果您正在为自定义框架开发代码，则使用信号分发源的优点是您的代码可以独立于与其链接的任何应用程序监视信号。信号调度源不会干扰应用程序可能已安装的其他调度源或任何同步信号处理程序。</p><p>有关实现同步信号处理程序的更多信息，以及信号名称的列表，请参见<code>signal</code>手册页。</p><h6 id="监控过程"><a href="#监控过程" class="headerlink" title="监控过程"></a>监控过程</h6><p>流程调度源使您可以监视特定流程的行为并做出适当响应。父进程可能使用这种类型的调度源来监视它创建的任何子进程。例如，父进程可以使用它来监视子进程的死亡。同样，子进程可以使用它来监视其父进程并在父进程退出时退出。</p><p>清单 4-6 显示了安装调度源以监视父进程终止的步骤。当父进程死亡时，调度源将设置一些内部状态信息，以使子进程知道应该退出。（您自己的应用程序将需要实现<code>MySetAppExitFlag</code>为终止设置适当标志的功能。）由于调度源是自动运行的，因此拥有自己的资源，因此它在预期程序关闭时也会取消并释放自身。</p><p><strong>清单 4-6</strong> 监视父进程的死亡</p><table><thead><tr><th><code>void MonitorParentProcess（）</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>pid_t parentPID = getppid（）;</code></td></tr><tr><td>``</td></tr><tr><td><code>dispatch_queue_t队列= dispatch_get_global_queue（DISPATCH_QUEUE_PRIORITY_DEFAULT，0）;</code></td></tr><tr><td><code>dispatch_source_t source = dispatch_source_create（DISPATCH_SOURCE_TYPE_PROC，</code></td></tr><tr><td><code>parentPID，DISPATCH_PROC_EXIT，队列）；</code></td></tr><tr><td><code>如果（来源）</code></td></tr><tr><td><code>&#123;</code></td></tr><tr><td><code>dispatch_source_set_event_handler（source，^ &#123;</code></td></tr><tr><td><code>MySetAppExitFlag（）;</code></td></tr><tr><td><code>dispatch_source_cancel（source）;</code></td></tr><tr><td><code>dispatch_release（源代码）;</code></td></tr><tr><td><code>&#125;）;</code></td></tr><tr><td><code>dispatch_resume（源）;</code></td></tr><tr><td><code>&#125;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><h4 id="取消派遣源"><a href="#取消派遣源" class="headerlink" title="取消派遣源"></a>取消派遣源</h4><p>调度源将保持活动状态，直到您使用该<code>dispatch_source_cancel</code>功能明确取消它们为止。取消调度源将停止新事件的传递，并且无法撤消。因此，通常您取消调度源，然后立即释放它，如下所示：</p><table><thead><tr><th><code>void RemoveDispatchSource（dispatch_source_t mySource）</code></th></tr></thead><tbody><tr><td><code>&#123;</code></td></tr><tr><td><code>dispatch_source_cancel（mySource）;</code></td></tr><tr><td><code>dispatch_release（mySource）;</code></td></tr><tr><td><code>&#125;</code></td></tr></tbody></table><p>取消调度源是异步操作。尽管在调用<code>dispatch_source_cancel</code>函数后没有任何新事件被处理，但是调度源已经处理的事件将继续被处理。完成任何最终事件的处理后，如果存在一个派发源，则派发源执行其取消处理程序。</p><p>取消处理程序是您释放内存或清理代表调度源获取的任何资源的机会。如果您的调度源使用描述符或马赫端口，则必须提供取消处理程序以关闭描述符或在发生取消时销毁端口。其他类型的调度源不需要取消处理程序，但是如果将任何内存或数据与调度源关联，您仍应提供取消处理程序。例如，如果将数据存储在调度源的上下文指针中，则应提供一个。有关取消处理程序的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW14">安装取消处理程序</a>。</p><h4 id="挂起和恢复派遣源"><a href="#挂起和恢复派遣源" class="headerlink" title="挂起和恢复派遣源"></a>挂起和恢复派遣源</h4><p>您可以使用<code>dispatch_suspend</code>和<code>dispatch_resume</code>方法临时暂停和恢复分发源事件的传递。这些方法增加和减少调度对象的挂起计数。因此，在恢复事件传递之前，您必须在<code>dispatch_suspend</code>与每个呼叫之间找到一个与之匹配的呼叫<code>dispatch_resume</code>。</p><p>当您挂起调度源时，该调度源被挂起时发生的任何事件都将被累积，直到恢复队列为止。当队列恢复时，而不是传递所有事件，而是在传递之前将事件合并为单个事件。例如，如果您正在监视文件中的名称更改，则传递的事件将仅包括姓氏更改。以这种方式合并事件可以防止它们在队列中建立，并在工作恢复时使您的应用程序不堪重负。</p><h2 id="远离线程-1"><a href="#远离线程-1" class="headerlink" title="远离线程"></a>远离线程</h2><p>有多种方法可以使现有的线程代码适应使用 Grand Central Dispatch 和操作对象的优势。尽管并非在所有情况下都可能远离线程，但是在您进行切换的地方，性能（以及代码的简单性）可以显着提高。特别是，使用调度队列和操作队列而不是线程具有多个优点：</p><ul><li>它减少了您的应用程序为将线程堆栈存储在应用程序的内存空间中而付出的内存损失。</li><li>它消除了创建和配置线程所需的代码。</li><li>它消除了管理和调度线程上的工作所需的代码。</li><li>它简化了您必须编写的代码。</li></ul><p>本章提供有关如何替换现有的基于线程的代码以及如何使用分派队列和操作队列来实现相同类型行为的提示和准则。</p><h4 id="用调度队列替换线程"><a href="#用调度队列替换线程" class="headerlink" title="用调度队列替换线程"></a>用调度队列替换线程</h4><p>要了解如何用调度队列替换线程，请首先考虑您今天在应用程序中使用线程的一些方式：</p><ul><li><strong>单任务线程</strong>。创建一个线程来执行一个任务，并在任务完成后释放线程。</li><li><strong>工作者线程</strong>。创建一个或多个工作线程，并为每个线程记住特定的任务。定期将任务分配给每个线程。</li><li><strong>线程池</strong>。创建一个通用线程池，并为每个线程建立运行循环。当您有任务要执行时，请从池中获取一个线程，然后将任务分派给该线程。如果没有可用线程，则将任务排队并等待线程可用。</li></ul><p>尽管这些技术看似截然不同，但它们实际上只是相同原理的变体。在每种情况下，都使用线程来运行应用程序必须执行的某些任务。它们之间的唯一区别是用于管理线程和任务排队的代码。使用调度队列和操作队列，您可以消除所有线程和线程通信代码，而只专注于要执行的任务。</p><p>如果您正在使用上述线程模型之一，则应该已经对应用程序执行的任务类型有一个很好的了解。与其将任务提交给您的自定义线程之一，不如将该任务封装在一个操作对象或一个块对象中，然后将其分派到适当的队列中。对于不是特别有争议的任务（即不带锁的任务），您应该能够进行以下直接替换：</p><ul><li>对于单个任务线程，将任务封装在块或操作对象中，然后将其提交到并发队列。</li><li>对于辅助线程，您需要确定是使用串行队列还是并发队列。如果使用工作线程来同步特定任务集的执行，请使用串行队列。如果确实使用工作线程执行没有相互依赖性的任意任务，请使用并发队列。</li><li>对于线程池，将您的任务封装在一个块或操作对象中，然后将它们分派到并发队列中以执行。</li></ul><p>当然，像这样的简单替换不一定在所有情况下都有效。如果您正在执行的任务争用共享资源，则理想的解决方案是尝试首先删除或最小化该争用。如果有一些方法可以重构或重新构造代码以消除对共享资源的相互依赖，那当然是可取的。但是，如果这样做是不可能的或效率可能较低，则仍然可以利用队列的方法。队列的一大优点是它们提供了一种更可预测的方式来执行代码。这种可预测性意味着，仍有许多方法可以在不使用锁或其他重量级同步机制的情况下同步代码的执行。除了使用锁，您还可以使用队列来执行许多相同的任务：</p><ul><li>如果您有必须按特定顺序执行的任务，请将其提交到串行调度队列。如果您更喜欢使用操作队列，请使用操作对象依赖性来确保这些对象以特定顺序执行。</li><li>如果当前正在使用锁来保护共享资源，请创建一个串行队列以执行任何修改该资源的任务。然后，串行队列将您现有的锁替换为同步机制。有关摆脱锁的更多信息技术，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/ThreadMigration/ThreadMigration.html#//apple_ref/doc/uid/TP40008091-CH105-SW3">消除基于锁的代码</a>。</li><li>如果使用线程连接等待后台任务完成，请考虑改用调度组。您还可以使用 <code>NSBlockOperation</code>对象或操作对象依赖项来实现类似的组完成行为。有关如何跟踪执行任务组的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/ThreadMigration/ThreadMigration.html#//apple_ref/doc/uid/TP40008091-CH105-SW6">替换线程联接</a>。</li><li>如果您使用生产者－消费者算法来管理有限的资源池，请考虑将您的实现<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/ThreadMigration/ThreadMigration.html#//apple_ref/doc/uid/TP40008091-CH105-SW7">更改为“更改生产者－消费者实现”中显示的方法</a>。</li><li>如果您正在使用线程从描述符读取和写入，或监视文件操作，请按照<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW1">Dispatch Sources 中的</a>说明使用<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW1">调度源</a>。</li></ul><p>重要的是要记住，队列不是替换线程的灵丹妙药。队列提供的异步编程模型适合于延迟不成问题的情况。即使队列提供了配置队列中任务执行优先级的方法，但是较高的执行优先级也不能保证在特定时间执行任务。因此，在需要最小延迟的情况下，例如在音频和视频播放中，线程仍然是更合适的选择。</p><h4 id="消除基于锁的代码"><a href="#消除基于锁的代码" class="headerlink" title="消除基于锁的代码"></a>消除基于锁的代码</h4><p>对于线程代码，锁是同步对线程之间共享的资源的访问的传统方法之一。但是，使用锁是有代价的。即使在无争议的情况下，始终会因锁定而导致性能下降。并且在有争议的情况下，在等待释放锁的同时，一个或多个线程有可能在不确定的时间内阻塞。</p><p>用队列替换基于锁的代码可以消除许多与锁相关的惩罚，还可以简化剩余的代码。您可以使用创建队列来序列化访问该资源的任务，而不必使用锁来保护共享资源。队列不会施加与锁相同的惩罚。例如，排队任务不需要陷入内核即可获取互斥量。</p><p>在对任务进行排队时，您必须做出的主要决定是同步还是异步进行。异步提交任务可以使当前线程在执行任务时继续运行。同步提交任务会阻塞当前线程，直到任务完成。这两个选项都有适当的用途，尽管在可能的情况下异步提交任务无疑是有利的。</p><p>以下各节说明如何用等效的基于队列的代码替换现有的基于锁的代码。</p><h6 id="实现异步锁"><a href="#实现异步锁" class="headerlink" title="实现异步锁"></a>实现异步锁</h6><p>异步锁定是一种保护共享资源而又不会阻止任何修改该资源的代码的方法。当需要修改数据结构时，您可能会使用异步锁，这是代码正在执行的其他一些工作的副作用。使用传统线程，通常实现此代码的方式是对共享资源进行锁定，进行必要的更改，释放该锁定，然后继续执行任务的主要部分。但是，使用调度队列，调用代码可以异步进行修改，而无需等待这些更改完成。</p><p>清单 5-1 显示了一个异步锁实现的示例。在此示例中，受保护的资源定义了自己的串行调度队列。调用代码向该队列提交一个块对象，该对象包含需要对资源进行的修改。由于队列本身是串行执行块的，因此可以确保对资源的更改按照接收到的顺序进行。但是，由于任务是异步执行的，因此调用线程不会阻塞。</p><p><strong>清单 5-1</strong> 异步修改受保护的资源</p><table><thead><tr><th><code>dispatch_async（obj-&gt; serial_queue，^ &#123;</code></th></tr></thead><tbody><tr><td><code>//关键部分</code></td></tr><tr><td><code>&#125;）;</code></td></tr></tbody></table><h6 id="同步执行关键部分"><a href="#同步执行关键部分" class="headerlink" title="同步执行关键部分"></a>同步执行关键部分</h6><p>如果在给定任务完成之前当前代码无法继续，则可以使用<code>dispatch_sync</code>函数同步提交任务。此函数将任务添加到调度队列，然后阻塞当前线程，直到任务完成执行。分派队列本身可以是串行或并发队列，具体取决于您的需求。由于此函数会阻止当前线程，因此，仅应在必要时使用它。清单 5-2 显示了使用来包装代码的关键部分的技术<code>dispatch_sync</code>。</p><p><strong>清单 5-2</strong> 同步运行关键部分</p><table><thead><tr><th><code>dispatch_sync（my_queue，^ &#123;</code></th></tr></thead><tbody><tr><td><code>//关键部分</code></td></tr><tr><td><code>&#125;）;</code></td></tr></tbody></table><p>如果您已经在使用串行队列来保护共享资源，则与异步分发相比，同步分派到该队列不会更多地保护共享资源。同步分派的唯一原因是防止当前代码在关键部分结束之前继续执行。例如，如果您想从共享资源中获取一些价值并立即使用它，则需要同步调度。如果当前代码不需要等待关键部分完成，或者可以简单地将其他后续任务提交到同一串行队列，则通常首选异步提交。</p><h4 id="改进循环代码"><a href="#改进循环代码" class="headerlink" title="改进循环代码"></a>改进循环代码</h4><p>如果您的代码具有循环，并且每次循环执行的工作都与其他迭代中完成的工作无关，则可以考虑使用<code>dispatch_apply</code>or <code>dispatch_apply_f</code>函数重新实现该循环代码。这些函数将循环的每次迭代分别提交给调度队列进行处理。与并发队列一起使用时，此功能使您可以同时执行循环的多次迭代。</p><p>该<code>dispatch_apply</code>和<code>dispatch_apply_f</code>功能是阻止执行的当前线程，直到所有的循环迭代是完全同步的函数调用。当提交到并发队列时，不能保证循环迭代的执行顺序。运行每次迭代的线程可能会阻塞并导致给定的迭代在其周围的其他线程之前或之后完成。因此，用于每次循环迭代的块对象或函数必须是可重入的。</p><p>清单 5-3 显示了如何<code>for</code>用基于派遣的等效项替换循环。您传递给的块或函数<code>dispatch_apply</code>或<code>dispatch_apply_f</code>必须采用指示当前循环迭代的整数值。在此示例中，代码仅将当前循环号打印到控制台。</p><p><strong>清单 5-3</strong><code>for</code>不跨步地 替换循环</p><table><thead><tr><th><code>队列= dispatch_get_global_queue（DISPATCH_QUEUE_PRIORITY_DEFAULT，0）;</code></th></tr></thead><tbody><tr><td><code>dispatch_apply（count，queue，^（size_t i）&#123;</code></td></tr><tr><td><code>printf（“％u \ n”，i）;</code></td></tr><tr><td><code>&#125;）;</code></td></tr></tbody></table><p>尽管前面的示例是一个简单的示例，但是它演示了使用分派队列替换循环的基本技术。尽管这可能是提高基于循环的代码性能的好方法，但仍必须谨慎地使用此技术。尽管分派队列的开销非常低，但是在线程上安排每次循环迭代仍然有成本。因此，您应该确保您的循环代码能够完成足够的工作以保证成本。您到底需要做多少工作，这是您必须使用性能工具来衡量的。</p><p>一种增加每次循环迭代中的工作量的简单方法是使用跨步。跨步时，您可以重写块代码以执行原始循环的多次迭代。然后，您可以<code>dispatch_apply</code>按比例减少为函数指定的计数值。清单 5-4 显示了如何实现<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/ThreadMigration/ThreadMigration.html#//apple_ref/doc/uid/TP40008091-CH105-SW5">清单 5-3</a>所示的循环代码的跨步。在清单 5-4 中，该块调用该<code>printf</code>语句的次数与步幅值的次数相同，在本例中为 137。（实际步幅值应根据代码所完成的工作进行配置。）当将迭代总数除以步幅值时，会剩下余数，任何余下的迭代都将内联执行。</p><p><strong>清单 5-4</strong> 在已调度的 for 循环中添加跨步</p><table><thead><tr><th><code>国际步幅= 137;</code></th></tr></thead><tbody><tr><td><code>dispatch_queue_t队列= dispatch_get_global_queue（DISPATCH_QUEUE_PRIORITY_DEFAULT，0）;</code></td></tr><tr><td>``</td></tr><tr><td><code>dispatch_apply（计数/步幅，队列，^（size_t idx）&#123;</code></td></tr><tr><td><code>size_t j = idx *步幅；</code></td></tr><tr><td><code>size_t j_stop = j +步幅；</code></td></tr><tr><td><code>做&#123;</code></td></tr><tr><td><code>printf（“％u \ n”，（unsigned int）j ++）;</code></td></tr><tr><td>` }同时（j</td></tr><tr><td><code>&#125;）;</code></td></tr><tr><td>``</td></tr><tr><td><code>size_t i;</code></td></tr><tr><td><code>对于（i =计数-（计数％步幅）; i &lt;计数; i ++）</code></td></tr><tr><td><code>printf（“％u \ n”，（unsigned int）i）;</code></td></tr></tbody></table><p>使用跨步有一定的性能优势。特别是，相对于跨度，当循环迭代的原始数量较高时，跨度会带来好处。同时分派更少的块意味着比分派它们花费更多的时间来执行那些块的代码。但是，与任何性能指标一样，您可能必须使用跨步值才能找到代码的最有效值。</p><h4 id="替换线程连接"><a href="#替换线程连接" class="headerlink" title="替换线程连接"></a>替换线程连接</h4><p>线程连接允许您生成一个或多个线程，然后让当前线程等待，直到这些线程完成。为了实现线程连接，父级将子线程创建为<em>可连接线程</em>。如果父级在没有子线程的结果的情况下无法取得进展时，它将与子级一起加入。此过程将阻塞父线程，直到子线程完成其任务并退出为止，此时，父线程可以从子线程收集结果并继续自己的工作。如果父级需要与多个子线程联接，则一次联接一个。</p><p>调度组提供的语义类似于线程联接的语义，但具有一些其他优点。像线程连接一样，调度组是线程阻塞直到一个或多个子任务完成执行的一种方式。与线程连接不同，调度组同时等待其所有子任务。并且由于调度组使用调度队列执行工作，因此它们非常高效。</p><p>要使用调度组来执行可连接线程执行的相同工作，请执行以下操作：</p><ol><li>使用<code>dispatch_group_create</code>函数创建一个新的调度组。</li><li>使用<code>dispatch_group_async</code>或<code>dispatch_group_async_f</code>函数将任务添加到组中。提交给组的每个任务代表您通常在可连接线程上执行的工作。</li><li>当当前线程无法再进行任何转发时，请调用该<code>dispatch_group_wait</code>函数以等待该组。该功能将阻塞当前线程，直到该组中的所有任务完成执行为止。</li></ol><p>如果使用操作对象来实现任务，则还可以使用依赖项来实现线程联接。无需让父线程等待一个或多个任务完成，您可以将父代码移动到操作对象。然后，您将在父操作对象和任意数量的子操作对象之间建立依赖关系，以建立可连接线程通常执行的工作。依赖于其他操作对象会阻止父操作对象在所有操作完成之前执行。</p><p>有关如何使用调度组的示例，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW25">等待队列中的任务组</a>。有关在操作对象之间设置依赖关系的信息，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW17">配置互操作依赖关系</a>。</p><h4 id="更改生产者-消费者实施"><a href="#更改生产者-消费者实施" class="headerlink" title="更改生产者-消费者实施"></a>更改生产者-消费者实施</h4><p>生产者－消费者模型使您可以管理有限数量的动态产生的资源。生产者创建新资源（或工作）时，一个或多个消费者等待这些资源（或工作）准备就绪并在使用时消费它们。实现生产者－消费者模型的典型机制是条件或信号量。</p><p>使用条件，生产者线程通常执行以下操作：</p><ol><li>锁定与条件关联的互斥锁（使用<code>pthread_mutex_lock</code>）。</li><li>生产要消耗的资源或工作。</li><li>向条件变量发出要消耗一些东西的信号（使用<code>pthread_cond_signal</code>）</li><li>解锁互斥锁（使用<code>pthread_mutex_unlock</code>）。</li></ol><p>反过来，相应的使用者线程执行以下操作：</p><ol><li>锁定与条件关联的互斥锁（使用<code>pthread_mutex_lock</code>）。</li><li>设置<code>while</code>循环以执行以下操作：<ol><li>检查是否确实有工作要做。</li><li>如果没有工作要做（或没有可用资源），请调用<code>pthread_cond_wait</code>以阻塞当前线程，直到出现相应的信号为止。</li></ol></li><li>获取制作人提供的作品（或资源）。</li><li>解锁互斥锁（使用<code>pthread_mutex_unlock</code>）。</li><li>处理工作。</li></ol><p>使用调度队列，您可以将生产者和使用者实现简化为一个调用：</p><table><thead><tr><th><code>dispatch_async（queue，^ &#123;</code></th></tr></thead><tbody><tr><td><code>//处理工作项。</code></td></tr><tr><td><code>&#125;）;</code></td></tr></tbody></table><p>当您的生产者有工作要做时，它要做的就是将工作添加到队列中，并让队列处理该项目。前面代码中唯一更改的部分是队列类型。如果生产者生成的任务需要按特定顺序执行，则可以使用串行队列。如果生产者生成的任务可以同时执行，则可以将它们添加到并发队列中，并让系统同时执行尽可能多的任务。</p><h4 id="替换信号量代码"><a href="#替换信号量代码" class="headerlink" title="替换信号量代码"></a>替换信号量代码</h4><p>如果当前正在使用信号量来限制对共享资源的访问，则应考虑使用调度信号量。传统的信号量始终要求调用内核来测试信号量。相反，调度信号量会在用户空间中快速测试信号量状态，并仅在测试失败并且需要阻塞调用线程时才捕获到内核中。这种情况导致在没有争议的情况下，调度信号量比传统信号量快得多。但是，在所有其他方面，调度信号量提供的行为与传统信号量相同。</p><p>有关如何使用调度信号量的示例，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW24">使用调度信号量来调节有限资源的使用</a>。</p><h4 id="替换运行循环代码"><a href="#替换运行循环代码" class="headerlink" title="替换运行循环代码"></a>替换运行循环代码</h4><p>如果您使用运行循环来管理在一个或多个线程上执行的工作，则可能会发现队列的实现和维护更加简单。设置自定义运行循环涉及设置基础线程和运行循环本身。运行循环代码包括设置一个或多个运行循环源以及编写回调以处理到达这些源的事件。除了完成所有工作之外，您只需创建一个串行队列并将任务分派给它即可。因此，您可以用一行代码替换所有线程和运行循环创建代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t myNewRunLoop &#x3D; dispatch_queue_create（“ com.apple.MyQueue”，NULL）;</span><br></pre></td></tr></table></figure><p>因为队列自动执行添加到队列中的所有任务，所以不需要额外的代码来管理队列。您不必创建或配置线程，也不必创建或附加任何运行循环源。此外，您只需在队列中添加任务即可执行新的工作类型。要对运行循环执行相同的操作，您将需要修改现有的运行循环源或创建一个新的源来处理新数据。</p><p>运行循环的一种常见配置是处理异步到达网络套接字的数据。您可以将调度源附加到所需的队列，而不是为此类型的行为配置运行循环。与传统的运行循环源相比，调度源还提供了更多的数据处理选项。除了处理计时器和网络端口事件，您还可以使用调度源来读取和写入文件，监视文件系统对象，监视进程和监视信号。您甚至可以定义自定义调度源，并从代码的其他部分异步触发它们。有关设置调度源的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW1">调度源</a>。</p><h4 id="与-POSIX-线程的兼容性"><a href="#与-POSIX-线程的兼容性" class="headerlink" title="与 POSIX 线程的兼容性"></a>与 POSIX 线程的兼容性</h4><p>因为 Grand Central Dispatch 管理着您提供的任务和运行这些任务的线程之间的关系，所以通常应该避免从任务代码中调用 POSIX 线程例程。如果确实由于某种原因需要调用它们，则应非常谨慎地调用哪些例程。本节向您说明在排队的任务中哪些例程可以安全调用，哪些例程不安全。该列表并不完整，但是应该告诉您什么是安全的，什么不是。</p><p>通常，您的应用程序不得删除或变异未创建的对象或数据结构。因此，使用分派队列执行的块对象不得调用以下函数：</p><ul><li><code>pthread_detach</code></li><li><code>pthread_cancel</code></li><li><code>pthread_join</code></li><li><code>pthread_kill</code></li><li><code>pthread_exit</code></li></ul><p>尽管可以在任务运行时修改线程的状态，但是必须在任务返回之前将线程返回到其原始状态。因此，只要将线程返回到其原始状态，就可以安全地调用以下函数：</p><ul><li><code>pthread_setcancelstate</code></li><li><code>pthread_setcanceltype</code></li><li><code>pthread_setschedparam</code></li><li><code>pthread_sigmask</code></li><li><code>pthread_setspecific</code></li></ul><p>用于执行给定块的基础线程可以在调用之间变化。因此，您的应用程序不应依赖以下函数，这些函数在块调用之间返回可预测的结果：</p><ul><li><code>pthread_self</code></li><li><code>pthread_getschedparam</code></li><li><code>pthread_get_stacksize_np</code></li><li><code>pthread_get_stackaddr_np</code></li><li><code>pthread_mach_thread_np</code></li><li><code>pthread_from_mach_thread_np</code></li><li><code>pthread_getspecific</code></li></ul><p><strong>重要提示：</strong> 块必须捕获并抑制其中抛出的任何语言级异常。在执行块期间发生的其他错误应类似地由该块处理或用于通知应用程序的其他部分。</p><h2 id="词汇表"><a href="#词汇表" class="headerlink" title="词汇表"></a>词汇表</h2><ul><li>应用</li></ul><p>一种特定的<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW13">程序</a>样式，向用户显示图形界面。</p><ul><li>异步设计方法</li></ul><p>围绕可以与应用程序的主线程或其他执行线程同时运行的代码块组织应用程序的原理。异步任务由一个线程启动，但实际上在另一个线程上运行，从而利用了额外的处理器资源来更快地完成其工作。</p><ul><li>块对象</li></ul><p>一个 AC 结构，用于封装内联代码和数据，以便以后可以执行。您可以使用块来封装要执行的任务，这些任务可以内联在当前线程中，也可以使用分派队列在单独的线程中。有关更多信息，请参见*<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40007502">块编程主题</a>*。</p><ul><li>并发操作</li></ul><p><code>start</code>在调用其方法的线程中未执行其任务的操作对象。并发操作通常会建立自己的线程或调用一个接口，该接口会建立一个单独的线程来执行工作。</p><ul><li>健康）状况</li></ul><p>用于同步对资源的访问的构造。在其他条件明确指示条件之前，不允许等待条件的线程继续进行。</p><ul><li>关键部分</li></ul><p>一次只能由一个线程执行的一部分代码。</p><ul><li>自订来源</li></ul><p>甲<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW19">调度源</a>用于过程应用定义的事件。定制源调用定制事件处理程序以响应应用程序生成的事件。</p><ul><li>描述符</li></ul><p>用于访问文件，套接字或其他系统资源的抽象标识符。</p><ul><li>调度队列</li></ul><p>您用于执行应用程序任务的<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW23">Grand Central Dispatch（GCD）</a>结构。GCD 定义了分派队列以串行或并行执行任务。</p><ul><li>派遣源</li></ul><p>您创建的用来处理与系统相关的事件的<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW23">Grand Central Dispatch（GCD）</a>数据结构。</p><ul><li>描述符分发源</li></ul><p>一个<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW19">调度源</a>用来处理文件相关的事件。当文件数据可用于读取或写入或响应文件系统更改时，文件描述符源将调用您的自定义事件处理程序。</p><ul><li>动态共享库</li></ul><p>二进制可执行文件，可动态加载到应用程序的进程空间中，而不是作为应用程序二进制文件的一部分静态链接。</p><ul><li>构架</li></ul><p>一种捆绑包，它将动态共享库与支持该库的资源和头文件打包在一起。有关更多信息，请参见《_<a href="https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPFrameworks/Frameworks.html#//apple_ref/doc/uid/10000183i">Framework 编程指南》</a>_。</p><ul><li>全局调度队列</li></ul><p><a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW23">Grand Central Dispatch（GCD）</a>自动为您的应用程序提供一个<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW9">调度队列</a>。您不必自己创建全局队列，也不必保留或释放它们。而是使用系统提供的功能检索它们。</p><ul><li>大中央派遣（GCD）</li></ul><p>同时执行异步任务的技术。GCD 在 OS X v10.6 和更高版本以及 iOS 4.0 和更高版本中可用。</p><ul><li>输入源</li></ul><p>线程的异步事件的源。输入源可以基于端口，也可以手动触发，并且必须附加到线程的运行循环中。</p><ul><li>可连接线程</li></ul><p>终止后不会立即回收其资源的线程。必须先显式地分离可连接线程，否则必须由另一个线程将其连接，才能回收资源。可连接线程为与它们连接的线程提供返回值。</p><ul><li>图书馆</li></ul><p>用于监视低级系统事件的 UNIX 功能。有关更多信息，请参见 <code>kqueue</code>手册页。</p><ul><li>马赫港调度源</li></ul><p>一个<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW19">调度源</a>用来到达一个 Mach 端口上处理事件。</p><ul><li>主线</li></ul><p>创建其拥有进程时创建的一种特殊类型的<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW1">线程</a>。当程序的主线程退出时，该过程结束。</p><ul><li>互斥体</li></ul><p>提供互斥访问共享资源的锁。互斥锁一次只能由一个线程持有。尝试获取由其他线程持有的互斥锁会使当前线程进入休眠状态，直到最终获取该锁为止。</p><ul><li>开放计算语言（OpenCL）</li></ul><p>一种基于标准的技术，用于在计算机的图形处理器上执行通用计算。有关更多信息，请参阅*<a href="https://developer.apple.com/library/archive/documentation/Performance/Conceptual/OpenCL_MacProgGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008312">《 Mac 版 OpenCL 编程指南》</a>*。</p><ul><li>操作对象</li></ul><p><code>NSOperation</code>类的实例。操作对象将与任务关联的代码和数据包装到可执行单元中。</p><ul><li>操作队列</li></ul><p><code>NSOperationQueue</code>类的实例。操作队列管理操作对象的执行。</p><ul><li>私人调度队列</li></ul><p>一个<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW9">调度队列</a>您创建，保存，并明确释放。</p><ul><li>处理</li></ul><p>应用程序或程序的运行时实例。进程具有自己的虚拟内存空间和系统资源（包括端口权限），与分配给其他程序的资源无关。一个进程始终至少包含一个线程（主线程），并且可以包含任意数量的附加线程。</p><ul><li>流程调度源</li></ul><p>一个<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW19">调度源</a>用于处理进程相关的事件。流程源调用您的自定义事件处理程序，以响应对指定流程的更改。</p><ul><li>程序</li></ul><p>可以运行代码和资源以执行某些任务的组合。程序无需具有图形用户界面，尽管图形应用程序也被视为程序。</p><ul><li>可折返</li></ul><p>已经在另一个线程上运行的新线程上可以安全地启动的代码。</p><ul><li>运行循环</li></ul><p>事件处理循环，在此循环中，事件被接收并调度到适当的处理程序。</p><ul><li>运行循环模式</li></ul><p>与特定名称关联的输入源，计时器源和运行循环观察器的集合。当以特定的“模式”运行时，运行循环仅监视与该模式关联的源和观察者。</p><ul><li>运行循环对象</li></ul><p><code>NSRunLoop</code>类或<code>CFRunLoopRef</code>不透明类型的实例。这些对象提供了用于在线程中实现事件处理循环的接口。</p><ul><li>运行循环观察器</li></ul><p>运行循环执行的不同阶段中的通知的接收者。</p><ul><li>信号</li></ul><p>受保护的变量，用于限制对共享资源的访问。互斥量和条件都是信号灯的不同类型。</p><ul><li>信号</li></ul><p>一种用于从其域外部操纵进程的 UNIX 机制。系统使用信号将重要消息传递给应用程序，例如应用程序是否执行了非法指令。有关更多信息，请参见<code>signal</code>手册页。</p><ul><li>信号分配源</li></ul><p>甲<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW19">调度源</a>用于处理 UNIX 信号。每当进程收到 UNIX 信号时，信号源就会调用您的自定义事件处理程序。</p><ul><li>任务</li></ul><p>要执行的工作量。尽管某些技术（最著名的是 Carbon Multiprocessing Services）以不同的方式使用该术语，但首选用法是作为抽象概念，指示要执行的工作量。</p><ul><li>线</li></ul><p>流程中的执行流程。每个线程都有自己的堆栈空间，但在同一进程中与其他线程共享内存。</p><ul><li>计时器调度源</li></ul><p>一个<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW19">调度源</a>用于处理周期性事件。计时器源会定期（基于时间）调用自定义事件处理程序。</p><p>有关 POSIX 线程和本节中提到的功能的更多信息，请参见<code>pthread</code>手册页。</p><h2 id="文档修订历史"><a href="#文档修订历史" class="headerlink" title="文档修订历史"></a>文档修订历史</h2><p>下表描述了对“ <em>并发编程指南”</em>的更改。</p><table><thead><tr><th><strong>日期</strong></th><th><strong>笔记</strong></th></tr></thead><tbody><tr><td>2012-12-13</td><td>更正了调度队列的说明。</td></tr><tr><td>2012-07-17</td><td>删除了有关自动释放池在操作中的使用情况的过时信息。</td></tr><tr><td>2011-01-19</td><td>更新了用于手动执行操作的代码以正确处理取消。</td></tr><tr><td></td><td>添加了有关将 Objective-C 对象与调度队列结合使用的信息。</td></tr><tr><td>2010-04-13</td><td>更新以反映对 iOS 的支持。</td></tr><tr><td>2009-08-07</td><td>更正了非并行操作对象示例的启动方法。</td></tr><tr><td>2009-05-22</td><td>新文档描述了用于以并行方式执行多个代码路径的技术。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Concurrency-Programming-Guide&quot;&gt;&lt;a href=&quot;#Concurrency-Programming-Guide&quot; class=&quot;headerlink&quot; title=&quot;Concurrency Programming Guide&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091-CH1-SW1&quot;&gt;Concurrency Programming Guide&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;感觉线程相关的面试题都能在 👆 这个 🔗 里找到答案呢&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="iOS" scheme="https://leihao0.github.io/tags/iOS/"/>
    
      <category term="Interview" scheme="https://leihao0.github.io/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>The Graveyard Book</title>
    <link href="https://leihao0.github.io/The-Graveyard-Book/"/>
    <id>https://leihao0.github.io/The-Graveyard-Book/</id>
    <published>2020-05-07T00:55:21.000Z</published>
    <updated>2020-09-09T11:20:26.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="游乐园-🎠-之书"><a href="#游乐园-🎠-之书" class="headerlink" title="游乐园 🎠 之书"></a>游乐园 🎠 之书</h1><div style="width: 300px"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/The%20Graveyard%20Book.jpg" /></div><p>孩子们没有生死的概念，坟场对于他们来说更像是游乐园</p><a id="more"></a><hr><p>感谢 🙏 🐼 读客 又寄来一本书</p><p>说来惭愧，出国后阅读数量直线下降<br>由以前每年的几百本骤变成现在的个位数</p><p>想想以前大言不惭的说阅读应无功利心，而应由兴趣驱动<br>现在真是啪啪打脸</p><p>不过也有客观原因：</p><p>一是我现在想看的大多数书都有原版<br>既然有原版，我就不是很想看翻译的版本</p><p>二是有次我电话，被一个新加坡国立大学的朋友听到了<br>之后就被她反复鄙视 “你的塑料英语”</p><p>不过我有我的倔强，慢就慢，但坚持看原版<br>应该总会有一天可以向中文书那样快起来</p><p>三是坡县是个岛，没有各位大神说的什么国外好山好水好寂寞<br>并且这次疫情的初期让我一度以为这里是纸糊的发达国家<br>另外一年四季都是夏天，除了比较热，其他都蛮安逸的<br>蓝天白云暴雨电闪雷鸣，感觉时间像是凝固了，挺好</p><p>没了功利心，自然也没了阅读的动力</p><p>现在 Circuit Breaker 了，算是有了点时间和心情吧</p><hr><p>最早拿到这本书<br>刚开始时以为是科幻<br>听到可以隐身以为是玄幻<br>碰到妹纸以为是爱情<br>去上学又以为是校园<br>老爸来局里捞人以为是亲子<br>全家被杀又以为是悬疑<br>最后的最后原来是在说成长</p><p>就如最后作者写到：</p><blockquote><p>我在美国新奥尔良一家破旧的宾馆里写完第六章，《伯蒂上学的日子》。我在自家花园的凉亭里完成了最后一页，一边写一边强忍泪水。只在那一刻，我明白了我为何没在刚刚当爸爸时写下这本书。因为在创作之前，我得先陪伴我的孩子走完他们的成长历程，养育他们，爱他们，并在最后学会放手</p></blockquote><hr><p>另外阅读过程中很难入戏<br>整本书一直给我一种哈利波特翻版的感觉</p><p>不过这次阅读有一个明显的不同<br>以前阅读此类小说，往往是以主人公的视角进入书本<br>随着年龄的增长<br>这次更多的是以 Silas 的视角</p><p>这书如果是国内常见的玄幻套路<br>Bod 肯定把妹 Scarlett，驯服 Sleer，成为 Master， 手撕 Jack，坐当 Brotherhood 老大</p><p>然而这一切在写出了 美国众神的 Neil 笔下并没有发生<br>Bod 打完怪 👾 后，妹纸反倒吓跑了，Bod 也只是普普通通的 <strong>世界那么大，我想去看看</strong></p><p>作为父亲，你希望看到自己的 Bod 成为国内的那个还是书 📖 中的这个？</p><hr><p>还有有时候叛逆期做的一些蠢事，需要父母来买单<br>现在年龄大了，也理解的当年父母各种禁令的苦衷</p><p>不过想想也没什么办法<br>那时候的自己并不知道现在的自己知道的这些</p><p>我曾设想过，如果现在的自己和那时的自己对话<br>那时的自己肯定也不会乖乖听话<br>必须被社会的铁拳锤在脸上才能幡然醒悟<br>毅然决然的做一些事情</p><hr><p>处理了总总事情后，总有一天要走出童话世界，进入生活</p><blockquote><p>“Good-bye, then, Silas.” Bod held out his hand, as he had when he was a small boy, and Silas took it, in a cold hand the color of old ivory, and shook it gravely.<br>“Good-bye, Nobody Owens.”<br>Bod picked up the little suitcase. He opened the door to let himself out of the crypt, walked back up the gentle slope to the path without looking back.”</p></blockquote><p>我出来的时候就比较惨，没人送我，没有道别<br>北京的房租退了，买了单程机票<br>全部家当打了三个行李箱<br>凌晨 4 点打车去机场<br>办完托运，登机，然后就走了</p><blockquote><p>without looking back</p></blockquote><p>我多么希望当时也听到了 Bod 的幻听：</p><blockquote><p>He took a step forward … a voice said, “I am so proud of you, my son.”</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;游乐园-🎠-之书&quot;&gt;&lt;a href=&quot;#游乐园-🎠-之书&quot; class=&quot;headerlink&quot; title=&quot;游乐园 🎠 之书&quot;&gt;&lt;/a&gt;游乐园 🎠 之书&lt;/h1&gt;&lt;div style=&quot;width: 300px&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/The%20Graveyard%20Book.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;孩子们没有生死的概念，坟场对于他们来说更像是游乐园&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Reading" scheme="https://leihao0.github.io/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>SwiftUI Tips</title>
    <link href="https://leihao0.github.io/SwiftUI-Tips/"/>
    <id>https://leihao0.github.io/SwiftUI-Tips/</id>
    <published>2020-04-24T11:49:41.000Z</published>
    <updated>2020-09-09T11:07:10.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Binding-to-UserDefaults"><a href="#Binding-to-UserDefaults" class="headerlink" title="Binding to UserDefaults"></a>Binding to UserDefaults</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UD</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> date: <span class="type">Date</span> = <span class="type">UserDefaults</span>.standard.value(forKey: <span class="string">&quot;date&quot;</span>) <span class="keyword">as</span>? <span class="type">Date</span> ?? <span class="type">Date</span>() &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="type">UserDefaults</span>.standard.<span class="keyword">set</span>(<span class="keyword">self</span>.date, forKey: <span class="string">&quot;date&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="AppDelegate-gt-SceneDelegate"><a href="#AppDelegate-gt-SceneDelegate" class="headerlink" title="AppDelegate -&gt; SceneDelegate"></a>AppDelegate -&gt; SceneDelegate</h2><p>Many Delegates moved from <code>AppDelegate.swift</code> to <code>SceneDelegate.swift</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> app: UIApplication, <span class="keyword">open</span> url: URL, options: [UIApplication.OpenURLOptionsKey : <span class="keyword">Any</span>] = [:])</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// to</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scene</span><span class="params">(<span class="number">_</span> scene: UIScene, openURLContexts URLContexts: Set&lt;UIOpenURLContext&gt;)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NavigationView-NavigationBarItems-NavigationLink"><a href="#NavigationView-NavigationBarItems-NavigationLink" class="headerlink" title="NavigationView, NavigationBarItems, NavigationLink"></a>NavigationView, NavigationBarItems, NavigationLink</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">EnvironmentObject</span> <span class="keyword">var</span> ud: <span class="type">UD</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> url = <span class="string">&quot;Title:status?date=\(String(ud.firstDate.timeIntervalSince1970))&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                qrCodeImage(<span class="keyword">for</span>: url)!</span><br><span class="line"></span><br><span class="line">                <span class="type">Spacer</span>().frame(height: <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;\(ud.firstDate)&quot;</span>)</span><br><span class="line">            &#125;.navigationBarTitle(<span class="string">&quot;Title&quot;</span>)</span><br><span class="line">                .navigationBarItems(trailing:</span><br><span class="line">                    <span class="type">HStack</span> &#123;</span><br><span class="line">                        <span class="type">NavigationLink</span>(destination: <span class="type">PickerView</span>(firstDate: $ud.firstDate)) &#123;</span><br><span class="line">                            <span class="type">Image</span>(systemName: <span class="string">&quot;gear&quot;</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="PickerView-Binding"><a href="#PickerView-Binding" class="headerlink" title="PickerView Binding"></a>PickerView Binding</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PickerView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">Binding</span> <span class="keyword">var</span> date: <span class="type">Date</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="type">DatePicker</span>(selection: $date, <span class="keyword">in</span>: ...<span class="type">Date</span>(), displayedComponents: .date) &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Fix-SwiftUI-Image-Blank-View"><a href="#Fix-SwiftUI-Image-Blank-View" class="headerlink" title="Fix SwiftUI Image Blank View"></a>Fix SwiftUI Image Blank View</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ciContext = <span class="type">CIContext</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">qrCodeImage</span><span class="params">(<span class="keyword">for</span> string: String)</span></span> -&gt; <span class="type">Image?</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = string.data(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> qrFilter = <span class="type">CIFilter</span>(name: <span class="string">&quot;CIQRCodeGenerator&quot;</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">    qrFilter.setValue(data, forKey: <span class="string">&quot;inputMessage&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> transform = <span class="type">CGAffineTransform</span>(scaleX: <span class="number">10</span>, y: <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> ciImage = qrFilter.outputImage?.transformed(by: transform) <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> cgImage = ciContext.createCGImage(ciImage, from: ciImage.extent)</span><br><span class="line">    <span class="comment">// convert to UIImage</span></span><br><span class="line">    <span class="keyword">let</span> uiImage = <span class="type">UIImage</span>(cgImage: cgImage!)</span><br><span class="line">    <span class="keyword">let</span> image = <span class="type">Image</span>(uiImage: uiImage)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Binding-to-UserDefaults&quot;&gt;&lt;a href=&quot;#Binding-to-UserDefaults&quot; class=&quot;headerlink&quot; title=&quot;Binding to UserDefaults&quot;&gt;&lt;/a&gt;Binding to UserDefaults&lt;/h2&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UD&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;ObservableObject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @&lt;span class=&quot;type&quot;&gt;Published&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; date: &lt;span class=&quot;type&quot;&gt;Date&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;UserDefaults&lt;/span&gt;.standard.value(forKey: &lt;span class=&quot;string&quot;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? &lt;span class=&quot;type&quot;&gt;Date&lt;/span&gt; ?? &lt;span class=&quot;type&quot;&gt;Date&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;didSet&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;UserDefaults&lt;/span&gt;.standard.&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.date, forKey: &lt;span class=&quot;string&quot;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="SwiftUI" scheme="https://leihao0.github.io/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to reduce iCloud storage by shrink videos</title>
    <link href="https://leihao0.github.io/How-to-reduce-iCloud-storage-by-shrink-videos/"/>
    <id>https://leihao0.github.io/How-to-reduce-iCloud-storage-by-shrink-videos/</id>
    <published>2020-03-29T16:04:51.000Z</published>
    <updated>2020-09-09T11:07:28.156Z</updated>
    
    <content type="html"><![CDATA[<p>When I gallery videos in Photos, it will show where and when did I take them</p><p>That is a wonderful feature to help me to recall my memory<br>But the original 4k takes too much space in iCloud</p><p>For example, a 2:30 video will take 1GB, even powered by HEVC (High-Efficiency Video Coding)<br>My 200G iCloud plan almost full</p><p>So I’m planning to compress videos a little bit to save some space.</p><a id="more"></a><p>But,</p><h2 id="FFmpeg-converts-video-will-loss-GPS-even-with-metadata"><a href="#FFmpeg-converts-video-will-loss-GPS-even-with-metadata" class="headerlink" title="FFmpeg converts video will loss GPS even with metadata"></a>FFmpeg converts video will loss GPS even with metadata</h2><p>Luckily, I found a way to do it</p><h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h3><ul><li>FFmpeg</li><li>Exiftool</li></ul><h4 id="Export-original-videos-to-a-folder"><a href="#Export-original-videos-to-a-folder" class="headerlink" title="Export original videos to a folder"></a>Export original videos to a folder</h4><p>The common way to drag videos from <code>Photos</code> to a folder will let <code>Photos</code> convert the video</p><p>So you have to select all your videos want to export and</p><p><code>File -&gt; Export -&gt; Export Unmodified Original For...</code></p><h4 id="shrink-each-video"><a href="#shrink-each-video" class="headerlink" title="shrink each video"></a>shrink each video</h4><p>iPhone default Stream is<br><code>#0:0(und): Video: hevc (Main) (hvc1 / 0x31637668), yuv420p(tv, bt709)</code></p><p>so re-encoding to 10bit with <code>-pix_fmt yuv420p10le</code> does not help</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">ffmov</span></span>() &#123;</span><br><span class="line">    mkdir -p shrunk</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ffmpeg with h265</span></span><br><span class="line">    ffmpeg -i <span class="string">&quot;<span class="variable">$1</span>&quot;</span> -c:v libx265 -crf 28 -c:a copy -c:s copy -tag:v hvc1 shrunk/<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    overwriteExif <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">overwriteExif</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># copy Exif info from the original video to the shrunk *.mov</span></span><br><span class="line">    exiftool -tagsFromFile <span class="string">&quot;<span class="variable">$1</span>&quot;</span> shrunk/<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    exiftool shrunk/<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    rm shrunk/<span class="string">&quot;<span class="variable">$1_original</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">shrinkVideos</span></span>() &#123;</span><br><span class="line">    <span class="comment">## walk thought all *.mov</span></span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> *.mov</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$f</span></span><br><span class="line">        ffmov <span class="variable">$f</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then you can copy &amp; paste these code into <code>Terminal</code> and <code>cd VideoFolder</code>, then <code>shrinkVideos</code></p><p>It will take a very long time to do the shrink</p><p>On my MacBook Pro (15-inch, 2018), it’s only 0.3x<br>But usually, the video will shrink 5x without losing too much quality</p><p>When all finished, shrunk videos will under <code>shrunk/</code> folder</p><p>Then you can compare them, and delete original video first then import shrunk video</p><p>OK Finally I cannot bear the extremely slow speed, so I use my Nvidia 1080 GPU to accelerate, for more: <a href="https://leihao0.github.io/2018/10/18/CUDA-GPU-Accelerated-h264-h265-HEVC-Video-Encoding-with-Staxrip/">CUDA GPU Accelerated h264/h265/HEVC Video Encoding with Staxrip</a></p><p>One more step is to tag the converted video to <code>hvc1</code>, otherwise, Photos will be imported with an error:</p><p><strong>Invalid: The operation couldn’t be completed. (PHPhotosErrorDomain error -1.)</strong></p><p>so the whole step is to</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">ffhvc1</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> -&gt; <span class="variable">$1</span>.mov&quot;</span></span><br><span class="line">    ffmpeg -i <span class="string">&quot;<span class="variable">$1</span>&quot;</span> -c:v copy -c:a copy -c:s copy -tag:v hvc1 <span class="string">&quot;<span class="variable">$1</span>.mov&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span>.mov -&gt; <span class="variable">$1</span>&quot;</span></span><br><span class="line">    rm <span class="string">&quot;<span class="variable">$1</span>&quot;</span>; mv <span class="string">&quot;<span class="variable">$1</span>.mov&quot;</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">overwriteExif</span></span>() &#123;</span><br><span class="line">    <span class="comment"># copy Exif info from the original video to the shrunk *.mov</span></span><br><span class="line">    exiftool -tagsFromFile <span class="string">&quot;<span class="variable">$1</span>&quot;</span> shrunk/<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    exiftool shrunk/<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    rm shrunk/<span class="string">&quot;<span class="variable">$1_original</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">shrinkVideos</span></span>() &#123;</span><br><span class="line">    <span class="comment">## walk thought all *.mov</span></span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> *.mov</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$f</span>&quot;</span></span><br><span class="line">        ffhvc1 <span class="string">&quot;shrunk/<span class="variable">$f</span>&quot;</span></span><br><span class="line">        overwriteExif <span class="string">&quot;<span class="variable">$f</span>&quot;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># use Staxrip to convert all videos to shrunk/</span></span><br><span class="line"><span class="comment"># then run `shrinkVideos`</span></span><br></pre></td></tr></table></figure><hr><p>I hope this will be helpful to you</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;When I gallery videos in Photos, it will show where and when did I take them&lt;/p&gt;
&lt;p&gt;That is a wonderful feature to help me to recall my memory&lt;br&gt;But the original 4k takes too much space in iCloud&lt;/p&gt;
&lt;p&gt;For example, a 2:30 video will take 1GB, even powered by HEVC (High-Efficiency Video Coding)&lt;br&gt;My 200G iCloud plan almost full&lt;/p&gt;
&lt;p&gt;So I’m planning to compress videos a little bit to save some space.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="FFmpeg" scheme="https://leihao0.github.io/tags/FFmpeg/"/>
    
      <category term="Exiftool" scheme="https://leihao0.github.io/tags/Exiftool/"/>
    
      <category term="iCloud" scheme="https://leihao0.github.io/tags/iCloud/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Hash Table</title>
    <link href="https://leihao0.github.io/LeetCode-Hash-Table/"/>
    <id>https://leihao0.github.io/LeetCode-Hash-Table/</id>
    <published>2020-01-11T16:00:00.000Z</published>
    <updated>2020-09-09T11:07:43.961Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Design-HashSet"><a href="#Design-HashSet" class="headerlink" title="Design HashSet"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Design-HashSet">Design HashSet</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHashSet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> bucket = <span class="type">Array</span>(repeating: <span class="literal">false</span>, <span class="built_in">count</span>: <span class="number">1000001</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(<span class="number">_</span> key: Int)</span></span> &#123;</span><br><span class="line">        bucket[key] = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(<span class="number">_</span> key: Int)</span></span> &#123;</span><br><span class="line">         bucket[key] = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">contains</span><span class="params">(<span class="number">_</span> key: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bucket[key]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Design-HashMap"><a href="#Design-HashMap" class="headerlink" title="Design HashMap"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Design-HashMap">Design HashMap</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHashMap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> bucket = <span class="type">Array</span>(repeating: -<span class="number">1</span>, <span class="built_in">count</span>: <span class="number">1000001</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">put</span><span class="params">(<span class="number">_</span> key: Int, <span class="number">_</span> value: Int)</span></span> &#123;</span><br><span class="line">        bucket[key] = value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(<span class="number">_</span> key: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bucket[key]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(<span class="number">_</span> key: Int)</span></span> &#123;</span><br><span class="line">        bucket[key] = -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Contains-Duplicate"><a href="#Contains-Duplicate" class="headerlink" title="Contains Duplicate"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Contains-Duplicate">Contains Duplicate</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">containsDuplicate</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">set</span> = <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">set</span>.<span class="built_in">contains</span>(i) &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line">            <span class="keyword">set</span>.insert(i)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Single-Number"><a href="#Single-Number" class="headerlink" title="Single Number"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Single-Number">Single Number</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">singleNumber</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> nums.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; $<span class="number">0</span> ^ $<span class="number">1</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Intersection-of-Two-Arrays"><a href="#Intersection-of-Two-Arrays" class="headerlink" title="Intersection of Two Arrays"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Intersection-of-Two-Arrays">Intersection of Two Arrays</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">intersection</span><span class="params">(<span class="number">_</span> nums1: [Int], <span class="number">_</span> nums2: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">let</span> set1 = <span class="type">Set</span>(nums1), set2 = <span class="type">Set</span>(nums2)</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Array</span>(set1.intersection(set2))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Happy-Number"><a href="#Happy-Number" class="headerlink" title="Happy Number"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Happy-Number">Happy Number</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> setI = <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isHappy</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line">        <span class="keyword">var</span> i = n, r = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &gt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> t = i%<span class="number">10</span></span><br><span class="line">            r += t*t</span><br><span class="line">            i /= <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> setI.<span class="built_in">contains</span>(r) &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line"></span><br><span class="line">        setI.insert(r)</span><br><span class="line">        <span class="keyword">return</span> isHappy(r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>##</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Minimum-Index-Sum-of-Two-Lists"><a href="#Minimum-Index-Sum-of-Two-Lists" class="headerlink" title="Minimum Index Sum of Two Lists"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Minimum-Index-Sum-of-Two-Lists">Minimum Index Sum of Two Lists</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 452 ms</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findRestaurant</span><span class="params">(<span class="number">_</span> list1: [String], <span class="number">_</span> list2: [String])</span></span> -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> dict2 = [<span class="type">String</span>: <span class="type">Int</span>](), least = <span class="type">Int</span>.<span class="built_in">max</span>, arr = [<span class="type">String</span>]()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;list2.<span class="built_in">count</span> &#123;</span><br><span class="line">            dict2[ list2[i] ] = i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;list1.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> j = dict2[ list1[i] ] &#123;</span><br><span class="line">                <span class="keyword">let</span> n = i+j</span><br><span class="line">                <span class="keyword">if</span> n &lt; least &#123;</span><br><span class="line">                    arr = [list1[i]]</span><br><span class="line">                    least = n</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> n == least &#123;</span><br><span class="line">                    arr.append(list1[i])</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2104 ms</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findRestaurant</span><span class="params">(<span class="number">_</span> list1: [String], <span class="number">_</span> list2: [String])</span></span> -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">let</span> dict1 = list1.enumerated().<span class="built_in">reduce</span>(into: [<span class="type">String</span>: <span class="type">Int</span>]()) &#123; $<span class="number">0</span>[$<span class="number">1.1</span>] = $<span class="number">1.0</span> &#125;</span><br><span class="line">        <span class="keyword">let</span> dict2 = list2.enumerated().<span class="built_in">reduce</span>(into: [<span class="type">String</span>: <span class="type">Int</span>]()) &#123; $<span class="number">0</span>[$<span class="number">1.1</span>] = $<span class="number">1.0</span> &#125;</span><br><span class="line">        <span class="keyword">let</span> dict = <span class="type">Set</span>(dict1.keys).intersection(dict2.keys).<span class="built_in">reduce</span>(into: [<span class="type">String</span>: <span class="type">Int</span>]()) &#123; $<span class="number">0</span>[$<span class="number">1</span>] = dict1[$<span class="number">1</span>]! + dict2[$<span class="number">1</span>]! &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dict.<span class="built_in">filter</span> &#123; $<span class="number">0</span>.value == dict.<span class="built_in">map</span>(&#123; $<span class="number">0</span>.value &#125;).<span class="built_in">min</span>()  &#125;.<span class="built_in">map</span> &#123; $<span class="number">0</span>.key &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Intersection-of-Two-Arrays-II"><a href="#Intersection-of-Two-Arrays-II" class="headerlink" title="Intersection of Two Arrays II"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Intersection-of-Two-Arrays-II">Intersection of Two Arrays II</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">intersect</span><span class="params">(<span class="number">_</span> nums1: [Int], <span class="number">_</span> nums2: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> dict = [<span class="type">Int</span>: <span class="type">Int</span>](), ans = [<span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums1 &#123;</span><br><span class="line">            dict[n, <span class="keyword">default</span>: <span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums2 &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> v = dict[n], v &gt; <span class="number">0</span> &#123;</span><br><span class="line">                ans.append(n)</span><br><span class="line">                dict[n] = v - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Contains-Duplicate-II"><a href="#Contains-Duplicate-II" class="headerlink" title="Contains Duplicate II"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Contains-Duplicate-II">Contains Duplicate II</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">containsNearbyDuplicate</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> k: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> dict = [<span class="type">Int</span>: [<span class="type">Int</span>]]()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> n = nums[i]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> arr = dict[n] &#123;</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> arr &#123;</span><br><span class="line">                    <span class="keyword">if</span> i-j &lt;= k &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                dict[n] = arr + [i]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dict[n] = [i]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Logger-Rate-Limiter"><a href="#Logger-Rate-Limiter" class="headerlink" title="Logger Rate Limiter"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Logger-Rate-Limiter">Logger Rate Limiter</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> logs = [<span class="type">String</span>: <span class="type">Int</span>]()</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">shouldPrintMessage</span><span class="params">(<span class="number">_</span> timestamp: Int, <span class="number">_</span> message: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> lastTimestamp = logs[message], timestamp - lastTimestamp &lt; <span class="number">10</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        logs[message] = timestamp</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Group-Shifted-Strings"><a href="#Group-Shifted-Strings" class="headerlink" title="Group Shifted Strings"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Group-Shifted-Strings">Group Shifted Strings</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">groupStrings</span><span class="params">(<span class="number">_</span> strings: [String])</span></span> -&gt; [[<span class="type">String</span>]] &#123;</span><br><span class="line">        <span class="keyword">var</span> dict = [[<span class="type">Int</span>]: [<span class="type">String</span>]]()</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> strings &#123;</span><br><span class="line">            <span class="keyword">let</span> arrS = <span class="type">Array</span>(s)</span><br><span class="line">            <span class="keyword">var</span> arr = [<span class="type">Int</span>]()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">1</span>..&lt;arrS.<span class="built_in">count</span>) &#123;</span><br><span class="line">                arr.append((<span class="type">Int</span>(arrS[i].asciiValue!)-<span class="type">Int</span>(arrS[i-<span class="number">1</span>].asciiValue!)+<span class="number">26</span>)%<span class="number">26</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            dict[arr, <span class="keyword">default</span>: []] += [s]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dict.<span class="built_in">map</span> &#123; $<span class="number">0</span>.value &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Valid-Sudoku"><a href="#Valid-Sudoku" class="headerlink" title="Valid Sudoku"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Valid-Sudoku">Valid Sudoku</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isValidSudoku</span><span class="params">(<span class="number">_</span> board: [[Character]])</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> sets = <span class="type">Array</span>(repeating: <span class="type">Set</span>&lt;<span class="type">Character</span>&gt;(), <span class="built_in">count</span>: <span class="number">9</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">9</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">9</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="built_in">c</span> = board[i][j]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">c</span> == <span class="string">&quot;.&quot;</span> &#123; <span class="keyword">continue</span> &#125;</span><br><span class="line">                <span class="keyword">if</span> sets[i].<span class="built_in">contains</span>(<span class="built_in">c</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sets[i].insert(<span class="built_in">c</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sets = <span class="type">Array</span>(repeating: <span class="type">Set</span>&lt;<span class="type">Character</span>&gt;(), <span class="built_in">count</span>: <span class="number">9</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">9</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">9</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="built_in">c</span> = board[i][j]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">c</span> == <span class="string">&quot;.&quot;</span> &#123; <span class="keyword">continue</span> &#125;</span><br><span class="line">                <span class="keyword">if</span> sets[j].<span class="built_in">contains</span>(<span class="built_in">c</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sets[j].insert(<span class="built_in">c</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">3</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> setC = <span class="type">Set</span>&lt;<span class="type">Character</span>&gt;()</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">3</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">3</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> <span class="built_in">c</span> = board[i*<span class="number">3</span>+k][j*<span class="number">3</span>+l]</span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">c</span> == <span class="string">&quot;.&quot;</span> &#123; <span class="keyword">continue</span> &#125;</span><br><span class="line">                        <span class="keyword">if</span> setC.<span class="built_in">contains</span>(<span class="built_in">c</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            setC.insert(<span class="built_in">c</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Find-Duplicate-Subtrees"><a href="#Find-Duplicate-Subtrees" class="headerlink" title="Find Duplicate Subtrees"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Find-Duplicate-Subtrees">Find Duplicate Subtrees</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findDuplicateSubtrees</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [<span class="type">TreeNode?</span>] &#123;</span><br><span class="line">        dfs(root)</span><br><span class="line">        <span class="keyword">return</span> nodeDict.<span class="built_in">filter</span> &#123; $<span class="number">0</span>.value.<span class="number">1</span> &gt; <span class="number">1</span> &#125;.<span class="built_in">map</span> &#123; $<span class="number">0</span>.value.<span class="number">0</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> nodeDict = [[<span class="type">Int?</span>]: (<span class="type">TreeNode</span>, <span class="type">Int</span>)]()</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(<span class="number">_</span> node: TreeNode?)</span></span> -&gt; [<span class="type">Int?</span>] &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> node = node <span class="keyword">else</span> &#123; <span class="keyword">return</span> [<span class="literal">nil</span>] &#125;</span><br><span class="line">        <span class="keyword">let</span> key: [<span class="type">Int?</span>] = [node.val] + dfs(node.<span class="keyword">left</span>) + dfs(node.<span class="keyword">right</span>)</span><br><span class="line">        nodeDict[key, <span class="keyword">default</span>: (node, <span class="number">0</span>)].<span class="number">1</span> += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> key</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Jewels-and-Stones"><a href="#Jewels-and-Stones" class="headerlink" title="Jewels and Stones"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Jewels-and-Stones">Jewels and Stones</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">numJewelsInStones</span><span class="params">(<span class="number">_</span> J: String, <span class="number">_</span> S: String)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> j = <span class="type">Set</span>(<span class="type">J</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="type">S</span>.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; $<span class="number">0</span> + (j.<span class="built_in">contains</span>($<span class="number">1</span>) ? <span class="number">1</span> : <span class="number">0</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Longest-Substring-Without-Repeating-Characters"><a href="#Longest-Substring-Without-Repeating-Characters" class="headerlink" title="Longest Substring Without Repeating Characters"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Longest-Substring-Without-Repeating-Characters">Longest Substring Without Repeating Characters</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Two-Sum-III-Data-structure-design"><a href="#Two-Sum-III-Data-structure-design" class="headerlink" title="Two Sum III - Data structure design"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Two-Sum-III---Data-structure-design">Two Sum III - Data structure design</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoSum</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> numbers = [<span class="type">Int</span>: <span class="type">Int</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(<span class="number">_</span> number: Int)</span></span> &#123;</span><br><span class="line">        numbers[number, <span class="keyword">default</span>: <span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">find</span><span class="params">(<span class="number">_</span> value: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (k, v) <span class="keyword">in</span> numbers &#123;</span><br><span class="line">            <span class="keyword">let</span> rest = value-k</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> num = numbers[rest], (num &gt; ((rest == k) ? <span class="number">1</span> : <span class="number">0</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4Sum-II"><a href="#4Sum-II" class="headerlink" title="4Sum II"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#4Sum-II">4Sum II</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fourSumCount</span><span class="params">(<span class="number">_</span> A: [Int], <span class="number">_</span> B: [Int], <span class="number">_</span> C: [Int], <span class="number">_</span> D: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">0</span>, ab = [<span class="type">Int</span>: <span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="type">A</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="type">B</span> &#123;</span><br><span class="line">                ab[i+j, <span class="keyword">default</span>: <span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="type">C</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="type">D</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> v = ab[-i-j] &#123; num += v &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Top-K-Frequent-Elements"><a href="#Top-K-Frequent-Elements" class="headerlink" title="Top K Frequent Elements"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Top-K-Frequent-Elements">Top K Frequent Elements</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">topKFrequent</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> k: Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> nums.<span class="built_in">reduce</span>(into: [<span class="type">Int</span>: <span class="type">Int</span>]()) &#123; $<span class="number">0</span>[$<span class="number">1</span>, <span class="keyword">default</span>: <span class="number">0</span>] += <span class="number">1</span> &#125;.sorted(by: &#123;$<span class="number">0</span>.value &gt; $<span class="number">1</span>.value&#125;)[..&lt;k].<span class="built_in">map</span>&#123;$<span class="number">0</span>.key&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Unique-Word-Abbreviation"><a href="#Unique-Word-Abbreviation" class="headerlink" title="Unique Word Abbreviation"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Unique-Word-Abbreviation">Unique Word Abbreviation</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValidWordAbbr</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> abbrDict = [<span class="type">String</span>: <span class="type">Set</span>&lt;<span class="type">String</span>&gt;]()</span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> dictionary: [<span class="type">String</span>]) &#123;</span><br><span class="line">        dictionary.forEach &#123; abbrDict[abbreviate($<span class="number">0</span>), <span class="keyword">default</span>: <span class="type">Set</span>&lt;<span class="type">String</span>&gt;()].insert($<span class="number">0</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isUnique</span><span class="params">(<span class="number">_</span> word: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> abbrSet = abbrDict[abbreviate(word)] &#123;</span><br><span class="line">            <span class="keyword">return</span> abbrSet.<span class="built_in">contains</span>(word) &amp;&amp; abbrSet.<span class="built_in">count</span> == <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">abbreviate</span><span class="params">(<span class="number">_</span> word: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> word.<span class="built_in">count</span> &lt; <span class="number">3</span> ? word : (<span class="type">String</span>(word.first!) + <span class="type">String</span>(word.<span class="built_in">count</span>-<span class="number">2</span>) + <span class="type">String</span>(word.last!))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Insert-Delete-GetRandom-O-1"><a href="#Insert-Delete-GetRandom-O-1" class="headerlink" title="Insert Delete GetRandom O(1)"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Insert-Delete-GetRandom-O(1)">Insert Delete GetRandom O(1)</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 220 ms, 30.27%</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomizedSet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> vals = <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(<span class="number">_</span> val: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> vals.<span class="built_in">contains</span>(val) &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line">        vals.insert(val)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(<span class="number">_</span> val: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> !vals.<span class="built_in">contains</span>(val) &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line">        vals.remove(val)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getRandom</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> vals.randomElement() ?? <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Design-HashSet&quot;&gt;&lt;a href=&quot;#Design-HashSet&quot; class=&quot;headerlink&quot; title=&quot;Design HashSet&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leihao0.github.io/LeetCode-Hash-Table/#Design-HashSet&quot;&gt;Design HashSet&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyHashSet&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bucket = &lt;span class=&quot;type&quot;&gt;Array&lt;/span&gt;(repeating: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1000001&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; key: Int)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bucket[key] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; key: Int)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         bucket[key] = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; key: Int)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bucket[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="https://leihao0.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="https://leihao0.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Binary Search</title>
    <link href="https://leihao0.github.io/LeetCode-Binary-Search/"/>
    <id>https://leihao0.github.io/LeetCode-Binary-Search/</id>
    <published>2020-01-06T16:00:00.000Z</published>
    <updated>2020-09-09T11:09:09.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Binary-Search">Binary Search</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> target: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = nums.<span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= j &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = i + (j-i)/<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target &#123; <span class="keyword">return</span> mid &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &lt; target &#123; i = mid+<span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; j = mid-<span class="number">1</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Sqrt-x"><a href="#Sqrt-x" class="headerlink" title="Sqrt(x)"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Sqrt(x)">Sqrt(x)</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mySqrt</span><span class="params">(<span class="number">_</span> x: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> target = <span class="type">Int</span>(sqrt(<span class="type">Double</span>(x)))</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = x</span><br><span class="line">        <span class="keyword">while</span> i &lt;= j &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = i + (j-i)&gt;&gt;<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> mid == target &#123; <span class="keyword">return</span> mid &#125;</span><br><span class="line">            mid &lt; target ? (i=mid+<span class="number">1</span>) : (j=mid-<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Guess-Number-Higher-or-Lower"><a href="#Guess-Number-Higher-or-Lower" class="headerlink" title="Guess Number Higher or Lower"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Guess-Number-Higher-or-Lower">Guess Number Higher or Lower</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> : <span class="title">GuessGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">guessNumber</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">1</span>, j = n</span><br><span class="line">        <span class="keyword">while</span> i &lt;= j &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = i + (j-i)&gt;&gt;<span class="number">1</span></span><br><span class="line">            <span class="keyword">switch</span> guess(mid) &#123;</span><br><span class="line">                <span class="keyword">case</span> -<span class="number">1</span>:</span><br><span class="line">                    j = mid-<span class="number">1</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    i = mid+<span class="number">1</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> mid</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Search-in-Rotated-Sorted-Array"><a href="#Search-in-Rotated-Sorted-Array" class="headerlink" title="Search in Rotated Sorted Array"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Search-in-Rotated-Sorted-Array">Search in Rotated Sorted Array</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> target: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = nums.<span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= j &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = i + (j - i)/<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &gt;= nums[i] &#123;</span><br><span class="line">                (target &gt;= nums[i] &amp;&amp; target &lt; nums[mid]) ? (j = mid-<span class="number">1</span>) : (i = mid+<span class="number">1</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                (target &lt;= nums[j] &amp;&amp; target &gt; nums[mid]) ? (i = mid+<span class="number">1</span>) : (j = mid-<span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="First-Bad-Version"><a href="#First-Bad-Version" class="headerlink" title="First Bad Version"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#First-Bad-Version">First Bad Version</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>: <span class="title">VersionControl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">firstBadVersion</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">1</span>, j = n</span><br><span class="line">        <span class="keyword">while</span> i &lt;= j &#123;</span><br><span class="line">            <span class="keyword">let</span> h = i + (j-i)/<span class="number">2</span></span><br><span class="line">            isBadVersion(h) ? (j = h-<span class="number">1</span>) : (i = h + <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Find-Peak-Element"><a href="#Find-Peak-Element" class="headerlink" title="Find Peak Element"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Find-Peak-Element">Find Peak Element</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findPeakElement</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> l = <span class="number">0</span>, r = nums.<span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l &lt; r &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = l+(r-l)&gt;&gt;<span class="number">1</span></span><br><span class="line">            nums[mid] &gt; nums[mid+<span class="number">1</span>] ? (r = mid) : (l = mid+<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findPeakElement</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(<span class="number">_</span> l: Int, <span class="number">_</span> r: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (l == r) &#123; <span class="keyword">return</span> l &#125;</span><br><span class="line">            <span class="keyword">let</span> mid = l + (r-l)&gt;&gt;<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> (nums[mid] &gt; nums[mid+<span class="number">1</span>]) ? search(l, mid) : search(mid+<span class="number">1</span>, r)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> search(<span class="number">0</span>, nums.<span class="built_in">count</span>-<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Find-Minimum-in-Rotated-Sorted-Array"><a href="#Find-Minimum-in-Rotated-Sorted-Array" class="headerlink" title="Find Minimum in Rotated Sorted Array"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Find-Minimum-in-Rotated-Sorted-Array">Find Minimum in Rotated Sorted Array</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findMin</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> l = <span class="number">0</span>, r = nums.<span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l &lt; r &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = l+(r-l)&gt;&gt;<span class="number">1</span></span><br><span class="line">            nums[mid] &gt; nums[r] ? (l = mid+<span class="number">1</span>) : (r = mid)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[l]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Search-for-a-Range"><a href="#Search-for-a-Range" class="headerlink" title="Search for a Range"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Search-for-a-Range">Search for a Range</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">searchRange</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> target: Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">if</span> nums.isEmpty &#123; <span class="keyword">return</span> [-<span class="number">1</span>, -<span class="number">1</span>] &#125;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = nums.<span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = i+(j-i)/<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">                i = mid; j = mid</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &lt; target &#123;</span><br><span class="line">                i = mid+<span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                j = mid-<span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> i-<span class="number">1</span> &gt;= <span class="number">0</span>, nums[i-<span class="number">1</span>] == target &#123; i -= <span class="number">1</span> &#125;</span><br><span class="line">        <span class="keyword">while</span> j+<span class="number">1</span> &lt; nums.<span class="built_in">count</span>, nums[j+<span class="number">1</span>] == target &#123; j += <span class="number">1</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[i] == target ? [i, j] : [-<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Find-K-Closest-Elements"><a href="#Find-K-Closest-Elements" class="headerlink" title="Find K Closest Elements"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Find-K-Closest-Elements">Find K Closest Elements</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findClosestElements</span><span class="params">(<span class="number">_</span> arr: [Int], <span class="number">_</span> k: Int, <span class="number">_</span> x: Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">if</span> arr.isEmpty &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = arr.<span class="built_in">count</span>, ans = [<span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">while</span> i &lt; j &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = i+(j-i)/<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> arr[mid] == x &#123; i = mid &#125;</span><br><span class="line">            arr[mid] &lt; x ? (i = mid+<span class="number">1</span>) : (j = mid-<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        j = i+k &lt; arr.<span class="built_in">count</span> ? i+k : arr.<span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">        i = (i-k) &gt;= <span class="number">0</span> ? (i-k) : <span class="number">0</span></span><br><span class="line">        ans = <span class="type">Array</span>(arr[i...j])</span><br><span class="line">        <span class="keyword">while</span> ans.<span class="built_in">count</span> &gt; k &#123;</span><br><span class="line">            <span class="built_in">abs</span>(x-ans.first!) &lt;= <span class="built_in">abs</span>(x-ans.last!) ? ans.removeLast() : ans.removeFirst()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Closest-Binary-Search-Tree-Value"><a href="#Closest-Binary-Search-Tree-Value" class="headerlink" title="Closest Binary Search Tree Value"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Closest-Binary-Search-Tree-Value">Closest Binary Search Tree Value</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">closestValue</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> target: Double)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> p = root, v = p!.val</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(<span class="type">Double</span>(p!.val)-target) &lt; <span class="built_in">abs</span>(<span class="type">Double</span>(v)-target) &#123; v = p!.val &#125;</span><br><span class="line">            p = target &lt; <span class="type">Double</span>(p!.val) ? p!.<span class="keyword">left</span> : p!.<span class="keyword">right</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Search-in-a-Sorted-Array-of-Unknown-Size"><a href="#Search-in-a-Sorted-Array-of-Unknown-Size" class="headerlink" title="Search in a Sorted Array of Unknown Size"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Search-in-a-Sorted-Array-of-Unknown-Size">Search in a Sorted Array of Unknown Size</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(<span class="number">_</span> reader: ArrayReader, <span class="number">_</span> target: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> reader.<span class="keyword">get</span>(<span class="number">0</span>) == target &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> reader.<span class="keyword">get</span>(j) &lt; target &#123;</span><br><span class="line">            i = j; j &lt;&lt;= <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> i &lt;= j &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = i+(j-i)&gt;&gt;<span class="number">1</span>, v = reader.<span class="keyword">get</span>(mid)</span><br><span class="line">            <span class="keyword">if</span> v == target &#123; <span class="keyword">return</span> mid &#125;</span><br><span class="line">            v &lt; target ? (i=mid+<span class="number">1</span>) : (j=mid-<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pow-x-n"><a href="#Pow-x-n" class="headerlink" title="Pow(x, n)"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Pow(x,-n)">Pow(x, n)</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">myPow</span><span class="params">(<span class="number">_</span> x: Double, <span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> dict = [<span class="number">0</span>: <span class="number">1.0</span>, <span class="number">1</span>: x]</span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">fastPow</span><span class="params">(<span class="number">_</span> x: Double, <span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> v = dict[n] &#123; <span class="keyword">return</span> v &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> h = fastPow(x, n/<span class="number">2</span>), v = n&amp;<span class="number">1</span> == <span class="number">0</span> ? h*h : x*h*h</span><br><span class="line">            dict[n] = v</span><br><span class="line">            <span class="keyword">return</span> v</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> v = fastPow(x, <span class="built_in">abs</span>(n))</span><br><span class="line">        <span class="keyword">return</span> n &lt; <span class="number">0</span> ? <span class="number">1</span>/v : v</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Valid-Perfect-Square"><a href="#Valid-Perfect-Square" class="headerlink" title="Valid Perfect Square"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Valid-Perfect-Square">Valid Perfect Square</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isPerfectSquare</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> x = (num+<span class="number">1</span>)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> x*x &gt; num &#123;</span><br><span class="line">            x = (x + num/x) / <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x*x == num</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Find-Smallest-Letter-Greater-Than-Target"><a href="#Find-Smallest-Letter-Greater-Than-Target" class="headerlink" title="Find Smallest Letter Greater Than Target"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Find-Smallest-Letter-Greater-Than-Target">Find Smallest Letter Greater Than Target</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">nextGreatestLetter</span><span class="params">(<span class="number">_</span> letters: [Character], <span class="number">_</span> target: Character)</span></span> -&gt; <span class="type">Character</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> letters &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">c</span> &gt; target &#123; <span class="keyword">return</span> <span class="built_in">c</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> letters.first!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Find-Minimum-in-Rotated-Sorted-Array-II"><a href="#Find-Minimum-in-Rotated-Sorted-Array-II" class="headerlink" title="Find Minimum in Rotated Sorted Array II"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Find-Minimum-in-Rotated-Sorted-Array">Find Minimum in Rotated Sorted Array II</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findMin</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> l = <span class="number">0</span>, r = nums.<span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l &lt; r &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = l+(r-l)/<span class="number">2</span></span><br><span class="line">            nums[mid] &gt;= nums[r] ? (l = mid+<span class="number">1</span>) : (r = mid)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[l]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Find-Minimum-in-Rotated-Sorted-Array-II-1"><a href="#Find-Minimum-in-Rotated-Sorted-Array-II-1" class="headerlink" title="Find Minimum in Rotated Sorted Array II"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Find-Minimum-in-Rotated-Sorted-Array-II">Find Minimum in Rotated Sorted Array II</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findMin</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> l = <span class="number">0</span>, r = nums.<span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l &lt; r &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = l+(r-l)/<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &gt; nums[r] &#123; l = mid+<span class="number">1</span> &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &lt; nums[r]  &#123; r = mid &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123; r -= <span class="number">1</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[l]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Intersection-of-Two-Arrays"><a href="#Intersection-of-Two-Arrays" class="headerlink" title="Intersection of Two Arrays"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Intersection-of-Two-Arrays">Intersection of Two Arrays</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">intersection</span><span class="params">(<span class="number">_</span> nums1: [Int], <span class="number">_</span> nums2: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">let</span> set1 = <span class="type">Set</span>(nums1), set2 = <span class="type">Set</span>(nums2)</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Array</span>(set1.intersection(set2))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Intersection-of-Two-Arrays-II"><a href="#Intersection-of-Two-Arrays-II" class="headerlink" title="Intersection of Two Arrays II"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Intersection-of-Two-Arrays-II">Intersection of Two Arrays II</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">intersect</span><span class="params">(<span class="number">_</span> nums1: [Int], <span class="number">_</span> nums2: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> dict = [<span class="type">Int</span>: <span class="type">Int</span>](), ans = [<span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums1 &#123;</span><br><span class="line">            dict[n, <span class="keyword">default</span>: <span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums2 &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> v = dict[n], v &gt; <span class="number">0</span> &#123;</span><br><span class="line">                ans.append(n)</span><br><span class="line">                dict[n] = v - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Two-Sum-II-Input-array-is-sorted"><a href="#Two-Sum-II-Input-array-is-sorted" class="headerlink" title="Two Sum II - Input array is sorted"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Two-Sum-II---Input-array-is-sorted">Two Sum II - Input array is sorted</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(<span class="number">_</span> numbers: [Int], <span class="number">_</span> target: Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = numbers.<span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j &#123;</span><br><span class="line">            <span class="keyword">let</span> v =  numbers[i]+numbers[j]</span><br><span class="line">            <span class="keyword">if</span> v == target &#123; <span class="keyword">break</span> &#125;</span><br><span class="line">            v &lt; target ? (i+=<span class="number">1</span>) : (j-=<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> [i+<span class="number">1</span>, j+<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Find-the-Duplicate-Number"><a href="#Find-the-Duplicate-Number" class="headerlink" title="Find the Duplicate Number"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Find-the-Duplicate-Number">Find the Duplicate Number</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findDuplicate</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">set</span> = <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;(), i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; nums.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">set</span>.<span class="built_in">contains</span>(nums[i]) &#123; <span class="keyword">break</span> &#125;</span><br><span class="line">            <span class="keyword">set</span>.insert(nums[i]); i+=<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Median-of-Two-Sorted-Arrays"><a href="#Median-of-Two-Sorted-Arrays" class="headerlink" title="Median of Two Sorted Arrays"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Median-of-Two-Sorted-Arrays">Median of Two Sorted Arrays</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Find-K-th-Smallest-Pair-Distance"><a href="#Find-K-th-Smallest-Pair-Distance" class="headerlink" title="Find K-th Smallest Pair Distance"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Find-K-th-Smallest-Pair-Distance">Find K-th Smallest Pair Distance</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Split-Array-Largest-Sum"><a href="#Split-Array-Largest-Sum" class="headerlink" title="Split Array Largest Sum"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Split-Array-Largest-Sum">Split Array Largest Sum</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Binary-Search&quot;&gt;&lt;a href=&quot;#Binary-Search&quot; class=&quot;headerlink&quot; title=&quot;Binary Search&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leihao0.github.io/LeetCode-Binary-Search/#Binary-Search&quot;&gt;Binary Search&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; nums: [Int], &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; target: Int)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, j = nums.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; i &amp;lt;= j &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; mid = i + (j-i)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[mid] == target &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mid &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[mid] &amp;lt; target &amp;#123; i = mid+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; j = mid-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="https://leihao0.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="https://leihao0.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Recursion 2</title>
    <link href="https://leihao0.github.io/LeetCode-Recursion-2/"/>
    <id>https://leihao0.github.io/LeetCode-Recursion-2/</id>
    <published>2020-01-04T16:00:00.000Z</published>
    <updated>2020-09-09T11:09:39.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sort-an-Array"><a href="#Sort-an-Array" class="headerlink" title="Sort an Array"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Sort-an-Array">Sort an Array</a></h2><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">if</span> nums.<span class="built_in">count</span> &lt; <span class="number">2</span> &#123; <span class="keyword">return</span> nums &#125;</span><br><span class="line">        <span class="keyword">let</span> i = nums.<span class="built_in">count</span>/<span class="number">2</span>, l = sortArray(<span class="type">Array</span>(nums[..&lt;i])), r = sortArray(<span class="type">Array</span>(nums[i...]))</span><br><span class="line">        <span class="keyword">return</span> merge(l, r)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(<span class="number">_</span> n1: [Int], <span class="number">_</span> n2: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> i1 = <span class="number">0</span>, i2 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> arr = [<span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">while</span> i1 &lt; n1.<span class="built_in">count</span>, i2 &lt; n2.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> n1[i1] &lt; n2[i2] &#123;</span><br><span class="line">                arr.append(n1[i1])</span><br><span class="line">                i1 += <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arr.append(n2[i2])</span><br><span class="line">                i2 += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> i1 &lt; n1.<span class="built_in">count</span> &#123;</span><br><span class="line">            arr.append(n1[i1])</span><br><span class="line">            i1 += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> i2 &lt; n2.<span class="built_in">count</span> &#123;</span><br><span class="line">            arr.append(n2[i2])</span><br><span class="line">            i2 += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Validate-Binary-Search-Tree"><a href="#Validate-Binary-Search-Tree" class="headerlink" title="Validate Binary Search Tree"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Validate-Binary-Search-Tree">Validate Binary Search Tree</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isValidBST</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> helper(root, <span class="type">Int</span>.<span class="built_in">min</span>, <span class="type">Int</span>.<span class="built_in">max</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">(<span class="number">_</span> node: TreeNode?, <span class="number">_</span> lower: Int, <span class="number">_</span> upper: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> n = node <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> n.val &lt;= lower || n.val &gt;= upper &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper(n.<span class="keyword">left</span>, lower, n.val) &amp;&amp; helper(n.<span class="keyword">right</span>, n.val, upper)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Search-a-2D-Matrix-II"><a href="#Search-a-2D-Matrix-II" class="headerlink" title="Search a 2D Matrix II"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Search-a-2D-Matrix-II">Search a 2D Matrix II</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">searchMatrix</span><span class="params">(<span class="number">_</span> matrix: [[Int]], <span class="number">_</span> target: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> n = matrix.<span class="built_in">count</span>-<span class="number">1</span>, m = matrix.first?.<span class="built_in">count</span> ?? <span class="number">0</span>; <span class="keyword">var</span> i = n, j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> &amp;&amp; j &lt; m &#123;</span><br><span class="line">            <span class="keyword">if</span> target &gt; matrix[i][j] &#123;</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> target &lt; matrix[i][j] &#123;</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="N-Queens-II"><a href="#N-Queens-II" class="headerlink" title="N-Queens II"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#N-Queens-II">N-Queens II</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">totalNQueens</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">1</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(n-<span class="number">1</span>, <span class="type">Array</span>(repeating: <span class="type">Array</span>(repeating: <span class="number">1</span>, <span class="built_in">count</span>: n), <span class="built_in">count</span>: n)).<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">(<span class="number">_</span> i: Int, <span class="number">_</span> board: [[Int]])</span></span> -&gt; [[[<span class="type">Int</span>]]] &#123;</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> &#123; <span class="keyword">return</span> put(i, board) &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(i-<span class="number">1</span>, board).<span class="built_in">reduce</span>( [[[<span class="type">Int</span>]]]() ) &#123; $<span class="number">0</span> + put(i, $<span class="number">1</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">put</span><span class="params">(<span class="number">_</span> i: Int, <span class="number">_</span> board: [[Int]])</span></span> -&gt; [[[<span class="type">Int</span>]]] &#123;</span><br><span class="line">        <span class="keyword">var</span> boards = [[[<span class="type">Int</span>]]]()</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;board.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> board[i][j] == <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> board = put((i,j), board)</span><br><span class="line">                boards.append(board)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> boards</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">put</span><span class="params">(<span class="number">_</span> p: <span class="params">(Int, Int)</span></span></span>, <span class="number">_</span> board: [[<span class="type">Int</span>]]) -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">let</span> n = board.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">var</span> board = board</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;n &#123; board[i][p.<span class="number">1</span>] = <span class="number">0</span> &#125;</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;n &#123; board[p.<span class="number">0</span>][j] = <span class="number">0</span> &#125;</span><br><span class="line">        <span class="keyword">var</span> p0 = p.<span class="number">0</span>, p1 = p.<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> p0 &lt; n, p1 &lt; n, p0 &gt;= <span class="number">0</span>, p1 &gt;= <span class="number">0</span> &#123;</span><br><span class="line">            board[p0][p1] = <span class="number">0</span></span><br><span class="line">            p0 += <span class="number">1</span>; p1 += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        p0 = p.<span class="number">0</span>; p1 = p.<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> p0 &lt; n, p1 &lt; n, p0 &gt;= <span class="number">0</span>, p1 &gt;= <span class="number">0</span> &#123;</span><br><span class="line">            board[p0][p1] = <span class="number">0</span></span><br><span class="line">            p0 += <span class="number">1</span>; p1 -= <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        board[p.<span class="number">0</span>][p.<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> board</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Robot-Room-Cleaner"><a href="#Robot-Room-Cleaner" class="headerlink" title="Robot Room Cleaner"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Robot-Room-Cleaner">Robot Room Cleaner</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">cleanRoom</span><span class="params">(<span class="number">_</span> robot: Robot)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> visited = <span class="type">Set</span>&lt;[<span class="type">Int</span>]&gt;()</span><br><span class="line">        <span class="keyword">let</span> directions = [[-<span class="number">1</span>,<span class="number">0</span>], [<span class="number">0</span>,<span class="number">1</span>], [<span class="number">1</span>,<span class="number">0</span>], [<span class="number">0</span>,-<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">backtrack</span><span class="params">(<span class="number">_</span> cell: [Int] = [<span class="number">0</span>,<span class="number">0</span>], <span class="number">_</span> d: Int = <span class="number">0</span>)</span></span> &#123;</span><br><span class="line">            <span class="function"><span class="keyword">func</span> <span class="title">goBack</span><span class="params">()</span></span> &#123;</span><br><span class="line">                <span class="function"><span class="keyword">func</span> <span class="title">uTurn</span><span class="params">()</span></span> &#123; robot.turnRight(); robot.turnRight() &#125;</span><br><span class="line">                uTurn(); robot.move(); uTurn()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            visited.insert(cell)</span><br><span class="line">            robot.clean()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">4</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> d = (d+i)%<span class="number">4</span>, cell = [cell[<span class="number">0</span>]+directions[d][<span class="number">0</span>], cell[<span class="number">1</span>]+directions[d][<span class="number">1</span>]]</span><br><span class="line">                <span class="keyword">if</span> !visited.<span class="built_in">contains</span>(cell) &amp;&amp; robot.move() &#123;</span><br><span class="line">                    backtrack(cell, d)</span><br><span class="line">                    goBack()</span><br><span class="line">                &#125;</span><br><span class="line">                robot.turnRight()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        backtrack()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sudoku-Solver"><a href="#Sudoku-Solver" class="headerlink" title="Sudoku Solver"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Sudoku-Solver">Sudoku Solver</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">solveSudoku</span><span class="params">(<span class="number">_</span> board: <span class="keyword">inout</span> [[Character]])</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> chars: [<span class="type">Character</span>] = [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;9&quot;</span>]</span><br><span class="line">        <span class="keyword">var</span> boxes = <span class="type">Array</span>(repeating: <span class="type">Array</span>(repeating: <span class="type">Set</span>&lt;<span class="type">Character</span>&gt;(), <span class="built_in">count</span>: <span class="number">3</span>), <span class="built_in">count</span>: <span class="number">3</span>),  rows = (<span class="number">0</span>..&lt;<span class="number">9</span>).<span class="built_in">map</span> &#123; <span class="type">Set</span>(board[$<span class="number">0</span>]) &#125;, cols = (<span class="number">0</span>..&lt;<span class="number">9</span>).<span class="built_in">map</span> &#123; i <span class="keyword">in</span> <span class="type">Set</span>( (<span class="number">0</span>..&lt;<span class="number">9</span>).<span class="built_in">map</span> &#123; j <span class="keyword">in</span> board[j][i] &#125; )&#125;</span><br><span class="line">        (<span class="number">0</span>..&lt;<span class="number">9</span>).forEach &#123; i <span class="keyword">in</span> (<span class="number">0</span>..&lt;<span class="number">9</span>).forEach &#123; j <span class="keyword">in</span> boxes[i/<span class="number">3</span>][j/<span class="number">3</span>].insert(board[i][j]) &#125; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">put</span><span class="params">(<span class="number">_</span> <span class="built_in">c</span>: Character, <span class="number">_</span> i: Int, <span class="number">_</span> j: Int)</span></span> &#123;</span><br><span class="line">            board[i][j] = <span class="built_in">c</span>; rows[i].insert(<span class="built_in">c</span>); cols[j].insert(<span class="built_in">c</span>); boxes[i/<span class="number">3</span>][j/<span class="number">3</span>].insert(<span class="built_in">c</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">restore</span><span class="params">(<span class="number">_</span> <span class="built_in">c</span>: Character, <span class="number">_</span> i: Int, <span class="number">_</span> j: Int)</span></span> &#123;</span><br><span class="line">            board[i][j] = <span class="string">&quot;.&quot;</span>; rows[i].remove(<span class="built_in">c</span>); cols[j].remove(<span class="built_in">c</span>); boxes[i/<span class="number">3</span>][j/<span class="number">3</span>].remove(<span class="built_in">c</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">backtrack</span><span class="params">(<span class="number">_</span> k: Int = <span class="number">0</span>)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> i = k/<span class="number">9</span>, j = k%<span class="number">9</span></span><br><span class="line">            <span class="keyword">if</span> k &gt;= <span class="number">81</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line">            <span class="keyword">if</span> board[i][j] != <span class="string">&quot;.&quot;</span> &#123; <span class="keyword">return</span> backtrack(k+<span class="number">1</span>) &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> chars.<span class="built_in">filter</span>(&#123; !rows[i].<span class="built_in">contains</span>($<span class="number">0</span>) &amp;&amp; !cols[j].<span class="built_in">contains</span>($<span class="number">0</span>) &amp;&amp; !boxes[i/<span class="number">3</span>][j/<span class="number">3</span>].<span class="built_in">contains</span>($<span class="number">0</span>) &#125;) &#123;</span><br><span class="line">                put(<span class="built_in">c</span>, i, j)</span><br><span class="line">                <span class="keyword">if</span> backtrack(k+<span class="number">1</span>) &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line">                restore(<span class="built_in">c</span>, i, j)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        backtrack()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Combinations"><a href="#Combinations" class="headerlink" title="Combinations"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Combinations">Combinations</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">combine</span><span class="params">(<span class="number">_</span> n: Int, <span class="number">_</span> k: Int)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">if</span> k &gt; n &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">        <span class="keyword">let</span> b = (k...n).<span class="built_in">map</span> &#123; [$<span class="number">0</span>] &#125;</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">1</span> &#123; <span class="keyword">return</span> b &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> a = combine(n-<span class="number">1</span>, k-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">var</span> ans = [[<span class="type">Int</span>]]()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> a &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> b &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> last = i.last, <span class="keyword">let</span> first = j.first, last &lt; first &#123;</span><br><span class="line">                    ans.append(i + j)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Same-Tree"><a href="#Same-Tree" class="headerlink" title="Same Tree"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Same-Tree">Same Tree</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isSameTree</span><span class="params">(<span class="number">_</span> p: TreeNode?, <span class="number">_</span> q: TreeNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> p = p, <span class="keyword">let</span> q = q, p.val == q.val &#123;</span><br><span class="line">            <span class="keyword">return</span> isSameTree(p.<span class="keyword">left</span>, q.<span class="keyword">left</span>) &amp;&amp; isSameTree(p.<span class="keyword">right</span>, q.<span class="keyword">right</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p == <span class="literal">nil</span> &amp;&amp; q == <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Generate-Parentheses"><a href="#Generate-Parentheses" class="headerlink" title="Generate Parentheses"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Generate-Parentheses">Generate Parentheses</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">generateParenthesis</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> ans = [<span class="type">String</span>]()</span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">backtrack</span><span class="params">(<span class="number">_</span> s: String = <span class="string">&quot;&quot;</span>, <span class="number">_</span> l: Int = <span class="number">0</span>, <span class="number">_</span> r: Int = <span class="number">0</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> s.<span class="built_in">count</span> == n*<span class="number">2</span> &#123;</span><br><span class="line">                ans.append(s); <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> l &lt; n &#123; backtrack(s+<span class="string">&quot;(&quot;</span>, l+<span class="number">1</span>, r) &#125;</span><br><span class="line">            <span class="keyword">if</span> r &lt; l &#123; backtrack(s+<span class="string">&quot;)&quot;</span>, l, r+<span class="number">1</span>) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        backtrack()</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Binary-Tree-Inorder-Traversal"><a href="#Binary-Tree-Inorder-Traversal" class="headerlink" title="Binary Tree Inorder Traversal"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Binary-Tree-Inorder-Traversal">Binary Tree Inorder Traversal</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// iteratively</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> ans = [<span class="type">Int</span>](), stack = [<span class="type">TreeNode</span>](), p = root</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> || !stack.isEmpty &#123;</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">let</span> l = p &#123;</span><br><span class="line">                stack.append(l)</span><br><span class="line">                p = l.<span class="keyword">left</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> n = stack.popLast() &#123;</span><br><span class="line">                ans.append(n.val)</span><br><span class="line">                p = n.<span class="keyword">right</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Binary-Tree-Level-Order-Traversal"><a href="#Binary-Tree-Level-Order-Traversal" class="headerlink" title="Binary Tree Level Order Traversal"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Binary-Tree-Level-Order-Traversal">Binary Tree Level Order Traversal</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">levelOrder</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">var</span> ans = [[<span class="type">Int</span>]]()</span><br><span class="line">        helper(root, <span class="number">0</span>, &amp;ans)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> level: Int, <span class="number">_</span> ans: <span class="keyword">inout</span> [[Int]])</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> level &gt;= ans.<span class="built_in">count</span> &#123;</span><br><span class="line">            ans.append( [root.val] )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans[level].append(root.val)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        helper(root.<span class="keyword">left</span>, level+<span class="number">1</span>, &amp;ans)</span><br><span class="line">        helper(root.<span class="keyword">right</span>, level+<span class="number">1</span>, &amp;ans)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Convert-Binary-Search-Tree-to-Sorted-Doubly-Linked-List"><a href="#Convert-Binary-Search-Tree-to-Sorted-Doubly-Linked-List" class="headerlink" title="Convert Binary Search Tree to Sorted Doubly Linked List"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Convert-Binary-Search-Tree-to-Sorted-Doubly-Linked-List">Convert Binary Search Tree to Sorted Doubly Linked List</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">treeToDoublyList</span><span class="params">(<span class="number">_</span> root: Node?)</span></span> -&gt; <span class="type">Node?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> first: <span class="type">Node?</span>, last: <span class="type">Node?</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">(<span class="number">_</span> root: Node?)</span></span> &#123;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> cur = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">            helper(cur.<span class="keyword">left</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> last = last &#123;</span><br><span class="line">                last.<span class="keyword">right</span> = cur</span><br><span class="line">                cur.<span class="keyword">left</span> = last</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                first = cur</span><br><span class="line">            &#125;</span><br><span class="line">            last = cur</span><br><span class="line">            helper(cur.<span class="keyword">right</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        helper(root)</span><br><span class="line">        last?.<span class="keyword">right</span> = first</span><br><span class="line">        first?.<span class="keyword">left</span> = last</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> first</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Largest-Rectangle-in-Histogram"><a href="#Largest-Rectangle-in-Histogram" class="headerlink" title="Largest Rectangle in Histogram"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Largest-Rectangle-in-Histogram">Largest Rectangle in Histogram</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="number">_</span> heights: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">(<span class="number">_</span> i: Int, <span class="number">_</span> j: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">            <span class="keyword">guard</span> i &lt;= j <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">            <span class="keyword">var</span> index = <span class="number">0</span>, v = <span class="type">Int</span>.<span class="built_in">max</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> i...j &#123;</span><br><span class="line">                <span class="keyword">if</span> heights[k] &lt; v &#123; index = k; v = heights[k] &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(v*(j-i+<span class="number">1</span>), helper(i, index-<span class="number">1</span>), helper(index+<span class="number">1</span>, j))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(<span class="number">0</span>, heights.<span class="built_in">count</span>-<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Permutations"><a href="#Permutations" class="headerlink" title="Permutations"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Permutations">Permutations</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">permute</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">if</span> nums.<span class="built_in">count</span> &lt; <span class="number">2</span> &#123; <span class="keyword">return</span> [nums] &#125;</span><br><span class="line">        <span class="keyword">var</span> ans = [[<span class="type">Int</span>]]()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> arr = nums; arr.remove(at: i)</span><br><span class="line">            ans += permute(arr).<span class="built_in">map</span> &#123; [nums[i]] + $<span class="number">0</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Letter-Combinations-of-a-Phone-Number"><a href="#Letter-Combinations-of-a-Phone-Number" class="headerlink" title="Letter Combinations of a Phone Number"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Letter-Combinations-of-a-Phone-Number">Letter Combinations of a Phone Number</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> dict : [<span class="type">Character</span>: [<span class="type">String</span>]] = [<span class="string">&quot;2&quot;</span>:[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>],<span class="string">&quot;3&quot;</span>:[<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;f&quot;</span>],<span class="string">&quot;4&quot;</span>:[<span class="string">&quot;g&quot;</span>,<span class="string">&quot;h&quot;</span>,<span class="string">&quot;i&quot;</span>],<span class="string">&quot;5&quot;</span>:[<span class="string">&quot;j&quot;</span>,<span class="string">&quot;k&quot;</span>,<span class="string">&quot;l&quot;</span>],<span class="string">&quot;6&quot;</span>:[<span class="string">&quot;m&quot;</span>,<span class="string">&quot;n&quot;</span>,<span class="string">&quot;o&quot;</span>],<span class="string">&quot;7&quot;</span>:[<span class="string">&quot;p&quot;</span>,<span class="string">&quot;q&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="string">&quot;s&quot;</span>],<span class="string">&quot;8&quot;</span>:[<span class="string">&quot;t&quot;</span>,<span class="string">&quot;u&quot;</span>,<span class="string">&quot;v&quot;</span>],<span class="string">&quot;9&quot;</span>:[<span class="string">&quot;w&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="string">&quot;z&quot;</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">letterCombinations</span><span class="params">(<span class="number">_</span> digits: String)</span></span> -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> digits.isEmpty ? [] : digits.<span class="built_in">reduce</span>([<span class="string">&quot;&quot;</span>]) &#123; (ans, digit) <span class="keyword">in</span></span><br><span class="line">            ans.flatMap &#123; s <span class="keyword">in</span> dict[digit, <span class="keyword">default</span>: [<span class="string">&quot;&quot;</span>]].<span class="built_in">map</span> &#123; <span class="built_in">c</span> <span class="keyword">in</span> s + <span class="built_in">c</span> &#125; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-Skyline-Problem"><a href="#The-Skyline-Problem" class="headerlink" title="The Skyline Problem"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#The-Skyline-Problem">The Skyline Problem</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getSkyline</span><span class="params">(<span class="number">_</span> buildings: [[Int]])</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">let</span> n = buildings.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> [[buildings[<span class="number">0</span>][<span class="number">0</span>], buildings[<span class="number">0</span>][<span class="number">2</span>]], [buildings[<span class="number">0</span>][<span class="number">1</span>], <span class="number">0</span>]]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> l = getSkyline(<span class="type">Array</span>(buildings[..&lt;(n/<span class="number">2</span>)]))</span><br><span class="line">        <span class="keyword">let</span> r = getSkyline(<span class="type">Array</span>(buildings[(n/<span class="number">2</span>)...]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> merge(l, r)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(<span class="number">_</span> l: [[Int]], <span class="number">_</span> r: [[Int]])</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">let</span> ln = l.<span class="built_in">count</span>, rn = r.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">var</span> lp = <span class="number">0</span>, rp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> curY = <span class="number">0</span>, lY = <span class="number">0</span>, rY = <span class="number">0</span> , output = [[<span class="type">Int</span>]]()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(<span class="number">_</span> x: Int, <span class="number">_</span> y: Int)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> output.isEmpty || output.last?.first != x &#123;</span><br><span class="line">                output.append([x, y])</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                output[output.<span class="built_in">count</span>-<span class="number">1</span>][<span class="number">1</span>] = y</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(<span class="number">_</span> p: Int, <span class="number">_</span> lst: [[Int]], <span class="number">_</span> n: Int, <span class="number">_</span> curY: Int)</span></span> &#123;</span><br><span class="line">            <span class="keyword">var</span> p = p, curY = curY</span><br><span class="line">            <span class="keyword">while</span> p &lt; n &#123;</span><br><span class="line">                <span class="keyword">let</span> (x, y) = (lst[p][<span class="number">0</span>], lst[p][<span class="number">1</span>])</span><br><span class="line">                p += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> curY != y &#123;</span><br><span class="line">                    update(x, y)</span><br><span class="line">                    curY = y</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> lp &lt; ln &amp;&amp; rp &lt; rn &#123;</span><br><span class="line">            <span class="keyword">let</span> lPoint = l[lp], rPoint = r[rp]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> lPoint[<span class="number">0</span>] &lt; rPoint[<span class="number">0</span>] &#123;</span><br><span class="line">                (x, lY) = (lPoint[<span class="number">0</span>], lPoint[<span class="number">1</span>])</span><br><span class="line">                lp += <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                (x, rY) = (rPoint[<span class="number">0</span>], rPoint[<span class="number">1</span>])</span><br><span class="line">                rp += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> maxY = <span class="built_in">max</span>(lY, rY)</span><br><span class="line">            <span class="keyword">if</span> curY != maxY &#123;</span><br><span class="line">                update(x, maxY)</span><br><span class="line">                curY = maxY</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        append(lp, l, ln, curY)</span><br><span class="line">        append(rp, r, rn, curY)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Sort-an-Array&quot;&gt;&lt;a href=&quot;#Sort-an-Array&quot; class=&quot;headerlink&quot; title=&quot;Sort an Array&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leihao0.github.io/LeetCode-Recursion-2/#Sort-an-Array&quot;&gt;Sort an Array&lt;/a&gt;&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="https://leihao0.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="https://leihao0.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Recursion 1</title>
    <link href="https://leihao0.github.io/LeetCode-Recursion-1/"/>
    <id>https://leihao0.github.io/LeetCode-Recursion-1/</id>
    <published>2020-01-03T16:00:00.000Z</published>
    <updated>2020-09-09T11:09:47.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reverse-String"><a href="#Reverse-String" class="headerlink" title="Reverse String"></a>Reverse String</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">reverseString</span><span class="params">(<span class="number">_</span> s: <span class="keyword">inout</span> [Character])</span></span> &#123;</span><br><span class="line">        s.<span class="built_in">reverse</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Swap-Nodes-in-Pairs"><a href="#Swap-Nodes-in-Pairs" class="headerlink" title="Swap Nodes in Pairs"></a>Swap Nodes in Pairs</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">swapPairs</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> h = <span class="built_in">swap</span>(head)</span><br><span class="line">        h?.next?.next = swapPairs(h?.next?.next)</span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> h0 = head, <span class="keyword">let</span> h1 = h0.next &#123;</span><br><span class="line">            h0.next = h1.next</span><br><span class="line">            h1.next = h0</span><br><span class="line">            <span class="keyword">return</span> h1</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reverse-Linked-List"><a href="#Reverse-Linked-List" class="headerlink" title="Reverse Linked List"></a>Reverse Linked List</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> prev: <span class="type">ListNode?</span> = <span class="literal">nil</span>, cur = head</span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> p = cur?.next</span><br><span class="line">            cur?.next = prev</span><br><span class="line">            prev = cur</span><br><span class="line">            cur = p</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Search-in-a-Binary-Search-Tree"><a href="#Search-in-a-Binary-Search-Tree" class="headerlink" title="Search in a Binary Search Tree"></a>Search in a Binary Search Tree</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">searchBST</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> val: Int)</span></span> -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> root.val == val &#123; <span class="keyword">return</span> root &#125;</span><br><span class="line">        <span class="keyword">if</span> val &lt; root.val &#123;</span><br><span class="line">            <span class="keyword">return</span> searchBST(root.<span class="keyword">left</span>, val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> searchBST(root.<span class="keyword">right</span>, val)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pascal’s-Triangle-II"><a href="#Pascal’s-Triangle-II" class="headerlink" title="Pascal’s Triangle II"></a>Pascal’s Triangle II</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getRow</span><span class="params">(<span class="number">_</span> rowIndex: Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> arr = [<span class="number">1</span>], j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;rowIndex &#123;</span><br><span class="line">            arr.append(<span class="number">1</span>)</span><br><span class="line">            j = arr.<span class="built_in">count</span> - <span class="number">2</span></span><br><span class="line">            <span class="keyword">while</span> j &gt; <span class="number">0</span> &#123;</span><br><span class="line">                arr[j] += arr[j-<span class="number">1</span>]</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Fibonacci-Number"><a href="#Fibonacci-Number" class="headerlink" title="Fibonacci Number"></a>Fibonacci Number</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="type">Array</span>(repeating: <span class="number">0</span>, <span class="built_in">count</span>: <span class="number">31</span>)</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fib</span><span class="params">(<span class="number">_</span> N: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="type">N</span> &lt; <span class="number">2</span> || arr[<span class="type">N</span>] != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> arr[<span class="type">N</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[<span class="type">N</span>-<span class="number">1</span>] = fib(<span class="type">N</span>-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> arr[<span class="type">N</span>-<span class="number">1</span>] + arr[<span class="type">N</span>-<span class="number">2</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Climbing-Stairs"><a href="#Climbing-Stairs" class="headerlink" title="Climbing Stairs"></a>Climbing Stairs</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] + <span class="type">Array</span>(repeating: <span class="number">0</span>, <span class="built_in">count</span>: <span class="number">127</span>)</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">climbStairs</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">4</span> || arr[n] != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> arr[n]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[n-<span class="number">1</span>] = climbStairs(n-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> arr[n-<span class="number">1</span>] + arr[n-<span class="number">2</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Maximum-Depth-of-Binary-Tree"><a href="#Maximum-Depth-of-Binary-Tree" class="headerlink" title="Maximum Depth of Binary Tree"></a>Maximum Depth of Binary Tree</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">maxDepth</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">max</span>(maxDepth(root.<span class="keyword">left</span>), maxDepth(root.<span class="keyword">right</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pow-x-n"><a href="#Pow-x-n" class="headerlink" title="Pow(x, n)"></a>Pow(x, n)</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">myPow</span><span class="params">(<span class="number">_</span> x: Double, <span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> dic = [<span class="type">Int</span>:<span class="type">Double</span>]()</span><br><span class="line">        dic[-<span class="number">1</span>] = <span class="number">1</span>/x; dic[<span class="number">0</span>] = <span class="number">1</span>; dic[<span class="number">1</span>] = x</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fastPow(x, n, &amp;dic)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fastPow</span><span class="params">(<span class="number">_</span> x: Double, <span class="number">_</span> n: Int, <span class="number">_</span> arr: <span class="keyword">inout</span> [Int:Double])</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> v = arr[n] &#123; <span class="keyword">return</span> v &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> l = n / <span class="number">2</span>, r = n - l</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> arr[l] == <span class="literal">nil</span> &#123;</span><br><span class="line">            arr[l] = fastPow(x, l, &amp;arr)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> arr[r] == <span class="literal">nil</span> &#123;</span><br><span class="line">            arr[r] = fastPow(x, r, &amp;arr)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr[l]! * arr[r]!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Merge-Two-Sorted-Lists"><a href="#Merge-Two-Sorted-Lists" class="headerlink" title="Merge Two Sorted Lists"></a>Merge Two Sorted Lists</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(<span class="number">_</span> l1: ListNode?, <span class="number">_</span> l2: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> p1 = l1 <span class="keyword">else</span> &#123; <span class="keyword">return</span> l2 &#125;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> p2 = l2 <span class="keyword">else</span> &#123; <span class="keyword">return</span> l1 &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> (p, q) = p1.val &lt;= p2.val ? (p1, p2) : (p2, p1)</span><br><span class="line">        p.next = mergeTwoLists(p.next, q)</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="K-th-Symbol-in-Grammar"><a href="#K-th-Symbol-in-Grammar" class="headerlink" title="K-th Symbol in Grammar"></a>K-th Symbol in Grammar</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">kthGrammar</span><span class="params">(<span class="number">_</span> N: Int, <span class="number">_</span> K: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="type">N</span> &lt; <span class="number">2</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> (kthGrammar(<span class="type">N</span>-<span class="number">1</span>, (<span class="type">K</span>+<span class="number">1</span>)/<span class="number">2</span>) == <span class="number">0</span>) ? <span class="number">1</span>-<span class="type">K</span>%<span class="number">2</span> : <span class="type">K</span>%<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Unique-Binary-Search-Trees-II"><a href="#Unique-Binary-Search-Trees-II" class="headerlink" title="Unique Binary Search Trees II"></a>Unique Binary Search Trees II</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">generateTrees</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; [<span class="type">TreeNode?</span>] &#123;</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">1</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(<span class="number">1</span>, n)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">(<span class="number">_</span> i1: Int, <span class="number">_</span> i2:Int)</span></span> -&gt; [<span class="type">TreeNode?</span>] &#123;</span><br><span class="line">        <span class="keyword">if</span> i1 &gt; i2 &#123; <span class="keyword">return</span> [<span class="literal">nil</span>] &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> tn = [<span class="type">TreeNode</span>]()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> i1...i2 &#123;</span><br><span class="line">            <span class="keyword">let</span> l = helper(i1, i-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">let</span> r = helper(i+<span class="number">1</span>, i2)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> li <span class="keyword">in</span> l &#123;</span><br><span class="line">                <span class="keyword">for</span> ri <span class="keyword">in</span> r &#123;</span><br><span class="line">                    <span class="keyword">let</span> n = <span class="type">TreeNode</span>(i)</span><br><span class="line">                    n.<span class="keyword">left</span> = li</span><br><span class="line">                    n.<span class="keyword">right</span> = ri</span><br><span class="line">                    tn.append(n)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tn</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Reverse-String&quot;&gt;&lt;a href=&quot;#Reverse-String&quot; class=&quot;headerlink&quot; title=&quot;Reverse String&quot;&gt;&lt;/a&gt;Reverse String&lt;/h2&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reverseString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; s: &lt;span class=&quot;keyword&quot;&gt;inout&lt;/span&gt; [Character])&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        s.&lt;span class=&quot;built_in&quot;&gt;reverse&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="https://leihao0.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="https://leihao0.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Binary Tree</title>
    <link href="https://leihao0.github.io/LeetCode-Binary-Tree/"/>
    <id>https://leihao0.github.io/LeetCode-Binary-Tree/</id>
    <published>2020-01-02T16:00:00.000Z</published>
    <updated>2020-09-09T11:09:51.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Binary-Tree-Preorder-Traversal"><a href="#Binary-Tree-Preorder-Traversal" class="headerlink" title="Binary Tree Preorder Traversal"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Binary-Tree-Preorder-Traversal">Binary Tree Preorder Traversal</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// iterative</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">preorderTraversal</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> ans = [<span class="type">Int</span>](), stack: [<span class="type">TreeNode</span>] = root != <span class="literal">nil</span> ? [root!] : []</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> p = stack.popLast() &#123;</span><br><span class="line">            ans.append(p.val)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> r = p.<span class="keyword">right</span> &#123; stack.append(r) &#125;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> l = p.<span class="keyword">left</span> &#123; stack.append(l) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// recursive</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">preorderTraversal0</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">        <span class="keyword">return</span> [root.val] + preorderTraversal(root.<span class="keyword">left</span>) + preorderTraversal(root.<span class="keyword">right</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Binary-Tree-Inorder-Traversal"><a href="#Binary-Tree-Inorder-Traversal" class="headerlink" title="Binary Tree Inorder Traversal"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Binary-Tree-Inorder-Traversal">Binary Tree Inorder Traversal</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// iteratively</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> ans = [<span class="type">Int</span>](), stack = [<span class="type">TreeNode</span>](), p = root</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> || !stack.isEmpty &#123;</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">let</span> l = p &#123;</span><br><span class="line">                stack.append(l)</span><br><span class="line">                p = l.<span class="keyword">left</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> n = stack.popLast() &#123;</span><br><span class="line">                ans.append(n.val)</span><br><span class="line">                p = n.<span class="keyword">right</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Binary-Tree-Postorder-Traversal"><a href="#Binary-Tree-Postorder-Traversal" class="headerlink" title="Binary Tree Postorder Traversal"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Binary-Tree-Postorder-Traversal">Binary Tree Postorder Traversal</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Recursive</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">postorderTraversal</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">        <span class="keyword">return</span> postorderTraversal(root.<span class="keyword">left</span>) + postorderTraversal(root.<span class="keyword">right</span>) + [root.val]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Binary-Tree-Level-Order-Traversal"><a href="#Binary-Tree-Level-Order-Traversal" class="headerlink" title="Binary Tree Level Order Traversal"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Binary-Tree-Level-Order-Traversal">Binary Tree Level Order Traversal</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">levelOrder</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">var</span> ans = [[<span class="type">Int</span>]]()</span><br><span class="line">        helper(root, <span class="number">0</span>, &amp;ans)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> level: Int, <span class="number">_</span> ans: <span class="keyword">inout</span> [[Int]])</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> level &gt;= ans.<span class="built_in">count</span> &#123;</span><br><span class="line">            ans.append( [root.val] )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans[level].append(root.val)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        helper(root.<span class="keyword">left</span>, level+<span class="number">1</span>, &amp;ans)</span><br><span class="line">        helper(root.<span class="keyword">right</span>, level+<span class="number">1</span>, &amp;ans)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Maximum-Depth-of-Binary-Tree"><a href="#Maximum-Depth-of-Binary-Tree" class="headerlink" title="Maximum Depth of Binary Tree"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Maximum-Depth-of-Binary-Tree">Maximum Depth of Binary Tree</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">maxDepth</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> root != <span class="literal">nil</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">max</span>(maxDepth(root?.<span class="keyword">left</span>), maxDepth(root?.<span class="keyword">right</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Symmetric-Tree"><a href="#Symmetric-Tree" class="headerlink" title="Symmetric Tree"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Symmetric-Tree">Symmetric Tree</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isSymmetric</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> inOrder(root) == inOrder(<span class="built_in">reverse</span>(root))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(root.<span class="keyword">left</span>); <span class="built_in">reverse</span>(root.<span class="keyword">right</span>)</span><br><span class="line">        <span class="built_in">swap</span>(&amp;root.<span class="keyword">left</span>, &amp;root.<span class="keyword">right</span>)</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">inOrder</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [<span class="type">Int?</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> root == <span class="literal">nil</span> ? [<span class="literal">nil</span>] : [root!.val] + inOrder(root!.<span class="keyword">left</span>) + inOrder(root!.<span class="keyword">right</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Path-Sum"><a href="#Path-Sum" class="headerlink" title="Path Sum"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Path-Sum">Path Sum</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hasPathSum</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> sum: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> root.<span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; root.<span class="keyword">right</span> == <span class="literal">nil</span> &amp;&amp; root.val == sum &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> hasPathSum(root.<span class="keyword">left</span>, sum-root.val) || hasPathSum(root.<span class="keyword">right</span>, sum-root.val)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Count-Univalue-Subtrees"><a href="#Count-Univalue-Subtrees" class="headerlink" title="Count Univalue Subtrees"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Count-Univalue-Subtrees">Count Univalue Subtrees</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">countUnivalSubtrees</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        isUni(root)</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">isUni</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> root.<span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; root.<span class="keyword">right</span> == <span class="literal">nil</span> &#123;</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> lv = root.<span class="keyword">left</span>?.val ?? root.<span class="keyword">right</span>!.val</span><br><span class="line">        <span class="keyword">let</span> rv = root.<span class="keyword">right</span>?.val ?? root.<span class="keyword">left</span>!.val</span><br><span class="line">        <span class="keyword">let</span> l = root.<span class="keyword">left</span> == <span class="literal">nil</span> ? <span class="literal">true</span> : isUni(root.<span class="keyword">left</span>)</span><br><span class="line">        <span class="keyword">let</span> r = root.<span class="keyword">right</span> == <span class="literal">nil</span> ? <span class="literal">true</span> : isUni(root.<span class="keyword">right</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> ans = l &amp;&amp; r &amp;&amp; (lv == root.val &amp;&amp; rv == root.val)</span><br><span class="line">        <span class="keyword">if</span> ans &#123; num += <span class="number">1</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal"><a href="#Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal" class="headerlink" title="Construct Binary Tree from Inorder and Postorder Traversal"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal">Construct Binary Tree from Inorder and Postorder Traversal</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buildTree</span><span class="params">(<span class="number">_</span> inorder: [Int], <span class="number">_</span> postorder: [Int])</span></span> -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> dict = inorder.enumerated().<span class="built_in">reduce</span>(into: [<span class="type">Int</span>:<span class="type">Int</span>]()) &#123; $<span class="number">0</span>[$<span class="number">1.1</span>] = $<span class="number">1.0</span> &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">(<span class="number">_</span> inRange: <span class="params">(Int, Int)</span></span></span>, <span class="number">_</span> postI: <span class="type">Int</span>) -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> postI &lt; <span class="number">0</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">            <span class="keyword">let</span> v = postorder[postI]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> i = dict[v], i &gt;= inRange.<span class="number">0</span> &amp;&amp; i &lt;= inRange.<span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> n = <span class="type">TreeNode</span>(v)</span><br><span class="line">                n.<span class="keyword">left</span> = helper((inRange.<span class="number">0</span>, i-<span class="number">1</span>), postI-<span class="number">1</span>)</span><br><span class="line">                n.<span class="keyword">right</span> = helper((i+<span class="number">1</span>, inRange.<span class="number">1</span>), postI-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> n</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> helper(inRange, postI-<span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper((<span class="number">0</span>, inorder.<span class="built_in">count</span>-<span class="number">1</span>), postorder.<span class="built_in">count</span>-<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal"><a href="#Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal" class="headerlink" title="Construct Binary Tree from Preorder and Inorder Traversal"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal">Construct Binary Tree from Preorder and Inorder Traversal</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buildTree</span><span class="params">(<span class="number">_</span> preorder: [Int], <span class="number">_</span> inorder: [Int])</span></span> -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> dict = inorder.enumerated().<span class="built_in">reduce</span>(into: [<span class="type">Int</span>: <span class="type">Int</span>]()) &#123;$<span class="number">0</span>[$<span class="number">1.1</span>]=$<span class="number">1.0</span>&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">(<span class="number">_</span> inRange: <span class="params">(Int, Int)</span></span></span>, <span class="number">_</span> preI: <span class="type">Int</span>) -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> preI &gt;= preorder.<span class="built_in">count</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">            <span class="keyword">let</span> v = preorder[preI]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> i = dict[v], i &gt;= inRange.<span class="number">0</span> &amp;&amp; i &lt;= inRange.<span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> n = <span class="type">TreeNode</span>(v)</span><br><span class="line">                n.<span class="keyword">left</span> = helper((inRange.<span class="number">0</span>, i-<span class="number">1</span>), preI+<span class="number">1</span>)</span><br><span class="line">                n.<span class="keyword">right</span> = helper((i+<span class="number">1</span>, inRange.<span class="number">1</span>), preI+<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> n</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> helper(inRange, preI+<span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper((<span class="number">0</span>, inorder.<span class="built_in">count</span>-<span class="number">1</span>), <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Populating-Next-Right-Pointers-in-Each-Node"><a href="#Populating-Next-Right-Pointers-in-Each-Node" class="headerlink" title="Populating Next Right Pointers in Each Node"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Populating-Next-Right-Pointers-in-Each-Node">Populating Next Right Pointers in Each Node</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">connect</span><span class="params">(<span class="number">_</span> root: Node?)</span></span> -&gt; <span class="type">Node?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        root.<span class="keyword">left</span>?.next = root.<span class="keyword">right</span></span><br><span class="line">        root.<span class="keyword">right</span>?.next = root.next?.<span class="keyword">left</span></span><br><span class="line">        connect(root.<span class="keyword">left</span>)</span><br><span class="line">        connect(root.<span class="keyword">right</span>)</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Populating-Next-Right-Pointers-in-Each-Node-II"><a href="#Populating-Next-Right-Pointers-in-Each-Node-II" class="headerlink" title="Populating Next Right Pointers in Each Node II"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Populating-Next-Right-Pointers-in-Each-Node-II">Populating Next Right Pointers in Each Node II</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">connect</span><span class="params">(<span class="number">_</span> root: Node?)</span></span> -&gt; <span class="type">Node?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> nodes = [[<span class="type">Node</span>]]()</span><br><span class="line">        helper(root, <span class="number">0</span>, &amp;nodes)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nodes.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;(nodes[i].<span class="built_in">count</span>-<span class="number">1</span>) &#123;</span><br><span class="line">                nodes[i][j].next = nodes[i][j+<span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">(<span class="number">_</span> root: Node?, <span class="number">_</span> level: Int, <span class="number">_</span> nodes: <span class="keyword">inout</span> [[Node]])</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        level &lt; nodes.<span class="built_in">count</span> ? nodes[level].append(root) : nodes.append([root])</span><br><span class="line">        helper(root.<span class="keyword">left</span>, level+<span class="number">1</span>, &amp;nodes)</span><br><span class="line">        helper(root.<span class="keyword">right</span>, level+<span class="number">1</span>, &amp;nodes)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lowest-Common-Ancestor-of-a-Binary-Tree"><a href="#Lowest-Common-Ancestor-of-a-Binary-Tree" class="headerlink" title="Lowest Common Ancestor of a Binary Tree"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Lowest-Common-Ancestor-of-a-Binary-Tree">Lowest Common Ancestor of a Binary Tree</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">lowestCommonAncestor</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> p: TreeNode?, <span class="number">_</span> q: TreeNode?)</span></span> -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root, <span class="keyword">let</span> p = p, <span class="keyword">let</span> q = q <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">let</span> l = lowestCommonAncestor(root.<span class="keyword">left</span>, p, q), r = lowestCommonAncestor(root.<span class="keyword">right</span>, p, q)</span><br><span class="line">        <span class="keyword">if</span> root.val == p.val || root.val == q.val || (l != <span class="literal">nil</span> &amp;&amp; r != <span class="literal">nil</span>) &#123; <span class="keyword">return</span> root &#125;</span><br><span class="line">        <span class="keyword">return</span> l ?? r</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Serialize-and-Deserialize-Binary-Tree"><a href="#Serialize-and-Deserialize-Binary-Tree" class="headerlink" title="Serialize and Deserialize Binary Tree"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Serialize-and-Deserialize-Binary-Tree">Serialize and Deserialize Binary Tree</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Codec</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">serialize</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="string">&quot;#&quot;</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;\(root.val),\(serialize(root.left)),\(serialize(root.right))&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deserialize</span><span class="params">(<span class="number">_</span> data: String)</span></span> -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> vals = data.<span class="built_in">split</span>(separator: <span class="string">&quot;,&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">()</span></span> -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">            <span class="keyword">guard</span> i &lt; vals.<span class="built_in">count</span>, <span class="keyword">let</span> v = <span class="type">Int</span>(vals[i]) <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">            <span class="keyword">let</span> n = <span class="type">TreeNode</span>(v)</span><br><span class="line">            i += <span class="number">1</span>; n.<span class="keyword">left</span> = helper()</span><br><span class="line">            i += <span class="number">1</span>; n.<span class="keyword">right</span> = helper()</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> helper()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Binary-Tree-Preorder-Traversal&quot;&gt;&lt;a href=&quot;#Binary-Tree-Preorder-Traversal&quot; class=&quot;headerlink&quot; title=&quot;Binary Tree Preorder Traversal&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leihao0.github.io/LeetCode-Binary-Tree/#Binary-Tree-Preorder-Traversal&quot;&gt;Binary Tree Preorder Traversal&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// iterative&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;preorderTraversal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; root: TreeNode?)&lt;/span&gt;&lt;/span&gt; -&amp;gt; [&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ans = [&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;](), stack: [&lt;span class=&quot;type&quot;&gt;TreeNode&lt;/span&gt;] = root != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; ? [root!] : []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; p = stack.popLast() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ans.append(p.val)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; r = p.&lt;span class=&quot;keyword&quot;&gt;right&lt;/span&gt; &amp;#123; stack.append(r) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; l = p.&lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt; &amp;#123; stack.append(l) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// recursive&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;preorderTraversal0&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; root: TreeNode?)&lt;/span&gt;&lt;/span&gt; -&amp;gt; [&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; root = root &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [] &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [root.val] + preorderTraversal(root.&lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt;) + preorderTraversal(root.&lt;span class=&quot;keyword&quot;&gt;right&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="https://leihao0.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="https://leihao0.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Linked List</title>
    <link href="https://leihao0.github.io/LeetCode-Linked-List/"/>
    <id>https://leihao0.github.io/LeetCode-Linked-List/</id>
    <published>2020-01-01T16:00:00.000Z</published>
    <updated>2020-09-09T11:10:38.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Design-Linked-List"><a href="#Design-Linked-List" class="headerlink" title="Design Linked List"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Design-Linked-List">Design Linked List</a></h2><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> val: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> prev: <span class="type">Node?</span>, next: <span class="type">Node?</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> val: <span class="type">Int</span>, prev: <span class="type">Node?</span> = <span class="literal">nil</span>, <span class="number">_</span> next: <span class="type">Node?</span> = <span class="literal">nil</span>) &#123; <span class="keyword">self</span>.val = val; <span class="keyword">self</span>.prev = prev; <span class="keyword">self</span>.next = next &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> head: <span class="type">Node</span> = <span class="type">Node</span>(-<span class="number">1</span>), tail: <span class="type">Node</span> = <span class="type">Node</span>(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>() &#123;  head.next = tail; tail.prev = head &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> findNode(index)?.val ?? -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addAtHead</span><span class="params">(<span class="number">_</span> val: Int)</span></span> &#123;</span><br><span class="line">        addAtIndex(<span class="number">0</span>, val)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addAtTail</span><span class="params">(<span class="number">_</span> val: Int)</span></span> &#123;</span><br><span class="line">        addAtIndex(<span class="built_in">count</span>, val)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addAtIndex</span><span class="params">(<span class="number">_</span> index: Int, <span class="number">_</span> val: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="built_in">count</span>, <span class="keyword">let</span> node = findNode(index) &#123;</span><br><span class="line">            <span class="keyword">let</span> newNode = <span class="type">Node</span>(val)</span><br><span class="line">            newNode.next = node</span><br><span class="line">            newNode.prev = node.prev</span><br><span class="line">            node.prev?.next = newNode</span><br><span class="line">            node.prev = newNode</span><br><span class="line">            <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printList()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="built_in">count</span>, <span class="keyword">let</span> node = findNode(index) &#123;</span><br><span class="line">            node.prev?.next = node.next</span><br><span class="line">            node.next?.prev = node.prev</span><br><span class="line">            node.prev = <span class="literal">nil</span>; node.next = <span class="literal">nil</span></span><br><span class="line">            <span class="built_in">count</span> -= <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printList()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">findNode</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">Node?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> p: <span class="type">Node?</span>, i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> index &lt;= (<span class="built_in">count</span>/<span class="number">2</span>) &#123;</span><br><span class="line">            p = head.next</span><br><span class="line">            <span class="keyword">while</span> p != <span class="literal">nil</span>, i &lt; index &#123;</span><br><span class="line">                p = p?.next; i += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p = tail; i = <span class="built_in">count</span></span><br><span class="line">            <span class="keyword">while</span> p != <span class="literal">nil</span>, i &gt; index &#123;</span><br><span class="line">                p = p?.prev; i -= <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">printList</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> p = head.next, i: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span>, i &lt; <span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(p!.val, terminator: <span class="string">&quot;-&gt;&quot;</span> )</span><br><span class="line">            p = p?.next; i += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Linked-List-Cycle"><a href="#Linked-List-Cycle" class="headerlink" title="Linked List Cycle"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Linked-List-Cycle">Linked List Cycle</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hasCycle</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> fast = head?.next, slow = head</span><br><span class="line">        <span class="keyword">while</span> fast != <span class="literal">nil</span>, fast !== slow &#123;</span><br><span class="line">            fast = fast?.next?.next</span><br><span class="line">            slow = slow?.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast != <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Linked-List-Cycle-II"><a href="#Linked-List-Cycle-II" class="headerlink" title="Linked List Cycle II"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Linked-List-Cycle-II">Linked List Cycle II</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">detectCycle</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> slow = head, fast = head?.next</span><br><span class="line">        <span class="keyword">while</span> fast != <span class="literal">nil</span>, fast !== slow &#123;</span><br><span class="line">            fast = fast?.next?.next</span><br><span class="line">            slow = slow?.next</span><br><span class="line">        &#125;</span><br><span class="line">        slow = head; fast = fast?.next</span><br><span class="line">        <span class="keyword">while</span> fast != <span class="literal">nil</span>, fast !== slow &#123;</span><br><span class="line">            fast = fast?.next</span><br><span class="line">            slow = slow?.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Intersection-of-Two-Linked-Lists"><a href="#Intersection-of-Two-Linked-Lists" class="headerlink" title="Intersection of Two Linked Lists"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Intersection-of-Two-Linked-Lists">Intersection of Two Linked Lists</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getIntersectionNode</span><span class="params">(<span class="number">_</span> headA: ListNode?, <span class="number">_</span> headB: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> tailA = headA</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> p = tailA?.next &#123; tailA = p &#125;</span><br><span class="line">        tailA?.next = headB</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> fast = detectCycle(headA)</span><br><span class="line"></span><br><span class="line">        tailA?.next = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fast</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">detectCycle</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> slow = head, fast = head?.next</span><br><span class="line">        <span class="keyword">while</span> fast != <span class="literal">nil</span>, fast !== slow &#123;</span><br><span class="line">            fast = fast?.next?.next</span><br><span class="line">            slow = slow?.next</span><br><span class="line">        &#125;</span><br><span class="line">        slow = head; fast = fast?.next</span><br><span class="line">        <span class="keyword">while</span> fast != <span class="literal">nil</span>, fast !== slow &#123;</span><br><span class="line">            fast = fast?.next</span><br><span class="line">            slow = slow?.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Remove-Nth-Node-From-End-of-List"><a href="#Remove-Nth-Node-From-End-of-List" class="headerlink" title="Remove Nth Node From End of List"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Remove-Nth-Node-From-End-of-List">Remove Nth Node From End of List</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeNthFromEnd</span><span class="params">(<span class="number">_</span> head: ListNode?, <span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> pHead = <span class="type">ListNode</span>(-<span class="number">1</span>, head), p0: <span class="type">ListNode?</span> = pHead, p1 = p0, i = <span class="number">0</span>, j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> q = p1?.next, j &lt; n &#123;</span><br><span class="line">            p1 = q; j += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> q = p1?.next &#123;</span><br><span class="line">            p1 = q; p0 = p0?.next</span><br><span class="line">        &#125;</span><br><span class="line">        p0?.next = p0?.next?.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pHead.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reverse-Linked-List"><a href="#Reverse-Linked-List" class="headerlink" title="Reverse Linked List"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Reverse-Linked-List">Reverse Linked List</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> head?.next == <span class="literal">nil</span> &#123; <span class="keyword">return</span> head &#125;</span><br><span class="line">        <span class="keyword">let</span> h = reverseList(head?.next)</span><br><span class="line">        head?.next?.next = head</span><br><span class="line">        head?.next = <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> prev: <span class="type">ListNode?</span> = <span class="literal">nil</span>, cur = head</span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> p = cur?.next</span><br><span class="line">            cur?.next = prev</span><br><span class="line">            prev = cur</span><br><span class="line">            cur = p</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Remove-Linked-List-Elements"><a href="#Remove-Linked-List-Elements" class="headerlink" title="Remove Linked List Elements"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Remove-Linked-List-Elements">Remove Linked List Elements</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeElements</span><span class="params">(<span class="number">_</span> head: ListNode?, <span class="number">_</span> val: Int)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> pHead = <span class="type">ListNode</span>(-<span class="number">1</span>, head); <span class="keyword">var</span> p: <span class="type">ListNode?</span> = pHead</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> pn = p!.next, pn.val == val &#123;</span><br><span class="line">                p!.next = pn.next</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p = p!.next</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pHead.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Odd-Even-Linked-List"><a href="#Odd-Even-Linked-List" class="headerlink" title="Odd Even Linked List"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Odd-Even-Linked-List">Odd Even Linked List</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">oddEvenList</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> evenHead = head, oddHead = head?.next</span><br><span class="line">        <span class="keyword">var</span> evenP = evenHead, oddP = oddHead</span><br><span class="line">        <span class="keyword">while</span> oddP?.next != <span class="literal">nil</span> &#123;</span><br><span class="line">            evenP?.next = evenP?.next?.next</span><br><span class="line">            oddP?.next = oddP?.next?.next</span><br><span class="line">            evenP = evenP?.next</span><br><span class="line">            oddP = oddP?.next</span><br><span class="line">        &#125;</span><br><span class="line">        evenP?.next = oddHead</span><br><span class="line">        <span class="keyword">return</span> evenHead</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Palindrome-Linked-List"><a href="#Palindrome-Linked-List" class="headerlink" title="Palindrome Linked List"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Palindrome-Linked-List">Palindrome Linked List</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isPalindrome</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tail = reverseList(center(head))</span><br><span class="line">        <span class="keyword">return</span> compare(head, tail)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">compare</span><span class="params">(<span class="number">_</span> head: ListNode?, <span class="number">_</span> tail: ListNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> p = head, q = tail</span><br><span class="line">        <span class="keyword">while</span> q != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> p == <span class="literal">nil</span> || q!.val != p!.val &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line">            p = p!.next; q = q!.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">center</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span>  -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> fast = head?.next, slow = head</span><br><span class="line">        <span class="keyword">while</span> fast != <span class="literal">nil</span>, fast !== slow &#123;</span><br><span class="line">            fast = fast?.next?.next</span><br><span class="line">            slow = slow?.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> prev: <span class="type">ListNode?</span> = <span class="literal">nil</span>, cur = head</span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> p = cur?.next</span><br><span class="line">            cur?.next = prev</span><br><span class="line">            prev = cur; cur = p</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Merge-Two-Sorted-Lists"><a href="#Merge-Two-Sorted-Lists" class="headerlink" title="Merge Two Sorted Lists"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Merge-Two-Sorted-Lists">Merge Two Sorted Lists</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(<span class="number">_</span> l1: ListNode?, <span class="number">_</span> l2: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> p1 = l1 <span class="keyword">else</span> &#123; <span class="keyword">return</span> l2 &#125;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> p2 = l2 <span class="keyword">else</span> &#123; <span class="keyword">return</span> l1 &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> (p, q) = p1.val &lt;= p2.val ? (p1, p2) : (p2, p1)</span><br><span class="line">        p.next = mergeTwoLists(p.next, q)</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Add-Two-Numbers"><a href="#Add-Two-Numbers" class="headerlink" title="Add Two Numbers"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Add-Two-Numbers">Add Two Numbers</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addTwoNumbers</span><span class="params">(<span class="number">_</span> l1: ListNode?, <span class="number">_</span> l2: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> head = <span class="type">ListNode</span>(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">var</span> p1 = l1, p2 = l2, p3: <span class="type">ListNode?</span> = head, v = <span class="number">0</span>, carry = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> p1 != <span class="literal">nil</span> || p2 != <span class="literal">nil</span> &#123;</span><br><span class="line">            v = (p1?.val ?? <span class="number">0</span>)+(p2?.val ?? <span class="number">0</span>)+carry</span><br><span class="line">            carry =  v/<span class="number">10</span>; v %= <span class="number">10</span></span><br><span class="line">            p3?.next = <span class="type">ListNode</span>(v)</span><br><span class="line">            p1 = p1?.next; p2 = p2?.next; p3 = p3?.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> carry != <span class="number">0</span> &#123; p3?.next = <span class="type">ListNode</span>(carry) &#125;</span><br><span class="line">        <span class="keyword">return</span> head.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Flatten-a-Multilevel-Doubly-Linked-List"><a href="#Flatten-a-Multilevel-Doubly-Linked-List" class="headerlink" title="Flatten a Multilevel Doubly Linked List"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Flatten-a-Multilevel-Doubly-Linked-List">Flatten a Multilevel Doubly Linked List</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">flatten</span><span class="params">(<span class="number">_</span> head: Node?)</span></span> -&gt; <span class="type">Node?</span> &#123;</span><br><span class="line">        getTail(head)</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">getTail</span><span class="params">(<span class="number">_</span> head: Node?)</span></span> -&gt; <span class="type">Node?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> head = head <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> child = head.child &#123;</span><br><span class="line">            <span class="keyword">let</span> tail = getTail(child)</span><br><span class="line">            tail?.next = head.next</span><br><span class="line">            head.next?.prev = tail</span><br><span class="line">            head.next = head.child</span><br><span class="line">            head.child?.prev = head</span><br><span class="line">            head.child = <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> p = head.next &#123;</span><br><span class="line">            <span class="keyword">return</span> getTail(p)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Insert-into-a-Cyclic-Sorted-List"><a href="#Insert-into-a-Cyclic-Sorted-List" class="headerlink" title="Insert into a Cyclic Sorted List"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Insert-into-a-Cyclic-Sorted-List">Insert into a Cyclic Sorted List</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(<span class="number">_</span> head: Node?, <span class="number">_</span> insertVal: Int)</span></span> -&gt; <span class="type">Node?</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> n = <span class="type">Node</span>(insertVal)</span><br><span class="line">            n.next = n</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> p = head</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (p!.val &lt;= insertVal &amp;&amp;  p!.next!.val &gt;= insertVal) ||</span><br><span class="line">            (p!.val &gt; p!.next!.val &amp;&amp; (insertVal &lt;= p!.next!.val || insertVal &gt;= p!.val ) ||</span><br><span class="line">             p!.next == head</span><br><span class="line">            ) &#123;</span><br><span class="line">                <span class="keyword">let</span> n = <span class="type">Node</span>(insertVal)</span><br><span class="line">                n.next = p!.next</span><br><span class="line">                p!.next = n</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            p = p!.next</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Copy-List-with-Random-Pointer"><a href="#Copy-List-with-Random-Pointer" class="headerlink" title="Copy List with Random Pointer"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Copy-List-with-Random-Pointer">Copy List with Random Pointer</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">copyRandomList</span><span class="params">(<span class="number">_</span> head: Node?)</span></span> -&gt; <span class="type">Node?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> p = head, nNode = head</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> n = <span class="type">Node</span>(p!.val)</span><br><span class="line">            n.next = p?.next</span><br><span class="line">            p?.next = n</span><br><span class="line">            p = p?.next?.next</span><br><span class="line">        &#125;</span><br><span class="line">        p = head</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">            p?.next?.random = p?.random?.next</span><br><span class="line">            p = p?.next?.next</span><br><span class="line">        &#125;</span><br><span class="line">        p = head; nNode = head?.next</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> q = p?.next</span><br><span class="line">            p?.next = p?.next?.next</span><br><span class="line">            q?.next = q?.next?.next</span><br><span class="line">            p = p?.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nNode</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Rotate-List"><a href="#Rotate-List" class="headerlink" title="Rotate List"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Rotate-List">Rotate List</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">rotateRight</span><span class="params">(<span class="number">_</span> head: ListNode?, <span class="number">_</span> k: Int)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> length = <span class="number">0</span>, fast = head, slow = head, i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> fast != <span class="literal">nil</span> &#123; fast = fast!.next; length += <span class="number">1</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> length &lt; <span class="number">2</span> &#123; <span class="keyword">return</span> head &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> k = k % length</span><br><span class="line"></span><br><span class="line">        fast = head</span><br><span class="line">        <span class="keyword">while</span> i &lt; k &#123; fast = fast?.next; i += <span class="number">1</span> &#125;</span><br><span class="line">        <span class="keyword">while</span> fast?.next != <span class="literal">nil</span> &#123;</span><br><span class="line">            slow = slow?.next; fast = fast?.next</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fast?.next = head</span><br><span class="line">        <span class="keyword">let</span> node = slow?.next</span><br><span class="line">        slow?.next = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Design-Linked-List&quot;&gt;&lt;a href=&quot;#Design-Linked-List&quot; class=&quot;headerlink&quot; title=&quot;Design Linked List&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leihao0.github.io/LeetCode-Linked-List/#Design-Linked-List&quot;&gt;Design Linked List&lt;/a&gt;&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="https://leihao0.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="https://leihao0.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Arrays 101</title>
    <link href="https://leihao0.github.io/LeetCode-Arrays-101/"/>
    <id>https://leihao0.github.io/LeetCode-Arrays-101/</id>
    <published>2019-12-31T16:00:00.000Z</published>
    <updated>2020-09-09T11:10:02.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Max-Consecutive-Ones"><a href="#Max-Consecutive-Ones" class="headerlink" title="Max Consecutive Ones"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Max-Consecutive-Ones">Max Consecutive Ones</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums.<span class="built_in">split</span>(separator: <span class="number">0</span>).<span class="built_in">map</span> &#123;$<span class="number">0</span>.<span class="built_in">count</span>&#125;.<span class="built_in">max</span>() ?? <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Find-Numbers-with-Even-Number-of-Digits"><a href="#Find-Numbers-with-Even-Number-of-Digits" class="headerlink" title="Find Numbers with Even Number of Digits"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Find-Numbers-with-Even-Number-of-Digits">Find Numbers with Even Number of Digits</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findNumbers</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums.<span class="built_in">filter</span>(&#123;<span class="type">String</span>($<span class="number">0</span>).<span class="built_in">count</span> &amp; <span class="number">1</span> == <span class="number">0</span> &#125;).<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Squares-of-a-Sorted-Array"><a href="#Squares-of-a-Sorted-Array" class="headerlink" title="Squares of a Sorted Array"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Squares-of-a-Sorted-Array">Squares of a Sorted Array</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sortedSquares</span><span class="params">(<span class="number">_</span> A: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>, ans = <span class="type">A</span></span><br><span class="line">        <span class="keyword">while</span> j &lt; <span class="type">A</span>.<span class="built_in">count</span>, <span class="type">A</span>[j] &lt; <span class="number">0</span> &#123;</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        i = j - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span>, j &lt; <span class="type">A</span>.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> (ai, aj) = (<span class="type">A</span>[i]*<span class="type">A</span>[i], <span class="type">A</span>[j]*<span class="type">A</span>[j])</span><br><span class="line">            ai &lt; aj ? (ans[k] = ai, i -= <span class="number">1</span>) : (ans[k] = aj, j += <span class="number">1</span>)</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">0</span> &#123;</span><br><span class="line">            ans[k...] = <span class="type">A</span>[...i].reversed().<span class="built_in">map</span> &#123;$<span class="number">0</span>*$<span class="number">0</span>&#125;.suffix(from: <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> j &lt; <span class="type">A</span>.<span class="built_in">count</span> &#123;</span><br><span class="line">            ans[k...] = <span class="type">A</span>[k...].<span class="built_in">map</span> &#123; $<span class="number">0</span>*$<span class="number">0</span> &#125;.suffix(from: <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Duplicate-Zeros"><a href="#Duplicate-Zeros" class="headerlink" title="Duplicate Zeros"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Duplicate-Zeros">Duplicate Zeros</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">duplicateZeros</span><span class="params">(<span class="number">_</span> arr: <span class="keyword">inout</span> [Int])</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> na = <span class="type">Array</span>(repeating: <span class="number">0</span>, <span class="built_in">count</span>: arr.<span class="built_in">count</span>), i = <span class="number">0</span>, j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> j &lt; na.<span class="built_in">count</span> &#123;</span><br><span class="line">            na[j] = arr[i]</span><br><span class="line">            <span class="keyword">if</span> arr[i] == <span class="number">0</span>, j &lt; na.<span class="built_in">count</span>-<span class="number">1</span> &#123; j += <span class="number">1</span>; na[j] = <span class="number">0</span> &#125;</span><br><span class="line">            i += <span class="number">1</span>; j += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        arr = na</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Merge-Sorted-Array"><a href="#Merge-Sorted-Array" class="headerlink" title="Merge Sorted Array"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Merge-Sorted-Array">Merge Sorted Array</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(<span class="number">_</span> nums1: <span class="keyword">inout</span> [Int], <span class="number">_</span> m: Int, <span class="number">_</span> nums2: [Int], <span class="number">_</span> n: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> nums0 = nums1[..&lt;m]</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; nums0.<span class="built_in">count</span>, j &lt; nums2.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> nums0[i] &lt; nums2[j] &#123;</span><br><span class="line">                nums1[k] = nums0[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums1[k] = nums2[j]</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> i &lt; nums0.<span class="built_in">count</span> &#123;</span><br><span class="line">            nums1[k] = nums0[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> j &lt; nums2.<span class="built_in">count</span> &#123;</span><br><span class="line">            nums1[k] = nums2[j]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Remove-Element"><a href="#Remove-Element" class="headerlink" title="Remove Element"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Remove-Element">Remove Element</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(<span class="number">_</span> nums: <span class="keyword">inout</span> [Int], <span class="number">_</span> val: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = nums.<span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] == val &#123;</span><br><span class="line">                <span class="keyword">while</span> nums[j] == val &#123; j -= <span class="number">1</span> &#125;</span><br><span class="line">                nums.swapAt(i, j)</span><br><span class="line">            &#125;</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Remove-Duplicates-from-Sorted-Array"><a href="#Remove-Duplicates-from-Sorted-Array" class="headerlink" title="Remove Duplicates from Sorted Array"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Remove-Duplicates-from-Sorted-Array">Remove Duplicates from Sorted Array</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(<span class="number">_</span> nums: <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] != nums[j] &#123;</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.isEmpty ? <span class="number">0</span> : i+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Check-If-N-and-Its-Double-Exist"><a href="#Check-If-N-and-Its-Double-Exist" class="headerlink" title="Check If N and Its Double Exist"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Check-If-N-and-Its-Double-Exist">Check If N and Its Double Exist</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">checkIfExist</span><span class="params">(<span class="number">_</span> arr: [Int])</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> dict = <span class="type">Dictionary</span>&lt;<span class="type">Int</span>, <span class="type">Int</span>&gt;()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> arr &#123;</span><br><span class="line">            dict[i] = (dict[i] ?? <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> arr &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> v = dict[i*<span class="number">2</span>], v &gt;= ((i==<span class="number">0</span>) ? <span class="number">2</span> : <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Valid-Mountain-Array"><a href="#Valid-Mountain-Array" class="headerlink" title="Valid Mountain Array"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Valid-Mountain-Array">Valid Mountain Array</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">validMountainArray</span><span class="params">(<span class="number">_</span> A: [Int])</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="type">A</span>.<span class="built_in">count</span>-<span class="number">1</span>, <span class="type">A</span>[i] &lt; <span class="type">A</span>[i+<span class="number">1</span>] &#123; i += <span class="number">1</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> || i == <span class="type">A</span>.<span class="built_in">count</span>-<span class="number">1</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="type">A</span>.<span class="built_in">count</span>-<span class="number">1</span>, <span class="type">A</span>[i] &gt; <span class="type">A</span>[i+<span class="number">1</span>] &#123; i += <span class="number">1</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> i == <span class="type">A</span>.<span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Replace-Elements-with-Greatest-Element-on-Right-Side"><a href="#Replace-Elements-with-Greatest-Element-on-Right-Side" class="headerlink" title="Replace Elements with Greatest Element on Right Side"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Replace-Elements-with-Greatest-Element-on-Right-Side">Replace Elements with Greatest Element on Right Side</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">replaceElements</span><span class="params">(<span class="number">_</span> arr: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> i = arr.<span class="built_in">count</span>-<span class="number">1</span>, rMax = -<span class="number">1</span>, newArr = arr</span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> &#123;</span><br><span class="line">            newArr[i] = rMax</span><br><span class="line">            rMax = <span class="built_in">max</span>(rMax, arr[i])</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newArr</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Remove-Duplicates-from-Sorted-Array-1"><a href="#Remove-Duplicates-from-Sorted-Array-1" class="headerlink" title="Remove Duplicates from Sorted Array"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Remove-Duplicates-from-Sorted-Array">Remove Duplicates from Sorted Array</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(<span class="number">_</span> nums: <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] != nums[j] &#123;</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.isEmpty ? <span class="number">0</span> : i+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Move-Zeroes"><a href="#Move-Zeroes" class="headerlink" title="Move Zeroes"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Move-Zeroes">Move Zeroes</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">moveZeroes</span><span class="params">(<span class="number">_</span> nums: <span class="keyword">inout</span> [Int])</span></span> &#123;</span><br><span class="line">        nums = <span class="type">Array</span>(nums.<span class="built_in">split</span>(separator: <span class="number">0</span>).joined()) + <span class="type">Array</span>(nums.<span class="built_in">filter</span>(&#123;$<span class="number">0</span> == <span class="number">0</span>&#125;))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sort-Array-By-Parity"><a href="#Sort-Array-By-Parity" class="headerlink" title="Sort Array By Parity"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Sort-Array-By-Parity">Sort Array By Parity</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sortArrayByParity</span><span class="params">(<span class="number">_</span> A: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> even = [<span class="type">Int</span>](), odd = even</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="type">A</span> &#123;</span><br><span class="line">            i &amp; <span class="number">1</span> == <span class="number">0</span> ? (even.append(i)) : (odd.append(i))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> even + odd</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Squares-of-a-Sorted-Array-1"><a href="#Squares-of-a-Sorted-Array-1" class="headerlink" title="Squares of a Sorted Array"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Squares-of-a-Sorted-Array">Squares of a Sorted Array</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sortedSquares</span><span class="params">(<span class="number">_</span> A: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>, ans = <span class="type">A</span></span><br><span class="line">        <span class="keyword">while</span> j &lt; <span class="type">A</span>.<span class="built_in">count</span>, <span class="type">A</span>[j] &lt; <span class="number">0</span> &#123;</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        i = j - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span>, j &lt; <span class="type">A</span>.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> (ai, aj) = (<span class="type">A</span>[i]*<span class="type">A</span>[i], <span class="type">A</span>[j]*<span class="type">A</span>[j])</span><br><span class="line">            ai &lt; aj ? (ans[k] = ai, i -= <span class="number">1</span>) : (ans[k] = aj, j += <span class="number">1</span>)</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">0</span> &#123;</span><br><span class="line">            ans[k...] = <span class="type">A</span>[...i].reversed().<span class="built_in">map</span> &#123;$<span class="number">0</span>*$<span class="number">0</span>&#125;.suffix(from: <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> j &lt; <span class="type">A</span>.<span class="built_in">count</span> &#123;</span><br><span class="line">            ans[k...] = <span class="type">A</span>[k...].<span class="built_in">map</span> &#123; $<span class="number">0</span>*$<span class="number">0</span> &#125;.suffix(from: <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Height-Checker"><a href="#Height-Checker" class="headerlink" title="Height Checker"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Height-Checker">Height Checker</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">heightChecker</span><span class="params">(<span class="number">_</span> heights: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">zip</span>(heights, heights.sorted()).<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; <span class="keyword">return</span> $<span class="number">0</span> + ($<span class="number">1.0</span> == $<span class="number">1.1</span> ? <span class="number">0</span> : <span class="number">1</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Max-Consecutive-Ones-II"><a href="#Max-Consecutive-Ones-II" class="headerlink" title="Max Consecutive Ones II"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Max-Consecutive-Ones-II">Max Consecutive Ones II</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> z0 = <span class="number">0</span>, z1 = <span class="number">0</span>, maxZ = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums &#123;</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">1</span> &#123;</span><br><span class="line">                z1 += <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                z0 = z1</span><br><span class="line">                z1 = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">            maxZ = <span class="built_in">max</span>(maxZ, z0+z1+<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(maxZ, nums.<span class="built_in">count</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Third-Maximum-Number"><a href="#Third-Maximum-Number" class="headerlink" title="Third Maximum Number"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Third-Maximum-Number">Third Maximum Number</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">thirdMax</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> maxs = [<span class="type">Int</span>.<span class="built_in">min</span>, <span class="type">Int</span>.<span class="built_in">min</span>, <span class="type">Int</span>.<span class="built_in">min</span>]</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums &#123;</span><br><span class="line">            <span class="keyword">if</span> n &gt; maxs[<span class="number">2</span>], maxs.firstIndex(of: n) == <span class="literal">nil</span> &#123;</span><br><span class="line">                maxs[<span class="number">2</span>] = n</span><br><span class="line">                <span class="keyword">if</span> maxs[<span class="number">2</span>] &gt; maxs[<span class="number">1</span>] &#123;</span><br><span class="line">                    maxs.swapAt(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">if</span> maxs[<span class="number">1</span>] &gt; maxs[<span class="number">0</span>] &#123;</span><br><span class="line">                        maxs.swapAt(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxs[<span class="number">2</span>] == <span class="type">Int</span>.<span class="built_in">min</span> ? maxs[<span class="number">0</span>] : maxs[<span class="number">2</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Find-All-Numbers-Disappeared-in-an-Array"><a href="#Find-All-Numbers-Disappeared-in-an-Array" class="headerlink" title="Find All Numbers Disappeared in an Array"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Find-All-Numbers-Disappeared-in-an-Array">Find All Numbers Disappeared in an Array</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findDisappearedNumbers</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> nums = nums, ans = [<span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; nums.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> index = <span class="built_in">abs</span>(nums[i])-<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> nums[index] &gt; <span class="number">0</span> &#123; nums[index] *= -<span class="number">1</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; <span class="number">0</span> &#123; ans.append(i+<span class="number">1</span>) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Max-Consecutive-Ones&quot;&gt;&lt;a href=&quot;#Max-Consecutive-Ones&quot; class=&quot;headerlink&quot; title=&quot;Max Consecutive Ones&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leihao0.github.io/LeetCode-Arrays-101/#Max-Consecutive-Ones&quot;&gt;Max Consecutive Ones&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findMaxConsecutiveOnes&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; nums: [Int])&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums.&lt;span class=&quot;built_in&quot;&gt;split&lt;/span&gt;(separator: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt; &amp;#123;$&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;&amp;#125;.&lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;() ?? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="https://leihao0.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="https://leihao0.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Deep Learning Course 5</title>
    <link href="https://leihao0.github.io/Deep-Learning-Course-5/"/>
    <id>https://leihao0.github.io/Deep-Learning-Course-5/</id>
    <published>2019-12-03T13:28:38.000Z</published>
    <updated>2020-09-09T11:11:34.733Z</updated>
    
    <content type="html"><![CDATA[<p>Wow, I finished them before the deadline.</p><p>😃😃😃</p><p><a href="https://www.coursera.org/account/accomplishments/specialization/8BQ77WBNDVQH">Deep Learning Specialization Certificate</a></p><h2 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h2><h3 id="Building-a-recurrent-neural-network-step-by-step"><a href="#Building-a-recurrent-neural-network-step-by-step" class="headerlink" title="Building a recurrent neural network - step by step"></a>Building a recurrent neural network - step by step</h3><h3 id="1-1-RNN-cell"><a href="#1-1-RNN-cell" class="headerlink" title="1.1 - RNN cell"></a>1.1 - RNN cell</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a_next = np.tanh(np.matmul(Waa, a_prev) + np.matmul(Wax, xt) + ba)</span><br><span class="line"></span><br><span class="line">yt_pred = softmax(np.matmul(Wya, a_next) + by)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="1-2-RNN-forward-pass"><a href="#1-2-RNN-forward-pass" class="headerlink" title="1.2 - RNN forward pass"></a>1.2 - RNN forward pass</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xt = x[:,:,t]</span><br><span class="line">a_next, yt_pred, cache = rnn_cell_forward(xt, a_next, parameters)</span><br><span class="line"></span><br><span class="line">a[:,:,t] = a_next</span><br><span class="line"></span><br><span class="line">y_pred[:,:,t] = yt_pred</span><br><span class="line"></span><br><span class="line">caches.append(cache)</span><br></pre></td></tr></table></figure><h3 id="2-Long-Short-Term-Memory-LSTM-network"><a href="#2-Long-Short-Term-Memory-LSTM-network" class="headerlink" title="2 - Long Short-Term Memory (LSTM) network"></a>2 - Long Short-Term Memory (LSTM) network</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">concat = np.concatenate((a_prev, xt), axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">ft = sigmoid(np.matmul(Wf, concat) + bf)        <span class="comment"># forget gate</span></span><br><span class="line">it = sigmoid(np.matmul(Wi, concat) + bi)        <span class="comment"># update gate</span></span><br><span class="line">cct = np.tanh(np.matmul(Wc, concat) + bc)       <span class="comment"># candidate value</span></span><br><span class="line">c_next = ft*c_prev + it*cct    <span class="comment"># cell state</span></span><br><span class="line">ot = sigmoid(np.matmul(Wo, concat) + bo)        <span class="comment"># output gate</span></span><br><span class="line">a_next = ot * np.tanh(c_next)    <span class="comment"># hidden state</span></span><br><span class="line"></span><br><span class="line">yt_pred = softmax(np.matmul(Wy, a_next) + by)</span><br></pre></td></tr></table></figure><h3 id="2-2-Forward-pass-for-LSTM"><a href="#2-2-Forward-pass-for-LSTM" class="headerlink" title="2.2 - Forward pass for LSTM"></a>2.2 - Forward pass for LSTM</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Wy = parameters[<span class="string">'Wy'</span>]</span><br><span class="line">n_x, m, T_x = x.shape</span><br><span class="line">n_y, n_a = parameters[<span class="string">'Wy'</span>].shape</span><br><span class="line"></span><br><span class="line">a = np.zeros((n_a, m, T_x))</span><br><span class="line">c = np.zeros((n_a, m, T_x))</span><br><span class="line">y = np.zeros((n_y, m, T_x))</span><br><span class="line"></span><br><span class="line">a_next = a0</span><br><span class="line">c_next = c[:,:,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(T_x):</span><br><span class="line">    xt = x[:,:,t]</span><br><span class="line">    a_next, c_next, yt, cache = lstm_cell_forward(xt, a_next, c_next, parameters)</span><br><span class="line">    a[:,:,t] = a_next</span><br><span class="line">    c[:,:,t]  = c_next</span><br><span class="line">    y[:,:,t] = yt</span><br><span class="line">    caches.append(cache)</span><br></pre></td></tr></table></figure><p>…</p><p>Too much code and didn’t have time to record them as I have got the Certificate.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Wow, I finished them before the deadline.&lt;/p&gt;
&lt;p&gt;😃😃😃&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.coursera.org/account/accomplishments/specialization/8BQ77WBNDVQH&quot;&gt;Deep Learning Specialization Certificate&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Week-1&quot;&gt;&lt;a href=&quot;#Week-1&quot; class=&quot;headerlink&quot; title=&quot;Week 1&quot;&gt;&lt;/a&gt;Week 1&lt;/h2&gt;&lt;h3 id=&quot;Building-a-recurrent-neural-network-step-by-step&quot;&gt;&lt;a href=&quot;#Building-a-recurrent-neural-network-step-by-step&quot; class=&quot;headerlink&quot; title=&quot;Building a recurrent neural network - step by step&quot;&gt;&lt;/a&gt;Building a recurrent neural network - step by step&lt;/h3&gt;&lt;h3 id=&quot;1-1-RNN-cell&quot;&gt;&lt;a href=&quot;#1-1-RNN-cell&quot; class=&quot;headerlink&quot; title=&quot;1.1 - RNN cell&quot;&gt;&lt;/a&gt;1.1 - RNN cell&lt;/h3&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a_next = np.tanh(np.matmul(Waa, a_prev) + np.matmul(Wax, xt) + ba)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yt_pred = softmax(np.matmul(Wya, a_next) + by)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Deep Learning" scheme="https://leihao0.github.io/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Deep Learning Course 4</title>
    <link href="https://leihao0.github.io/Deep-Learning-Course-4/"/>
    <id>https://leihao0.github.io/Deep-Learning-Course-4/</id>
    <published>2019-11-30T11:08:14.000Z</published>
    <updated>2020-09-09T11:16:01.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Week-1-Convolutional-Neural-Networks"><a href="#Week-1-Convolutional-Neural-Networks" class="headerlink" title="Week 1 - Convolutional Neural Networks"></a>Week 1 - Convolutional Neural Networks</h2><h2 id="Step-by-Step"><a href="#Step-by-Step" class="headerlink" title="Step by Step"></a>Step by Step</h2><h3 id="3-1-Zero-Padding"><a href="#3-1-Zero-Padding" class="headerlink" title="3.1 - Zero-Padding"></a>3.1 - Zero-Padding</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_pad = np.pad(X, ((<span class="number">0</span>, <span class="number">0</span>), (pad, pad), (pad, pad), (<span class="number">0</span>,<span class="number">0</span>)), mode=<span class="string">'constant'</span>, constant_values = (<span class="number">0</span>,<span class="number">0</span>))</span><br></pre></td></tr></table></figure><h3 id="3-2-Single-step-of-convolution"><a href="#3-2-Single-step-of-convolution" class="headerlink" title="3.2 - Single step of convolution"></a>3.2 - Single step of convolution</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = a_slice_prev * W</span><br><span class="line">Z = np.sum(s)</span><br><span class="line">Z = Z + np.sum(b)</span><br></pre></td></tr></table></figure><h3 id="3-3-Convolutional-Neural-Networks-Forward-pass"><a href="#3-3-Convolutional-Neural-Networks-Forward-pass" class="headerlink" title="3.3 - Convolutional Neural Networks - Forward pass"></a>3.3 - Convolutional Neural Networks - Forward pass</h3><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="32.029ex" height="5.011ex" role="img" focusable="false" viewBox="0 -1518.1 14156.7 2215.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g><g data-mml-node="mo" transform="translate(1555.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2611.5, 0)"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mfrac" transform="translate(3055.5, 0)"><g data-mml-node="mrow" transform="translate(220, 813.1)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(600, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="TeXAtom" transform="translate(831, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(954, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1420, 0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(2447.7, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3447.9, 0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(4220.1, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(5220.3, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(5942.6, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(6942.8, 0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(7445.8, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(7974.8, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g><g data-mml-node="mrow" transform="translate(3161.4, -686)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1281, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1626, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(2146, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g><rect width="8694.8" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(11990.3, 0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g><g data-mml-node="mo" transform="translate(12656.5, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(13656.7, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="32.465ex" height="5.011ex" role="img" focusable="false" viewBox="0 -1518.1 14349.7 2215.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g></g><g data-mml-node="mo" transform="translate(1668.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2724.6, 0)"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mfrac" transform="translate(3168.6, 0)"><g data-mml-node="mrow" transform="translate(220, 813.1)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(600, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(944, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(954, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1420, 0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(2527.6, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3527.8, 0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(4300, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(5300.3, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(6022.5, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(7022.7, 0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(7525.7, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(8054.7, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g><g data-mml-node="mrow" transform="translate(3201.3, -686)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1281, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1626, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(2146, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g><rect width="8774.7" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(12183.3, 0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g><g data-mml-node="mo" transform="translate(12849.5, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(13849.7, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="45.029ex" height="1.97ex" role="img" focusable="false" viewBox="0 -705 19903 870.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g><g data-mml-node="mo" transform="translate(1465.2, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mtext" transform="translate(2521, 0)"><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(556, 0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1112, 0)"></path><path data-c="62" d="M307 -11Q234 -11 168 55L158 37Q156 34 153 28T147 17T143 10L138 1L118 0H98V298Q98 599 97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V543Q179 391 180 391L183 394Q186 397 192 401T207 411T228 421T254 431T286 439T323 442Q401 442 461 379T522 216Q522 115 458 52T307 -11ZM182 98Q182 97 187 90T196 79T206 67T218 55T233 44T250 35T271 29T295 26Q330 26 363 46T412 113Q424 148 424 212Q424 287 412 323Q385 405 300 405Q270 405 239 390T188 347L182 339V98Z" transform="translate(1945, 0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(2501, 0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(2945, 0)"></path><path data-c="20" d="" transform="translate(3337, 0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(3587, 0)"></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(4087, 0)"></path><path data-c="20" d="" transform="translate(4393, 0)"></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(4643, 0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(4949, 0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(5227, 0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(5505, 0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(5894, 0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(6338, 0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(6730, 0)"></path><path data-c="20" d="" transform="translate(7124, 0)"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(7374, 0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(7930, 0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(8324, 0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(8768, 0)"></path><path data-c="20" d="" transform="translate(9324, 0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(9574, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(9852, 0)"></path><path data-c="20" d="" transform="translate(10408, 0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(10658, 0)"></path><path data-c="68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(11047, 0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(11603, 0)"></path><path data-c="20" d="" transform="translate(12047, 0)"></path><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(12297, 0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(12741, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(13241, 0)"></path><path data-c="76" d="M338 431Q344 429 422 429Q479 429 503 431H508V385H497Q439 381 423 345Q421 341 356 172T288 -2Q283 -11 263 -11Q244 -11 239 -2Q99 359 98 364Q93 378 82 381T43 385H19V431H25L33 430Q41 430 53 430T79 430T104 429T122 428Q217 428 232 431H240V385H226Q187 384 184 370Q184 366 235 234L286 102L377 341V349Q377 363 367 372T349 383T335 385H331V431H338Z" transform="translate(13797, 0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(14325, 0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(14825, 0)"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(15103, 0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(15659, 0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(16048, 0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(16326, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(16826, 0)"></path></g></g></g></svg></mjx-container></p><a id="more"></a><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(m, n_H_prev, n_W_prev, n_C_prev) = A_prev.shape</span><br><span class="line">(f, f, n_C_prev, n_C) = W.shape</span><br><span class="line"></span><br><span class="line">stride = hparameters[<span class="string">"stride"</span>]</span><br><span class="line">pad = hparameters[<span class="string">"pad"</span>]</span><br><span class="line"></span><br><span class="line">n_H = int((n_H_prev - f + <span class="number">2</span> * pad) / stride) + <span class="number">1</span></span><br><span class="line">n_W = int((n_W_prev - f + <span class="number">2</span> * pad) / stride) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">Z = np.zeros((m, n_H, n_W, n_C))</span><br><span class="line"></span><br><span class="line">A_prev_pad = zero_pad(A_prev, pad)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">    a_prev_pad = A_prev_pad[i]</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> range(n_H):</span><br><span class="line">        vert_start = h * stride</span><br><span class="line">        vert_end = vert_start + f</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> range(n_W):</span><br><span class="line">            horiz_start = w * stride</span><br><span class="line">            horiz_end = horiz_start + f</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(n_C):</span><br><span class="line">                a_slice_prev = a_prev_pad[vert_start:vert_end, horiz_start:horiz_end, :]</span><br><span class="line"></span><br><span class="line">                weights = W[:, :, :, c]</span><br><span class="line">                biases = b[:, :, :, c]</span><br><span class="line">                Z[i, h, w, c] =  conv_single_step(a_slice_prev, weights, biases)</span><br></pre></td></tr></table></figure><h3 id="4-1-Forward-Pooling"><a href="#4-1-Forward-Pooling" class="headerlink" title="4.1 - Forward Pooling"></a>4.1 - Forward Pooling</h3><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="21.855ex" height="5.011ex" role="img" focusable="false" viewBox="0 -1518.1 9659.8 2215.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g><g data-mml-node="mo" transform="translate(1555.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2611.5, 0)"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mfrac" transform="translate(3055.5, 0)"><g data-mml-node="mrow" transform="translate(220, 813.1)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(600, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="TeXAtom" transform="translate(831, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(954, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1420, 0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(2447.7, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3447.9, 0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g></g><g data-mml-node="mrow" transform="translate(913, -686)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1281, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1626, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(2146, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g><rect width="4197.9" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(7493.4, 0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g><g data-mml-node="mo" transform="translate(8159.6, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(9159.8, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="22.292ex" height="5.011ex" role="img" focusable="false" viewBox="0 -1518.1 9852.9 2215.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g></g><g data-mml-node="mo" transform="translate(1668.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2724.6, 0)"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mfrac" transform="translate(3168.6, 0)"><g data-mml-node="mrow" transform="translate(220, 813.1)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(600, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(944, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(954, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1420, 0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(2527.6, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3527.8, 0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g></g><g data-mml-node="mrow" transform="translate(952.9, -686)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1281, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1626, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(2146, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g><rect width="4277.8" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(7686.4, 0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g><g data-mml-node="mo" transform="translate(8352.6, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(9352.9, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.799ex" xmlns="http://www.w3.org/2000/svg" width="10.553ex" height="2.118ex" role="img" focusable="false" viewBox="0 -583 4664.4 936.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g><g data-mml-node="mo" transform="translate(1465.2, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2521, 0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(600, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(715, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(954, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1420, 0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></g></g></g></g></svg></mjx-container></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> range(n_H):</span><br><span class="line">        vert_start = h * stride</span><br><span class="line">        vert_end = vert_start + f</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> range(n_W):</span><br><span class="line">            horiz_start = w * stride</span><br><span class="line">            horiz_end = horiz_start + f</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range (n_C):</span><br><span class="line">                a_prev_slice = A_prev[i, vert_start:vert_end, horiz_start:horiz_end, c]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> mode == <span class="string">"max"</span>:</span><br><span class="line">                    A[i, h, w, c] = np.max(a_prev_slice)</span><br><span class="line">                <span class="keyword">elif</span> mode == <span class="string">"average"</span>:</span><br><span class="line">                    A[i, h, w, c] = np.mean(a_prev_slice)</span><br></pre></td></tr></table></figure><h3 id="5-2-Pooling-layer-backward-pass"><a href="#5-2-Pooling-layer-backward-pass" class="headerlink" title="5.2 Pooling layer - backward pass"></a>5.2 Pooling layer - backward pass</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mask = np.max(x) == x</span><br></pre></td></tr></table></figure><h3 id="5-2-2-Average-pooling-backward-pass"><a href="#5-2-2-Average-pooling-backward-pass" class="headerlink" title="5.2.2 - Average pooling - backward pass"></a>5.2.2 - Average pooling - backward pass</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(n_H, n_W) = shape</span><br><span class="line">average = dz / (n_H * n_W)</span><br><span class="line">a = np.ones(shape) * average</span><br></pre></td></tr></table></figure><h3 id="5-2-3-Putting-it-together-Pooling-backward"><a href="#5-2-3-Putting-it-together-Pooling-backward" class="headerlink" title="5.2.3 Putting it together: Pooling backward"></a>5.2.3 Putting it together: Pooling backward</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">(A_prev, hparameters) = cache</span><br><span class="line"></span><br><span class="line">stride = hparameters[<span class="string">"stride"</span>]</span><br><span class="line">f = hparameters[<span class="string">"f"</span>]</span><br><span class="line"></span><br><span class="line">m, n_H_prev, n_W_prev, n_C_prev = A_prev.shape</span><br><span class="line">m, n_H, n_W, n_C = dA.shape</span><br><span class="line"></span><br><span class="line">dA_prev = np.zeros(A_prev.shape)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line"></span><br><span class="line">    a_prev = A_prev[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> range(n_H):</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> range(n_W):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(n_C):</span><br><span class="line"></span><br><span class="line">                vert_start = h * stride</span><br><span class="line">                vert_end = vert_start + f</span><br><span class="line">                horiz_start = w * stride</span><br><span class="line">                horiz_end = horiz_start + f</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> mode == <span class="string">"max"</span>:</span><br><span class="line">                    a_prev_slice = a_prev[vert_start:vert_end, horiz_start:horiz_end, c]</span><br><span class="line">                    mask = create_mask_from_window(a_prev_slice)</span><br><span class="line"></span><br><span class="line">                    dA_prev[i, vert_start: vert_end, horiz_start: horiz_end, c] += (dA[i, h, w, c] * mask)</span><br><span class="line">                <span class="keyword">elif</span> mode == <span class="string">"average"</span>:</span><br><span class="line">                    da = dA[i, h, w, c]</span><br><span class="line">                    shape = (f, f)</span><br><span class="line">                    dA_prev[i, vert_start: vert_end, horiz_start: horiz_end, c] += distribute_value(da, shape)</span><br></pre></td></tr></table></figure><h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><h3 id="1-1-Create-placeholders"><a href="#1-1-Create-placeholders" class="headerlink" title="1.1 - Create placeholders"></a>1.1 - Create placeholders</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X = tf.placeholder(tf.float32, shape=[<span class="literal">None</span>, n_H0, n_W0, n_C0])</span><br><span class="line">Y =  tf.placeholder(tf.float32, shape=[<span class="literal">None</span>, n_y])</span><br></pre></td></tr></table></figure><h3 id="1-2-Initialize-parameters"><a href="#1-2-Initialize-parameters" class="headerlink" title="1.2 - Initialize parameters"></a>1.2 - Initialize parameters</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">W1 = tf.get_variable(<span class="string">"W1"</span>, [<span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">8</span>], initializer = tf.contrib.layers.xavier_initializer(seed = <span class="number">0</span>))</span><br><span class="line">W2 = tf.get_variable(<span class="string">"W2"</span>, [<span class="number">2</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">16</span>], initializer = tf.contrib.layers.xavier_initializer(seed = <span class="number">0</span>))</span><br></pre></td></tr></table></figure><h3 id="1-3-Forward-propagation"><a href="#1-3-Forward-propagation" class="headerlink" title="1.3 - Forward propagation"></a>1.3 - Forward propagation</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Z1 = tf.nn.conv2d(X, W1, strides = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], padding = <span class="string">'SAME'</span>)</span><br><span class="line">A1 = tf.nn.relu(Z1)</span><br><span class="line">P1 = tf.nn.max_pool(A1, ksize = [<span class="number">1</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">1</span>], strides = [<span class="number">1</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">1</span>], padding = <span class="string">'SAME'</span>)</span><br><span class="line">Z2 = tf.nn.conv2d(P1, W2, strides = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], padding = <span class="string">'SAME'</span>)</span><br><span class="line">A2 = tf.nn.relu(Z2)</span><br><span class="line">P2 = tf.nn.max_pool(A2, ksize = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">1</span>], strides = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">1</span>], padding = <span class="string">'SAME'</span>)</span><br><span class="line">F = tf.contrib.layers.flatten(P2)</span><br><span class="line">Z3 = tf.contrib.layers.fully_connected(F, <span class="number">6</span>, activation_fn=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h3 id="1-4-Compute-cost"><a href="#1-4-Compute-cost" class="headerlink" title="1.4 - Compute cost"></a>1.4 - Compute cost</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = Z3, labels = Y))</span><br></pre></td></tr></table></figure><h3 id="1-5-Model"><a href="#1-5-Model" class="headerlink" title="1.5 Model"></a>1.5 Model</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">X, Y = create_placeholders(n_H0, n_W0, n_C0, n_y)</span><br><span class="line">parameters = initialize_parameters()</span><br><span class="line">Z3 = forward_propagation(X, parameters)</span><br><span class="line">cost = compute_cost(Z3, Y)</span><br><span class="line">optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost)</span><br><span class="line"><span class="comment">### ...</span></span><br><span class="line">    _ , temp_cost = sess.run([optimizer, cost], feed_dict={X: minibatch_X, Y: minibatch_Y})</span><br></pre></td></tr></table></figure><h2 id="Week-2-Residual-Networks"><a href="#Week-2-Residual-Networks" class="headerlink" title="Week 2 - Residual Networks"></a>Week 2 - Residual Networks</h2><h3 id="2-1-The-identity-block"><a href="#2-1-The-identity-block" class="headerlink" title="2.1 - The identity block"></a>2.1 - The identity block</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">X = Conv2D(filters = F2, kernel_size = (f, f), strides = (<span class="number">1</span>,<span class="number">1</span>), padding = <span class="string">'same'</span>, name = conv_name_base + <span class="string">'2b'</span>, kernel_initializer = glorot_uniform(seed=<span class="number">0</span>))(X)</span><br><span class="line">X = BatchNormalization(axis = <span class="number">3</span>, name = bn_name_base + <span class="string">'2b'</span>)(X)</span><br><span class="line">X = Activation(<span class="string">'relu'</span>)(X)</span><br><span class="line"></span><br><span class="line">X = Conv2D(filters = F3, kernel_size = (<span class="number">1</span>, <span class="number">1</span>), strides = (<span class="number">1</span>,<span class="number">1</span>), padding = <span class="string">'valid'</span>, name = conv_name_base + <span class="string">'2c'</span>, kernel_initializer = glorot_uniform(seed=<span class="number">0</span>))(X)</span><br><span class="line">X = BatchNormalization(axis = <span class="number">3</span>, name = bn_name_base + <span class="string">'2c'</span>)(X)</span><br><span class="line"></span><br><span class="line">X = layers.Add()([X, X_shortcut])</span><br><span class="line">X = Activation(<span class="string">'relu'</span>)(X)</span><br></pre></td></tr></table></figure><h3 id="2-2-The-convolutional-block"><a href="#2-2-The-convolutional-block" class="headerlink" title="2.2 - The convolutional block"></a>2.2 - The convolutional block</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">X = Conv2D(F2, (f, f), strides = (<span class="number">1</span>,<span class="number">1</span>), padding = <span class="string">'same'</span>, name = conv_name_base + <span class="string">'2b'</span>, kernel_initializer = glorot_uniform(seed=<span class="number">0</span>))(X)</span><br><span class="line">X = BatchNormalization(axis = <span class="number">3</span>, name = bn_name_base + <span class="string">'2b'</span>)(X)</span><br><span class="line">X = Activation(<span class="string">'relu'</span>)(X)</span><br><span class="line"></span><br><span class="line">X = Conv2D(F3, (<span class="number">1</span>, <span class="number">1</span>), strides = (<span class="number">1</span>,<span class="number">1</span>), name = conv_name_base + <span class="string">'2c'</span>, kernel_initializer = glorot_uniform(seed=<span class="number">0</span>))(X)</span><br><span class="line">X = BatchNormalization(axis = <span class="number">3</span>, name = bn_name_base + <span class="string">'2c'</span>)(X)</span><br><span class="line"></span><br><span class="line">X_shortcut = Conv2D(F3, (<span class="number">1</span>, <span class="number">1</span>), strides = (s,s), name = conv_name_base + <span class="string">'1'</span>, kernel_initializer = glorot_uniform(seed=<span class="number">0</span>))(X_shortcut)</span><br><span class="line">X_shortcut = BatchNormalization(axis = <span class="number">3</span>, name = bn_name_base + <span class="string">'1'</span>)(X_shortcut)</span><br><span class="line"></span><br><span class="line">X = layers.Add()([X, X_shortcut])</span><br><span class="line">X = Activation(<span class="string">'relu'</span>)(X)</span><br></pre></td></tr></table></figure><h3 id="3-Building-your-first-ResNet-model-50-layers"><a href="#3-Building-your-first-ResNet-model-50-layers" class="headerlink" title="3 - Building your first ResNet model (50 layers)"></a>3 - Building your first ResNet model (50 layers)</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">X = convolutional_block(X, f = <span class="number">3</span>, filters = [<span class="number">128</span>, <span class="number">128</span>, <span class="number">512</span>], stage = <span class="number">3</span>, block=<span class="string">'a'</span>, s = <span class="number">2</span>)</span><br><span class="line">X = identity_block(X, <span class="number">3</span>, [<span class="number">128</span>, <span class="number">128</span>, <span class="number">512</span>], stage=<span class="number">3</span>, block=<span class="string">'b'</span>)</span><br><span class="line">X = identity_block(X, <span class="number">3</span>, [<span class="number">128</span>, <span class="number">128</span>, <span class="number">512</span>], stage=<span class="number">3</span>, block=<span class="string">'c'</span>)</span><br><span class="line">X = identity_block(X, <span class="number">3</span>, [<span class="number">128</span>, <span class="number">128</span>, <span class="number">512</span>], stage=<span class="number">3</span>, block=<span class="string">'d'</span>)</span><br><span class="line"></span><br><span class="line">X = convolutional_block(X, f = <span class="number">3</span>, filters = [<span class="number">256</span>, <span class="number">256</span>, <span class="number">1024</span>], stage = <span class="number">4</span>, block=<span class="string">'a'</span>, s = <span class="number">2</span>)</span><br><span class="line">X = identity_block(X, <span class="number">3</span>, [<span class="number">256</span>, <span class="number">256</span>, <span class="number">1024</span>], stage=<span class="number">4</span>, block=<span class="string">'b'</span>)</span><br><span class="line">X = identity_block(X, <span class="number">3</span>, [<span class="number">256</span>, <span class="number">256</span>, <span class="number">1024</span>], stage=<span class="number">4</span>, block=<span class="string">'c'</span>)</span><br><span class="line">X = identity_block(X, <span class="number">3</span>, [<span class="number">256</span>, <span class="number">256</span>, <span class="number">1024</span>], stage=<span class="number">4</span>, block=<span class="string">'d'</span>)</span><br><span class="line">X = identity_block(X, <span class="number">3</span>, [<span class="number">256</span>, <span class="number">256</span>, <span class="number">1024</span>], stage=<span class="number">4</span>, block=<span class="string">'e'</span>)</span><br><span class="line">X = identity_block(X, <span class="number">3</span>, [<span class="number">256</span>, <span class="number">256</span>, <span class="number">1024</span>], stage=<span class="number">4</span>, block=<span class="string">'f'</span>)</span><br><span class="line"></span><br><span class="line">X = convolutional_block(X, f = <span class="number">3</span>, filters = [<span class="number">512</span>, <span class="number">512</span>, <span class="number">2048</span>], stage = <span class="number">5</span>, block=<span class="string">'a'</span>, s = <span class="number">2</span>)</span><br><span class="line">X = identity_block(X, <span class="number">3</span>, [<span class="number">512</span>, <span class="number">512</span>, <span class="number">2048</span>], stage=<span class="number">5</span>, block=<span class="string">'b'</span>)</span><br><span class="line">X = identity_block(X, <span class="number">3</span>, [<span class="number">512</span>, <span class="number">512</span>, <span class="number">2048</span>], stage=<span class="number">5</span>, block=<span class="string">'c'</span>)</span><br><span class="line"></span><br><span class="line">X = AveragePooling2D((<span class="number">2</span>,<span class="number">2</span>), name=<span class="string">'avg_pool'</span>)(X)</span><br></pre></td></tr></table></figure><h2 id="Week-3-Autonomous-driving-Car-detection"><a href="#Week-3-Autonomous-driving-Car-detection" class="headerlink" title="Week 3 - Autonomous driving - Car detection"></a>Week 3 - Autonomous driving - Car detection</h2><h3 id="2-1-Model-details"><a href="#2-1-Model-details" class="headerlink" title="2.1 - Model details"></a>2.1 - Model details</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">box_scores = np.multiply(box_confidence, box_class_probs)</span><br><span class="line"></span><br><span class="line">box_classes = K.argmax(box_scores, axis=<span class="number">-1</span>)</span><br><span class="line">box_class_scores = K.max(box_scores, axis=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">filtering_mask = K.greater_equal(box_class_scores, threshold)</span><br><span class="line"></span><br><span class="line">scores = tf.boolean_mask(box_class_scores, filtering_mask)</span><br><span class="line">boxes = tf.boolean_mask(boxes, filtering_mask)</span><br><span class="line">classes = tf.boolean_mask(box_classes, filtering_mask)</span><br></pre></td></tr></table></figure><h3 id="2-3-Non-max-suppression"><a href="#2-3-Non-max-suppression" class="headerlink" title="2.3 - Non-max suppression"></a>2.3 - Non-max suppression</h3><h4 id="iou"><a href="#iou" class="headerlink" title="iou"></a>iou</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">xi1 = max(box1_x1, box2_x1)</span><br><span class="line">yi1 = max(box1_y1, box2_y1)</span><br><span class="line">xi2 = min(box1_x2, box2_x2)</span><br><span class="line">yi2 = min(box1_y2, box2_y2)</span><br><span class="line">inter_width = xi2 - xi1</span><br><span class="line">inter_height = yi2 - yi1</span><br><span class="line">inter_area = max(inter_width, <span class="number">0</span>) * max(inter_height, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">box1_area = (box1_y2 - box1_y1) * (box1_x2 - box1_x1)</span><br><span class="line">box2_area = (box2_y2 - box2_y1) * (box2_x2 - box2_x1)</span><br><span class="line">union_area = (box1_area + box2_area) - inter_area</span><br><span class="line"></span><br><span class="line">iou = inter_area / union_area</span><br></pre></td></tr></table></figure><h4 id="yolo-non-max-suppression"><a href="#yolo-non-max-suppression" class="headerlink" title="yolo_non_max_suppression"></a>yolo_non_max_suppression</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nms_indices = tf.image.non_max_suppression(boxes, scores, max_boxes_tensor, iou_threshold=iou_threshold)</span><br><span class="line"></span><br><span class="line">scores = K.gather(scores, nms_indices)</span><br><span class="line">boxes = K.gather(boxes, nms_indices)</span><br><span class="line">classes = K.gather(classes, nms_indices)</span><br></pre></td></tr></table></figure><h3 id="2-4-Wrapping-up-the-filtering"><a href="#2-4-Wrapping-up-the-filtering" class="headerlink" title="2.4 Wrapping up the filtering"></a>2.4 Wrapping up the filtering</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">box_confidence, box_xy, box_wh, box_class_probs = yolo_outputs</span><br><span class="line"></span><br><span class="line">boxes = yolo_boxes_to_corners(box_xy, box_wh)</span><br><span class="line"></span><br><span class="line">scores, boxes, classes = yolo_filter_boxes(box_confidence, boxes, box_class_probs, threshold = score_threshold)</span><br><span class="line"></span><br><span class="line">boxes = scale_boxes(boxes, image_shape)</span><br><span class="line"></span><br><span class="line">scores, boxes, classes = yolo_non_max_suppression(scores, boxes, classes, max_boxes = max_boxes, iou_threshold = iou_threshold)</span><br></pre></td></tr></table></figure><h3 id="3-5-Run-the-graph-on-an-image"><a href="#3-5-Run-the-graph-on-an-image" class="headerlink" title="3.5 - Run the graph on an image"></a>3.5 - Run the graph on an image</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out_scores, out_boxes, out_classes = sess.run([scores, boxes, classes], feed_dict={yolo_model.input: image_data, K.learning_phase(): <span class="number">0</span>})</span><br></pre></td></tr></table></figure><h2 id="Week-4"><a href="#Week-4" class="headerlink" title="Week 4"></a>Week 4</h2><h3 id="Deep-Learning-amp-Art-Neural-Style-Transfer"><a href="#Deep-Learning-amp-Art-Neural-Style-Transfer" class="headerlink" title="Deep Learning & Art: Neural Style Transfer"></a>Deep Learning &amp; Art: Neural Style Transfer</h3><h4 id="3-1-Computing-the-content-cost"><a href="#3-1-Computing-the-content-cost" class="headerlink" title="3.1 - Computing the content cost"></a>3.1 - Computing the content cost</h4><p><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 64.612ex"><svg style="vertical-align: -2.328ex; min-width: 64.612ex" xmlns="http://www.w3.org/2000/svg" width="100%" height="5.786ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0) scale(0.0181) translate(0, -1528.8)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(2078, 0) translate(-2078, 0)"><g transform="translate(0 1528.8) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="12201.3 -1528.8 1 2557.5"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0, 186.8)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="TeXAtom" transform="translate(555, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(433, 0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(918, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1518, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1879, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2345, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2945, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2942.7, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3331.7, 0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(4091.7, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4536.4, 0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(5322.4, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5989.1, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(7044.9, 0)"><g data-mml-node="mn" transform="translate(3981.8, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220, -686)"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(722.2, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msub" transform="translate(1722.4, 0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g><g data-mml-node="mo" transform="translate(3222.6, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msub" transform="translate(4222.8, 0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g></g><g data-mml-node="mo" transform="translate(5836.1, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msub" transform="translate(6836.3, 0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g></g><rect width="8223.7" height="60" x="120" y="220"></rect></g><g data-mml-node="munder" transform="translate(15675.3, 0)"><g data-mml-node="mo" transform="translate(764, 0)"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(0, -1107.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mtext"><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(500, 0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(778, 0)"></path><path data-c="20" d="" transform="translate(1056, 0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(1306, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1750, 0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(2306, 0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(2695, 0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(3087, 0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(3365, 0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(3809, 0)"></path></g></g></g><g data-mml-node="mo" transform="translate(18647.2, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(19036.2, 0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(529, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1149, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(20925, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(21925.2, 0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(529, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1175, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="msup" transform="translate(23610.1, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(389, 413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="1278 -1528.8 1 2557.5"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn-1" transform="translate(0, 186.8)"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(389, 0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(889, 0)"></path></g></g></g></svg></g></g></g></g></svg></mjx-container></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a_C_unrolled = tf.transpose(a_C)</span><br><span class="line">a_G_unrolled = tf.transpose(a_G)</span><br><span class="line"></span><br><span class="line">J_content = (<span class="number">1</span>/ (<span class="number">4</span>* n_H * n_W * n_C)) * tf.reduce_sum(tf.pow((a_G_unrolled - a_C_unrolled), <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h4 id="3-2-1-Style-matrix"><a href="#3-2-1-Style-matrix" class="headerlink" title="3.2.1 - Style matrix"></a>3.2.1 - Style matrix</h4><p>$$\mathbf{G}<em>{gram} = \mathbf{A}</em>{unrolled} \mathbf{A}_{unrolled}^T$$</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GA = tf.matmul(A, tf.transpose(A))</span><br></pre></td></tr></table></figure><h4 id="3-2-2-Style-cost"><a href="#3-2-2-Style-cost" class="headerlink" title="3.2.2 - Style cost"></a>3.2.2 - Style cost</h4><p>$$J_{style}^{[l]}(S,G) = \frac{1}{4 \times {n_C}^2 \times (n_H \times n_W)^2} \sum <em>{i=1}^{n_C}\sum</em>{j=1}^{n_C}(G^{(S)}<em>{(gram)i,j} - G^{(G)}</em>{(gram)i,j})^2\tag{2} $$</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">m, n_H, n_W, n_C = a_G.get_shape().as_list()</span><br><span class="line"></span><br><span class="line">a_S = tf.transpose(tf.reshape(a_S, [n_H*n_W, n_C]))</span><br><span class="line">a_G = tf.transpose(tf.reshape(a_G, [n_H*n_W, n_C]))</span><br><span class="line"></span><br><span class="line">GS = gram_matrix(a_S)</span><br><span class="line">GG = gram_matrix(a_G)</span><br><span class="line"></span><br><span class="line">J_style_layer = <span class="number">1.</span>/(<span class="number">4</span> * n_C**<span class="number">2</span> * (n_H*n_W)**<span class="number">2</span>) * tf.reduce_sum(tf.pow((GS - GG), <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h4 id="3-2-3-Style-Weights"><a href="#3-2-3-Style-Weights" class="headerlink" title="3.2.3 Style Weights"></a>3.2.3 Style Weights</h4><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.667ex" xmlns="http://www.w3.org/2000/svg" width="37.11ex" height="2.364ex" role="img" focusable="false" viewBox="0 -750 16402.6 1045"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(633, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1022, 0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1808, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2474.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3530.6, 0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="msub" transform="translate(4170.6, 0)"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="TeXAtom" transform="translate(555, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(433, 0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(918, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1518, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1879, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2345, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2945, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7113.3, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7502.3, 0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(8262.3, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(8706.9, 0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(9492.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(10104.1, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(11104.4, 0)"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="msub" transform="translate(11670.4, 0)"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="TeXAtom" transform="translate(555, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830, 0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1320, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1618, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g><g data-mml-node="mo" transform="translate(13749, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(14138, 0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(14783, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(15227.6, 0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(16013.6, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">J = alpha * J_content + beta * J_style</span><br></pre></td></tr></table></figure><h3 id="Face-Recognition"><a href="#Face-Recognition" class="headerlink" title="Face Recognition"></a>Face Recognition</h3><h4 id="1-2-The-Triplet-Loss"><a href="#1-2-The-Triplet-Loss" class="headerlink" title="1.2 - The Triplet Loss"></a>1.2 - The Triplet Loss</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pos_dist = tf.reduce_sum(tf.square(tf.subtract(anchor, positive)), axis=<span class="literal">None</span>)</span><br><span class="line">neg_dist = tf.reduce_sum(tf.square(tf.subtract(anchor, negative)), axis=<span class="literal">None</span>)</span><br><span class="line">basic_loss = tf.add(tf.subtract(pos_dist, neg_dist), alpha)</span><br><span class="line"></span><br><span class="line">loss = tf.reduce_sum(tf.maximum(basic_loss, <span class="number">0</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Week-1-Convolutional-Neural-Networks&quot;&gt;&lt;a href=&quot;#Week-1-Convolutional-Neural-Networks&quot; class=&quot;headerlink&quot; title=&quot;Week 1 - Convolutional Neural Networks&quot;&gt;&lt;/a&gt;Week 1 - Convolutional Neural Networks&lt;/h2&gt;&lt;h2 id=&quot;Step-by-Step&quot;&gt;&lt;a href=&quot;#Step-by-Step&quot; class=&quot;headerlink&quot; title=&quot;Step by Step&quot;&gt;&lt;/a&gt;Step by Step&lt;/h2&gt;&lt;h3 id=&quot;3-1-Zero-Padding&quot;&gt;&lt;a href=&quot;#3-1-Zero-Padding&quot; class=&quot;headerlink&quot; title=&quot;3.1 - Zero-Padding&quot;&gt;&lt;/a&gt;3.1 - Zero-Padding&lt;/h3&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;X_pad = np.pad(X, ((&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), (pad, pad), (pad, pad), (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)), mode=&lt;span class=&quot;string&quot;&gt;&#39;constant&#39;&lt;/span&gt;, constant_values = (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;3-2-Single-step-of-convolution&quot;&gt;&lt;a href=&quot;#3-2-Single-step-of-convolution&quot; class=&quot;headerlink&quot; title=&quot;3.2 - Single step of convolution&quot;&gt;&lt;/a&gt;3.2 - Single step of convolution&lt;/h3&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;s = a_slice_prev * W&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Z = np.sum(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Z = Z + np.sum(b)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;3-3-Convolutional-Neural-Networks-Forward-pass&quot;&gt;&lt;a href=&quot;#3-3-Convolutional-Neural-Networks-Forward-pass&quot; class=&quot;headerlink&quot; title=&quot;3.3 - Convolutional Neural Networks - Forward pass&quot;&gt;&lt;/a&gt;3.3 - Convolutional Neural Networks - Forward pass&lt;/h3&gt;&lt;p&gt;&lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; display=&quot;true&quot;&gt;&lt;svg style=&quot;vertical-align: -1.577ex&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;32.029ex&quot; height=&quot;5.011ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -1518.1 14156.7 2215.1&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D45B&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(600, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;1D43B&quot; d=&quot;M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1555.7, 0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2611.5, 0)&quot;&gt;&lt;path data-c=&quot;230A&quot; d=&quot;M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mfrac&quot; transform=&quot;translate(3055.5, 0)&quot;&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(220, 813.1)&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D45B&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(600, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D43B&quot; d=&quot;M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(831, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D45D&quot; d=&quot;M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(503, 0)&quot;&gt;&lt;path data-c=&quot;1D45F&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(954, 0)&quot;&gt;&lt;path data-c=&quot;1D452&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1420, 0)&quot;&gt;&lt;path data-c=&quot;1D463&quot; d=&quot;M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2447.7, 0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3447.9, 0)&quot;&gt;&lt;path data-c=&quot;1D453&quot; d=&quot;M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4220.1, 0)&quot;&gt;&lt;path data-c=&quot;2B&quot; d=&quot;M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(5220.3, 0)&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5942.6, 0)&quot;&gt;&lt;path data-c=&quot;D7&quot; d=&quot;M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6942.8, 0)&quot;&gt;&lt;path data-c=&quot;1D45D&quot; d=&quot;M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7445.8, 0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7974.8, 0)&quot;&gt;&lt;path data-c=&quot;1D451&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(3161.4, -686)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D460&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(469, 0)&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(830, 0)&quot;&gt;&lt;path data-c=&quot;1D45F&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1281, 0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1626, 0)&quot;&gt;&lt;path data-c=&quot;1D451&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2146, 0)&quot;&gt;&lt;path data-c=&quot;1D452&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;rect width=&quot;8694.8&quot; height=&quot;60&quot; x=&quot;120&quot; y=&quot;220&quot;&gt;&lt;/rect&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(11990.3, 0)&quot;&gt;&lt;path data-c=&quot;230B&quot; d=&quot;M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(12656.5, 0)&quot;&gt;&lt;path data-c=&quot;2B&quot; d=&quot;M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(13656.7, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/mjx-container&gt;&lt;br&gt;&lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; display=&quot;true&quot;&gt;&lt;svg style=&quot;vertical-align: -1.577ex&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;32.465ex&quot; height=&quot;5.011ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -1518.1 14349.7 2215.1&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D45B&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(600, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;1D44A&quot; d=&quot;M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1668.8, 0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2724.6, 0)&quot;&gt;&lt;path data-c=&quot;230A&quot; d=&quot;M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mfrac&quot; transform=&quot;translate(3168.6, 0)&quot;&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(220, 813.1)&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D45B&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(600, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D44A&quot; d=&quot;M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(944, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D45D&quot; d=&quot;M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(503, 0)&quot;&gt;&lt;path data-c=&quot;1D45F&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(954, 0)&quot;&gt;&lt;path data-c=&quot;1D452&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1420, 0)&quot;&gt;&lt;path data-c=&quot;1D463&quot; d=&quot;M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2527.6, 0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3527.8, 0)&quot;&gt;&lt;path data-c=&quot;1D453&quot; d=&quot;M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4300, 0)&quot;&gt;&lt;path data-c=&quot;2B&quot; d=&quot;M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(5300.3, 0)&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(6022.5, 0)&quot;&gt;&lt;path data-c=&quot;D7&quot; d=&quot;M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7022.7, 0)&quot;&gt;&lt;path data-c=&quot;1D45D&quot; d=&quot;M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7525.7, 0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(8054.7, 0)&quot;&gt;&lt;path data-c=&quot;1D451&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(3201.3, -686)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D460&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(469, 0)&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(830, 0)&quot;&gt;&lt;path data-c=&quot;1D45F&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1281, 0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1626, 0)&quot;&gt;&lt;path data-c=&quot;1D451&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2146, 0)&quot;&gt;&lt;path data-c=&quot;1D452&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;rect width=&quot;8774.7&quot; height=&quot;60&quot; x=&quot;120&quot; y=&quot;220&quot;&gt;&lt;/rect&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(12183.3, 0)&quot;&gt;&lt;path data-c=&quot;230B&quot; d=&quot;M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(12849.5, 0)&quot;&gt;&lt;path data-c=&quot;2B&quot; d=&quot;M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(13849.7, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/mjx-container&gt;&lt;br&gt;&lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; display=&quot;true&quot;&gt;&lt;svg style=&quot;vertical-align: -0.375ex&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;45.029ex&quot; height=&quot;1.97ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -705 19903 870.6&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D45B&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(600, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;1D436&quot; d=&quot;M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1465.2, 0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mtext&quot; transform=&quot;translate(2521, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;75&quot; d=&quot;M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z&quot; transform=&quot;translate(556, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z&quot; transform=&quot;translate(1112, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;62&quot; d=&quot;M307 -11Q234 -11 168 55L158 37Q156 34 153 28T147 17T143 10L138 1L118 0H98V298Q98 599 97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V543Q179 391 180 391L183 394Q186 397 192 401T207 411T228 421T254 431T286 439T323 442Q401 442 461 379T522 216Q522 115 458 52T307 -11ZM182 98Q182 97 187 90T196 79T206 67T218 55T233 44T250 35T271 29T295 26Q330 26 363 46T412 113Q424 148 424 212Q424 287 412 323Q385 405 300 405Q270 405 239 390T188 347L182 339V98Z&quot; transform=&quot;translate(1945, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;65&quot; d=&quot;M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z&quot; transform=&quot;translate(2501, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;72&quot; d=&quot;M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z&quot; transform=&quot;translate(2945, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;20&quot; d=&quot;&quot; transform=&quot;translate(3337, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z&quot; transform=&quot;translate(3587, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;66&quot; d=&quot;M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z&quot; transform=&quot;translate(4087, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;20&quot; d=&quot;&quot; transform=&quot;translate(4393, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;66&quot; d=&quot;M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z&quot; transform=&quot;translate(4643, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;69&quot; d=&quot;M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z&quot; transform=&quot;translate(4949, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z&quot; transform=&quot;translate(5227, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;74&quot; d=&quot;M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z&quot; transform=&quot;translate(5505, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;65&quot; d=&quot;M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z&quot; transform=&quot;translate(5894, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;72&quot; d=&quot;M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z&quot; transform=&quot;translate(6338, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;73&quot; d=&quot;M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z&quot; transform=&quot;translate(6730, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;20&quot; d=&quot;&quot; transform=&quot;translate(7124, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;75&quot; d=&quot;M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z&quot; transform=&quot;translate(7374, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;73&quot; d=&quot;M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z&quot; transform=&quot;translate(7930, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;65&quot; d=&quot;M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z&quot; transform=&quot;translate(8324, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;64&quot; d=&quot;M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z&quot; transform=&quot;translate(8768, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;20&quot; d=&quot;&quot; transform=&quot;translate(9324, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;69&quot; d=&quot;M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z&quot; transform=&quot;translate(9574, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z&quot; transform=&quot;translate(9852, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;20&quot; d=&quot;&quot; transform=&quot;translate(10408, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;74&quot; d=&quot;M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z&quot; transform=&quot;translate(10658, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;68&quot; d=&quot;M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z&quot; transform=&quot;translate(11047, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;65&quot; d=&quot;M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z&quot; transform=&quot;translate(11603, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;20&quot; d=&quot;&quot; transform=&quot;translate(12047, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;63&quot; d=&quot;M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z&quot; transform=&quot;translate(12297, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z&quot; transform=&quot;translate(12741, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z&quot; transform=&quot;translate(13241, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;76&quot; d=&quot;M338 431Q344 429 422 429Q479 429 503 431H508V385H497Q439 381 423 345Q421 341 356 172T288 -2Q283 -11 263 -11Q244 -11 239 -2Q99 359 98 364Q93 378 82 381T43 385H19V431H25L33 430Q41 430 53 430T79 430T104 429T122 428Q217 428 232 431H240V385H226Q187 384 184 370Q184 366 235 234L286 102L377 341V349Q377 363 367 372T349 383T335 385H331V431H338Z&quot; transform=&quot;translate(13797, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z&quot; transform=&quot;translate(14325, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z&quot; transform=&quot;translate(14825, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;75&quot; d=&quot;M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z&quot; transform=&quot;translate(15103, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;74&quot; d=&quot;M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z&quot; transform=&quot;translate(15659, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;69&quot; d=&quot;M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z&quot; transform=&quot;translate(16048, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z&quot; transform=&quot;translate(16326, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z&quot; transform=&quot;translate(16826, 0)&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/mjx-container&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Deep Learning" scheme="https://leihao0.github.io/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Deep Learning Course 2</title>
    <link href="https://leihao0.github.io/Deep-Learning-Course-2/"/>
    <id>https://leihao0.github.io/Deep-Learning-Course-2/</id>
    <published>2019-11-24T07:51:55.000Z</published>
    <updated>2020-09-09T11:16:33.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Improving-Deep-Neural-Networks-Hyperparameter-tuning-Regularization-and-Optimization"><a href="#Improving-Deep-Neural-Networks-Hyperparameter-tuning-Regularization-and-Optimization" class="headerlink" title="Improving Deep Neural Networks: Hyperparameter tuning, Regularization and Optimization"></a>Improving Deep Neural Networks: Hyperparameter tuning, Regularization and Optimization</h2><h2 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h2><h2 id="Week-2"><a href="#Week-2" class="headerlink" title="Week 2"></a>Week 2</h2><h3 id="1-Gradient-Descent"><a href="#1-Gradient-Descent" class="headerlink" title="1 - Gradient Descent"></a>1 - Gradient Descent</h3><p><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 30.301ex"><svg style="vertical-align: -0.784ex; min-width: 30.301ex" xmlns="http://www.w3.org/2000/svg" width="100%" height="2.7ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0) scale(0.0181) translate(0, -846.7)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(2078, 0) translate(-2078, 0)"><g transform="translate(0 846.7) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="4618.6 -846.7 1 1193.3"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0, -96.7)"><g data-mml-node="mtd"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2034.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(3090.6, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5069.9, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(6070.1, 0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mtext" transform="translate(6710.1, 0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(6960.1, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="msup" transform="translate(7480.1, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="1278 -846.7 1 1193.3"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn-1" transform="translate(0, -96.7)"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(389, 0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(889, 0)"></path></g></g></g></svg></g></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 25.725ex"><svg style="vertical-align: -0.784ex; min-width: 25.725ex" xmlns="http://www.w3.org/2000/svg" width="100%" height="2.7ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0) scale(0.0181) translate(0, -846.7)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(2078, 0) translate(-2078, 0)"><g transform="translate(0 846.7) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="3607.3 -846.7 1 1193.3"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0, -96.7)"><g data-mml-node="mtd"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="TeXAtom" transform="translate(429, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1360.6, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2416.4, 0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="TeXAtom" transform="translate(429, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3721.5, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(4721.7, 0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mtext" transform="translate(5361.7, 0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(5611.7, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="msup" transform="translate(6131.7, 0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="TeXAtom" transform="translate(429, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="1278 -846.7 1 1193.3"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn-2" transform="translate(0, -96.7)"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(389, 0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(889, 0)"></path></g></g></g></svg></g></g></g></g></svg></mjx-container></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i = str(l+<span class="number">1</span>)</span><br><span class="line">parameters[<span class="string">"W"</span>+i] = parameters[<span class="string">"W"</span>+i] - learning_rate * grads[<span class="string">'dW'</span>+i]</span><br><span class="line">parameters[<span class="string">"b"</span>+i] = parameters[<span class="string">"b"</span>+i] - learning_rate * grads[<span class="string">'db'</span>+i]</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-Mini-Batch-Gradient-descent"><a href="#2-Mini-Batch-Gradient-descent" class="headerlink" title="2 - Mini-Batch Gradient descent"></a>2 - Mini-Batch Gradient descent</h3><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="17.124ex" height="4.106ex" role="img" focusable="false" viewBox="0 -1118 7569 1815"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mfrac" transform="translate(444, 0)"><g data-mml-node="mi" transform="translate(2901.5, 676)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mrow" transform="translate(220, -686)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1223, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1823, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2168, 0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(2597, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(3126, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(3487, 0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(3920, 0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(4496, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(4965, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5310, 0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mi" transform="translate(5775, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g><rect width="6441" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(7125, 0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="38.762ex" height="4.106ex" role="img" focusable="false" viewBox="0 -1118 17132.9 1815"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1100.2, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2100.4, 0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2978.4, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3323.4, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3923.4, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4268.4, 0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(4697.4, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(5226.4, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(5587.4, 0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(6020.4, 0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(6596.4, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(7065.4, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(7410.4, 0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mi" transform="translate(7875.4, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(8563.7, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(9563.9, 0)"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mfrac" transform="translate(10007.9, 0)"><g data-mml-node="mi" transform="translate(2901.5, 676)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mrow" transform="translate(220, -686)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1223, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1823, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2168, 0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(2597, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(3126, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(3487, 0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(3920, 0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(4496, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(4965, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5310, 0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mi" transform="translate(5775, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g><rect width="6441" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(16688.9, 0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g></g></g></svg></mjx-container></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mini_batch_X = shuffled_X[:, k * mini_batch_size: (k+<span class="number">1</span>) * mini_batch_size]</span><br><span class="line">mini_batch_Y = shuffled_Y[:, k * mini_batch_size: (k+<span class="number">1</span>) * mini_batch_size]</span><br><span class="line"><span class="comment">#  ...</span></span><br><span class="line">mini_batch_X = shuffled_X[:, mini_batch_size * num_complete_minibatches]</span><br><span class="line">mini_batch_Y = shuffled_Y[:, mini_batch_size * num_complete_minibatches]</span><br></pre></td></tr></table></figure><h3 id="3-Momentum"><a href="#3-Momentum" class="headerlink" title="3 - Momentum"></a>3 - Momentum</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i = str(l+<span class="number">1</span>)</span><br><span class="line">v[<span class="string">"dW"</span>+i] = np.zeros_like(parameters[<span class="string">'W'</span>+i])</span><br><span class="line">v[<span class="string">"db"</span>+i] = np.zeros_like(parameters[<span class="string">'b'</span>+i])</span><br></pre></td></tr></table></figure><p><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 58.296ex"><svg style="vertical-align: -0.784ex; min-width: 58.296ex" xmlns="http://www.w3.org/2000/svg" width="100%" height="2.7ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0) scale(0.0181) translate(0, -846.7)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(2078, 0) translate(-2078, 0)"><g transform="translate(0 846.7) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="10805.5 -846.7 1 1193.3"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0, -96.7)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="TeXAtom" transform="translate(485, -225.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="msup" transform="translate(520, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(2422.9, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3478.7, 0)"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="msub" transform="translate(4044.7, 0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="TeXAtom" transform="translate(485, -225.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="msup" transform="translate(520, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(6412, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(7412.3, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(7801.3, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8523.5, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(9523.7, 0)"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mo" transform="translate(10089.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(10478.7, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="msup" transform="translate(10998.7, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g><g data-mml-node="msup" transform="translate(12755.8, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g><g data-mml-node="mo" transform="translate(14790.6, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(15846.4, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g><g data-mml-node="mo" transform="translate(17825.7, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(18825.9, 0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="msub" transform="translate(19465.9, 0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="TeXAtom" transform="translate(485, -225.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="msup" transform="translate(520, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="1278 -846.7 1 1193.3"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn-3" transform="translate(0, -96.7)"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(389, 0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(889, 0)"></path></g></g></g></svg></g></g></g></g></svg></mjx-container><br>$$</p><p>v*{db^{[l]}} = \beta v*{db^{[l]}} + (1 - \beta) db^{[l]}<br>b^{[l]} = b^{[l]} - \alpha v_{db^{[l]}}<br>\tag{4}$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i = str(l+<span class="number">1</span>)</span><br><span class="line">v[<span class="string">"dW"</span>+i] = beta * v[<span class="string">"dW"</span>+i] + (<span class="number">1</span> - beta) * grads[<span class="string">'dW'</span>+i]</span><br><span class="line">v[<span class="string">"db"</span>+i] = beta * v[<span class="string">"db"</span>+i] + (<span class="number">1</span> - beta) * grads[<span class="string">'db'</span>+i]</span><br><span class="line"><span class="comment"># update parameters</span></span><br><span class="line">parameters[<span class="string">"W"</span>+i] = parameters[<span class="string">"W"</span>+i] - learning_rate * v[<span class="string">"dW"</span>+i]</span><br><span class="line">parameters[<span class="string">"b"</span>+i] = parameters[<span class="string">"b"</span>+i] - learning_rate * v[<span class="string">"db"</span>+i]</span><br></pre></td></tr></table></figure><h3 id="4-Adam"><a href="#4-Adam" class="headerlink" title="4 - Adam"></a>4 - Adam</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = str(l+<span class="number">1</span>)</span><br><span class="line">v[<span class="string">"dW"</span>+i] = np.zeros_like(parameters[<span class="string">"W"</span>+i])</span><br><span class="line">v[<span class="string">"db"</span>+i] = np.zeros_like(parameters[<span class="string">"b"</span>+i])</span><br><span class="line">s[<span class="string">"dW"</span>+i] = np.zeros_like(parameters[<span class="string">"W"</span>+i])</span><br><span class="line">s[<span class="string">"db"</span>+i] = np.zeros_like(parameters[<span class="string">"b"</span>+i])</span><br></pre></td></tr></table></figure><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.813ex" xmlns="http://www.w3.org/2000/svg" width="30.121ex" height="4.96ex" role="img" focusable="false" viewBox="0 -1391 13313.5 2192.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="TeXAtom" transform="translate(485, -225.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(2055.2, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(3111, 0)"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mn" transform="translate(566, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="msub" transform="translate(4080.5, 0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="TeXAtom" transform="translate(485, -225.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(6080.2, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(7080.4, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(7469.4, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8191.6, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(9191.9, 0)"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mn" transform="translate(566, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(10161.4, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mfrac" transform="translate(10550.4, 0)"><g data-mml-node="mrow" transform="translate(782, 676)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566, 0)"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g></g><g data-mml-node="mrow" transform="translate(220, -779.3)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="msup" transform="translate(566, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g><rect width="2523.1" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p><p>$$v^{corrected}<em>{dW^{[l]}} = \frac{v</em>{dW^{[l]}}}{1 - (\beta_1)^t}$$</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.813ex" xmlns="http://www.w3.org/2000/svg" width="34.386ex" height="4.96ex" role="img" focusable="false" viewBox="0 -1391 15198.4 2192.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, -225.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="msup" transform="translate(520, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(2406.9, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(3462.7, 0)"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mn" transform="translate(566, -150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="msub" transform="translate(4432.2, 0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, -225.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="msup" transform="translate(520, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(6783.6, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(7783.8, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(8172.8, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8895, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(9895.3, 0)"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mn" transform="translate(566, -150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(10864.8, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(11253.8, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mfrac" transform="translate(11642.8, 0)"><g data-mml-node="mrow" transform="translate(679, 676)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(566, 0)"><g data-mml-node="mi"><path data-c="4A" d="M148 78Q148 16 189 -17T286 -50Q319 -50 348 -33T396 10T426 59T444 101L471 204Q498 306 521 372Q575 532 649 605L659 614H591Q517 613 494 607Q433 591 400 550T360 477Q353 454 325 437T275 419Q256 419 260 435Q280 523 376 597T583 681Q603 683 713 683H830Q839 674 839 671Q839 654 810 634T754 614Q735 614 721 601Q688 571 654 495T600 351T561 209T541 132Q507 29 412 -45T213 -119Q141 -119 94 -77T47 33Q47 55 50 69T58 90T71 103Q105 131 135 131Q152 131 152 120Q152 119 151 114T149 99T148 78Z"></path></g></g></g><g data-mml-node="mrow" transform="translate(220, -779.3)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="msup" transform="translate(566, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g><rect width="2523.1" height="60" x="120" y="220"></rect></g><g data-mml-node="msup" transform="translate(14405.9, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(389, 413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></p><p>$$s^{corrected}<em>{dW^{[l]}} = \frac{s</em>{dW^{[l]}}}{1 - (\beta_2)^t}$$</p><p>$$W^{[l]} = W^{[l]} - \alpha \frac{v^{corrected}<em>{dW^{[l]}}}{\sqrt{s^{corrected}</em>{dW^{[l]}}} + \varepsilon}$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">i = str(l+<span class="number">1</span>)</span><br><span class="line">v[<span class="string">"dW"</span>+i] = beta1 * v[<span class="string">"dW"</span>+i] + (<span class="number">1</span> - beta1) * grads[<span class="string">'dW'</span>+i]</span><br><span class="line">v[<span class="string">"db"</span>+i] = beta1 * v[<span class="string">"db"</span>+i] + (<span class="number">1</span> - beta1) * grads[<span class="string">'db'</span>+i]</span><br><span class="line"></span><br><span class="line">v_corrected[<span class="string">"dW"</span>+i] = v[<span class="string">"dW"</span>+i] / (<span class="number">1</span> - beta1**t)</span><br><span class="line">v_corrected[<span class="string">"db"</span>+i] = v[<span class="string">"db"</span>+i] / (<span class="number">1</span> - beta1**t)</span><br><span class="line"></span><br><span class="line">s[<span class="string">"dW"</span>+i] = beta2 * s[<span class="string">"dW"</span>+i] + (<span class="number">1</span> - beta2) * (grads[<span class="string">'dW'</span>+i])**<span class="number">2</span></span><br><span class="line">s[<span class="string">"db"</span>+i] = beta2 * s[<span class="string">"db"</span>+i] + (<span class="number">1</span> - beta2) * (grads[<span class="string">'db'</span>+i])**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">s_corrected[<span class="string">"dW"</span>+i] = s[<span class="string">"dW"</span>+i] / (<span class="number">1</span> - beta2**t)</span><br><span class="line">s_corrected[<span class="string">"db"</span>+i] = s[<span class="string">"db"</span>+i] / (<span class="number">1</span> - beta2**t)</span><br><span class="line"></span><br><span class="line">parameters[<span class="string">"W"</span>+i] = parameters[<span class="string">"W"</span>+i] - learning_rate * (v_corrected[<span class="string">"dW"</span>+i] / (np.sqrt(s_corrected[<span class="string">"dW"</span>+i]) + epsilon))</span><br><span class="line">parameters[<span class="string">"b"</span>+i] = parameters[<span class="string">"b"</span>+i] - learning_rate * (v_corrected[<span class="string">"db"</span>+i] / (np.sqrt(s_corrected[<span class="string">"db"</span>+i]) + epsilon))</span><br></pre></td></tr></table></figure><h2 id="Week-3"><a href="#Week-3" class="headerlink" title="Week 3"></a>Week 3</h2><h3 id="1-1-Linear-function"><a href="#1-1-Linear-function" class="headerlink" title="1.1 - Linear function"></a>1.1 - Linear function</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">X = np.random.randn(<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">W = np.random.randn(<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line">b = np.random.randn(<span class="number">4</span>,<span class="number">1</span>)</span><br><span class="line">Y = tf.add(tf.matmul(W, X), b)</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">result = sess.run(Y)</span><br></pre></td></tr></table></figure><h3 id="1-2-Computing-the-sigmoid"><a href="#1-2-Computing-the-sigmoid" class="headerlink" title="1.2 - Computing the sigmoid"></a>1.2 - Computing the sigmoid</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = tf.placeholder(tf.float32, name = <span class="string">"x"</span>)</span><br><span class="line">sigmoid = tf.sigmoid(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    result = sess.run(sigmoid, feed_dict = {x: z})</span><br></pre></td></tr></table></figure><h3 id="1-3-Computing-the-Cost"><a href="#1-3-Computing-the-Cost" class="headerlink" title="1.3 - Computing the Cost"></a>1.3 - Computing the Cost</h3><p><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 55.479ex"><svg style="vertical-align: -2.611ex; min-width: 55.479ex" xmlns="http://www.w3.org/2000/svg" width="100%" height="6.354ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0) scale(0.0181) translate(0, -1654.2)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(2078, 0) translate(-2078, 0)"><g transform="translate(0 1654.2) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="10182.9 -1654.2 1 2808.5"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0, 91.7)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(910.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1966.6, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(2744.6, 0)"><g data-mml-node="mn" transform="translate(409, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220, -686)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1078" height="60" x="120" y="220"></rect></g><g data-mml-node="munderover" transform="translate(4229.2, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(411.6, 1150) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mstyle" transform="translate(5673.2, 0) scale(1.2)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mstyle" transform="translate(389, 0) scale(0.708)"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1500.7, 0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278, 0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778, 0)"></path></g><g data-mml-node="mo" transform="translate(2778.7, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="msup" transform="translate(2945.4, 0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(529, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(278, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(778, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1056, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1445, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1790, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5287.4, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(6287.6, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(6676.6, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(7398.9, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(8399.1, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(9733.2, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(10288.8, 0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278, 0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778, 0)"></path></g><g data-mml-node="mo" transform="translate(11566.8, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(11566.8, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(11955.8, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(12678.1, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(13678.3, 0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(529, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(278, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(778, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1056, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1445, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1790, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(15798.1, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mstyle" transform="translate(16187.1, 0) scale(1.412)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mstyle" transform="translate(389, 0) scale(0.708)"></g></g></g></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="1278 -1654.2 1 2808.5"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn-2" transform="translate(0, 91.7)"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(389, 0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(889, 0)"></path></g></g></g></svg></g></g></g></g></svg></mjx-container></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">z = tf.placeholder(tf.float32, name=<span class="string">'z'</span>)</span><br><span class="line">y = tf.placeholder(tf.float32, name=<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line">cost = tf.nn.sigmoid_cross_entropy_with_logits(logits = z,  labels = y)</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">cost = sess.run(cost, feed_dict = {z: logits, y: labels})</span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure><h3 id="1-4-Using-One-Hot-encodings"><a href="#1-4-Using-One-Hot-encodings" class="headerlink" title="1.4 - Using One Hot encodings"></a>1.4 - Using One Hot encodings</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C = tf.constant(C)</span><br><span class="line">one_hot_matrix = tf.one_hot(labels, C, axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">one_hot = sess.run(one_hot_matrix)</span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure><h3 id="1-5-Initialize-with-zeros-and-ones"><a href="#1-5-Initialize-with-zeros-and-ones" class="headerlink" title="1.5 - Initialize with zeros and ones"></a>1.5 - Initialize with zeros and ones</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ones = tf.ones(shape)</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">ones = sess.run(ones)</span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure><h3 id="2-1-Create-placeholders"><a href="#2-1-Create-placeholders" class="headerlink" title="2.1 - Create placeholders"></a>2.1 - Create placeholders</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X = tf.placeholder(tf.float32, [n_x, <span class="literal">None</span>])</span><br><span class="line">Y = tf.placeholder(tf.float32, [n_y, <span class="literal">None</span>])</span><br></pre></td></tr></table></figure><h3 id="2-2-Initializing-the-parameters"><a href="#2-2-Initializing-the-parameters" class="headerlink" title="2.2 - Initializing the parameters"></a>2.2 - Initializing the parameters</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">W1 = tf.get_variable(<span class="string">"W1"</span>, [<span class="number">25</span>,<span class="number">12288</span>], initializer = tf.contrib.layers.xavier_initializer(seed = <span class="number">1</span>))</span><br><span class="line">b1 = tf.get_variable(<span class="string">"b1"</span>, [<span class="number">25</span>,<span class="number">1</span>], initializer = tf.zeros_initializer())</span><br><span class="line">W2 = tf.get_variable(<span class="string">"W2"</span>, [<span class="number">12</span>,<span class="number">25</span>], initializer = tf.contrib.layers.xavier_initializer(seed = <span class="number">1</span>))</span><br><span class="line">b2 = tf.get_variable(<span class="string">"b2"</span>, [<span class="number">12</span>,<span class="number">1</span>], initializer = tf.zeros_initializer())</span><br><span class="line">W3 = tf.get_variable(<span class="string">"W3"</span>, [<span class="number">6</span>,<span class="number">12</span>], initializer = tf.contrib.layers.xavier_initializer(seed = <span class="number">1</span>))</span><br><span class="line">b3 = tf.get_variable(<span class="string">"b3"</span>, [<span class="number">6</span>,<span class="number">1</span>], initializer = tf.zeros_initializer())</span><br></pre></td></tr></table></figure><h3 id="2-3-Forward-propagation-in-tensorflow"><a href="#2-3-Forward-propagation-in-tensorflow" class="headerlink" title="2.3 - Forward propagation in tensorflow"></a>2.3 - Forward propagation in tensorflow</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Z1 = tf.matmul(W1, X) + b1</span><br><span class="line">A1 = tf.nn.relu(Z1)</span><br><span class="line">Z2 = tf.matmul(W2, A1) + b2</span><br><span class="line">A2 = tf.nn.relu(Z2)</span><br><span class="line">Z3 = tf.matmul(W3, A2) + b3</span><br></pre></td></tr></table></figure><h3 id="2-4-Compute-cost"><a href="#2-4-Compute-cost" class="headerlink" title="2.4 Compute cost"></a>2.4 Compute cost</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = logits, labels = labels))</span><br></pre></td></tr></table></figure><h3 id="2-5-Backward-propagation-amp-parameter-updates"><a href="#2-5-Backward-propagation-amp-parameter-updates" class="headerlink" title="2.5 - Backward propagation & parameter updates"></a>2.5 - Backward propagation &amp; parameter updates</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">X, Y = create_placeholders(n_x, n_y)</span><br><span class="line">parameters = initialize_parameters()</span><br><span class="line">Z3 = forward_propagation(X, parameters)</span><br><span class="line">cost = compute_cost(Z3, Y)</span><br><span class="line">optimizer = tf.train.AdamOptimizer(learning_rate = learning_rate).minimize(cost)</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">_ , minibatch_cost = sess.run([optimizer, cost], feed_dict={X: minibatch_X, Y: minibatch_Y})</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Improving-Deep-Neural-Networks-Hyperparameter-tuning-Regularization-and-Optimization&quot;&gt;&lt;a href=&quot;#Improving-Deep-Neural-Networks-Hyperparameter-tuning-Regularization-and-Optimization&quot; class=&quot;headerlink&quot; title=&quot;Improving Deep Neural Networks: Hyperparameter tuning, Regularization and Optimization&quot;&gt;&lt;/a&gt;Improving Deep Neural Networks: Hyperparameter tuning, Regularization and Optimization&lt;/h2&gt;&lt;h2 id=&quot;Week-1&quot;&gt;&lt;a href=&quot;#Week-1&quot; class=&quot;headerlink&quot; title=&quot;Week 1&quot;&gt;&lt;/a&gt;Week 1&lt;/h2&gt;&lt;h2 id=&quot;Week-2&quot;&gt;&lt;a href=&quot;#Week-2&quot; class=&quot;headerlink&quot; title=&quot;Week 2&quot;&gt;&lt;/a&gt;Week 2&lt;/h2&gt;&lt;h3 id=&quot;1-Gradient-Descent&quot;&gt;&lt;a href=&quot;#1-Gradient-Descent&quot; class=&quot;headerlink&quot; title=&quot;1 - Gradient Descent&quot;&gt;&lt;/a&gt;1 - Gradient Descent&lt;/h3&gt;&lt;p&gt;&lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; display=&quot;true&quot; width=&quot;full&quot; style=&quot;min-width: 30.301ex&quot;&gt;&lt;svg style=&quot;vertical-align: -0.784ex; min-width: 30.301ex&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;100%&quot; height=&quot;2.7ex&quot; role=&quot;img&quot; focusable=&quot;false&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0) scale(0.0181) translate(0, -846.7)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mtable&quot; transform=&quot;translate(2078, 0) translate(-2078, 0)&quot;&gt;&lt;g transform=&quot;translate(0 846.7) matrix(1 0 0 -1 0 0) scale(55.25)&quot;&gt;&lt;svg data-table=&quot;true&quot; preserveAspectRatio=&quot;xMidYMid&quot; viewBox=&quot;4618.6 -846.7 1 1193.3&quot;&gt;&lt;g transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;mlabeledtr&quot; transform=&quot;translate(0, -96.7)&quot;&gt;&lt;g data-mml-node=&quot;mtd&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D44A&quot; d=&quot;M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(1103.2, 413) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;5B&quot; d=&quot;M118 -250V750H255V710H158V-210H255V-250H118Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(278, 0)&quot;&gt;&lt;path data-c=&quot;1D459&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(576, 0)&quot;&gt;&lt;path data-c=&quot;5D&quot; d=&quot;M22 710V750H159V-250H22V-210H119V710H22Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2034.8, 0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(3090.6, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D44A&quot; d=&quot;M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(1103.2, 413) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;5B&quot; d=&quot;M118 -250V750H255V710H158V-210H255V-250H118Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(278, 0)&quot;&gt;&lt;path data-c=&quot;1D459&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(576, 0)&quot;&gt;&lt;path data-c=&quot;5D&quot; d=&quot;M22 710V750H159V-250H22V-210H119V710H22Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5069.9, 0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6070.1, 0)&quot;&gt;&lt;path data-c=&quot;1D6FC&quot; d=&quot;M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mtext&quot; transform=&quot;translate(6710.1, 0)&quot;&gt;&lt;path data-c=&quot;A0&quot; d=&quot;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6960.1, 0)&quot;&gt;&lt;path data-c=&quot;1D451&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(7480.1, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D44A&quot; d=&quot;M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(1103.2, 413) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;5B&quot; d=&quot;M118 -250V750H255V710H158V-210H255V-250H118Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(278, 0)&quot;&gt;&lt;path data-c=&quot;1D459&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(576, 0)&quot;&gt;&lt;path data-c=&quot;5D&quot; d=&quot;M22 710V750H159V-250H22V-210H119V710H22Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;svg data-labels=&quot;true&quot; preserveAspectRatio=&quot;xMaxYMid&quot; viewBox=&quot;1278 -846.7 1 1193.3&quot;&gt;&lt;g data-labels=&quot;true&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;mtd&quot; id=&quot;mjx-eqn-1&quot; transform=&quot;translate(0, -96.7)&quot;&gt;&lt;g data-mml-node=&quot;mtext&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot; transform=&quot;translate(389, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot; transform=&quot;translate(889, 0)&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/mjx-container&gt;&lt;br&gt;&lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; display=&quot;true&quot; width=&quot;full&quot; style=&quot;min-width: 25.725ex&quot;&gt;&lt;svg style=&quot;vertical-align: -0.784ex; min-width: 25.725ex&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;100%&quot; height=&quot;2.7ex&quot; role=&quot;img&quot; focusable=&quot;false&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0) scale(0.0181) translate(0, -846.7)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mtable&quot; transform=&quot;translate(2078, 0) translate(-2078, 0)&quot;&gt;&lt;g transform=&quot;translate(0 846.7) matrix(1 0 0 -1 0 0) scale(55.25)&quot;&gt;&lt;svg data-table=&quot;true&quot; preserveAspectRatio=&quot;xMidYMid&quot; viewBox=&quot;3607.3 -846.7 1 1193.3&quot;&gt;&lt;g transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;mlabeledtr&quot; transform=&quot;translate(0, -96.7)&quot;&gt;&lt;g data-mml-node=&quot;mtd&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D44F&quot; d=&quot;M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(429, 413) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;5B&quot; d=&quot;M118 -250V750H255V710H158V-210H255V-250H118Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(278, 0)&quot;&gt;&lt;path data-c=&quot;1D459&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(576, 0)&quot;&gt;&lt;path data-c=&quot;5D&quot; d=&quot;M22 710V750H159V-250H22V-210H119V710H22Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1360.6, 0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(2416.4, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D44F&quot; d=&quot;M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(429, 413) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;5B&quot; d=&quot;M118 -250V750H255V710H158V-210H255V-250H118Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(278, 0)&quot;&gt;&lt;path data-c=&quot;1D459&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(576, 0)&quot;&gt;&lt;path data-c=&quot;5D&quot; d=&quot;M22 710V750H159V-250H22V-210H119V710H22Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3721.5, 0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4721.7, 0)&quot;&gt;&lt;path data-c=&quot;1D6FC&quot; d=&quot;M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mtext&quot; transform=&quot;translate(5361.7, 0)&quot;&gt;&lt;path data-c=&quot;A0&quot; d=&quot;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5611.7, 0)&quot;&gt;&lt;path data-c=&quot;1D451&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(6131.7, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D44F&quot; d=&quot;M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(429, 413) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;5B&quot; d=&quot;M118 -250V750H255V710H158V-210H255V-250H118Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(278, 0)&quot;&gt;&lt;path data-c=&quot;1D459&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(576, 0)&quot;&gt;&lt;path data-c=&quot;5D&quot; d=&quot;M22 710V750H159V-250H22V-210H119V710H22Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;svg data-labels=&quot;true&quot; preserveAspectRatio=&quot;xMaxYMid&quot; viewBox=&quot;1278 -846.7 1 1193.3&quot;&gt;&lt;g data-labels=&quot;true&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;mtd&quot; id=&quot;mjx-eqn-2&quot; transform=&quot;translate(0, -96.7)&quot;&gt;&lt;g data-mml-node=&quot;mtext&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot; transform=&quot;translate(389, 0)&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot; transform=&quot;translate(889, 0)&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/mjx-container&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;i = str(l+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;parameters[&lt;span class=&quot;string&quot;&gt;&quot;W&quot;&lt;/span&gt;+i] = parameters[&lt;span class=&quot;string&quot;&gt;&quot;W&quot;&lt;/span&gt;+i] - learning_rate * grads[&lt;span class=&quot;string&quot;&gt;&#39;dW&#39;&lt;/span&gt;+i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;parameters[&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;+i] = parameters[&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;+i] - learning_rate * grads[&lt;span class=&quot;string&quot;&gt;&#39;db&#39;&lt;/span&gt;+i]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Deep Learning" scheme="https://leihao0.github.io/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>How to auto-reply &amp; send msg with telegram</title>
    <link href="https://leihao0.github.io/How-to-auto-reply-send-msg-with-telegram/"/>
    <id>https://leihao0.github.io/How-to-auto-reply-send-msg-with-telegram/</id>
    <published>2019-11-03T14:22:54.000Z</published>
    <updated>2020-09-09T11:17:06.449Z</updated>
    
    <content type="html"><![CDATA[<p>There are many reasons as a man that you have to reply within 59 seconds, otherwise, some bad things will happen.</p><p>Luckily Telegram provides an API to do so.</p><ol><li>get your dev token in <a href="https://my.telegram.org/">here</a>, not bot token</li><li>install telethon with <code>pip3</code></li><li>RTFM to make the py works</li></ol><a id="more"></a><h2 id="Telethon"><a href="#Telethon" class="headerlink" title="Telethon"></a>Telethon</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -U telethon --user</span><br></pre></td></tr></table></figure><p>On Catalina, it will abort immediately after <code>import telethon</code> without any other helpful logs which cost me all afternoon to tackle the issue</p><ul><li>I tried to switch the python version with <code>pyenv</code>, not working</li><li>run it on Ubuntu, working</li><li>finally found in here, <a href="https://stackoverflow.com/questions/58272830/python-crashing-on-macos-10-15-beta-19a582a-with-usr-lib-libcrypto-dylib">Python crashing on macOS 10.15</a>, <code>OpenSSL</code> missing</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/Cellar/openssl/1.0.2t/lib</span><br><span class="line">sudo cp libssl.1.0.0.dylib libcrypto.1.0.0.dylib /usr/<span class="built_in">local</span>/lib/</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/lib</span><br><span class="line">mv libssl.dylib libssl_bak.dylib</span><br><span class="line">mv libcrypto.dylib libcrypto_bak.dylib</span><br><span class="line">sudo ln -s libssl.1.0.0.dylib libssl.dylib</span><br><span class="line">sudo ln -s libcrypto.1.0.0.dylib libcrypto.dylib</span><br></pre></td></tr></table></figure><h2 id="Auto-Reply"><a href="#Auto-Reply" class="headerlink" title="Auto Reply"></a>Auto Reply</h2><p><code>replyHer.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> telethon <span class="keyword">import</span> TelegramClient, events</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use your own values from my.telegram.org</span></span><br><span class="line">api_id = <span class="number">123456</span></span><br><span class="line">api_hash = <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">phone = <span class="string">&#x27;123456789&#x27;</span></span><br><span class="line"></span><br><span class="line">client = TelegramClient(<span class="string">&#x27;session&#x27;</span>, api_id, api_hash)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">greetings = [<span class="string">&#x27;ok&#x27;</span>, <span class="string">&#x27;cool&#x27;</span>, <span class="string">&#x27;😂&#x27;</span>, <span class="string">&#x27;em&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@client.on(events.NewMessage)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">handle_new_message</span>(<span class="params">event</span>):</span></span><br><span class="line"></span><br><span class="line">    from_user = <span class="keyword">await</span> event.client.get_entity(event.from_id)</span><br><span class="line">    <span class="keyword">if</span> from_user.phone == phone:</span><br><span class="line">        print(time.asctime(), <span class="string">&#x27;-&#x27;</span>, event.message)</span><br><span class="line">        <span class="comment"># tested on a real girl, she figured it out at the second reply</span></span><br><span class="line">        <span class="comment"># so randomly choose to reply within 5 - 59 seconds</span></span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(random.randrange(<span class="number">5</span>, <span class="number">59</span>))</span><br><span class="line">        <span class="keyword">if</span> random.choice([<span class="literal">True</span>, <span class="literal">False</span>]):</span><br><span class="line">            i, s = random.randrange(<span class="number">2</span>, <span class="number">5</span>), random.choice(greetings)</span><br><span class="line">            <span class="comment"># typing 2 - 5 seconds</span></span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> client.action(phone, <span class="string">&#x27;typing&#x27;</span>):</span><br><span class="line">                <span class="keyword">await</span> asyncio.sleep(i)</span><br><span class="line">                <span class="keyword">await</span> client.send_message(phone, s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(time.asctime(), <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;Auto-replying...&#x27;</span>)</span><br><span class="line">client.start()</span><br><span class="line">client.run_until_disconnected()</span><br><span class="line">print(time.asctime(), <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;Stopped!&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Scheduled-message"><a href="#Scheduled-message" class="headerlink" title="Scheduled message"></a>Scheduled message</h2><p><code>spamHer.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> telethon <span class="keyword">import</span> TelegramClient, events</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">api_id = <span class="number">123456</span></span><br><span class="line">api_hash = <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">phone = <span class="string">&#x27;123456789&#x27;</span></span><br><span class="line"></span><br><span class="line">client = TelegramClient(<span class="string">&#x27;session&#x27;</span>, api_id, api_hash)</span><br><span class="line">greetings = [<span class="string">&#x27;Yo!&#x27;</span>, <span class="string">&#x27;Hi&#x27;</span>, <span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;How have you been?&#x27;</span>, <span class="string">&#x27;How are you?&#x27;</span>, <span class="string">&#x27;What\&#x27;s up today?&#x27;</span>, <span class="string">&#x27;How are you doing?&#x27;</span>, <span class="string">&#x27;How\’s it going?&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">asking</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">await</span> client.send_message(phone, s)</span><br><span class="line"></span><br><span class="line">hour = <span class="number">60</span>*<span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">await</span> asking(random.choice(annoyingStrings))</span><br><span class="line">        i = random.randrange(<span class="number">12</span>*hour, <span class="number">24</span>*hour)</span><br><span class="line">        time.sleep(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> client:</span><br><span class="line">    client.loop.run_until_complete(main())</span><br></pre></td></tr></table></figure><hr><p>Anyway, the list template is not powerful enough to make the dialogue live longer than 1 minute.</p><p><code>Her.msg -&gt; telethon -&gt; AI bot</code><br><code>Her &lt;- telethon &lt;- bot.msg</code></p><p>Might be a great solution 🌚🌚🌚</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;There are many reasons as a man that you have to reply within 59 seconds, otherwise, some bad things will happen.&lt;/p&gt;
&lt;p&gt;Luckily Telegram provides an API to do so.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;get your dev token in &lt;a href=&quot;https://my.telegram.org/&quot;&gt;here&lt;/a&gt;, not bot token&lt;/li&gt;
&lt;li&gt;install telethon with &lt;code&gt;pip3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;RTFM to make the py works&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="Tech" scheme="https://leihao0.github.io/tags/Tech/"/>
    
      <category term="Auto" scheme="https://leihao0.github.io/tags/Auto/"/>
    
  </entry>
  
</feed>
