<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Before graduation</title>
    <url>/cn/Before-graduation/</url>
    <content><![CDATA[<h1 id="毕业前的十多天"><a href="#毕业前的十多天" class="headerlink" title="毕业前的十多天"></a>毕业前的十多天</h1><p>前一阵子就有思绪在脑海里转，但是一直没有时间写出来<br>各种聚会、订票、查租房信息，接着六级，然后当晚匆匆过来，看联系房东，各小区跑，看房纸<br>当房纸大概定下后，在宾馆里，抚摸着本本，终于可以小放松一下下了</p>
<a id="more"></a>

<h2 id="聚会"><a href="#聚会" class="headerlink" title="聚会"></a>聚会</h2><p>这个向来是我最不喜欢参加的。叔本华的那篇《要么庸俗 要么孤独》，虽然有些偏激，但是确实有些道理。<br>另外也与我内向有关吧，MBTI 测试中，内向居然破 85，一直喜欢安安静静的呆着，而不是人多喧闹的场合。<br>并且十分不喜欢照相，不知是否是小时候看到的《禁锢灵魂》中的片段：照相会把我的灵魂吸走并紧固在一张小纸片上，如 Inception 那样植入了潜意识<br>初中高中毕业，都是匆匆离去，记得高中群里的照片中，我桌子上的水杯都在，唯独人不在<br>这次毕业，却拍了不少，当然大部分都是跟着橙姐与大部队混的</p>
<p>青春，真的很神奇，先天之气如此充足，可能性如此之多<br>记得大一还一周去包夜一次，寒假天天 3~4 点睡觉。大三后明显的感到身体不行了，大四就更加明显。有次在宾馆，折腾到 3 点没睡，第二天照镜子时，惊奇的发现了传说中的黑眼圈，之前我还纳闷小说里女主说有了黑眼圈，一直不知道是什么概念，暗暗的笑他们不会调节，不懂养生…</p>
<p>以前，我一直是通过文字的方式，记录当年的点点滴滴，现在想，这样做的唯一结果就是以老态龙钟的样子回忆起当年的青春岁月，当年的犯 2 时光，当年犯 2 的心情，唯独不知道当年的样子。</p>
<h2 id="离校"><a href="#离校" class="headerlink" title="离校"></a>离校</h2><p>收拾收拾东西，坐等我哥下班<br>快到时间点的时候，寝室的一伙人果断出去吃饭了……<br>还是以前一中的同学崔伟帮我包裹拎下来，伟哥，谢谢你了！等我打上的，掏手机看目的地，发现忘在寝室立即下来找你时，你已经不见踪影了<br>虽然你跑的那么快，但是还是要谢谢你</p>
<p>到了我哥家，看到他们的新房子，我才知道为神马要自己买房纸，之前我一直想租的说…</p>
<h2 id="六级"><a href="#六级" class="headerlink" title="六级"></a>六级</h2><p>刚到考场坐下，过来个男生，自称是“茗记”，原来同为力哥小组里的成员<br>一想他是大二，惊！发现左边全是大二，叹……<br>怪不得大四的童鞋们那么多缺考，还好班长与橙在。坚持的坐了最后一次满场，结果已经无所谓了</p>
<h2 id="杭州"><a href="#杭州" class="headerlink" title="杭州"></a>杭州</h2><p>十几天前，就开始上网找信息，各种资料，思维导图总结<br>六级考完的当天夜里，和他们小聚下，卡哇伊吃了有生以来最贵的面条，然后我就踏上了火车<br>定好 6.20 的闹铃，小旗子来电话，让我注意神马神马的，又说夜里基本睡不着。然后真的基本上一小时醒一次<br>早晨 5 点多上 WC，回去继续睡，6 点突然醒来，喝了点营养快线，google 地图定位，发现已经到余杭区了！<br>不是 6.40 么？然后听见“到杭州的下了”，O__O”…</p>
<p>下了火车站，没啥震撼之处，看来家乡的车站漂亮不是吹的<br>google 地图，寻找 49 路，看到那边有停靠的公交车，就走过去，绕了一圈发现木有</p>
<p>k49 7:30 到联合大厦，去如家，得知 8 点才能进房间，寄存书包，就去公司楼下<br>从 AB 进去，发现有人在练太极拳，反正戴应都么来，看了会，上去和练陈氏拳架的扯了两句。被问到有木有气感，我说展开时手指有点涨，然后把别人的心得一扯，被说还八错 o(╯□╰)o</p>
<p>正好赶上下雨，找房子普遍奔走在雨中<br>但是为神马等我交了定金，开始宅了，雨就停了……</p>
<p>早就得知这边很干净，下火车一路走来也感觉如此<br>但也仅仅感觉如此<br>直到我看到两个女生赤着脚走在马路上……<br>要是在合肥，鲜血淋漓是必须的…</p>
<p>卡哇伊曾说买个凉鞋，一直没感觉<br>一天早晨刚出门，网鞋便全湿透<br>就是那时看到了那两个女生<br>顿时我的观念变了，后来更加发现许多人穿的是拖鞋<br>看来大叔级程序员的 沙滩裤+人字拖并非虚传</p>
<p>买火车票徽行网银在我的电脑上一直不能用<br>在昊哥家就有这种现象，当时换用他的电脑就顺利的买到<br>我以为是 IE9 的问题，重置重置初始状态，不行<br>无奈重装系统<br>不过好像镜像搞错了，直接蓝屏……<br>而且木带系统恢复优盘，无奈问 JS 要系统盘<br>本来我想，公司本来就是 IT 嘛，系统盘是必须的啊，木想到里面还有一个小的 IT 部门</p>
<p>这次买嘉兴的票，又耽误了我大半天时间，最后还是姐帮我买的<br>这种地域性银行出地域就不给力了啊，当然只要我安分的呆在安徽，徽行用的很舒服的说，不怨它不怨它</p>
<p>第一次出远门，感觉好奇怪<br>下午还在考六级，晚上睡一觉肉身就在杭州了，今天又要去嘉兴<br>对于我没去过的地方，总感觉像是即时战略游戏中的未探索地图，黑黑的，等我过去了，才能点亮地图</p>
<p>跑了许多地方看房纸<br>在此感谢应童鞋与戴童鞋，在我人生地不熟的杭州陪我找房纸。特别是戴童鞋，房纸已经定了，还继续陪我跑路，在女朋友不停的催促的情况下，战到倒数第二套房纸。</p>
<p>最后我以 1100 的高价，租到了一个么电视么信号么木地板么纱窗么床垫么桌椅只有一室一卫么客厅并且离公司老远的房纸……</p>
]]></content>
      <tags>
        <tag>AAU</tag>
      </tags>
  </entry>
  <entry>
    <title>FEEL Training</title>
    <url>/cn/FEEL-Training/</url>
    <content><![CDATA[<h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><p>培训的第一天各位高管轮番介绍了一遍。<br>第一次见到了真的 CEO COO CTO CFO<br>中午吃饭比较囧，貌似给高管定的包间呢。结果各位高管都回去了，少数几个人酱油进去了。还好后来陆陆续续的来了些同事。<br>下午签完合同，去了自己的位置。<br>在窗户旁边，窗帘之间有个好大的空隙，烈日毫无障碍的撒到我的 LCD 显示器上，啥都看不到了…<br>当然后来发现我还不是最惨的，最惨的是我们老大，直接被另一同事说是来晒太阳…</p>
<a id="more"></a>

<p>装上电脑，卸掉那破毒霸，然后配置成自己常用的环境。<br>当然公司网速太慢了…几个大型软件回去 copy 回来好了。<br>然后，然后看到游姐了。木想到还认识我，聊了会儿，整个浏览器部门去开了个小会。</p>
<p>唉，钱多话少死得早这句太诙谐了。大家都是搞技术的，好沉默，我也无语了。<br>回去老大布置了个任务，过了会儿我一看 6 点多了，这不是下班了么？为神马周围都木有动静啊？群里问了下，原来大家都很纠结下班的事情。<br>我也只好按兵不动。20 的时候，我看到导师闪了。导师嘛，我只好紧随其脚步，和老大打了声招呼，跑回去喽~</p>
<h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><p>随机分了小队，起小队名字与口号<br>第一次接触到了各自意见怎么汇总<br>最终我们确定了 冒泡鱼 / 我是冒泡鱼，我爱冒泡泡 作为 小队名称与口号<br>（第三天看到一个可爱的小丑鱼，我拿过来玩，仔细一看“冒泡鱼”，傻了，这么巧？）<br>海报：做 UI 的 Y+ 就是牛啊，几个冒泡鱼画的惟妙惟肖，很 Q</p>
<p>各种流程，错综复杂，我目前能用到的估计也就是行政部了——抽屉钥匙只有一把 阳光刺眼</p>
<p>最后那个模仿太 2 了，我感觉也不是观察力的问题，而是思维误区，枉我读了不少思维类的书，还是么看出来啊。<br>还是凡 xi 善于这类问题，第一个搞定。</p>
<h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><p>时间上越来越紧，昨天还有点空余时间，跑回去配置开发环境，今天就没了。<br>让画 SKY 的 Logo，大家都会<br>原来目的是让大家懂得要遵守规范</p>
<p>然后给了一些随机的画，排版出一张报纸<br>我想到收购苹果，还好我们组讨论没动笔，发现别的组也用了这个后，果断放弃<br>其中还有些敏感问题，晓东说不要提，那就算了</p>
<p>央央姐发了 10 个问题，晚上要改成小品的形式表演出来，然后把问题穿插进去<br>中午匆匆吃顿饭，就收集问题的答案<br>没多久就到了下午培训时间<br>自称是洗脑培训，其中移动互联网的那段 YY 视频看的我真想晚出生百年<br>小组被分到以创新表演，我们采纳了远哥的意见。<br>别看远哥是个小 MM，却很放得开，还很有激情。<br>赵洋真的挺有主持人的天赋，整个过程是他说了许多废话来充场面<br>晓东一直说自己不行，临场发挥却不错<br>我是裁判，就纯属酱油了~</p>
<p>然后我们只有一个小时的时间来讨论晚上的小品了<br>远哥一直是思维比较活跃的那个人，后来讨论的过程中，我终于发现自己真的不是 90 后，并非脑残</p>
<p>直到第一组上场后，我们还是没确定最后的收尾，这个是接下来要注意的地方。<br>小品演出整体很好，就是中间小卡下。</p>
<p>这时我看到了 “不要活在别人的世界里”，出去喝了点水，正好碰到两个早就实习的校招生，其中一个吃饭见过，打个招呼，然后就坐下聊了会。另一个一直问我合肥的情况，哪个大学的。<br>当然是 China Other University，说了两遍他们都一脸迷茫，导致我信心骤降，口语还是不成呐…<br>让我吃惊的是杭电也是 COU（刚刚 google，果然不是，当然这么 NB 的学校用不着这玩意了，和我那有本质区别的）。<br>我说道我们学校大多在本地找的工作，一般大约 2k 左右，他撇了撇嘴，后来我想想，估计他把合肥物价低忘掉了。<br>然后 JS 过来了，得知白堤的图书室周五可以借书。<br>玩了下 wii，回到教室，晕，表演还么结束啊……</p>
<p>都结束后，央央姐说……<br>……<br>嗯，果然时间更紧了，我们大致说下营销策划的工作分配，毕竟这么晚了，就解散了。</p>
<p>到大门时碰到远哥，说要拿包裹，很大很大，被纸神马的。反正已经这么晚了，而且在府苑，我就跟过去看看。<br>跟这种女孩纸走在一起，让我感觉我比较危险。<br>里面绕了半天，终于找到韵达点，得知已经被她认识的人领走。<br>下面么我的事儿了，闪。</p>
<p>第一个出租车居然不停！妹啊，上了第二辆后就和司机说前面拒载啊？看我一脸沉默，他还替前面的解释了半天，大意就是让我别投诉了。唉，其实我是累的，也就这么一说，哪有力气投诉啊。</p>
<p>回来还得洗衣服，琐碎事真多……</p>
<h2 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h2><p>昊哥真能说啊，一下就是几小时，要是我嗓子早哑了<br>后来得知以前做过讲师，练过，怪不得<br>其中有个思维风暴环节，铁衣服架的用途。平衡性不是很好，可以用 分数=总数/10 的算法 回归平衡<br>当然市场也不是公平的，总有垄断企业说了算，我对小组说就是不要太在意别人，做好自己就成<br>蹲马步，唉，太极拳唯独把这个忘掉了<br>蹲的估计到不到两分钟啊，就酸了。<br>内心有个小声音，偶是智力型英雄，认不清位置，一味逞强，倒下了明天小组就不完整了<br>想通此节，立即跳起来了（还有力气跳起来呢……）<br>晚上的桌游之前，吃饭时碰到央央姐，帮她在行政部搬了点东西<br>然后跑去乒乓球，蹭了两球<br>桌游是杀人游戏，大家都玩的好 hi<br>远哥话好多啊，巴拉巴拉的把大家都迷惑了<br>晚上帮 Y+ 把无线弄好，洗洗睡了</p>
<h2 id="第五天"><a href="#第五天" class="headerlink" title="第五天"></a>第五天</h2><p>今天培训结束后，我小心翼翼的向老大提了下，坐着没事干，有木有啥可以捣鼓的<br>老大立即说 森哥 早已经把任务准备好了，只是没说而已<br>（原来是这样啊 T.T）<br>……</p>
<h2 id="第六天"><a href="#第六天" class="headerlink" title="第六天"></a>第六天</h2><p>西湖定向<br>6.50 就出发了，到断桥还一个半小时才开始<br>公交车上还遇到了队长，艳娇也在这班公交上……</p>
<p>西湖太热，小队买了些扇子<br>拿到任务，就出发了</p>
<p>新白娘子传奇的经典片段 美人美景美食 让外国游人写下“你好 杭州…”等一些任务<br>迎面来了一大波人，远哥 怡佳立即冲上去<br>唔，英文果然断断续续，还是靠导游翻译的……<br>他们之间的对话还是能听懂大概的，但是让我说就…<br>我旁边有个比较矮的女士，貌似也是黄种人，而且大不了我几岁，当时一直纠结，最后终于第一次和外国人说了第一次话，问了个比较 2 的问题“Where are you from?”<br>US 澳大利亚啥的<br>然后我就不知道说啥了……真是哑巴英语……</p>
<p>第一个任务是 蒙着眼睛， 小组把 10 米的绳子撑开成正五边形</p>
<p>开始用晓东 1.78 的作为等长分边长，留下了好一截绳子<br>其实也是教官没说清楚，不能剩余<br>当然我们都是承认自己的错误，那个忽略没提</p>
<p>开始我想的是用手型测角度，108 嘛<br>后来发现他们是测临边角的距离，更方便与准确</p>
<p>我们都认为是正五边形后，便结束<br>拿掉眼罩前心理还惴惴不安，毕竟是只凭感觉做出来的<br>真正看到图形后，送了一口气，我心中是感叹合作真的好神奇<br>最后我们以满分的成绩完成了第一项</p>
<p>到了博物馆，我强烈建议进去吹吹空调，cooldown 下，但有人怕时间不够，而且进去可能就出不来了（囧），大家就继续上路了</p>
<p>第二个任务 猜词</p>
<p>我还没反应过来，远哥已经搞定俩了……<br>O__O”…<br>我唯一的贡献是：让他们把卡壳的放在一边，继续下一个，最后用排除法，看看会不会有突破<br>最后我们用 3 分多钟搞定，只是很遗憾的错了两个（后面才知道我们是正确率最高时间最短）</p>
<p>第三个任务 智取核弹头</p>
<p>边长四米的正方形区域，里面有个杯子， 利用 绳子 皮筋 筷子 吸管 把一瓶水灌进去，并且把杯子拿出来，整个过程，人不能进区域，绳子等物体不能落到地面</p>
<p>我的提议是扎两个孔，这样只需把瓶子抬到杯子上方就行，虽然路上会洒出来一些水<br>但他们怕这样会比较慢<br>后来得知凡 xi 他们 钱江七号 那组用了这个方法，现在想想，这样可能水流比较慢，但是可以节约 绑绳子+倒水协调 时间<br>最后我们用了最传统的办法，倒水</p>
<p>取出杯子<br>我想多缠绕，反方向缠绕，然后拉出，当然后来看视频，这方法另一组失败了，幸好幸好他们说这样不稳，用打活结吧，把这个方案否决了<br>然后我看到队长在一遍摆弄筷子与皮筋，就过去问问他（不会活结，在那边帮不上忙了）的想法<br>后来估计拿着皮筋被远哥看到了，她突然飞快地跳着跑过来，大喊：”我知道啦，我知道啦“</p>
<p>把 N 个橡皮筋叠在一起，用四个绳子拉开，然后套住被子，松开，等橡皮筋箍住杯子后，慢慢提起<br>我们一听 ！！！<br>然后立刻想到其中一些要注意的点，毕竟橡皮筋多了弹性大，箍杯子要是配合不好的话，杯子倒的可能性比较大<br>然后就开始实施了<br>这次我负责观察<br>Jepen 好像有点紧张，绳子一直放松不下来，杯子摇摇晃晃<br>我们声音协调，最后又以满分的成绩结束了最后的这个活动</p>
<p>赶公交<br>Jepen 说别的组都完成了，时间不够了（不带这样激励的啊，我们回去后，还有许多组没到呢）<br>我们走反了，还好没做反……<br>突然公交来了，大家飞奔到马路对面（我和晓东感觉还是命重要，属于过马路最慢的）<br>车上队长突然看到最后公交站还有个联系人的电话，我感觉还是有必要说一声，万一还在那里等我们呢<br>通话后知道已经回去啦……</p>
<p>DV<br>没想到波波姐拍下来了，当时确实很有意思<br>我看到自己蒙着眼，站那，好 2 啊，不说了……<br>艳娇那组，在 “智取核弹头” 中，用挤瓶子的方法给两米外的杯子注水，后来还想爬树<br>还有的想把人绑起来吊过去<br>太 NB 了</p>
<p>最后<br>我对名次是没感觉的，只要不是最后就行<br>当然最后我们毫无疑问的得了第一<br>晚上去 外婆家 小组第一次聚会，好 happy<br>还看到了远哥的房纸</p>
<p>感想<br>大学里面从来都是独来独往，虽然知道团队合作灰常重要，但一直没法感觉，去年面试说道团队，都是没底的。这次培训，亲身体验到了团队合作的神奇，真的很神奇……</p>
<p>FEEL 培训就快结束，虽然每天累得要死，但是真的很感谢冒泡鱼的大家，O(∩_∩)O 谢谢你们</p>
]]></content>
      <tags>
        <tag>Me</tag>
      </tags>
  </entry>
  <entry>
    <title>About choice</title>
    <url>/cn/About-choice/</url>
    <content><![CDATA[<h1 id="关于选择的那些"><a href="#关于选择的那些" class="headerlink" title="关于选择的那些"></a>关于选择的那些</h1><p>中国的教育，属于无神论，相信科学<br>但科学目前无法解释，意识到底是哪里来的？是否只是大脑物质的活动，为什么别的动物没有意志，而只有人类？意志能否脱离物质而存在？死了真的就一切皆为虚空了？那让我们来这里一趟干嘛？</p>
<a id="more"></a>

<p>现实是残酷的，若用深度优先，先决条件是“上帝模式”<br>不然往往是头破血流，并且由于时间箭头而没重来的机会</p>
<p>读书、学习，知道更多的信息，然后用类似于广度优先</p>
<p>但是首先要确定目的，扪心自问，灵魂到想底要什么<br>《与神的对话》中说道</p>
<blockquote>
<p>灵魂、肉体、大脑是分开的，灵魂独立于另外两者的存在，一切的痛苦，都是两者目的不一致导致</p>
</blockquote>
<p>我想，这里所说的灵魂，否就是自由意志</p>
<h2 id="自由意志"><a href="#自由意志" class="headerlink" title="自由意志"></a>自由意志</h2><p>其实更加好奇自由意志的问题<br>如果埃弗莱特的平行宇宙假说是真的，那自由意志纯为笑谈<br>因为无论做什么选择，在你选择的一刹那，世界变一分为二，也就是选择，并没有选择<br>甚至，出生死亡也是<br>在宏观尺度上，是没有区别的</p>
<p>但是，对于个体来说，确是作出了选择，这里引用一段话：</p>
<blockquote>
<p>“为什么我们喜欢硬币，因为在抛向空间的那一瞬间，答案已经明显不过”，除去明显的权威的解答，答案很多时候都在自己，只不过肉体，心理和见识都仍未强大到不需要理由/认知，能纯粹地追随内心。</p>
</blockquote>
<p>我相信自由意志，至少，选择后，这个世界对你来说是延续的，你的选择，影响着你在这个世界的路程</p>
<p>所以，怎么选择，才能有最优解</p>
<h2 id="最优解"><a href="#最优解" class="headerlink" title="最优解"></a>最优解</h2><p>最优解，又是另外一个问题<br>什么才是最优解？<br>这和一个人的世界观、人生观、价值观密不可分</p>
<p>褪墨上有片文章：九步确定你的人生目标和制定达到目标的计划<br>但关键是，一个人的 世界观、人生观、价值观也是会变的……<br>特修斯之船可以很好的说明这一点</p>
<h2 id="特修斯之船"><a href="#特修斯之船" class="headerlink" title="特修斯之船"></a>特修斯之船</h2><ol>
<li>如果把人体不同种类的细胞综合起来看，整个人体内细胞的平均年龄大约为 7-10 岁。（也就是全部换了一遍）</li>
<li>一艘船在海上长途跋涉，难免有所损坏，于是船上的能工巧匠定期更换船的一部分以维持船的正常航行。几年后，整艘船的各个零件都被更换了一遍，那么这艘船还是原来出发时的那艘船吗？如果是，那么如果将废弃的零件收集起来重新拼成一艘船，这两艘船和原来出发时的船是什么关系呢？如果不是，那么这艘船又是在什么时候变得和原来不一样的呢？</li>
</ol>
<p>这个问题很迷人，这样算的话，差不多 3 轮了</p>
<p>上面还单单说的是物质层面的情况，如果再加上接受的教育、身处的环境、曾经的经历</p>
<p>所以，每个阶段，追求的东西是不一样的<br>更佩服那些”十年磨一剑“的人<br>《一万小时天才理论》 每天 3 小时换算下来也差不多十年</p>
<p>十年磨一剑 【出处】<br>唐·贾岛《剑客》诗：“十年磨一剑，霜刃未曾试。今日把似君，谁为不平事？” （十年？不谋而合？）</p>
<p>在这种目的也在时常变换，并且不能回退的情况下，有什么办法吗？</p>
<h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p>贪心算法（Greedy algorithm）是一种对某些求最优解问题的更简单、更迅速的设计技术。用贪婪法设计算法的特点是一步一步地进行，常以当前情况为基础根据某个优化测度作最优选择，而不考虑各种可能的整体情况，它省去了为找最优解要穷尽所有可能而必须耗费的大量时间，它采用自顶向下，以迭代的方法做出相继的贪心选择，每做一次贪心选择就将所求问题简化为一个规模更小的子问题，通过每一步贪心选择，可得到问题的一个最优解，虽然每一步上都要保证能获得局部最优解，但由此产生的全局解有时不一定是最优的，所以贪婪法不要回溯。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>很喜欢的一句话，恰巧也关于选择：</p>
<blockquote>
<p>我们都不是随便的一个人遇到另一个人，我们都是经过跋山涉水，慢慢长路才找到彼此，在我们的人生长河里，这因缘际会的短暂的一瞬，那不是偶然，那是我们的选择。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Me</tag>
      </tags>
  </entry>
  <entry>
    <title>For 2012</title>
    <url>/cn/For-2012/</url>
    <content><![CDATA[<h1 id="写给逝去的-2012"><a href="#写给逝去的-2012" class="headerlink" title="写给逝去的 2012"></a>写给逝去的 2012</h1><p>我还是后知后觉，本来说是元旦总结，拖到春节，然后又到今天</p>
<h2 id="写在-2012"><a href="#写在-2012" class="headerlink" title="写在 2012"></a>写在 2012</h2><p>春节前的一个月我都躁动不安<br>不知是否与一个人在外地有关<br>过年回家时，在公交上看着那漫天飞舞的雪，银装素裹的大地，心中回复了宁静</p>
<a id="more"></a>

<p>2012，是我成长最多的一年<br>先不说外在的环境变化，已不能在用学生的标准要求自己</p>
<p>上半年，我无所事事，在家看看书，玩玩游戏<br>记得《把时间当做朋友》那本神一般的作品<br>心有切切，前后断断续续一个月才读完<br>之后感觉世界不一样了<br>大概从那时，爱上了阅读</p>
<h2 id="矫枉过正"><a href="#矫枉过正" class="headerlink" title="矫枉过正"></a>矫枉过正</h2><p>还记得大二时太极拳由僵硬到柔软的过程，一次和老师聊天<br>他说我晃的太厉害，让同学用手机拍个视频，自己看下就明白了<br>当时我愣了下，说，以为这是一个必经之路呢</p>
<p>对的，这就是 矫枉过正</p>
<p>还有以前高中时，就感觉到背疼<br>从那时接触了传统医学<br>但最近反倒感觉到四肢也疼了，还有颈枕<br>冬吴相对论里听到一句”当你意识到他的存在，就可能是出问题了”<br>本来以为更严重了，怀疑自己是不是快挂了<br>但最近在《学习的艺术》里看到，也可能是太极拳入门，感受到了以前没感觉到的<br>总之，一切继续，泰然处之</p>
<h2 id="一瞥之间"><a href="#一瞥之间" class="headerlink" title="一瞥之间"></a>一瞥之间</h2><p>有时就是那么奇怪，你在人群中，一眼便能注意到她<br>即使不是第一眼，稍微一段时间后，在茫茫的人海中，也会注意到这个人<br>仅仅只是看见，便能把她和周围的人区分开来<br>背景 性格 职业 爱好 一概不知，但你仍然能感受到她的特别</p>
<p>周六去西城溜冰场，这是人生第二次溜冰<br>很喜欢溜冰<br>一是能让自己重新感受到身为直立动物的困难，训练下小脑<br>二是对平衡的再认识，这个和太极拳应该有相辅相成的作用<br>所以决定把它变成一项周末运动的常量<br>目前转向还是用摩擦力，希望下次能用上向心力</p>
<h2 id="浮躁"><a href="#浮躁" class="headerlink" title="浮躁"></a>浮躁</h2><p>大家都在说，这是一个浮躁的社会</p>
<p>是的，大势所趋<br>有一句话：在一个不正常的地方生活久了，就会把不正常视为天经地义</p>
<p>我不否认我很浮躁<br>什么都想做，什么都没深入<br>但也很无奈，广泛阅读与关注也只是从大四开始的<br>知道 GTD，又有什么用<br>关键是时间利用的质量而非数量<br>flow-心流中，time stops for you</p>
<p>浮躁亦如此，我感觉就是如何处理 一种深与广的关系<br>先广博，如乔帮主所说，不断的尝试发现，最终，你会发现你的兴趣<br>大学有两年时间都纠结在编程上，天真的以为那是一辈子的事<br>并且以为只要称为高手、牛人，不用担心钱的问题<br>并且自诩是为兴趣而工作而非钱<br>现在看看，当时好傻好天真<br>大学无忧无虑的四年光阴里，我没做到广，虽然现在有点晚了，但我仍然要继续做这件事情</p>
<h2 id="感动"><a href="#感动" class="headerlink" title="感动"></a>感动</h2><p>谢谢合肥的那些基友（原来我很反感这个词，后来发现还有另一个意思，中国文化真的博大精深啊），以前每次难过都把你们拉出来诉苦<br>还有陪我走过一段时光的<br>还有那谁，在得知我挂五科重修一门，没拿到心理学学士学位，没考上研究生，出于无奈为了一份卑微的薪水而奔走四方，并且在我生日的前一天备受打击难过的一塌糊涂时，木有嫌弃反而安慰</p>
<h2 id="三生石"><a href="#三生石" class="headerlink" title="三生石"></a>三生石</h2><p>单单听名字就很牛逼</p>
<p>第一次接触是在《搜神记》中：</p>
<blockquote>
<p>枕卧三生石上，了悟前生来世，漱饮无忧泉水，忘却情仇恩怨</p>
</blockquote>
<p>上次 时 卡来杭玩，我 google 杭州景点时，赫然发现有 三生石 三个字</p>
<p>在我 22 岁的最后，又出现了不少偏离我所设想的发展的事情<br>并且发现了自己所做的一切，可能都是在逃避（逃避什么呢？）</p>
<p>最郁闷的是，睡了一觉，大脑把所有的事情按照自己想要的，重新编译运行了一遍</p>
<p>醒来时我发现自己睡的很沉很放松，一如大三时听到赵对我说有 BL 的那次</p>
<p>然后我就去看了下三生石，不为别的，毕竟去掉 生，就是我的名字</p>
<h2 id="功利与自由"><a href="#功利与自由" class="headerlink" title="功利与自由"></a>功利与自由</h2><p>明白了真正的自由主义，明白了遗产税的作用，</p>
<p>明白了，自己可能并没有独立的看法，与批判性思维，有十万八千里的差距</p>
<p>明白了自从《幸福课》之后，自我感觉太良好了，以至矫枉过正了</p>
<p>明白了自己还是无法给予别人承诺，无论那个人是谁</p>
<p>明白了为了不让自己或别人失望，频频选择不作为</p>
<p>明白了有时机遇用静观其变的方式，最终的结果是失去</p>
<p>明白了一旦自己受挫，还是会难过</p>
<p>但我仍然不明白，what when where who why how</p>
<p>有时感觉，自己所做的一切都是小打小闹，改变了又怎么样呢，还是产生一种无力感</p>
<p>郁郁涧底松，离离山上苗<br>以彼径寸茎，荫此百尺条</p>
<p>万 说她最近发现 只要努力，就会实现</p>
<p>但我这的模型是，并不一定能实现，至少真实的结果与自己的建模会有许多差距</p>
<h2 id="希望"><a href="#希望" class="headerlink" title="希望"></a>希望</h2><p>当然，我想，可能都是在为自己开脱，给自己找一个冠冕堂皇的理由<br>当然，更可能，我所说的，都是错的<br>但无论如何，无论怎么感叹，奇葩的 22 都过去了<br>有时会感觉有个时钟，滴答滴答的在闹钟响着<br>窃喜是否是内在的时间观察的同时，又体会到时间的流逝<br>真如，逝者如斯夫，不舍昼夜</p>
<p>我也知道希望是无所谓有也无所谓无的<br>但还是忍不住希望，已在奔第三个周期终点的路上<br>自己能有所突破，正如微软一款游戏的名字：国家的崛起</p>
]]></content>
      <tags>
        <tag>Me</tag>
      </tags>
  </entry>
  <entry>
    <title>Bye, my college</title>
    <url>/cn/Bye-my-college/</url>
    <content><![CDATA[<h1 id="再见了，我的大学"><a href="#再见了，我的大学" class="headerlink" title="再见了，我的大学"></a>再见了，我的大学</h1><p>我记得上次刚到杭州，看到这个草木成群的美丽城市，貌似抒发过一次…<br>这种耗费了四年光阴、生命中第一次感到自由的地方，只再见一次果然是不够的…<br>当然我也没啥牛逼的经历值得写出来，平平淡淡的过掉了，纯粹抒发下感情吧</p>
<a id="more"></a>

<p>从前两天六级下来，到今天搞定这件拖了 3.5 年，纠结至今的事情<br>我想，大学时代，在我的生命里，真的过去了</p>
<p>记得有天夜里，梦到 N 多的蚊子，把我痒的不行，心想，这神马破梦啊，比白骨更难受啊<br>然后我就站在坟地了……<br>虽然告诫自己不要害怕，梦嘛，just feel it，taste it.<br>好吧，我怂了，然后想跑，往哪跑呢？<br>嗯嗯，父母就在隔壁，跑到他们那里好了<br>父母，家，一直是我们受伤后，避风的港湾。</p>
<p>可惜啊，然后我醒了，发现自己孤孤单单一个人，在租的房子里，隔壁的是从没见过素不相识的陌生人<br>真的离开了，长大了<br>记得有句话：</p>
<blockquote>
<p>独立意味着更大的社会责任，自由意味着更多的包容，解放意味着更多的自我管理，长大意味着更多的付出。<br>不禁想起 peter 的伯父那句“The great ability comes great responsibility.”</p>
</blockquote>
<p>虽然我一直向往着独立自由，但真正到了这里，在某个瞬间，还是有种如老大描述的“淡淡的哀伤”</p>
<p>转入正题吧<br>我的那个大学吧，比较好玩<br>在我入校时，是我高中时向来鄙视的二本学校<br>认认真真的上完大一半年，没啥变化<br>大二开始逃课了，专业升一本了<br>大三再也不去上课时，整个学校都是一本了</p>
<h2 id="六级"><a href="#六级" class="headerlink" title="六级"></a>六级</h2><p>实际上已经没有通过不通过这一回事<br>并且，毕业后，个人感觉，证书都是浮云了<br>不过，算是给父母一个安慰吧。（本来我以为上次老爸来，是他最后一次给偶￥，这次看来，又可以敲诈他们一笔了 O(∩_∩)O）<br>而且，也算是对自己的大学的生涯画上一个句号吧。</p>
<p>当然……<br>要是他们知道……</p>
<p>记得 J·K·罗琳在哈佛大学毕业典礼上的演讲中说道：</p>
<blockquote>
<p>I cannot remember telling my parents that I was studying Classics; they might well have found out for the first time on graduation day.</p>
</blockquote>
<p>大学里，我迟到过早退过翘课过作弊过挂科过重修过表白过失恋过……<br>细数下，貌似除了奖学金助学金没拿过没打过架，别的基本都圆满了</p>
<p>当然作弊一直是我所鄙视甚至恶心的，能 60 搞定的坚持原则<br>最好玩的是还实践了《孙子兵法》中的“两军交战，攻心为上”最后“不战而屈人之兵”<br>所以打架这个，我还真不知道啥情况，原则是“人不犯我我不犯人；人若犯我，看情况而定”</p>
<p>另外一些在大三看来还不可能的事情，在最后的那段时光，也渐渐的完成了</p>
<p>遗憾也有：牌子不响，找工作及以后的发展没法作为敲门砖；战略规划由于水平视野限制，不是那么完善 等等</p>
<p>哦，对了，有一个，我应该完成的：<br>去中科大蹭课</p>
<p>我的学校虽然（省略），但是地理位置得天独厚<br>旁边有两座医学院，两个大型购物广场<br>瞧病购物逛街十分的方便<br>所以每次小聚，都是别人来我这</p>
<p>最最重要的是，离中科大不远<br>可惜了没利用上，或者根本就没想到过</p>
<p>一直自我感觉良好<br>同时貌似一直有种深深的自卑<br>记得最早时，我连别的学校校门都是不敢进的<br>路过时低着头，匆匆经过</p>
<p>等到大四，为了一份微薄的薪水四处奔波时，才不得不面对这个事实<br>每天开跑科大各招聘会，各种辛苦纠结</p>
<p>不过我突然发现，其实大部分都差不多的（普通人），一样的被斩落下马，一样的被拒<br>但是牛逼的就不一样了，在我看来神一般的公司，offer 信手拈来，拒掉毫不可惜</p>
<p>不是有句话么，个体的强大与群体是没有关系的。<br>而且在群体中，平均智商是往下掉的。</p>
<p>……</p>
<p>想到以后就要真的离开，回家再也没超过一周的时间<br>决定不再找实习，安安静静的陪父母一段时间<br>最后俩月，天天让我滚蛋（桑心啊）<br>老爸老妈说我天天呆在家里，也不出去，也不帮做家务，啥都不干，就玩游戏，趟床上发呆<br>其实那段时间，感觉知道的比以往三年的还多的东西<br>最最重要的是心智的成长吧<br>很高兴，在大学临近结束的时候，看到了这篇神奇的天地<br>很可惜一晃眼就过去了，现在没时间静下心来，抽一大段时间读书了</p>
<p>最后回了趟合肥，没别的，去答辩而已<br>最后聚了一次，在我告别合肥之前</p>
<p>现在回想那时，很是感动<br>在我离开时，不是一个人</p>
<h2 id="如果"><a href="#如果" class="headerlink" title="如果"></a>如果</h2><p>我知道“如果”是没用的，心智类书籍中反复强调这点，纯粹是浪费时间，不如着眼于当下<br>李宗仁说过，如果人不是从 1 岁活到 80 岁，而是从 80 岁活到 1 岁，2/3 的人会成为伟人。</p>
<p>就如《男人帮》中，如果，时间可以退回，我想那就是另外一种结局了</p>
<p>所以，虽然我没啥大的遗憾<br>但是如果让我在上一次大学的话，我会把时间压缩，提前半年<br>毕竟都是级数越高，时间越紧<br>刚上大学，突然解放了，疯狂是必须的<br>魔兽对战这个我疯玩了一年的时间，其实应该压缩到半年，在大一上，疯狂的玩掉<br>然后大一下接触编程，比魔兽更加有意思的东西<br>在大二上搞定 C，下看数据结构<br>大三找个房子，搬出学校。上过掉算法，下去实习<br>大四前俩月跑招聘会<br>接下来的时间通通陪父母<br>中间出去转转，好玩的、好看的，过掉驾照<br>资金方面可以问父母借（注意是“借”）</p>
<p>当然，还有另外一种可能，要是当时那个小伙是现在的我，今天就完全不同了……<br>人的认知永远都是只局限于眼前，几年以后回头想想以前的想法只会感到当时是如此幼稚和缺乏思考。</p>
<p>当然，还是当然，没有如果……</p>
<p>经济学中有个路径依赖理论，说的是，一旦人们做了某种选择，就好比走上了一条不归之路，惯性的力量会使这一选择不断自我强化，并让你不能轻易走出去。</p>
<p>无论当初的选择如何，都是自己作出的决定，自己要对自己负责</p>
<p>从毕业后，我突然感觉可能性大大下降了许多，毕竟有一些事情，已成既定事实，没法重新来过<br>后来突然在《士兵突击》中看到那个老 A 说</p>
<blockquote>
<p>22？我看你像 70！…要是我是你，肯定参加，知道为什么吗？因为我才 30，这么好玩的事情，我还没玩够呢<br>对啊，我才 22，22 多好的数字，犯傻发愣的年纪</p>
</blockquote>
<p>So, don’t work, be hated, love someone.</p>
<p>但愿当几年后，我再次回顾，<br>不是“任何一个不给力的现在，都有一个不太努力的曾经”<br>而是“一点点构筑的梦想，未来的你会感激现在这个拼命努力的自己！”</p>
<p>千言万语，说不尽，但终归有结束的时候</p>
<p>再见了，我的大学。</p>
<p>2012 年 9 月 17 日 0:00:52<br>于 杭州西溪湿地</p>
<hr>
<p>PS：<br>心像搅在一起，揉成碎片</p>
<p>写了删，删了写<br>保存草稿，断断续续几次<br>还是话不成章</p>
<p>很想哭，但是又觉得自己不再是小孩子了</p>
<p>人生能有几个四年<br>还是自由时间那么充沛，衣食无忧的四年</p>
<p>之后要在 理想与现实之间，不断妥协<br>随着年龄增长，对社会认识的加深，随着无力苍白感与日俱增，渐渐泯灭</p>
<p>但是，看到的一段话，算是给自己一个安慰吧：</p>
<blockquote>
<p>我清楚这个流光溢彩、瞬息变幻的生活空间里，每个人都有自己的选择，我的想法很简单，不必华衣锦服，无须施之胭粉, 最认真朴素积极地去生活就是让我心驰神往的本真。</p>
</blockquote>
]]></content>
      <tags>
        <tag>AAU</tag>
      </tags>
  </entry>
  <entry>
    <title>The Grandmaster</title>
    <url>/cn/The-Grandmaster/</url>
    <content><![CDATA[<h1 id="一代宗师"><a href="#一代宗师" class="headerlink" title="一代宗师"></a>一代宗师</h1><blockquote>
<p>现在我们能够做的，是找一个静静的地方，让自己静静的思考，明白该如何做，才能够不让珍贵的东西，重要的人再次失去，明白该如何做，同样的错误不会再次发生。从中吸取经验，吸取力量，继续坚定的前行，寻找喜欢的东西，碰到真爱的人，去做正确的事。——席慕容</p>
</blockquote>
<a id="more"></a>

<p>前两周，每天 6 点起床，11 点睡觉，感觉精力很旺盛，一天工作 16 小时完全不是问题<br>结果副作用出来了<br>这两天不加班，自己窝在屋里，没有网络，深刻体会到了孤独的可怕。<br>变得莫名的烦躁，不幸的是手机可以联网，于是四处骚扰<br>最多的就是《男人帮》里顾小白的那句”好无聊啊好无聊啊“<br>给一些人添麻烦了，这里说声抱歉。至于何时能稳定下来，我也不清楚</p>
<h2 id="007-与-一代宗师"><a href="#007-与-一代宗师" class="headerlink" title="007 与 一代宗师"></a>007 与 一代宗师</h2><p>大学时，每隔一段时间，就团购去影院看大片<br>那时候没钱，都是国际巨片+3D 才舍得去一次<br>工作了，反而把这些娱乐落下了</p>
<p>前几天晚上去看了下 《007》<br>挺忧桑的</p>
<p>出来又想起了 verycd《刺客信条》的那句评论：</p>
<blockquote>
<p>进去之玩了一会就有一种凄凉感 虽然城市更繁华 人物穿着更华丽 但是面对着年过半百的 Ezio 就是一种凄凉 岁月不饶人从二代刚开始青春年少的毛头小子 到现在这个满脸花白胡子爬墙老头 感想颇多 前几天正好我也过生日 感觉一年比一年快 就好象是这个游戏一般 等转眼再看自己的时候 已经老了<br>一个人的一生就在这刺客三部曲中淋漓尽致的展现出来</p>
</blockquote>
<p>《一代宗师》有许多触动的地方，不一一说了<br>最触动的一点：<br>叶问去掰宫羽田手中的饼，上下不得其手<br>账房先生评论道，太极杨露禅有“鸟不飞”的绝技，小鸟停在杨露禅的手掌中，它便飞不起来，因为杨露禅有卸力的招数，使得小鸟无处着力，小鸟就这样被关在了无形的笼子中。</p>
<p>我特地查了下这个故事，这里</p>
<blockquote>
<p>“小麻雀本来活蹦活跳，可是在武林高手杨露禅掌上就象病了腿似的，尽管一个劲地扑楞着翅膀，却如被磁性及住，吱喳乱叫，欲飞不得。原来鸟儿要飞，两脚必须均衡地在着力点上蹬起，利用反弹力奋朴翅膀才能飞翔。杨露禅的功夫，已达炉火纯青，登峰造极，掌心能够感觉到麻雀两腿的瞬间蹬力，每当麻雀蹬腿欲飞，便将掌心一沉，使鸟儿蹬力化为乌有！因此，小麻雀只能扑楞着翅膀挣扎，离不开杨露禅的掌心。”</p>
</blockquote>
<p>这个故事可能有夸张的成分，但是无论真假，都激起了我继续太极拳的兴趣</p>
<p>平时公园里，中老年练得，一般是国标的 24 式，从杨氏演化出来，实为太极操<br>这里有段历史，比较敏感，就不说了，可以自行 google 太极拳改编</p>
<p>大一时看到这么软+无力，顿时没念头了<br>后来发现，杨氏居然是陈氏演化出来，而且陈氏打起来可以呼呼风响，超适合年轻人，加上我身体素质一直不好</p>
<p>不过由最初的快，到现在的慢，才体会到，杨氏的“刚柔内含、深藏不露”有多牛逼<br>我的理解是杨氏已经把缠丝劲由外化内，蕴含在内，外面看不出丝毫，劲在内部盘旋翻转，一搭手，就完蛋了…</p>
<p>以前又坐井观天了</p>
<h2 id="我花了十八年才和你坐在一起喝咖啡"><a href="#我花了十八年才和你坐在一起喝咖啡" class="headerlink" title="我花了十八年才和你坐在一起喝咖啡"></a>我花了十八年才和你坐在一起喝咖啡</h2><p>每次见薛远，都会算我拿了多少钱，现在存了多少，而且每次算得多的离谱，弄的我以为自己已经实现了几年后的梦想</p>
<p>这个也挺无语的，也只多那么一点点，又有什么用呢，生活一团糟 ，游走在悲观与焦虑的边缘<br>其实我想说的是，为什么无缘无故的多那么一点呢？为了这一点，需要付出多少呢<br>至今让我还很印象很深的一片文章：<br>《我花了十八年时间才能和你坐在一起喝咖啡》</p>
<p>我的大学是 china other university，本来已弱的不行<br>校招那一阶段，第一次直面另外两校的学生，深感无奈</p>
<p>J·K·罗琳在哈佛大学毕业典礼上的那个演讲：<br>The Fringe Benefits of Failure, and the Importance of Imagination（《失败的好处和想象的重要性》）<br>里面有句：</p>
<blockquote>
<p>Indeed, your conception of failure might not be too far from the average person’s idea of success, so high have you already flown academically.</p>
</blockquote>
<p>所以，我一直很羡慕那些名校的学生，羡慕他们的起点，已经如此之高<br>要付出多少倍的努力，才可能赶上他们，而且，只是可能</p>
<p>每个阶段有每个阶段的烦恼<br>不知是否看到的多了一点，但正因为这一点，让我痛苦不堪<br>由于那一点，深知差距之大，对弱爆了的自己，无可奈何<br>每一件事情，每一个方向，都需要花时间去做</p>
<p>不希望自己 如一条微博所诉：</p>
<blockquote>
<p>来不及弄清楚自己想要什么，双鬓已经开始发白了；来不及确定自己的爱情，对方就已经结婚了；来不及去好好爱孩子，他就已经长大离开你了；来不及功成名就，我们就即将进坟墓了。我们害怕一切来不及</p>
</blockquote>
<p>可惜的是，第二条已经应验了</p>
<p>变成年少时最憎恶的那种人<br>当一个人选择成长的时候，往往也是选择不被人理解，因为你要走你选的路，不是他们认为你该选的路。<br>不知道是否在这个阶段，老爸老妈已经不知道我在想什么了<br>其实我自己也不知道自己在想什么，何况他人呢<br>而且，前一阵子，发现自己正在成为自己所不喜欢的人<br>一切都小心翼翼，不敢把真正的自己暴露出来<br>正如一句话：</p>
<blockquote>
<p>很多人的失落，是违背了自己少年时的立志。自认为成熟，自认为练达，自认为精明，从前多幼稚，总算看透了，想穿了。于是，我们就此变成自己年少时最憎恶的那种人</p>
</blockquote>
<p>不开心的事<br>难过时，没一个人关心我<br>看到满屏英语就晕<br>想看的书数量如帝都的 pm 爆表</p>
<p>理论都知道：<br>慢慢来，一切都来得及<br>哪里弱，补哪里<br>一次只做一件事<br>当下的力量<br>被分配的任务，天下最困难的事</p>
<p>好像走的是自我救赎之路<br>但是，弱爆成这样子，有时真感到无药可救了</p>
<p>毕业半年了<br>已经半年了<br>世界末日都过去了</p>
<p>客观的说，进步好像也是有的<br>但是曲线画出来，是无限逼近水平线的</p>
<p>朝闻道</p>
<p>还有一个让我很郁闷的地方</p>
<p>大刘的科幻里，有篇就叫《朝闻道》，<br>引自《论语.里仁》<br>里面对科学家为了了解宇宙的奥秘，甘愿付出生命，做了详尽的描述</p>
<p>虽说闻道有先后，如是而已，没啥大不了的。</p>
<p>但《道德经》中有句话：</p>
<blockquote>
<p>上士闻道，勤而行之；中士闻道，若存若亡；下士闻道，大笑之。不笑，不足以为道。</p>
</blockquote>
<p>不笑，不足以为道<br>明显的一个感觉是，大二在图书馆，看到了《穷爸爸》那本书，当时翻了翻，到铸钱币那段，感觉没啥意思，心想反正这辈子不走自己做生意的路，以后以编程为业，缩小目标，就不花时间看这个了</p>
<p>现在看来，可笑当时多傻逼，可以说，道就在眼前，我却置若罔闻</p>
<h2 id="超我、自我和本我"><a href="#超我、自我和本我" class="headerlink" title="超我、自我和本我"></a>超我、自我和本我</h2><p>每个人心中都住着三个状态的你自己：父母、成人和小孩。<br>分别对应弗洛伊德说的人格结构：超我、自我和本我。<br>超我代表法律、道德、良心，代表权威，是秩序的维护者，是严格的检察官，是神，是上帝，是悟道了的禅师，遵循至善原则。<br>本我遵循快乐原则，是一切原始的冲动、本能和欲望，是任性的，为所欲为的，以自我为中心。<br>自我遵循现实原则，协调者、平衡者，他在中间，既要满足本我的欲望，又要逃过检察官的法眼，不能完全违背超我的意志。自我就像一个商人，是可以讨价还价的；本我和超我分别在跷跷板两端，自我在中间，要平衡。自我是理性的，遵循现实原则的。</p>
<p>为什么我这么难过，一切的一切，我想，可能都是超我太牛逼了</p>
<p>我心中一直有个影子，那个是，在所有我已知领域，编程、太极拳、经络、心理、心智、以及最近的金融已大成、登峰造极的我<br>我和他直接没有过对话，一直的只有一个影子<br>如《神、学霸、人》中说的”神，一般不鸟我们“<br>但我一直试图小心翼翼的控制着自己的欲望，在追赶着那个影子</p>
<p>平时琐事颇多，没时间倾听 inner voice<br>而且大部分时间，对于自己的选择还是很满意的<br>但一个人，在家里，关上门窗，四周寂寥，静下来，自己独处时<br>就会面对超我这个神一般的那个对手，以及本我这个猪一般的盟友</p>
<p>才发现自己是如此的脆弱，甚至是懦弱而泣<br>No pain no gain，但有时想，代价是否太大了，瞎折腾啥呢，不如安安稳稳过小日子去，何尝不幸福</p>
<p>差距天壤地别，如何平衡<br>我想，一切的无力感，悲哀，便是由此而来</p>
]]></content>
      <tags>
        <tag>Me</tag>
      </tags>
  </entry>
  <entry>
    <title>So Young</title>
    <url>/cn/So-Young/</url>
    <content><![CDATA[<p>想写点什么，却又不知从何说起</p>
<p>大概进入瓶颈期了，感觉不到有什么明显的变化了</p>
<a id="more"></a>

<p>另外怪不得会有博客到微博的转变<br>已没有时间去码出一整段<br>时间完全碎片化</p>
<p>还有双拼终于越来越顺啦，除了 tyu 等字母 有时搞不清楚，需要试一试，大部分时间都无障碍<br>在图书馆查书用全拼时，明显感觉需要敲击的字幕太多了</p>
<hr>
<h2 id="杭图"><a href="#杭图" class="headerlink" title="杭图"></a>杭图</h2><p>第一次是和六安的一丫去的<br>当时我就震惊了，书架到天花板，拿书还要爬架子，很有哈利波特电影中的感觉<br>当时就想一定要常来<br>上次五一终于去呆了大半天，小试了下专题阅读（其实充其量平行阅读都算不上吧）<br>先不说阅读效果，单单是抽出相关书籍，一下刷掉 N 本，挺有成就感的，不要太爽</p>
<hr>
<h2 id="周末"><a href="#周末" class="headerlink" title="周末"></a>周末</h2><p>我们不知道变化能带给我们什么，却清楚的知道我们将失去什么<br>怪不得总是总是逃避啊逃避啊的<br>上个月跑了上海与合肥，散心的效果先不说，卡爆了是真的</p>
<p>从原来周末都是宅的，感觉又矫枉过正了，好像总在推着自己干嘛干嘛<br>把时间安排的满满的，仿佛实时多任务操作系统，一刻不停，CPU 总在满载状态<br>结果累不说，而且根本没有周末的感觉，最郁闷的是太发散，每样都没做好，空余时，又不知道从哪项开始</p>
<p>这次感觉一周的话<br>好像必须有一天宅在屋子里面，门都不开；<br>必须周五或者周六一直拖到凌晨一两点不睡<br>才会找到一点点休息的感觉</p>
<p>不过今天又跑了一天<br>上午看了 Mechanic3，又是一个人完成的，呵呵</p>
<p>我想，托尼肯定也在想，脱下那副盔甲，他到底是什么，“钢铁侠”？那别人穿上盔甲呢？<br>一直以 Mechanic 自称，后来他好像找到了答案，更加坚定，焦虑也自愈了，结尾他说“I’m ironman”</p>
<p>下午又去类似英语角的地方看了下，在读原版《art of learning》<br>之前刷过中文的了，结果还是障碍重重，悲剧</p>
<p>熬夜，困死也不睡，没节操<br>但夜深人静，白天的一切都褪去，无力感顿生，这个人是我吗？</p>
<p>王小波说，人的一切痛苦，本质上都是对自己的无能的愤怒</p>
<p>愤怒没错，发神经骚扰别人就不对了，那谁抱歉了哈<br>明天下午就做心理咨询去，已经预约了哈</p>
<hr>
<h3 id="世界读书日"><a href="#世界读书日" class="headerlink" title="世界读书日"></a>世界读书日</h3><p>4.23 翻豆瓣小组，才知道是 世界读书日<br>无奈开窍太晚，居然是人生第一次知道<br>还记得那句</p>
<blockquote>
<p>我因 200 本书而脱胎换骨，因 1000 本书而涅磐重生</p>
</blockquote>
<p>以为一直关注的战隼，1000+已经够牛逼了<br>刚刚在知乎上看到有个破 8k+<br>一瞬间，我以为自己眼花了<br>然后以为是泛读，看到笔记数后，崩溃了<br>毁三观啊<br>莫非是《天龙八部》中的扫地僧？</p>
<p>开始我以为是个例，木有普遍性<br>但现实是残酷的<br>悲催的发现破 k 的是用堆计算的<br>这些人是变态么。。。</p>
<p>瞬间我不淡定了，翻箱倒柜，把以前翻完的，只要是书，统统打上“已读”<br>由于武侠+奇幻的功劳，瞬间翻了一番，突破 200+，可惜木有质变，并且从此节操为路人<br>以此献给今天</p>
<hr>
<h3 id="心心相印-却又各自独立"><a href="#心心相印-却又各自独立" class="headerlink" title="心心相印,却又各自独立"></a>心心相印,却又各自独立</h3><p>《沧海》里有句话：</p>
<blockquote>
<p>若没有心上人在身边，纵有绝世的容光，又有什么用处呢？</p>
</blockquote>
<p>《昆仑》中相比较莺莺，我更喜欢花晓霜，如此独立的女子<br>虽然武功不会半点，但清楚的知道自己想要什么，更知道自己能做什么，善良、温暖、欣欣向上</p>
<p>如同舒婷的《致橡树》</p>
<blockquote>
<p>心心相印,却又各自独立</p>
</blockquote>
<p>但</p>
<blockquote>
<p>有时候喜欢上一个人开始，就已经失恋了 没有告白 没有牵手 没有拥抱 没有 统统没有，而我却觉得爱了好久，好像我出生开始就一直爱着这个没有什么交集的人。</p>
</blockquote>
<p>现在知道的是比以前多了点<br>过没过山，我不知道，眼界是开阔了点<br>但那次和队长喝酒，我就说，知道的是多了点，但有用吗？</p>
<p>就如</p>
<blockquote>
<p>至于后来的故事，已经错过了对的时间重新遇到对的人，于我，是殇，于她，是伤。</p>
</blockquote>
<p>我是比较崇尚自由主义的，认为尊重为真爱提供了准备，一旦那人出现，便全力以赴<br>但仔细想想，何尝不是自欺欺人<br>但不相信又有什么可相信呢，只能选择其一，人生就是那么无奈</p>
<hr>
<h3 id="致我们终将逝去的青春"><a href="#致我们终将逝去的青春" class="headerlink" title="致我们终将逝去的青春"></a>致我们终将逝去的青春</h3><p>整篇充满了淡淡的哀伤，看的我也悲伤不已。唉，大学没体味到这服药过<br>读到时，已经毕业了，悲剧，听说电影没拍出应有的味道，不看了，另外不想再被桑一次<br>上次清明后返校，看着那些在校生，真心有点羡慕<br>本来打算去 14#宿舍楼下烧点纸祭奠下，后来还是作罢了<br>很早看到的一段话，应该很能概括:</p>
<blockquote>
<p>其实我挺羡慕这些科技宅男的，主要是生活方式和团结性，可以在一起玩魔兽世界，一起玩龙与地下城桌游，一起讨论女人，一起玩动漫，一起经历男人世界中的各种欢乐事件，这么开心聚会，恐怕只有大学时代才可以办到，上了班，有了事业，也就是在一起喝喝酒，聊聊天，所有的兴趣爱好都可能再有了，因为肯定会耽误你的工作和生活，所以开心的时候，别眨眼，一眨眼，就是 30 年。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>Thinking in one year of working</title>
    <url>/cn/Thinking-in-one-year-of-working/</url>
    <content><![CDATA[<h1 id="入职快一年的感想"><a href="#入职快一年的感想" class="headerlink" title="入职快一年的感想"></a>入职快一年的感想</h1><p>JUST DO IT<br>仅仅做 IT，呵呵</p>
<a id="more"></a>

<p>还有一个月毕业就满一年了，稍微写点吧</p>
<p>当时上学很简单，并且自以为喜欢编程<br>不过那时应该是真的喜欢，大学没人管，也自发的去看<br>大概是受《做最好的自己》那本书的影响，我把数据结构与算法看的无比重要，傻傻的以为实习神马的都是浮云，以至后来屡屡吃亏</p>
<p>现在分析起来，也是那时视野太窄导致<br>人总要有点爱好，不然是多么空虚啊<br>当时只知道编程，也应该是一种寄托。如果连这个都不喜欢，还没女盆友，这样的生活也太可怕了</p>
<p>后来 offer 一签，立即从学校闪人了<br>在那一年里，无所事事，东看看西看看，发现了许许多多奇妙的东西<br>发现世界如此神奇，发现有 N 多的可能性<br>为啥我就把自己定义成程序猿攻城狮呢？</p>
<p>后来入职了，总体来说，还行<br>日子一天一天的过，平淡的像白开水</p>
<p>刚开始住的比较远，天天“时间就像海绵里的水，只要愿挤，总是能坐上公交的。”<br>明显蚁族的粪斗，想想都心酸<br>后来搬到公司旁边去了，为了省钱，房纸比较旧<br>这辈子第一次见了 大强，真不是一般的恶心</p>
<p>工作方面，总体来说，大部分时间还不太忙，开始我还在业余时间看看 iOS 开发<br>后来忙起来了，个人时间无限被压榨</p>
<p>我不知道就我酱紫还是这个行业就是酱紫<br>感觉自己有点像救火队员，哪边失火了，就被抓去哪边<br>开始时 android，后来老大让我分出点时间去看看 iOS<br>（插一句：我想每个用惯了 win 的人，接触苹果，都会被其设计震惊吧，这也是我一直想买台 air 或 pro 的原因）<br>好吧，大概看了两周，说 android 那边忙不过来了，去看 android 吧<br>后来，又被抓去编译 android 工程<br>现在又要被抓去写网页了</p>
<p>当然我也只是吐下槽了，反正对此不感兴趣了，做啥都无所谓了<br>用到啥，就临时抱佛脚看看啥，工作上应付的过去就成了<br>有些人该说，这样无法精深了<br>是的，我何尝不知道，但真心不想看啊<br>看到有同事在啃 jvm，真的挺羡慕的</p>
<p>我没语言信仰，对那个语言排行榜，也只是笑一下<br>感觉存在即为合理，每种语言都是为了处理特定问题诞生的<br>没有那种语言特别好，那种语言特别差</p>
<p>当然总有个习惯问题，我是一直以 C 来学习编程的，硬上 java，发现确实挺顺的，是给人看的语言，eclipse 用起来也比 VS+VA 舒服，那个自动提示真是太强大了<br>不过前两天把当年的毕设翻出来看看，完全不认识了，这是当年我写的么，有木有啊<br>还有 Linux 内核，0.11 版那个，2w 代码就实现了，短小精悍，真是不可思议</p>
<p>是的，时间就像乳沟，挤一挤总是有的<br>但做这行的应该都懂，回到家恨不得就睡过去，连女盆友都不想理，哪来的精力去做别的事，同时又伴随着拖延<br>是的，<strong>“我常焦虑自己时间不够，却又对仅有的一点时间挥霍无度。”</strong></p>
<p>经历了一次大裁员，大约走了一小半的人，当时一起入职的许多同胞中招<br>我成了沉默的大多数，上下班打卡，不说闲话，不怎么和周围人交流<br>项目前景不容乐观，TL 已经闪人，新 TL 非常焦急，鸭梨越来越大<br>以前我以为这边机会多，想两年跳个好点的公司。现在看看，去哪个公司，其实都差不太多</p>
<p>现在真的挺累，想辞了不干了，找个地方好好歇歇<br>但又不比上学，有父母罩着</p>
<p>转行要趁早，该何去何从？</p>
]]></content>
      <tags>
        <tag>Career</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Learn Shuangpin</title>
    <url>/cn/How-to-Learn-Shuangpin/</url>
    <content><![CDATA[<h1 id="如何学会双拼"><a href="#如何学会双拼" class="headerlink" title="如何学会双拼"></a>如何学会双拼</h1><p>最早知道双拼还是 智能 ABC 时代<br>当时右下角的那个输入状态栏有个“全拼”，点一下，变成了双拼，尝试几个字母，完全不知怎么回事<br>后来到了 搜狗输入法 如日中天的时期，拼音输入进化到了第二代，大大加速了拼音的输入速度，五笔都被冷落到一边了</p>
<p>通常我们在想一些事情时，脑子里冒出的是“声音”，而非一个个汉字<br>所以拼音更符合说话的过程，而非五笔</p>
<a id="more"></a>

<p>后来尝试双拼，主要是看到了李笑来老师的《把时间当做朋友》中的一段：</p>
<blockquote>
<p>真正体会到读书的时候记笔记、甚至大量地记笔记究竟有多大的好处的时候，惊喜之中，我竟然被自己吓出了一身冷汗。我突然明白过去我拒绝去练习盲打有多么荒谬了。而当时，就算没有一个异性的刺激，也顶多花上一个星期就可以搞定的事情，我竟然只不过是出于懒惰而拒绝学习和练习。如果，这个念头让我起了一身的鸡皮疙瘩，哪怕 5 年前，我花上一个星期学会了盲打，那么，我可以多出多少读书笔记，积累多少文字呢？——更何况差不多 15 年前，我就有机会、并且完全可能学会盲打。天哪，我浪费了多少时间？不敢再想下去了。</p>
</blockquote>
<p>然后就开始查资料，不难，大家百度看下就懂了<br>毕竟都是拼音一个体系的，就像小时候说的是家乡话，后来学普通话基本上没障碍</p>
<p>面临几个问题：</p>
<h2 id="1、速度"><a href="#1、速度" class="headerlink" title="1、速度"></a>1、速度</h2><p>若不是奔着速度去的，没事闲的蛋疼的换成双拼</p>
<p>那么双拼快在哪里呢？<br>举个例子：<br>我要打 “你好，双拼世界”<br>全拼是<code>nihao,shuangpinshijie</code><br>双拼是<code>nihk,udpnuijx</code>（我用的自然码）<br>这只是六个字，就减少了 8 次击键次数，一天 3k 来算，也少了 4k 多次，单单对保护手指也是有利的<br>当然你可能说 “我有超级简拼“，<code>nh,spsj</code><br>那么重码问题我就不说了，您翻页慢慢找吧<br>而且双拼也是拼音，没道理不支持超级简拼</p>
<h2 id="2、跨输入法"><a href="#2、跨输入法" class="headerlink" title="2、跨输入法"></a>2、跨输入法</h2><p>全拼，无论是哪个输入法，键位方面大家长的都一模一样<br>而双拼是有好几种方案的，常见的有以下几种（搜狗设置里可以看到）<br>搜狗自带的也有一个搜狗方案</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Shuangpin.jpg" alt=""></p>
<p>之前我还查过哪种方案效率更高<br>没碰过的童鞋就不用纠结了，大差不差<br>要说真有差距的话，唯手熟尔</p>
<p>另外如果不是码农，熟悉微软的那个就 OK 了，毕竟微软的名气，一般的输入法 QQ 啊神马的都支持这个</p>
<p>如果用  全家桶，并且不想装第三方输入法，那就用搜狗方案<br>这是唯一一个不用越狱，iPhone Mac 都支持的<br>我最早用的自然码，无奈改成了搜狗方案 🤷‍♂️<br>还好键位差不多，几下就熟悉了</p>
<p>码农童鞋请继续</p>
<h2 id="3、跨平台"><a href="#3、跨平台" class="headerlink" title="3、跨平台"></a>3、跨平台</h2><p>以前曾经玩过 dvorak 键盘，一个月键位熟悉后（qwerty 键盘用了不知几个月才能盲打的），不知是否是心理作用，感觉速度确实变快了，由原来的 160 多提升到了 220 多</p>
<p>windows 可以通过修改注册表的方式实现 qwerty-&gt;dvorak 的键位映射，ubuntu 却不行，再加上大二后手机逐渐流行，俩个键盘直接转换的十分痛苦，无奈又回到了 qwerty，至今</p>
<p>有了前车之鉴，所以选方案时特别慎重，万一哪个不支持不蔫了</p>
<p>最后选定了 自然码，无论是 ubuntu，还是 mac，甚至 android 的 QQ 拼音，都有这个“自然码”</p>
<h2 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h2><p>练拳不练功，到老一场空<br>原理、方案啥的都搞清楚了，终于到了最后一步<br>也是<strong>最简单</strong>的一步</p>
<p>对，您没看错没错，这是最简单的一步<br>之前已经说过了，如果说全拼转五笔犹如学英语，那么全拼转双拼就像学普通话那么简单<br>所以尝试过五笔而放弃的同学不要有心理阴影哈</p>
<p>说最简单，因为你只要把那个键位打印出来，放在电脑旁边，然后 QQ 打开，每天和平时一样，和别人聊聊天，就 OK 了</p>
<h2 id="自我实践"><a href="#自我实践" class="headerlink" title="自我实践"></a>自我实践</h2><ul>
<li>前两天：比较怪异（这时你会不停的想换回双拼，特别是 MM 说你打字肿么那么慢啊，是不是在忙别的事情啊啥的，这点自尊心要不得）</li>
<li>后两天：习以为常（速度渐渐提升，除了个别韵母需要瞄一眼键位表，自尊慢慢恢复）<br>一周后：自然而然，从此全拼为路人</li>
</ul>
<p>那么恭喜你，又多了一项居家旅行装 B 必备的技能！<br>特别是别人用你电脑，按出一连串莫名其妙的词语时</p>
]]></content>
      <tags>
        <tag>Shuangpin</tag>
      </tags>
  </entry>
  <entry>
    <title>UX of Kindle Paperwhite</title>
    <url>/cn/UX-of-Kindle-Paperwhite-/</url>
    <content><![CDATA[<p>海淘日版，到手几分钟，屏幕中间就莫名其妙的出现了竖纹，而且越来越多，郁闷<br>后来 google，据说电子墨水不要靠近磁场，莫非是手机扬声器导致？<br>目前还能凑合着看，真影响识别字了，再联系客服<br>日版无法在大陆维修，不差钱的还是国行吧</p>
<a id="more"></a>

<p>以前看到过同事的 kindle5，翻页时刷的闪一下<br>对于习惯手机等刷新速度的我来说顿时感觉无法接受<br>买这个实在是等几个月了 mini2 还不发布，合肥这边图书馆又不给力</p>
<p>真正用了后才感觉到为啥被称为阅读神器<br>首先电子墨水保护眼睛、还没手机重、功能单一减小干扰</p>
<p>而且以前手机看书有许多问题<br>屏幕坏点无法接受、PDF 转换后格式不如意、自定义字体、聊天上网玩游戏等等等等</p>
<p>有一天我看着看着突然发现自己下意识的忽略了上面那些问题，而完全集中在内容的获取上了</p>
<p>只能感叹这东东体验做的太牛了——让我都没意识到不舒服，真心超值超赞</p>
<h2 id="如何利用推送："><a href="#如何利用推送：" class="headerlink" title="如何利用推送："></a>如何利用推送：</h2><p>一搜教程一片，一步步做就行了，自己用的红色了</p>
<h3 id="1、书"><a href="#1、书" class="headerlink" title="1、书"></a>1、书</h3><p>TXT RTF 等格式，email 到 <a href="mailto:yourname@free.kindle.com">yourname@free.kindle.com</a>（amazon 帮你转换）<br>PDF 可以直接看，但有边距，横屏还行<br>非要转的话，可以利用 calibre 转换成 mobi email 到 <a href="mailto:yourname@kindle.com">yourname@kindle.com</a>（虽然这个效果也不是很好，但别的转换软件，试了好几个，比较来看，都没这个好）</p>
<h3 id="2、新闻、博客-rss"><a href="#2、新闻、博客-rss" class="headerlink" title="2、新闻、博客 rss"></a>2、新闻、博客 rss</h3><ul>
<li>Kindle4rss 都设置好了，发现只有付费用户才能自动推送，坑爹啊！！！</li>
<li>爱看豆 正好服务器好像在升级，停止注册</li>
<li>狗耳朵 名字我不喜欢，最后才实验的这个，不想挺满意的</li>
</ul>
<h2 id="刷系统："><a href="#刷系统：" class="headerlink" title="刷系统："></a>刷系统：</h2><p>kindle 可以刷成多看系统<br>里面有两个非常喜欢而 kindle 原生系统没有的功能：</p>
<ul>
<li>多平台同步</li>
<li>阅读时间统计</li>
</ul>
<p>到手时 kindle pw 系统已经升级支持 pdf 了，并且可能变砖以及维修，就没闲的蛋疼的刷多看</p>
]]></content>
      <tags>
        <tag>Kindle</tag>
      </tags>
  </entry>
  <entry>
    <title>Warm Acupuncture Therapy</title>
    <url>/cn/Warm-Acupuncture-Therapy/</url>
    <content><![CDATA[<h1 id="温针灸"><a href="#温针灸" class="headerlink" title="温针灸"></a>温针灸</h1><p>今天扎承山，好像找对位置了，也不是很疼，一寸多就有酸的赶脚了<br>把艾柱放到针柄上，点火</p>
<p>开始还好，火星慢慢的燃<br>星星之火可以燎原，烟越来越大，估计也是吓到了<br>不适感越来越强，以至我有种强烈的幻觉：穴位被烧焦了囧</p>
<a id="more"></a>

<p>赶紧淋水，听见呲的一声，继而冒出许多烟，仿佛在打铁<br>不想点燃的艾毅然顽强，只好端水杯了<br>虽然最终像尚未燃尽的烟那样不甘的灭了<br>但艾柱和针仿佛要死在一起，肿么都分不开<br>我也不敢有啥大动作，毕竟另一端扎在我肉里呢 o(╯□╰)o</p>
<p>由于上面有一坨艾柱，只好硬拔，感觉像是有 101 粘住了似得，异常痛苦</p>
<p>一身的汗，不过洗脸的时候感觉小腿那里还蛮爽的</p>
<p>回想分析：<br>本该龟缩防御结果用了 hit run hit<br>再加上没侧向摩擦力的辅助防御，导致伤害值大幅增加<br>所以太烫了可能是幻觉，针尖位移扯动神经纤维才是原因</p>
<p>当然最可能的是我神经质</p>
]]></content>
      <tags>
        <tag>Acupuncture</tag>
      </tags>
  </entry>
  <entry>
    <title>Travel to Beijing</title>
    <url>/cn/Travel-to-Beijing/</url>
    <content><![CDATA[<h1 id="帝都之旅"><a href="#帝都之旅" class="headerlink" title="帝都之旅"></a>帝都之旅</h1><p>提起帝都，我脑子里就出现这样的画面：黄沙漫天，路人带着厚厚的口罩；一下雨就可帝都看海、划船</p>
<p>不想下车后发现天空十分不给力，湛蓝湛蓝，恨不得在上面打出几个字宣称“我是天蓝色”<br>到了导游给安排的宾馆后，我和我的小伙伴都惊呆了：那是一排排的瓦房、瓦房啊</p>
<a id="more"></a>

<h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><p>早点，发现满地塑料袋外加脏乱差，仿佛就是我家颍南镇那大排档后的街景<br>之后在马导的带领下，感受到了帝都的生活是如此的不易<br>其间马导一直在不停的赶路，仿佛想快速结束一天的行程<br>貌似凌波微步已有小成，不见有啥大幅度动作，却刺溜刺溜走的飞快，把我们甩得老远老<br>半天之内，我们就东奔西走了天安门，国家博物馆，军事博物馆，然后去了水立方/鸟巢</p>
<p>中午 KFC 提到小四，我知道是 小时代在 verycd 上获得了惊艳的 0.9 分，最低分好像是 1 分，0.9 怎么来的呢？不觉明厉<br>之后又被迫看了一场杂技演出<br>晚上检查结果喜人，辛辛苦苦养一年，一下就晒黑了</p>
<p>还好同行的一对夫妻的车票是后天的，不然难保第二天就回去了<br>深刻体验了下北漂一族的蚁族的奋斗以及到处宣传的中国梦</p>
<p>晚上在一个啥号称遍地黄金的街吃了顿大碗居，听马导的一个朋友唠唠叨叨自己在帝都多么多么的不容易，自己本来可以在事业单位，来帝都闯荡<br>我一边喝水一边想，靠，好像天下就你一人苦似的，体亏屁思<br>不过毕竟是人家请客，还得装作很同情的样纸，还好没笑场<br>不想最后，那对夫妻要面子，抢着把帐结了，那导游欢天喜地的拿回去报销了<br>出来的时候，我模仿电影霍比特人里，Gandalf 对 Bilbo Baggins 所说：</p>
<blockquote>
<p>The world is not in your maps and books ……When you come back, you will not be the same.<br>世界并不在你的地图与笔记里……当你回来时，你从此与众不同。</p>
</blockquote>
<p>PS1:高一被吃倒闭的那个大碗居？<br>PS2:王府井，与此同时 @新华视点：30 日晚 20 时 42 分许，北京王府井新东安市场门前，一男子持刀将一女童扎伤</p>
<h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><p>去故宫看了下，不知为何，赶脚一砖一瓦都透漏着浓浓的封建愚昧思想<br>导游在那旁若无人的巴拉巴拉，风水、阴阳神马的，倒是有俩路人成了免费观众</p>
<p>PS：其中一只还是华为的码农</p>
<p>其间看到一个长头发的外国女孩纸，低着头，安静的倚着栏杆，脸上有着可爱的雀斑</p>
<p>PS：怪不得有些白种人把皮肤晒成小麦色<br>再 PS：看到这种人之后，感觉世界都安静下来了，我一共也就见到过数次。在这个浮躁喧嚣的社会，给人以宁静，也不知我啥时候能不假借外物达到这样的境界</p>
<p>晚上马导给换了家五星酒店，不，五环外快捷宾馆<br>在怎么把肉身送到目的地时起了分歧<br>之后做了好长的地铁，发现有些年轻人在看 手机/书，抓紧一分一秒的充电，包括我们的马导</p>
<p>这不禁让我想起了俄罗斯民族的阅读量，大天朝终于有点起色了<br>但这样下去会不会不约而同呢？男默女泪啊</p>
<p>PS：经常不和女孩纸约会而变成了通知</p>
<p>我本着不作为的心态，不想跟着躺枪，并且情况越来越糟<br>第一天我还不时吐槽一下马导，现在已经无力吐槽了<br>人艰不拆，此处省略</p>
<h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><p>本来我是还想去北大等若干高校 以及 中关村转转<br>不过听说最近新生开学，可能不让进<br>再加上前几天的泰囧， 细思恐极，啊痛悟蜡，顿生闪退的小念头</p>
<p>一看时间，果断千里走单骑，<br>在南站喝了一瓶来自中华民族西方青藏高原的水，顿时充满正能量<br>车上看了一会儿书，下车买了个冰激凌<br>喜大普奔</p>
<p>当然图样图森破了<br>就在这时来个短信，被要求请吃饭<br>晕，不知道累觉不爱么<br>刚从帝都回来，累个半死，还请吃饭，再说丫男盆友呢，<br>然后这两天看的 willpower 生效了，想起了那个 green exercise，深呼吸几口气，问为啥，答曰没吃饭<br>又想起当年被十动然拒，以及之后的各种坑爹及狗血事件，回过头来看像是一本土到掉渣的恶俗言情小说<br>我去年买了个表，没算账就八错了，智捉</p>
<p>到家后，上了一个多小时的网，发现没水<br>顿觉修正后的马斯洛需求层次太准了</p>
<p>跑去交水费，营业员一脸诧异，没欠费啊<br>正在疑惑，房东一条短信，说他把总闸门关了</p>
<p>卧槽，你妹啊！！！想来此时他们还在红皮小火车上硬座</p>
<p>后来听房东妻子说，他们的那节车厢，因线路老化起火，之后又被警察叫去录笔录，算算也是那个时候吧</p>
<p>所以，说话不能太狠，做人不能太绝啊，骚年</p>
]]></content>
      <tags>
        <tag>Travel</tag>
        <tag>Beijing</tag>
      </tags>
  </entry>
  <entry>
    <title>Use Github Pages as a blog</title>
    <url>/cn/use-github-pages-as-a-blog/</url>
    <content><![CDATA[<p>Finally, I found here since I wanted a blog of my own several months ago.</p>
<p>There are a lot of Public blogs such as douban, sina, but none of them I liked.</p>
<p>I just want a place where no one knows me, and I can record some of my <strong>weird experience</strong> or <strong>ideas</strong>.</p>
<a id="more"></a>

<p>Qzone was my long used blog, but all people in there were my friends or colleagues. I do not want to treated as a <strong>Psychopathy</strong>. ^_^</p>
<p>I followed <a href="http://jekyllrb.com/">jekyllrb</a>, step by step, it seems worked, the page was online!</p>
<p>(Now, I’m using <strong>Hexo</strong> instead of jekyll)</p>
<p>In fact, I heard <a href="http://github.com/">github</a> can be used as a Blog from one of my schoolmates one year ago. But this task was put off day by day. I thought that there must be a lot configs to setup. Not only I do not like <strong>complications</strong>, but also as a <strong>procrastinator</strong>.</p>
<hr>
<p><a href="http://www.englishiskillingme.com/">English Is Killing Me</a>, I haven’t had enough capability to do this.</p>
]]></content>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Two bottles of blood caused by Jiaduobao</title>
    <url>/cn/Two-bottles-of-blood-caused-by-Jiaduobao/</url>
    <content><![CDATA[<h1 id="两瓶加多宝引发的血案"><a href="#两瓶加多宝引发的血案" class="headerlink" title="两瓶加多宝引发的血案"></a>两瓶加多宝引发的血案</h1><p>两个小伙伴，关系挺好的<br>其中一个是警校的，另一个是学中医的</p>
<p>中医的小伙伴过来做客，临走的时候产生口角，被罚以 5 元买下刚刚喝掉的一瓶加多宝<br>由于高于市场价将近 43%，可能引起了中医小伙伴心理失衡，他居然铤而走险，妄图掳走另一瓶加多宝<br>被发现后自然事件性质升级，警校的小伙伴感觉在精神上受到了侮辱<br>并且中医的小伙伴顽固抵抗，同时不自觉的带上了嘲讽技能<br>最后居然企图以人民币摆平事件，之后就被上拳了</p>
<a id="more"></a>

<p>我以为 学中医的那个小伙伴像我这样，从小到大从没动过手，甚至没怎么见过人动手，临场经验不足，所以才一直处于被动挨打状态，不躲不闪，傻到以肉身吸引 dps<br>后来才知道原来我图样图森破了</p>
<p>我反应过来想着拉架的时候，战斗已经结束了<br>事发太过突然了，我根本没反应过来，中医的小伙伴就被击中了<br>最后一击是一个飞踹+后脑补刀<br>事后脑补不知怎么出现了街机中的 2x 连击<br>大概也是没想到警校的小伙伴真的会动手吧，惊呆了！</p>
<p>之后警校的小伙伴堵着门，不让中医的小伙伴走，当时我不理解，现在才想起来<br>武侠小说中经常出现受过一掌之后，当时无碍，跨出大门几步后便吐血倒地<br>当然最后在协商一致的情况下，中医的小伙伴还是走了</p>
<p>放心不下，询问他伤势如何，被踹有没有受内伤，肚子上有没有淤血<br>不想毫发无损并且已经和他 GL 活跃在约会现场</p>
<p>-_-|||</p>
<p>这边警校的小伙伴却说手软组织好像伤到了，一动就疼，忍不住喷云南白药，敷药疗伤</p>
<p>-_-|||</p>
<p>以前还特地询问过有中医的小伙伴没有修炼内功，都会针灸了难倒不会点穴？<br>结果还被信誓旦旦的告知没有</p>
<p>鉴于他 GL 姓张，莫非在那一刹那发生了以下情节：</p>
<blockquote>
<p>便在这万籁俱寂的一刹那间，中医的小伙伴突然间记起了教科书中的几句话：“他强由他强，清风拂山冈。他横任他横，明月照大江。”他在自习室诵读这几句课文时，始终不明其中之理，这时候猛地里想起，以警校学生之强横狠恶，自己决非其敌，照着教科书中要义，似乎不论敌人如何强猛、如何凶恶，尽可当他是清风拂山，明月映江，虽能加于我身，却不能有丝毫损伤。然则如何方能不损我身？课文下面说道：“他自狠来他自恶，我自一口真气足。”</p>
</blockquote>
<p>T M D 这是在玩我么</p>
<p>鉴于这两个恐怖分子经常会在我方圆五尺以内活动<br>我决定这周末尽量完成 Chum kiu，以防万一</p>
]]></content>
      <tags>
        <tag>Me</tag>
      </tags>
  </entry>
  <entry>
    <title>Games</title>
    <url>/cn/Games/</url>
    <content><![CDATA[<h1 id="那些年刷过的游戏"><a href="#那些年刷过的游戏" class="headerlink" title="那些年刷过的游戏"></a>那些年刷过的游戏</h1><h2 id="大富翁"><a href="#大富翁" class="headerlink" title="大富翁"></a>大富翁</h2><p>股市转到他们总和</p>
<p>结果一个突然事件，就破产了。。。</p>
<p>下次果断买保险</p>
<a id="more"></a>

<h2 id="radiant-defense（炫光防御）"><a href="#radiant-defense（炫光防御）" class="headerlink" title="radiant defense（炫光防御）"></a>radiant defense（炫光防御）</h2><p>不想从 PC 游戏脱离出来后，迷上了手游<br>植物大战僵尸 2 速度通关后，意犹未尽<br>想看看别的塔防，然后就发现了</p>
<p>radiant defense，中文叫做炫光防御<br>如名，画面非常绚丽，一下就喜欢上了<br>却不想是最难的一个游戏</p>
<p>玩着玩着也感觉到了，前期过的惨点，把科技攀上去，后期就比较顺畅了<br>相反，前期比较顺畅的话，后面难免拆东墙补西墙</p>
<p>今天第十关过了后，脑子里一直有那个动感的音乐，看文字赶脚在跑</p>
<p>之后就在知乎上看到了那个 TOP 的回答，卧槽，</p>
<p>过了一会儿，冷静下来，想想，和别人比啥呢，走自己的路</p>
<h2 id="Anno-2070-深海"><a href="#Anno-2070-深海" class="headerlink" title="Anno 2070 深海"></a>Anno 2070 深海</h2><p>这个仿真度太高了，并且游戏节奏非常慢，像是真实世界的模拟<br>玩一个月都没问题，向魔兽那样一场战役十几分钟甚至几分钟，根本不可能的</p>
<h3 id="一-要注意民众"><a href="#一-要注意民众" class="headerlink" title="一 要注意民众"></a>一 要注意民众</h3><p>以往的游戏，人都是造出来，虽说不是畜生，至少也是炮灰，被拉去做牛做马<br>而这个里面的人仿佛经过了文艺复兴，走上了通往自由的道路<br>统治者（我）成了服务人员，要把人民当大爷供着<br>完善各种设施 医院 各种食物 公安局 音乐厅 等等、满足各种各样的需求<br>这样人们才愿意过来，然后定居，税收</p>
<h3 id="二-各国关系"><a href="#二-各国关系" class="headerlink" title="二 各国关系"></a>二 各国关系</h3><p>会有各种合作，实现双赢<br>当然还有杀手锏：塞钱</p>
<h3 id="三-资源"><a href="#三-资源" class="headerlink" title="三 资源"></a>三 资源</h3><p>岛屿就那么几个<br>有些核弹遗留的贫瘠之地，有些是过度工业化留下的废墟，经常伴随酸雨<br>有些土壤比较温和，并且面积比较大，占据天时地利，甚至可能出现未来科技的神迹<br>全球市场，可以抢地皮然后卖地皮<br>还可以投资别国，居然还有风险控制</p>
<h3 id="四-操作"><a href="#四-操作" class="headerlink" title="四 操作"></a>四 操作</h3><p>键盘都不用，一个鼠标甚至触控板就行了，魔兽那拼 APM 的时代一去不复返了<br>不知道是不是遗漏了那些操作，除了跨海贸易，别的大小事情都要我来过问<br>各个岛屿之间的资源居然也得我来平衡<br>根本控制不过来，顾此失彼<br>恰好正在看《失控》，里面描述的分布式与小而美</p>
<h3 id="五-战争"><a href="#五-战争" class="headerlink" title="五 战争"></a>五 战争</h3><p>略过池城，直接攻打仓库与港口，暗含釜底抽薪，事半功百<br>爆仓后，周围建筑就成了无源之水，无本之木，轰然倒塌</p>
<p>外交方面，伸手不打笑脸人，四处塞钱，看周边国家摩擦，打的不亦乐乎 ，自己安安静静的发展</p>
<p>记得在初中历史时，我还问老师关于闪电战的事，为啥欧洲有些国家没打就投降了<br>老师笑笑，几百辆坦克压过去，怎么打<br>当时我只知道的是天朝动则百团大战，不知道外国战争在人口上的艰辛<br>并且当时的理念是士可杀不可辱，宁可战到只剩一砖一瓦，也不向敌人让哪怕半步<br>何况人家只是开到国界线，一炮未发，怎么就跪舔了呢（那时还没这说法）<br>那时我还无法理解甚至不知道兵临城下，不战而屈人之兵的境界</p>
<p>当我在外交满状态的情况下，分布潜艇，之后几乎同时一仓一核弹，越过宣战，直接把对方爆出局的时候，就好像有点懂了</p>
<h2 id="刺客信条-4"><a href="#刺客信条-4" class="headerlink" title="刺客信条 4"></a>刺客信条 4</h2><p>本来以为 艾吉欧的 兄弟会 启示录 一生戎马生涯之后，再无神作</p>
<p>该弄的 爬墙 刺杀 各种东东都弄了，没啥惊喜了</p>
<p>在 verycd 看到刺客出 4 了，先感叹下时光，然后看到 under the black flag</p>
<p>之前看过一部纪录片 China Revolution ： under the red flag，不多说，自行脑补，所以 4 的名字好霸气有木有</p>
<p>这个再现了大航海时代， 龙卷风 海浪，狂风暴雨中海战</p>
<p>好过瘾啦</p>
<h2 id="黑道圣徒-4"><a href="#黑道圣徒-4" class="headerlink" title="黑道圣徒 4"></a>黑道圣徒 4</h2><p>这个让我肿么说</p>
<p>一如既往的搞笑，处处透露着黑色幽默</p>
<p>下面的事情真的惊呆了有木有</p>
<p>外星人哎！！！</p>
<p>然后…然后….</p>
<p>超能力？！</p>
<p>如果你玩过 虐杀原型，这次一定不陌生<br>如果你看过黑客帝国，完全就懂了</p>
<p>看那动作<br>跑酷 和艾利克斯一样有木有<br>跳跃与蓄力 和尼奥一样有木有<br>从天降临 和超人一样有木有</p>
<p>还有不要去码 (๑′°︿°๑)暴露了，不然容易假死与强行退出</p>
<p>真是一座自由之城</p>
<p>唯一不足的是地图和三代基本一模一样，，对于超人来说，有点小了</p>
]]></content>
      <tags>
        <tag>Games</tag>
      </tags>
  </entry>
  <entry>
    <title>How to quit games</title>
    <url>/cn/How-to-quit-games/</url>
    <content><![CDATA[<p>这真是一个漫长的话题，其难度不亚于许多人戒烟吧。<br>目前有点想法，逐渐在尝试，慢慢记录下来</p>
<a id="more"></a>

<h2 id="如何戒掉游戏"><a href="#如何戒掉游戏" class="headerlink" title="如何戒掉游戏"></a>如何戒掉游戏</h2><p>原理应该和《如何戒烟》差不多<br>记得很早时<br>玩 Anno 2070 时，我在不停的观察，并且用上番茄工作法，定时暂停游戏，休息<br>之后我发现了<strong>激情</strong>的作用<br>当然你可以说这个<strong>激情</strong>是假的，类似于香烟这类不好的东西所激发出来的<br>但产生的作用却是实实在在的<br>前几个番茄钟还能按点休息，<br>之后就不行了，即使我已经很疲惫了，但还是沉浸在其中</p>
<p>之后，我把这种模式用在了学习上<br>虽然无法做到</p>
<p>可能会复发，继续观望吧</p>
<h2 id="为何沉迷于游戏"><a href="#为何沉迷于游戏" class="headerlink" title="为何沉迷于游戏"></a>为何沉迷于游戏</h2><ul>
<li><p>及时响应<br>建一栋房子，移动一艘船</p>
</li>
<li><p>追求捷径<br>也就是作弊，我玩游戏时，没有不用修改器的<br>大致上相当于 RMB 玩家一投数 W 砸等级的心理吧</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Games</tag>
      </tags>
  </entry>
  <entry>
    <title>Why Hexo</title>
    <url>/cn/why-hexo/</url>
    <content><![CDATA[<p>第一次搭建的时候用的是 Jekyll，Octopress 没试过<br>Jekyll 的框架设计分为 代码 + 生成网页 两部分<br>上传到 github 的时候 push 上去的是代码部分，而 hexo 是本地生成好的网页，速度上应该会有一定的优势<br>看到默认模板也比较漂亮，所以昨天换成了 hexo</p>
<a id="more"></a>

<p>感觉 hexo 最大特点是隐藏了繁琐的各种命令<br>用 Jekyll 的话，从搭建到完成至少十几条吧<br>而写新文章至少要</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jekyll new post xxx</span><br><span class="line">vim _post/<span class="variable">$time</span>-xxx</span><br><span class="line">git commit -a -m xxx</span><br><span class="line">git push remote master</span><br></pre></td></tr></table></figure>

<p>也许在不少人看来，已经很简单了</p>
<p>但要知道有些人<strong>并不是攻城狮</strong>，他只是想不用脑子搭个博客，重点是在 <strong>写作</strong> 上面<br>而写之前要帕拉帕拉打那么多命令，万一脑抽忘了一条，或者少个参数，还得-h，万一英文不好，还得 google，被墙，还得 baidu，等到真正写作的时候，不知道都几个番茄钟了<br>并且 jekyll 至少要有点 git 的概念，如果写中文博客的话，还要去改 ruby（utf-8）<br>天天天天天天天哪！</p>
<p>而 hexo 真是简单到爆啊，全程仅仅需要知道 8 个字母</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n <span class="comment"># new</span></span><br><span class="line">hexo g <span class="comment"># generate</span></span><br><span class="line">hexo s <span class="comment"># server</span></span><br><span class="line">hexo d <span class="comment"># deploy</span></span><br></pre></td></tr></table></figure>

<p>对于我等非专业攻城狮来说，用起来真是爽到泪流满面呐</p>
]]></content>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Mum Dad</title>
    <url>/cn/Mum-Dad/</url>
    <content><![CDATA[<p>想想也挺悲哀的<br>我所在的这座小城镇的父母，穷其一生，为了孩子，从来没考虑过自己<br>不知道自己的兴趣，自己想要什么，人生的意义，如同 NPC</p>
<a id="more"></a>

<p>大学时经常看到砸锅卖铁供养孩子的报到，每每看到这里，心中都是百般滋味<br>最近网上有张图：别抱怨父母，他们可能已经给你自己能给的最好的了<br>大家看着好像都挺感动的，而我则感觉心酸死了</p>
<p>身为孩子，我们是不应该抱怨父母<br>由于历史局限性，他们成了被愚弄的一代<br>他们不知道，甚至没意识到，不从自身做打算，把自己提升<br>及时再节省，也无法为孩子提供相应的资源</p>
<p>这个时代变了，分分秒秒都可能是一个新的世界<br>我们处在漩涡当中，生怕跟不上时代的步伐，被社会残酷的抛下</p>
<p>而父母几十年如一日的生活在那个仿佛与世隔绝的小城镇中，没啥大的变化<br>以那时的世界观与经验来告诉我们怎么做</p>
<p>虽然最后可能还是他们对的，但仍然无法妨碍我们踏出的脚步<br>当我们以自己坚定的脚步走向自己认为是康庄大道而他们认为是邪门歪道的方向时，他们的无奈却又无能为力，痛苦的指责我们的同时又无法跳出旧有的条条框框</p>
<hr>
<p>这可真是小城镇，别地儿青春期发生的代沟，快过青年期才发生<br>和父母大吵了一架<br>说了一天，我老爸又开始冷暴力<br>处处表现出哈佛心理学中的依赖性人格<br>开始还以理相争，之后终于受不了了，吵了起来，我说的太激动，居然哭了<br>这还不算，边哭边想这也太假了，我居然能主动调度泪腺了</p>
<p>而且发现，父母居然是，只要我声音足够大，能压倒他们，战斗就算结束了<br>摆事实讲道理的民主方案是行不通的，还是要走暴力执政，以毒攻毒</p>
<hr>
<p>看我老爸老妈，比较好玩，他们的人生就是一个个坑连接起来的，刚爬出来又掉到另一个坑里去了<br>最关键的是，他们掉下去的毫无知觉，有时可能想下自己怎么那么倒霉，但很快又到按部就班的生活中去了（没有自由意志？）</p>
<ul>
<li><p>拖家带口<br>老爸老妈早期不太清楚，毕竟那时我还不存在，最早的印象也是三四岁了吧<br>老爸是五个孩纸中最小的一个，有记忆时，老爸的爸、老爸的奶已经很老了<br>一般说来，最小的那个往往是不负责任的那个，我爸正好相反，爷爷、老太常年和我们住在一起，我都是睡客厅的说<br>再加上小孩又要上学（我，我不是故意的啊 T.T）<br>我感觉，这种情况下，任何理想都会被碾碎<br>如果是我，只能如《月亮与六便士》中，消失掉<br>还好老爸最大的梦想就是从农村走向城市，他做到了，然后农村户口值钱了<br>这特么的不是坑爹么</p>
</li>
<li><p>买房<br>正好豆腐渣工程猖獗时期，后来单单是房顶漏水，持续投入房价的 20%？（算上通胀）</p>
</li>
<li><p>下岗<br>爷爷老太相继去世后，我们就真的是一家三口生活在一起了<br>老妈单位是国企，正好改制，之后就下岗在家了<br>说是我上学，在家看我，有效果么（身为当事人的我笑而不语）<br>全靠我爸支撑了</p>
</li>
<li><p>养东西<br>养神马死神马<br>花花草草、金鱼都以死掉为结局<br>后来养了一只小猫，由于猫不像植物那样不能移动，几个月长大后跑掉再也没回来<br>哦，还有我，小时候被暴打各种抗生素，用一切不科学的手段整了一遍<br>还好最终活下来了，虽然目前还有些小毛病，但至少还能用，并且转用中医经络、太极拳等来治疗<br>我老爸老妈还是原来的样纸，俩人一身慢性病就不说了<br>天天 N 多的理由：到年龄啦，那个时代都是这样的<br>这不是借口么，那个时代不是那样的现在都是富一代了<br>并且没有主观意识去用锻炼来延缓</p>
</li>
<li><p>退休<br>上次回家和父母说是不是要延长退休年龄了，我爸说不可能，到时候人民能愿意（人民！？）<br>这次全会不确定了么，我看了下《决定》，算了下时间，老爸的年龄正好吻合，相差不过两年，光荣中标<br>所以老爸你再抖擞精神，继续为祖国奉献 5 年了，哈哈^_^</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Me</tag>
      </tags>
  </entry>
  <entry>
    <title>My First Macbook Pro</title>
    <url>/cn/My-First-Macbook-Pro/</url>
    <content><![CDATA[<p>rMBP ME865 8g 256g<br>淘宝，港行，已入手三天</p>
<a id="more"></a>

<h2 id="入手注意"><a href="#入手注意" class="headerlink" title="入手注意"></a>入手注意</h2><h3 id="包装盒-机箱-系统-ID-是否一致"><a href="#包装盒-机箱-系统-ID-是否一致" class="headerlink" title="包装盒/机箱/系统 ID 是否一致"></a>包装盒/机箱/系统 ID 是否一致</h3><p>三码是否合一，不一样肯定是拆封的</p>
<h3 id="检测电源循环次数"><a href="#检测电源循环次数" class="headerlink" title="检测电源循环次数"></a>检测电源循环次数</h3><p>一般 5 次以内，越少越好（我的是两次）</p>
<h3 id="官网查询保修日期"><a href="#官网查询保修日期" class="headerlink" title="官网查询保修日期"></a>官网查询保修日期</h3><p><a href="https://selfsolve.apple.com/agreementWarrantyDynamic.do">这里</a>（能看出卖家购买日期）</p>
<h3 id="千万不要用任何优化"><a href="#千万不要用任何优化" class="headerlink" title="千万不要用任何优化"></a>千万不要用任何优化</h3><p>特别是刚 Windows 转过来的携带清理<strong>强迫症</strong>的童鞋<br>我早就知道 mac 不需要清理，而且是新本本，但看到号称最好的磁盘清理——CleanMyMac, 还是手贱了</p>
<p>清理完过了一会儿后，发现温度 90 多，还查了下 mac 散热问题<br>后来发现是有个进程狂飙 CPU<br>然后发现 Dock 许多图标变成透明的了（有字，可以点击，重启也无法解决）<br>一 Google，很多人居然重装了系统</p>
<p>而罪魁祸首居然是，CleanMyMac<br>血的教训，真是*<em>不作死就不会死！！！ *</em></p>
<p>图标透明的解决办法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm ~&#x2F;Library&#x2F;Application\ Support&#x2F;Dock&#x2F;*.db; killall Dock</span><br></pre></td></tr></table></figure>

<p>Dock 上面的点一下就可以恢复；还不行就先移出，再拖进去</p>
]]></content>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Time Management</title>
    <url>/cn/Time-Management/</url>
    <content><![CDATA[<p>我比较喜欢折腾软件，GTD 方面用过切不限于：</p>
<ul>
<li>idoit</li>
<li>any.do</li>
<li>wunderlist</li>
</ul>
<p>这三款都是支持多平台同步（mac ios win android）的好工具<br>各有特点，无论排名，可以自己都试用下，选择自己喜欢的</p>
<p>但用着用着你会发现，计划还是完不成，本来在“今天”项目里的，一周后还在“今天”<br>就像我们都知道拖延症，怒改之，但往往还是拖到最后一刻；资深烟民何尝不知道吸烟有害健康，还是饭后一根赛过活神仙<br>所以，不从自身发掘的话，即使有最好的软件，也无法阻止时间的耗散</p>
<a id="more"></a>

<h2 id="如何防止“无效时间”"><a href="#如何防止“无效时间”" class="headerlink" title="如何防止“无效时间”"></a>如何防止“无效时间”</h2><p>首先声明，时间是等价的，没有“无效”这一说。我只是想表达，过去的这一天中，与你自身所期望做的事情不同，而你又不知道“怎么又过去一天了”）</p>
<p>《奇特的一生》中描述了一个与时间作伴的人——柳比歇夫，并介绍了他的时间统计法，据说此人有种内在的时间观察<br>TED 的这个视频中 菲利普·辛巴杜 介绍了<a href="http://v.163.com/movie/2011/9/I/L/M7CEB9FAL_M7CEBDOIL.html">健康的时间观念
</a>，我想应该是同一类东西</p>
<p>柳比歇夫那种对时间流逝，精确到分钟的感受，我想可能也不是什么难事，（比如以前天天用普屏，多少年了，也没啥感觉，看过 Retina 再返回来，怎么就不行了呢，可能就是注意到了那些<strong>细节</strong>）精确到十分钟，半小时，总是可以的</p>
<p>所以，应该先花一个月，至少也一周，先不去计划什么，以半小时为单位，如实的<strong>写下自己的时间用到哪里去了</strong>，积累一下原始数据，看看平时自己是怎么度过一天的</p>
<p>你可能发现刷微博了，上网了等等等等，有了这些数据，下次在做这种事情时，心中就会留意了</p>
<h2 id="如何善用-Google-Calendar"><a href="#如何善用-Google-Calendar" class="headerlink" title="如何善用 Google Calendar"></a>如何善用 Google Calendar</h2><p>我自己用 Google Calendar 两年了，最早好像是标记各公司的面试时间，后来慢慢开始把别的一些事情记录上去，之后才看到了《奇特的一生》，居然和大神的习惯相吻合，好开心<br>……<br>（累死我了，回来再写）</p>
<p>之后虽然一直记录，但真没怎么总结过，直到前些天看到这本书</p>
<p>我还没看完，但收获颇多，笔记在<a href="http://leihao0.github.io/2013/12/16/%E6%8A%8A%E6%97%B6%E9%97%B4%E7%95%99%E7%BB%99%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E4%BA%8B/">这里</a><br>（此作者好像集大成了，包罗各个方面，从如何找到自己的兴趣到如何实现梦想，等等等等。我这个回答不看也行，但那本书最好去看看，<strong>强烈推荐</strong>）</p>
<p>书里面把日历加入了颜色：</p>
<ul>
<li>黑色: 事业与成就</li>
<li>红色: 家庭与社会交际</li>
<li>黄色: 健康</li>
<li>蓝色: 人生的意义与价值</li>
</ul>
<p>当时我眼前一亮，有种醍醐灌顶的感觉，立即去 Google Calendar 尝试标注了几周<br><img src="https://lh3.googleusercontent.com/1fLFHiN0styGRBRNyOok0ySL0EbBIyCnXxZcfCW6UGL1Lmx6noMFn0ak7pvfGVKigDYUfyWHDcs=s640-h400-e365" alt=""><br>果不其然，如此以后，每天晚上，每周末，只要<strong>扫一眼</strong>，就知道时间在各方面大致消费情况了<br>而以前不一个个 Event 看下去，搞不清楚自己做了什么</p>
<p>我想许多人不愿意总结、不愿意整理桌面，可能就是因为繁琐的东西太多，脑子一团乱麻，感觉整理耗时太长，<strong>又没有一个好的框架</strong>，化繁为简，那就拖着吧。这大概也是热衷于追求软件（工具）的原因</p>
<p>其次是 Google Task<br>这东西好像就是一个列表，还可以分级<br>我用来记录一些最近要做的事情，在加 Event 的时候，方便复制粘贴（这是 Google 的本意吗？囧）</p>
<h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p>Mindjet 上面提到了，用的人也比较多，略过<br>下面我说下，另一种思维导图，也是无意中在知乎上看到的：<br><a href="http://www.zhihu.com/question/20176809">电视里主人公整理线索时，会把钉在墙上的资料用线连起来，然后找到交汇点，那是什么方法？</a></p>
<p><strong>TheBrain</strong>，神器<br><img src="http://www.liangxiaoxiao.com/wp-content/uploads/2012/10/ScreenClip1.png" alt=""></p>
<h2 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h2><p>这个东西的好处是你可以清楚的知道自己的进度，特别是好几个项目并行的时候<br>当时我在疯狂的寻找一款好的软件（不用<strong>Ganttproject</strong>的原因是界面太丑了，-_-|||）<br>后来发现其实 Mindjet 支持，但操作很不方便<br>Mac 上<strong>OmniPlan</strong>不错，可是收费的</p>
<p>但是！！但是！！当我看到我们的项目经理用<strong>Excel</strong>用作甘特图（一个小格子代表一天，还能标注颜色），我惊呆了！！</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>还有一些如：晨间日记、Evernote、轻重缓急四象限，以后有机会再说吧</p>
<hr>
<p>这东西就像功夫，到了大师级，飞花摘叶即可伤人<br>比如我有个同学就用 3M 便签来当 Note 用(后来我看到《太傻天书》中说道一次不要超过三个，完成一个，从显示屏上撕掉一张)<br>当然在我们还不那么 NB 时有了一款 NB 软件，无异于如虎添翼<br>最最重要的是不要用用着忘了 GTD 本来的目的，形成自己的管理系统</p>
]]></content>
      <tags>
        <tag>GTD</tag>
      </tags>
  </entry>
  <entry>
    <title>life should not be boring</title>
    <url>/cn/Life-Should-not-be-so-Boring/</url>
    <content><![CDATA[<h1 id="生活不该如此无聊"><a href="#生活不该如此无聊" class="headerlink" title="生活不该如此无聊"></a>生活不该如此无聊</h1><p>童鞋，你是感到生活如此无聊么<br>一天天在游戏中麻醉自己？一遍遍的刷微博 ？<br>或者奇怪自己为神马没有汉/妹纸？</p>
<p>其实世界还是很给力的，不信请看：（持续整理中…稍后把链接贴上）</p>
<a id="more"></a>

<h3 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h3><p>这个不用解释吧，无外乎：</p>
<ul>
<li>Ugly people can f**k books only.</li>
<li>人丑就该多读书</li>
</ul>
<h3 id="双拼"><a href="#双拼" class="headerlink" title="双拼"></a>双拼</h3><p>全拼弱爆了么</p>
<h2 id="思维模式"><a href="#思维模式" class="headerlink" title="思维模式"></a>思维模式</h2><h3 id="奥卡姆剃刀"><a href="#奥卡姆剃刀" class="headerlink" title="奥卡姆剃刀"></a>奥卡姆剃刀</h3><p><a href="http://book.douban.com/subject/1467022/">上帝掷骰子吗</a></p>
<p>简洁胜于复杂<br>简单即美</p>
<h3 id="批判性思维"><a href="#批判性思维" class="headerlink" title="批判性思维"></a>批判性思维</h3><h3 id="独立"><a href="#独立" class="headerlink" title="独立"></a>独立</h3><ul>
<li>经济</li>
<li>言论</li>
<li>思想</li>
</ul>
<p>缺一不可<br>看我天朝大环境，好吧…</p>
<h3 id="穷粑粑富粑粑"><a href="#穷粑粑富粑粑" class="headerlink" title="穷粑粑富粑粑"></a><a href="http://book.douban.com/subject/1033778/">穷粑粑富粑粑</a></h3><p>现金流/ESBI 四象限/损益表</p>
<p>震惊于豆瓣书评的一句话</p>
<blockquote>
<p>早年读到此书的人，现在最少也是百万富翁了</p>
</blockquote>
<h3 id="乌合之众"><a href="#乌合之众" class="headerlink" title="乌合之众"></a><a href="http://book.douban.com/subject/1012611/">乌合之众</a></h3><p>记得好像有个哈佛教授不明白中国为何一夜之间，学生会变得如此疯狂<br>他一定是没读过这本书</p>
<h3 id="假想游戏"><a href="#假想游戏" class="headerlink" title="假想游戏"></a>假想游戏</h3><p>人一生只有一生，是线性的<br>在无事可做时，观察下周围的人，从周围的人群中选择个角色带入<br>模拟一个完全不同的人生</p>
<h3 id="柏拉图洞穴"><a href="#柏拉图洞穴" class="headerlink" title="柏拉图洞穴"></a>柏拉图洞穴</h3><p>黑客帝国么</p>
<h3 id="失控-信息简史-自私的基因"><a href="#失控-信息简史-自私的基因" class="headerlink" title="失控/信息简史/自私的基因"></a>失控/信息简史/自私的基因</h3><p>这个信息量太大了，毁三观，要各位亲自去体味下<br>自由意志其实为众愚成智<br>基因 - 模因<br>其实我们只不过是机器银</p>
<h2 id="体术"><a href="#体术" class="headerlink" title="体术"></a>体术</h2><h3 id="剑桥简明金庸武侠史"><a href="#剑桥简明金庸武侠史" class="headerlink" title="剑桥简明金庸武侠史"></a><a href="http://book.douban.com/subject/24324704/">剑桥简明金庸武侠史</a></h3><p>假作真时真亦假，无为有处有还无<br>不信是吧，看下面</p>
<h3 id="太极拳"><a href="#太极拳" class="headerlink" title="太极拳"></a>太极拳</h3><p>不是广场大妈的太极广播体操哈<br>陈氏太极，先把实战放一边，养生真没的说<br>据说国外先引入了瑜伽，后来经研究表明，太极拳的健身效果更好~</p>
<p>现在更多的感觉属于 引导术，以外在的动达到内在静，通过打通大周天从而带动小周天</p>
<h3 id="瑜伽"><a href="#瑜伽" class="headerlink" title="瑜伽"></a>瑜伽</h3><p>这个可不是天天在电视上常见的那几个动作而已哦</p>
<p>核心是三脉七轮（好似 中医里的经脉）<br>顶轮、眉间轮、喉轮、心轮、脐轮、海底轮、梵穴轮</p>
<p>貌似打开了效果不亚于打通小周天</p>
<h3 id="任督二脉"><a href="#任督二脉" class="headerlink" title="任督二脉"></a>任督二脉</h3><p>小时候看武侠小说，总幻想自己有一天，无意中打通了任督二脉，飞升了<br><a href="http://news.sina.com.cn/s/2012-05-23/160624465410.shtml">甘肃卫生厅:41 名医务人员学 9 天打通任督二脉</a><br>这个居然是真的，有木有搞错！！！</p>
<p>其实出自于<a href="http://book.douban.com/subject/4665276/">李少波真气运行法</a>，可信度较高</p>
<h3 id="咏春"><a href="#咏春" class="headerlink" title="咏春"></a>咏春</h3><p>叶问 1 2 前传 终极一战 一代宗师 之后，大家都知道了这门武功<br>要知道武术分表演/实战<br>最让我诧异的是，咏春打起来真的就是电视上那样的</p>
<p>打木人桩时，哗啦哗啦的碉堡了有木有</p>
<p>小念头走起</p>
<h2 id="精神力战法"><a href="#精神力战法" class="headerlink" title="精神力战法"></a>精神力战法</h2><h3 id="催眠"><a href="#催眠" class="headerlink" title="催眠"></a>催眠</h3><p>并不是学会了就可以让别人干啥就干啥，不要想多了，少年</p>
<h3 id="清明梦（造梦空间）"><a href="#清明梦（造梦空间）" class="headerlink" title="清明梦（造梦空间）"></a>清明梦（造梦空间）</h3><p>颇像大型 3D 游戏，最高境界即为造梦师<br>核心思想是：<strong>梦里自己意识到自己在做梦</strong></p>
<p>据说控梦的话可以做任何事情，任何事情呦<br><a href="http://tieba.baidu.com/f?kw=%C7%E5%C3%F7%C3%CE">百度 清明梦吧</a></p>
<h3 id="达芬奇睡眠（多相睡眠）"><a href="#达芬奇睡眠（多相睡眠）" class="headerlink" title="达芬奇睡眠（多相睡眠）"></a>达芬奇睡眠（多相睡眠）</h3><p>传说（注意是传说）达芬奇、爱因斯坦等天才，只用一个睡眠周期（1.5 小时），这样算下来，一年内，他们比普通人多活了 100 天…<br>尝试了下，再次证实我是普通人… T.T</p>
<h3 id="番茄工作法-当下的力量"><a href="#番茄工作法-当下的力量" class="headerlink" title="番茄工作法/当下的力量"></a>番茄工作法/当下的力量</h3><p>当我吃饭时，真的是在吃饭吗？<br>当我散步时，真的是在散步吗？<br>我真的听见周围的声音了吗？我真的看见所有的事物了吗？<br>当我学习时，否能真真正正的集中精力，哪怕 10 分钟</p>
<p>当真正的注意“现在”，这也是<strong>冥想</strong>的原因</p>
<h3 id="柳比歇夫-内在的时间观察"><a href="#柳比歇夫-内在的时间观察" class="headerlink" title="柳比歇夫/内在的时间观察"></a>柳比歇夫/内在的时间观察</h3><p>我们所有的活动、想法、愿望、梦想，都要以时间作为载体<br>逝者如斯夫，不舍昼夜<br>如何与时间做朋友</p>
<h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><h3 id="17-天搞定-GRE-单词"><a href="#17-天搞定-GRE-单词" class="headerlink" title="17 天搞定 GRE 单词"></a>17 天搞定 GRE 单词</h3><p>20+年了，还没搞定，差距…</p>
<h3 id="SSS-阅读法"><a href="#SSS-阅读法" class="headerlink" title="SSS 阅读法"></a>SSS 阅读法</h3><p>本来我以为的是阅读单词破百万后，就可无障碍的阅读 E 文原版书鸟<br>现在快到 100W 后，才知道后面还有第二个，第三个… T.T</p>
<h3 id="千万别学英语"><a href="#千万别学英语" class="headerlink" title="千万别学英语"></a>千万别学英语</h3><p>注意！这是个<strong>反例</strong>，目前没人成功<br>千万别用这个方法</p>
<h3 id="找对英语学习方法的第一本书"><a href="#找对英语学习方法的第一本书" class="headerlink" title="找对英语学习方法的第一本书"></a><a href="http://book.douban.com/subject/11522125/">找对英语学习方法的第一本书</a></h3><p>漏屋的这篇文章在天涯横空出世，惊煞我等英语菜鸟</p>
<h3 id="透析法"><a href="#透析法" class="headerlink" title="透析法"></a>透析法</h3><p><a href="http://book.douban.com/subject/3748247/">把你的英语用起来</a><br><a href="http://site.douban.com/195274/">奶爸的英语教室</a><br>step by step，第一次看见了 从坑到神 的曙光<br>目前已入中高级 O(∩_∩)O~</p>
<hr>
<p>当然，如果上面种种都木有兴趣的话，那我就放法宝了，少年接招：</p>
<h3 id="精神病速成法"><a href="#精神病速成法" class="headerlink" title="精神病速成法"></a>精神病速成法</h3><p><a href="http://book.douban.com/subject/4242172/">天才在左 疯子在右——国内第一本精神病人访谈手记</a><br><a href="http://www.guokr.com/post/378641/">我们只要坐在那里什么也不想，每日一次每次一小时，就可以变成精神病啊！多么神奇啊！</a><br><a href="http://www.douban.com/group/topic/29064241/">最近特异功能好火，我也八一个看上去可信度高的。非灵异。从海子说起</a></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>其中大部分我都玩过，并且展开的写过攻略，有兴趣的可以看下<br>说真的，我们大多数人就这样漫不经心地走完了一生</p>
]]></content>
      <tags>
        <tag>Tech</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac VS windows shortcuts</title>
    <url>/cn/Mac-VS-windows-shortcuts/</url>
    <content><![CDATA[<p>以前为了效率，Windows 那么多快捷键，毁于一旦<br>有些软件软件真的<strong>没法替代</strong>，只有空着，如果你恰好知道，请给我留言</p>
<a id="more"></a>

<ul>
<li>Ctrl+c == com + c</li>
<li>Ctrl+x/v == opt + com + v</li>
<li>Ctrl+v == com + v</li>
</ul>
<h3 id="Potplayer-MplayerX"><a href="#Potplayer-MplayerX" class="headerlink" title="Potplayer == MplayerX"></a>Potplayer == MplayerX</h3><h3 id="Foobar-iTunes"><a href="#Foobar-iTunes" class="headerlink" title="Foobar == iTunes"></a>Foobar == iTunes</h3><ul>
<li>快进 com + opt + →</li>
<li>转换 XLD</li>
</ul>
<h3 id="Everything-Spotlight"><a href="#Everything-Spotlight" class="headerlink" title="Everything == Spotlight"></a>Everything == Spotlight</h3><h3 id="Total-Commander"><a href="#Total-Commander" class="headerlink" title="Total Commander == ?"></a>Total Commander == ?</h3><h3 id="PDF-Xchange-pro"><a href="#PDF-Xchange-pro" class="headerlink" title="PDF Xchange pro == ?"></a>PDF Xchange pro == ?</h3><p>xchange 合并 裁边 剪辑的神器<br>裁边只找到了 Briss</p>
<p>入手快两周了，大致调教的差不多了，把常用的软件整理下</p>
<h2 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h2><ol start="2">
<li>Mindjet</li>
<li>Evernote</li>
<li>MPlayerX</li>
<li>Mou</li>
<li>Alfred</li>
<li>Idoce5</li>
<li>Omni 系列</li>
<li>colorsnapper</li>
<li>RescueTime</li>
</ol>
<h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><ol>
<li>PyCharm</li>
<li>WebStorm</li>
<li>rubymine</li>
<li>Sublime Text</li>
</ol>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Codecademy</title>
    <url>/cn/Codecademy/</url>
    <content><![CDATA[<p>2014-01-04 23:39:28<br>总算刷完了<br><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/codecademy.png" alt=""></p>
<a id="more"></a>

<p>怪不得说 Ruby 给你自由，单单从语法糖方面来看，做的比 Python 好<br>之前还因为 ‘end’ 问题，不喜欢 Ruby，但整体做下来：</p>
<ol>
<li>不用像 Python 那样处处注意缩进，还能自动缩进（Python 就没见过），省心</li>
<li>：等符号减少，函数调用更自然</li>
<li>更加面向对象 （python 还是有 类型(int str …) 的概念, 传参，返回值等特别明显；Ruby 弱化了，用的时候甚至感觉不到类型的存在）</li>
</ol>
<p>整体下来，也就是实现了</p>
<ol>
<li>与算法无关代码，比 Python 又少了许多</li>
<li>写起来更加自然</li>
</ol>
<p>所以，在没了解一个东西前，最好不要带主观判断</p>
<p>PS:<br>Java 和 Android 用了将近一年，就是无爱，这个不算不了解吧</p>
<hr>
<p>2014-01-03 23:37:58<br>Python 和 Ruby 千万不要同时刷</p>
<p>Ruby 由于刷在前，end 倒是还好</p>
<p>写 Python 时就悲催了，老是忘了<strong>冒号</strong>，并且很容易忘记<strong>return</strong><br>class 要 (object)， def func(self): 处处折磨人</p>
<p>++ &amp;&amp; 这种从 C 过来的写法也是打脸了</p>
<p>这俩语言的函数也不一样 比如 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python.append()  ruby.add()</span><br><span class="line"></span><br><span class="line">len(python) ruby.len</span><br></pre></td></tr></table></figure>

<p>经常混用，提交了才发现错了，再加上网速…</p>
<hr>
<p>用代理卡的蛋疼，不用连进都进不去…</p>
<p>我还是那种写两句就运行看结果的人<br>大量的时间都浪费在提交后等待结果上面了<br>都说 Ruby 慢，最夸张的一个说法是 ROR 转成 GO 后，服务器由 30 降到 2<br>我还不信，结果做个题目就这么卡(当然应该是网速，或者网站服务器)<br>但这给人的赶脚是<strong>用别人的生命告诉人家 Ruby 很慢么</strong>…无语了</p>
<p>很傻逼的提示<br>大陆太卡，时间长了后，提示检查循环，拜托我一个 for/while 都没有好不好<br>特别是 Ruby 这种一种结果有 N 种做法的语言</p>
<p>感觉结果有两个判断条件:</p>
<ol>
<li>结果字符串比较</li>
<li>源代码 正则 检查</li>
</ol>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>Time Management</title>
    <url>/cn/Time-Management/</url>
    <content><![CDATA[<p>我的私人价值排行榜：</p>
<ol>
<li>自由的热爱</li>
<li>健康</li>
<li>经济上的独立能力</li>
<li>理想</li>
</ol>
<a id="more"></a>

<p>我用谷歌日历已经快两年了，都记不清怎么开始的了，暗含《奇特的一生》，但只是单纯的记录而已<br>这本书中加入了颜色，让我眼前一亮，立即去 google 尝试标注了几周</p>
<ul>
<li>黑色: 事业与成就</li>
<li>红色: 家庭与社会交际</li>
<li>黄色: 健康</li>
<li>蓝色: 人生的意义与价值</li>
</ul>
<p>本来清一色的日历，立即五颜六色的，鲜活了起来</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/calendar.png" alt=""></p>
<p>如书中所述：</p>
<blockquote>
<p>生活的画笔始终掌握在你自己的手中，多些黑色、蓝色还是红色完全在于你个人的决定，我相信，只要你按照自己的内心要求来完成这幅画，他就一定是你心中最美的杰作。</p>
</blockquote>
<p>之后居然是人人上那篇“如何找到自己的梦想”的方法</p>
<blockquote>
<p>社会内部时刻都在生细微的变化，过度发达的信息传递是真假之间的界限越发模糊，人们心理上的不安与日俱增，自我意识也越来越强烈，慢慢地人的注意意力逐渐从对他人的关注转移到了对自身的<strong>内省</strong>上面，意识层面与道德层面上的追求变化得比以往任何一个历史时期都要迫切的多。</p>
<p>当一个人怀疑自己的人生意义与价值时，他就是病了。<br>——弗洛伊德</p>
<p>与乌托邦式的空想不同，展望未来是人类的一种战略行为，它包括了勇气、力量以及将理想付诸实践的坚定决心。<br>——德国前总统 罗曼·赫尔佐夫</p>
<p>一个人最奢华的享受就是不需要上闹钟因为他就是自己时间的主人</p>
</blockquote>
<blockquote>
<p>自寻烦恼是人的本性,即使现实中并没有任何问题我们也会自动一些来</p>
</blockquote>
<blockquote>
<p>如果感觉自己没有时间，那就是要休息一下了</p>
</blockquote>
<blockquote>
<p>只有自己才能强迫自己接受那些不快的事情</p>
</blockquote>
]]></content>
      <tags>
        <tag>Reading</tag>
        <tag>Tech</tag>
      </tags>
  </entry>
  <entry>
    <title>Hard Convercations with parents</title>
    <url>/cn/Difficult-Conversations-with-Parents/</url>
    <content><![CDATA[<p>心寒不至于，倒是蛮无语的</p>
<p>毕业选择工作，让我考研<br>刚工作，每次通话都让我考公务员（那些说要不时打个电话，常联系的，这种情况怎么办？）<br>Gap Year（没问父母要一分钱），仍然天天嫌弃我</p>
<p>总之就是感觉你是他们的私有财产，LZ 把你带到世上的，不按我说的来？<br>靠！长大了翅膀硬了就不听话了是吧，士可忍孰不可忍！</p>
<a id="more"></a>

<p>然后开始，对你指手画脚，妄图篡改你的人生：</p>
<ol>
<li>动用强权、洗脑（从小就开始了，现在只要打开开关就行）<br>搬出莫须有的 “君要臣死，臣不得不死。父要子亡，子不得不亡。”<br>断章取义 “父母在，不远游”（游必有方）<br>百善孝为先<br>……</li>
</ol>
<p>PS：他们是看过《1984》吗？我见识浅薄了啊。。。</p>
<p>但你可能接受过西方平等思想的沐浴，拜读过<br>卢梭的《论人类不平等的起源》，罗素的《西方哲学史》，梭罗的《瓦尔登湖》等一系列巨作<br>走向了思想独立，不鸟孔孟那一套</p>
<p>没关系：</p>
<ol start="2">
<li>用物质手段绑架你<br>常见：全款、首付、安排工作等等</li>
</ol>
<p>根据《影响力》，给对方一点好处，对方别觉得亏欠了你，从而能获得更大的好处<br>也就是“吃人家的嘴软，拿人家的手软”</p>
<p>但你可能弱冠之年便已拜读了克里希那穆提的《人生不可不想的事》，老子的《道德经》，《当下的力量》<br>懂得人生应该解放自己，最求内在的宁静<br>并且实力上比较牛逼，LZ 能自力更生，这些东东统统不要，照样活的好好的</p>
<p>哥经济也独立了，不能怎么着我了吧</p>
<p>没关系，这还有呢：</p>
<ol start="3">
<li>苦肉计<br>就算你牛逼的一塌胡涂，但<br>人非草木，孰能无情，毕竟血浓于水<br>他们便试图用亲情绑架你<br>“这辈子就是为你而活”，“不要责怪父母，他们已经给了你最好的了”</li>
</ol>
<p>我去，你认为“最好的”是我想要的吗？</p>
<p>“我们都为你这样了，你对得起我吗？”<br>O__O”…<br>这酸溜溜的赶脚哪来的？（《少有人走的路》中曾提到这种带深深的牺牲精神的父母，囧）</p>
<p>“我们是你父母，当然要关心你”<br>拜托，这明明是想控制别人，算哪门子关心<br>关心一个人，是用那种语气？？？</p>
<p>PS：爱人之间也有这个问题</p>
<hr>
<p>上面用词有些严重哈<br>其实父母那一代（他们也曾年轻过好吧），大部分人成了教育缺失的大环境下的牺牲品<br>非黑即白的思维，人云亦云、没有独立思考的能力</p>
<p>导致他们意识不到自己的思维、想法、态度、语气的不妥之处<br>不顾客观事实，一根筋的认为自己是对的，毕竟自己吃的盐比孩纸吃的饭还多，颇有“我说的就是宇宙真理”的架势，讲道理是毫无作用的</p>
<p>作为孩子，知道不是他们的原因，看到他们用那种语气，也蛮难过的<br>最好的方式（我现在能想到的）可能只剩迎合，做一些“善意的谎言”，哄哄他们开心<br>但碰到大事儿，纸总归包不住火，冲突还是不可避免</p>
<p>由于年龄，老人接触新思想几乎是不可能的事情，要求上一代改变已不现实<br>但我们可以着手下一代——不知各位是否意识到我们这一代也要当爸爸妈妈了</p>
<p>所以我们可以提问如：“如何和父母沟通” ，“如何不让父母生气”，“有什么办法让自己认为父母的建议是正确的”，“如何做一个听话的孩纸”，“我要 考公务员/研/博/博后 OR 留在家乡，父母不让，如何说服他们”</p>
<p>然后旁敲侧击的提醒他们上知乎</p>
]]></content>
      <tags>
        <tag>Parents</tag>
      </tags>
  </entry>
  <entry>
    <title>Learn more study less</title>
    <url>/cn/Learn-more-study-less/</url>
    <content><![CDATA[<p>When I was in high shool, there was a student in my class. For the first time in my life I saw an <strong>intellect</strong>.</p>
<p>I never saw he was studing. Playing games or reading novels were all the things I can see.</p>
<p>There are also some <strong>studiaholics</strong>, which means they can approach the <strong>intellects</strong> on score through hard work.</p>
<p>Sadly turth is I was none of them.</p>
<a id="more"></a>

<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/intellect.jpeg" alt=""></p>
<p>I studied harder and harder, but the score was still no improve.</p>
<p>You can image how desperate I was, which means they are gifted and talented, and I was nothing. I’m a losser even when I was born.</p>
<p>After so many years have passed, I was undertood that it was just the brain’s magic.</p>
<p>This book, written by an intellect, describe “How the Steel was Tempered”.</p>
<p>There Is Always Hope, Thank God.</p>
<p>MINDMAP:</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Learn-More-Study-Less.png" alt=""></p>
]]></content>
      <tags>
        <tag>Reading</tag>
        <tag>Tech</tag>
      </tags>
  </entry>
  <entry>
    <title>Filial Piety</title>
    <url>/cn/Filial-Piety/</url>
    <content><![CDATA[<p>爱父母就代表他们让你做什么就无条件服从做什么？他们说你自私，不爱他们，你就是不爱他们？这种以<strong>“爱”的名义绑架子女</strong>的现象还少见吗？</p>
<a id="more"></a>

<p>首先，就我自己来说，为什么爸妈说的一些东西我不认为是对的，并且不去做<br>其中有个原因就是他们言传身教的一些东西，他们的思维方式，并没有经过反思，而是以“周围大多数人”认为的价值观就是对的，就是阳光大道，就是真理。说难听点就是没自己的想法<br>然后，他们的思维模式得到了他们现在的生活方式</p>
<p>换成通俗的话来说，自己放弃治疗，把所有希望寄托在孩纸身上，不按他们的预期来，打亲情牌<br>然后教育出来的孩纸一心向外跑，丝毫不恋家，过年回家是种负担，冷漠人情，等等等等</p>
<p>肯定是什么地方有问题</p>
<p>当你作出一些损人不利己的行为模式，却不知道原因时，一般要从小时候的记忆着手<br><strong>童年</strong>，一直是心理分析的重中之重，有些东西，在你还是一张白纸无辨别能力时，顺理成章的潜入潜意识中</p>
<p>回想以前的我，每天唉声叹气，见不得人好，没容人之心，还沉迷于游戏不能自拔<br>大学后无意中翻了许多心理学方面的书，慢慢的有了些改变（仍然不清楚骨子里有没有变，毕竟江山易改本性难移）</p>
<p>不能说都是父母的原因，但他们能没有一点干系？</p>
<p>父母与子女之间，是个永恒的话题<br>原来我是抱着包容的心态，毕竟是父母，毕竟血浓于水。含辛茹苦把我拉扯大也不容易，就好好沟通呗</p>
<p>还记得以前我体弱多病，后来接触了中医，自己刮痧拔罐扎针，到现在感冒都不见了（也可能是青壮年期吧）<br>爸妈也到了一定年纪，总有些慢性病，给他们分享一些预防方法，以前在家就给他们按摩刮痧，后来去外地工作，就买了按摩器等等东西<br>有用吗？病了就该吃药啊，“你又不是医生，胡搞什么”，“你的方法如果有用，人家医生都饿死了”</p>
<p>然后我就再也提不起兴致和他们说任何关于这方面的东西了</p>
<p>现在再打电话，基本都要说到我没工作，以后怎么办<br>我解释间隔年是有计划进行的<br>有用吗？<strong>他们才不管你什么寻找自我这些东西，管你活着是否如猪狗一样浑浑噩噩到死了还不知道此生的意义。意义？不就是买车买房结婚造人，传宗接代，好有孙子玩实现天伦之乐省的自己退休了没任何爱好打发时间导致的空虚寂寞冷么</strong></p>
<p>很多时候，都是他们吵我结束，拜托，还当我是小孩纸吗？还像以前那样说吵就吵想打就打？<br>以前我也顶撞，现在耐心的听，绝不还嘴（挂了电话再咆哮两句总可以吧）<br>吵有什么意义，图一时之快，攻击别人，转嫁自己的压力，获得精神上的优越感而不能解决任何问题</p>
<p>我一直想哄他们开心，尽量不惹他们生气<br>小事还好，但是碰到<strong>人生抉择这样的事情，绝对不能妥协！</strong>但现在的我，又无法做到圆润的处理这种事情</p>
<p>从那些插手的种种，我感觉到，这样下去，以后对象是谁，什么时候结婚，什么时候生小孩，都难免一番争吵了</p>
<p>虽然我也能理解这种担心，但是你要不要担心的这么夸张啊，一个间隔年，仿佛我是被社会唾弃了，找不着工作吃不上饭找不着老婆接不上婚过两天就露宿街头饿死了似得</p>
<p>然后，结合我以前的一些心理（我是在那个家庭长大的，可以说集中了他们的那种思维），渐渐意识到，这是人的问题<br>比如原来的我，就无论如何，总是悲观的，一副“天下我最惨”的，整天唉声叹气的熊样。我都不明白怎么来的，说是中医体质气郁质吧，但哈佛的《幸福课》后慢慢的好了啊</p>
<p>然后这次，老妈又发火，老爸“你是不是精神有问题” 并且建议我去看心理医生后，我可以说我的心再滴血吗？<br>我确实去看过心理医生，共计三次（当然原因是受《心灵捕手》启发，带着一颗好奇心去看看心理咨询什么样的，以前都是自治嘛）</p>
<p>据说<strong>生活中活用“关我屁事”可以处理掉 80%的事情，剩下 20%用“关你屁事”解决</strong><br>本来以为只是针对陌生人的，图样图森破了</p>
<p>从上次电话，我就一直想模拟出他们的行为模式，因为这件事情上，他们没有给孩纸任何鼓励，没有承担任何责任，相反，自己的怨言，甚至把周围人的压力，毫不保留的转嫁到孩纸身上。唯一做的事情就是伤害孩纸，然后<strong>让孩纸离开他们时，没有任何不舍</strong><br>完完全全是现代教育理念的反面嘛</p>
<p>莫非他们是看过《乌合之众》《爱弥儿》《超越自卑》《历史深处的忧虑》《爱的五种语言》集大成之后，知道我这种天赋平平的娃用爱的方式只会烂泥扶不上墙，“请将不如激将”，无奈之下用连打带踹外加羞辱等“苦其心志，饿其体肤，行拂乱其所为”以实现“天将降大任”</p>
<p>我腹黑了吗？</p>
]]></content>
      <tags>
        <tag>Parents</tag>
      </tags>
  </entry>
  <entry>
    <title>Build Your Own Blog</title>
    <url>/cn/How-to-build-your-own-blog/</url>
    <content><![CDATA[<p>个人感觉最好的是：<br>VPS+域名 WordPress 等博客框架，这样网址，后台环境什么的都是由自己来控制的</p>
<p>要是不花钱，只能寄人篱下了<br>比如挂到 GAE 或者 SAE 下</p>
<p>还有一种最简单的是挂到 Github 上，<br>大致过程是</p>
<ol>
<li>Github 上新建一个 Repository，xxx.github.com</li>
<li>Jekyll 或者 Hexo 等静态博客生成工具</li>
<li>没有了</li>
</ol>
<p>对，就这么简单，并且网上教程一片片，就不重复了<br>我用的是 Hexo，挂在<a href="http://leihao0.github.io/">这里</a><br>相对 Jekyll，感觉更简单些</p>
<a id="more"></a>

<hr>
<p>说点不相干的：</p>
<p>还记得小学时，天天让写作文，那时真是被虐的体无完肤<br>每天上学放学写（chao）作业，哪来的感悟，还一天一篇，现在最多一周才能有点东西可以记录好吧<br>怎么办呢，只能抄范文喽</p>
<p>可惜那时没有理论指导，抄的不精，一本什么 小学生范文大全抄完之后，抄无可抄，无奈打起了语文课本的主意<br>太岁头上动土，不是早死么，结果自然是被发现喽</p>
<p>然后那被誉为人类灵魂工程师的三年级语文教师，拿着我的日记本当着全班同学的面狠狠地扇了我脑袋</p>
<p>哦（wocao），杀鸡儆猴也不用这么狠吧</p>
<p>当时我隐忍不发，默默提升技能，毕竟高考还是有八股文存在的，为了明天，小不忍则乱大谋（好吧，当时我很傻的，感觉老师打学生挺正常的，就像前些年还认为爸爸打儿子那样）</p>
<p>还好大学了终于不用写那些恶心的东西了<br>大一时有个室友鄙视我空间好烂，然后去装扮，挂了 N 多的 Flash，卡的人家都打不开<br>后来发现有日志功能，随便写了点关于学校的事情，然后有一些同学评论，蛮开心的，然后就写着了<br>一年多后我才知道这东西叫 博客</p>
<p>后来编程方面的东西都挂到 CSDN 去了，看着那左下角的千里之外，默默离开了</p>
<p>快毕业时有次搜索东西，看到一丫写的东西好熟悉，看了下访问量 1W 多，居然还有排名，心想这是谁啊，仔细一看，居然是我…</p>
<p>再后来就是想找个没人认识的地方，记录点东西</p>
]]></content>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Why we learn Philosophy</title>
    <url>/cn/Why-we-learn-Philosophy/</url>
    <content><![CDATA[<p>任何学科都有一个试用范围，有用没用是相对的<br>如果你人生比较顺，周围环境比较好，虽有舟舆，无所乘之，虽有甲兵，无所陈之。平时没<strong>反思</strong>过什么事情，可能没啥用</p>
<p>但如果一直保持好奇心并且不断寻求，无论你是从政科研还是经商，最后肯定都会遇到哲学问题<br>因为哲学是关于<strong>世界本源</strong>的</p>
<p>哈佛大学政治学教授 Michael J.Sandel 在《公正——该如何做才好？》第一课的结尾的一段话是非常非常好（好到让人像追美剧那样看完了全套）的总结：</p>
<blockquote>
<p>读哲学书可以作为你们<strong>认知自我</strong>的一种练习。<br>哲学使我们原本熟悉的东西变得陌生，它不是给我们更多的新信息，而是给予我们<strong>另一种看待事物的方法</strong>。它有两种层面上的冒险：<strong>个人层面和政治层面</strong>。所谓的个人层面上的冒险就是一旦那些熟悉的东西变陌生了，他们就再也不会和以前一样了。自我认知就像一个迷路的旅人，无论他是多么混乱多么不安，你已经不能不再想它了。这个过程困难却又不得不全身心投入，道德和政治的哲学就像个故事，你不知道它将带你向何方，但你清楚的知道，这是关于你的故事。政治层面上的冒险在于，你读了这些书、参与了这些讨论之后，你将会变成一个更好的更负责的公民，你将审视那些对公共政治领域的假设，你的政治判断力将得到锻炼，你将得以更加积极的参与到公共事业当中去，但是这样可能存在片面和误导。你需要承认的是，它可能使你变成一个更坏的公民而并非好公民，或者至少会在你成为好公民前先让你变成一个坏公民。那是因为哲学，是件很久远的事，甚至会有些许破坏性。让我们看看，苏格拉底时代的一段对话。苏格拉底的朋友卡利科勒希望能说服他离开哲学。他对苏格拉底说：哲学确实美好，适度涉入它的时候才美好，可是如果你过于沉迷它，它将把你毁灭。听我的吧，放下那些哲学争论，想想什么才是生活中真正的成就，别学那些在模棱两可的哲学语句中浪费时间的人，你该看看那些真正过的好的人富足的生活，名誉等其他的东西。他是想说，哥们，放现实点吧。但科勒有一点是正确的：<strong>哲学会使我们和原先的惯例、预订的假设和固有的观念变得疏远</strong>。</p>
</blockquote>
<blockquote>
<p>当面对这些问题的时候，我们有个特别的回避方式，它的名字叫怀疑主义，它的意思是，像这样的，我们才刚开始学，没有办法一下子彻底解决那些我们争论的案例或原理，而且如果亚里士多德、康德、洛克、穆勒他们用了那么多年都没有解决这些问题，我们以为我们自己是谁？就这样在 sanders 礼堂里待了一个学期，就能解决它们了吗？而且，这可能只是一个关于每个人各自有自己不同原则的问题，没有什么可以值得讨论的，也说不清这些问题是为什么？这就是怀疑主义的逃避方式。关于此，我想我可以这样回答：确实，这些问题已经被讨论得非常非常久了，但正是因为他们不断的被讨论，说明虽然在某种意义上他们<strong>不可能被解释</strong>，可是另一方面，他们也是<strong>不可被回避</strong>。之所以不可回避，是因为这些问题的答案就在我们的日常生活当中，所以，怀疑主义只是让你放手，放弃思考，它不会解决任何道德或哲学问题。康德对怀疑主义有一段非常精彩的描述，他写到，“<strong>怀疑主义只是人们探索过程中的暂歇之地，它让我们在一些教条中徘徊，但是它绝非是我们能够永远待着的地方</strong>。”在这里，我想简单总结一下这门课的目的是，<strong>唤醒无尽的求知和推理，看看它会将我们带向何方</strong>。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Philosophy</tag>
      </tags>
  </entry>
  <entry>
    <title>The Beginning of The Story</title>
    <url>/cn/The-Beginning-of-The-Story/</url>
    <content><![CDATA[<h1 id="故事的开始"><a href="#故事的开始" class="headerlink" title="故事的开始"></a>故事的开始</h1><p>从前有个小法师，出生在四周环山的泽亚大陆</p>
<p>小法师所在的那所学校，在法术界排名千里之外，放眼望去，整个学校也没一个法力高强的法师</p>
<p>当小法师毕业时，也只会一种静态魔法</p>
<p>虽然这种魔法非常 NB，但无奈耗时太长，施法时还要站着不动</p>
<p>直到前些天小法师突然听说世界上还有一种可以边游走边吟唱的魔法，不禁好奇心大起</p>
<p>翻阅最新的魔法书之后，发现种种动态魔法中，有一个叫 轨道上的红宝石 的魔法</p>
<p>这种魔法发音诡异，让人莫名其妙，但只要吟唱的对，便可以用最短的时间召唤出杀伤力极大的魔法</p>
<p>然后他就被自己召唤出的魔法打死了</p>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>Resurrection</title>
    <url>/cn/Resurrection/</url>
    <content><![CDATA[<h1 id="复活"><a href="#复活" class="headerlink" title="复活"></a>复活</h1><p>上次小法师强练 轨道上的红宝石，付出了血的代价</p>
<p>那本魔法书由众位法力高深的大法师联合推荐，共分 11 章，由精灵语写成，看上去就很 NB 的样纸</p>
<a id="more"></a>

<p>小法师精灵语马马虎虎，连蒙带猜，修行了一半，稍微有了点不舒服的反应</p>
<p>到第 9 章时，又加上连续施法时间过长，魔法有了反噬的迹象</p>
<p>在此之前，小法师在 Codecademy 学院的课程都顺利的刷掉了，超文本加价咒语 阶层式样式表 蟒蛇 红宝石 都配齐了，书又只剩下 3 章</p>
<p>恰巧当时小法师被朋友圈灌了不少鸡汤，比如：</p>
<blockquote>
<p>一个人，如果你不逼自己一把，你根本不知道自己有多优秀；一个人，如果你不逼自己一下，你的世界永遠是黑色的</p>
</blockquote>
<p>还有：</p>
<blockquote>
<p>一个人，想要优秀，你必须要接受挑战；一个人，你想要尽快优秀，就要去寻找挑战</p>
</blockquote>
<p>可想而知，小法师信心爆棚，满满正能量</p>
<p>无视法师不像剑士那样有强壮的身体，还有职业所限，大多处于亚健康</p>
<p>再加上自身魔法力不足，非要玩跳科技</p>
<p>终于在最终章时，红蓝耗尽，被自己召唤出的魔兽殴打致死</p>
<hr>
<p>还好小法师等级较低，复活时间比较短</p>
<p>但无缘无故浪费了一个重生十字章，小法师还是很不开心</p>
<p>周围人好心询问时，也只能打落牙齿和血吞</p>
<p>毕竟，身为一个法师，被自己召唤出的法术弄死这种事情还是很丢人的</p>
<p>经过这件事，小法师还被迫形成了巴甫洛夫制約，即动物对特定条件刺激的反应</p>
<p>现在一看到精灵语就有反胃的感觉</p>
<p>所以小法师决定最近绝对绝对不再碰魔法了</p>
<p>…</p>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>Goddess</title>
    <url>/cn/Goddess/</url>
    <content><![CDATA[<p>#女神</p>
<p>前面说过，小法师再也不准备看魔法了</p>
<p>朱熹说：“适可而止，无贪心也。”<br>小法师心理打算的是好的，打不起躲得嘛</p>
<p>生活往往就是那么有趣或者说残忍<br>道德经有云：“天之道，损有余而补不足，人之道则不然，损不足而奉有余”<br>俗话说“趁你病，要你命”</p>
<p>继被魔法羞辱之后，墨菲法则开始显现它的威力——小法师的女神也不理他了</p>
<a id="more"></a>

<p>事情是这样的：</p>
<p>前些日子，女神突然电话小法师，不知不觉，两人聊了一个多小时<br>电话里女神向小法师抱怨最近比较累，然后不漏声色的点出想要一个魔法书容器，也就是 恶骂人魔法集团 出的最新款的名为 可点亮的纯洁贴纸 的强大法器，之后女神又用魔法界的一些新闻善后，真可谓不漏声色</p>
<p>小法师接到电话就已经受宠若惊，之后几天更是心神荡漾，眼瞅着女神生日又快到了，那就送这个吧</p>
<p>金币是个问题，不过还好小法师平时节衣缩食、省吃俭用，勉勉强强够<br>比价了半天，终于购了一款，送给心目中的女神</p>
<p>两天到货后，看到女神回了一句“好喜欢哦，谢谢你”<br>小法师还没来得及回应，就看到女神下线了</p>
<p>小法师不疑其他，心中无限欢喜，就像《卑鄙的我 2》小黄人看到女主角展开了丰富的联想与想象</p>
<p>但一天后女神还是没有回应<br>开始小法师只是单纯的以为，人家是女神嘛，肯定很忙，哪像自己天天无所事事泡论坛刷微博聊 QQ，一时不回信息也是正常的</p>
<p>等到第二天傍晚，小法师感觉有些不对劲了，QQ，微信，微博，短信，电话，各种联络魔法统统用上</p>
<p>女神不愧是女神，灵活运用兵法，以不变应万变，轻轻巧巧的一招：<br><code>&gt;/dev/null</code></p>
<p>就把小法师所有能想到的魔法统统化为乌有，没留下半点涟漪</p>
<p>桑心之余，小法师心中还是留有一丝希望</p>
<p>然后就看到了这则惨无人道的提问：</p>
<p><strong>怎么养好一个备胎？</strong><br>答：<br>备胎主动跟你说话，你就呵呵<br>备胎不主动了，你就问他干嘛呢</p>
<p>小法师回想以前种种，仿佛都是在验证这两句话<br>真是 <em>字字如血，行行如诉，哀愤激楚</em></p>
<p>小法师眼眶一热，终于掉下泪来</p>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>Free Will</title>
    <url>/cn/Free-Will/</url>
    <content><![CDATA[<p>不知什么时候听说的<strong>自由意志</strong>这个词，感觉上也有一年多了</p>
<p>虽然有时用这个词，但一直不明白<strong>自由意志</strong>具体是什么</p>
<a id="more"></a>

<p>其实 Google 一下就能得到答案，但我迟迟的没这么做，是想凭自己的感悟来理解吗？</p>
<p>最早好像在冬吴相对论听到的这个词儿<br>接下来的一些书中能碰到<br>后来在罗辑思维又听到<br>前一阵 BBC 霍金的宇宙里“我们都是由星际物质物质组成”</p>
<p>感觉像是人对外界刺激做出理性而非本能的反应</p>
<p>《七个习惯》中引用的狂拽酷炫吊炸天使作者顿悟的三句话：</p>
<blockquote>
<p>在刺激和回应之间有一段空间<br>在这段空间里我们有自由和能力去选择自己的回应<br>我们的成长和幸福取决于我们的回应</p>
</blockquote>
<p>说实话，我看了没有任何感觉，又<strong>见识浅薄</strong>了啊 %&gt;_&lt;%</p>
<p>然后我看到了作者的解释，<strong>选择的自由</strong>，不禁倒吸一口冷气（冬天）——为了顿悟而顿悟了。<br>这不就是自由意志吗？！</p>
<p>之前我一直不能理解，趁年轻折腾一圈，然后落入老婆孩纸热炕头，和直接掉进去有啥区别。感觉上是有的，但说不清具体哪里不同</p>
<p>如此看来，应该就是自由意志觉醒的区别，尊重自己内心的召唤，而非如普通生物作出简单的应激性</p>
<p>于无声处听惊雷</p>
]]></content>
      <tags>
        <tag>Me</tag>
      </tags>
  </entry>
  <entry>
    <title>Spare Tyre</title>
    <url>/cn/Spare-Tyre/</url>
    <content><![CDATA[<h1 id="备胎"><a href="#备胎" class="headerlink" title="备胎"></a>备胎</h1><p>女神对于小法师的打击，远远超出了小法师的想象<br>这样一来，上次的阵亡，反而如浮云一样了</p>
<p>金代诗人元好问有云：</p>
<blockquote>
<p>问世间情为何物，直教人生死相许？<br>——《摸鱼儿·雁丘词》</p>
</blockquote>
<p>小法师是个重感情的孩纸，当年还在法师学院时，喜欢一个女孩，苦苦追求 3 年，在女孩生日买好礼物楼下等待时，发现女孩和一个挫男比翼双飞</p>
<p>人都有幻灭的时刻，苦情三年终于换来了小法师的顿悟<br>从此醉心于魔法，终成为一代大师</p>
<a id="more"></a>

<p>当然那是小说中才发生的事情<br>当时已经校园招聘，小法师匆忙上阵，结果落得尴尬的结果</p>
<p>本来小法师以为自己顿悟后，已然刀枪不入，理性至上，不会再为感情的事情犯迷糊</p>
<p>但他忘了古代哲学家赫拉克利特(Heraclitus)有一句名言：</p>
<blockquote>
<p>人无法两次踏进同一条河流</p>
</blockquote>
<p>小法师当然也没违反，只不过是掉到了不同的沟里</p>
<p>千金散尽还复来，损失钱还算小事，最坑的地方莫过于，“你当对方是女神，对方当你是傻逼”</p>
<p>有了以前的经验，这次小法师醒悟的比较快，但心痛是难免的</p>
<p>一般来说，对待失恋，有几种可行性方案：</p>
<ol>
<li>打击报复</li>
<li>转移注意力</li>
<li>升华</li>
</ol>
<p>第一种成本太高，属于双输<br>最后一种为最优解，无奈境界太高，小法师目前达不到</p>
<p>只好走了中庸路线：转移注意力</p>
<p>之后小法师尽量让自己忙碌起来</p>
<p>……</p>
<p>情况还没好转，大陆一年一度的春节又到了<br>每年这个时候，回城卷轴都早早抛售一空</p>
<p>小法师只好施展费时费力的远距离传送</p>
<p>还没进家门，远远看到大门两边贴着血红的门对：</p>
<blockquote>
<p>一年一年又一年，年年结婚没有咱</p>
</blockquote>
<p>横批：</p>
<blockquote>
<p>再等一年</p>
</blockquote>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>Mom and Dad</title>
    <url>/cn/Mon-and-Dad/</url>
    <content><![CDATA[<h1 id="爸爸麻麻"><a href="#爸爸麻麻" class="headerlink" title="爸爸麻麻"></a>爸爸麻麻</h1><p>小法师的爸爸麻麻是不折不扣的麻瓜，周围圈子中半个魔法师都木有，一度以为小法师毕业后是拼装维修法器的</p>
<p>小法师出生在酱紫的环境，╮(￣ ▽ ￣”)╭ ，惨不忍睹已经无法形容，可像而知与父母的交流会有多大的障碍</p>
<p>这次一年一度合家团圆的日子，小法师回的非常心不甘情不愿</p>
<p>为什么呢？这又牵扯到两点：</p>
<ol>
<li>中国式父母</li>
<li>小法师辞职后没再找工作</li>
</ol>
<a id="more"></a>

<p>麻瓜式的爸爸麻麻们，有种深深的自我牺牲精神<br>即使在如今已全面奔小康的经济大环境下，他们还是能神奇的把桌子上的菜分成三六九等，把肉神马的给孩纸，有机蔬菜高纤维食品留给自己<br>“我们都为你这样了，你这样对得起我们吗？”是常见的杀手锏</p>
<p>对于此，小法师是没法用“傻孩纸，你还可以去死啊！”类似的禁咒破掉的，否则挂掉的只会是自己，并且死后还不得安生，被挂上不仁不义不孝的罪名作为麻瓜式爸爸麻麻们口中传颂的反面典型</p>
<p>没工作的事情，小法师已经无数遍的向父母解释自己属于 迟到的间隔年，是人生产生了迷茫，需要一段时期静一静…（以后要是有机会单独说）<br>但爸爸麻麻们是不管这一套说辞的，没工作不就是社会青年么，让爸爸麻麻在亲朋好友面前抬不起头来，那还不拿小鞭子抽着你去找工作</p>
<p>小法师坚信经济独立才能换取自由，所以不再问爸爸麻麻要生活费<br>这就产生了一个奇怪的现象，一方面小法师木有工作，另一方面小法师生活水平只是有略微的下降<br>身为麻瓜的爸爸麻麻们是完全搞不懂的，便自己做侦探，开始了自己的推理：生活费是哪来的呢？rMBP 那么贵重的法器怎么有金币兑换的？难倒是去偷去抢的？你怎么和普通人不一样，不是有精神病吧？应该去看看心理医生…</p>
<p>小法师伤心之余，又恨血浓于水，斩不断的亲情，还有一年一度的节日，最夸张的是 ZF 居然也插手此事，立法不看望父母定罪，强制执行后监禁…</p>
<p>小法师没胆子和公权力作对，身为 P 民，还是自觉点好<br>不过这次春节回家前，小法师已熟读兵法，做了充分的准备，幻想自己拥有魔法界一位已乘鹤西去的前辈的禁咒 —— 现实扭曲力场（PS: 突然想到 科学的超电磁炮里的 personal reality）</p>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>Framework of magic</title>
    <url>/cn/Framework-of-Magic/</url>
    <content><![CDATA[<h1 id="框架魔法"><a href="#框架魔法" class="headerlink" title="框架魔法"></a>框架魔法</h1><p>框架魔法的好处是显而易见的<br>单一的魔法往往威力有限，所以法师们常常把许多小魔法组合起来，形成一个有效的大魔法<br>一般来说，吟唱 This is a silly framework…，天天唱夜夜唱，唱多了有些法师发现了其中的共性，提炼出来，只发 TIASF，就可以完成魔法的吟唱，于是乎，框架就诞生了</p>
<a id="more"></a>

<hr>
<p>三重打击后，小法师一直活在阴影中</p>
<p>纵观法师界的那些魔导师们，各种魔法往往信手拈来<br>一个玩碳魔法的高手，爪哇产的咖啡用起来也是像模像样的，无需另起炉灶从头学起</p>
<p>小法师想既然如此，再加上那万恶的“合理调节情绪”——使自己忙起来，不如就一窝端了吧</p>
<p>之后就开始马不停蹄的翻阅 仙纳杜拉 火药筒 等框架魔法</p>
<p>（PS: 植物的节.聚合物水泥 本来也属于修习范围，可惜没找到《深入浅出 植物的节.聚合物水泥》那本法术书，再加上小法师不久前添置了一件法器（还不是给自己的），已然囊中羞涩，只好放弃）</p>
<p>小法师曾浏览过 《Tao-Te Ching》，里面有句哀兵必胜<br>大致是说，对抗的两军，充满悲愤心情的一方，必定能获得胜利</p>
<p>小法师此时咬牙切齿的心情岂止悲愤可以形容</p>
<p>大陆上有部比几个板砖摞起来还要厚的书，共分九部，记录了大陆六百年前的那些事儿<br>读罢，让人印象最为深刻的，不是什么什么计谋，而是每当有什么坏蛋，要搞什么什么阴谋诡计时，往往突然插这么一句：</p>
<blockquote>
<p>由于智商所限</p>
</blockquote>
<p>前人之失, 后人之鉴<br>可怜小法师天天只看魔法书，对于历史一窍不通，自然无法鉴之</p>
<p>并且由于一次性看的多看的杂，渐渐的，小法师发现吟唱 蟒蛇魔法时，往往把 红宝石 的咒语掺和了进来，反之亦然</p>
<p>终于，小法师惊喜的发现，自己连一个像样的魔法都释放不出了</p>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>911</title>
    <url>/cn/911/</url>
    <content><![CDATA[<p>还记得 911 时，我粑粑说，帝国主义国家，天天这里爆炸那里恐怖袭击，哪里有一个郭嘉像天朝酱紫安全</p>
<p>最恐怖的是，当时我居然也是酱紫认为的，可见受害之深<br>而当时有这种思维的人应该不在少数，同时可能还伴随着某种幸灾乐祸之感</p>
<p>还好那都是 2001 的情况了，互联网普及后，价值观多元化，人性有了更好的解放（还有很长的一段路要走啊）</p>
<p>核武器的研制成功后，全球性战争已不太可能，如今人类面临着一个最大的威胁：恐怖主义</p>
<a id="more"></a>

<hr>
<p>说来也奇怪，许多次梦境里，我都梦到 knife attack，充满了恐慌的情绪，场景以各种形式反复出现</p>
<p>如果是枪，还可以归结为美国大片看多了<br>但仅仅是刀，特别是匕首三棱刀<br>这根本无从解释，小时候又没经历过此种事情，很难不去想成是未来发生的事儿</p>
<p>前几天看《未来 100 年大预言》时，里面提到未来穆斯林的崛起，我看了不以为然，心想能搞出多大的动静<br>然后现实就给了我一巴掌，2014 3 1 Kunming Train Station</p>
<p>刚刚看到豆瓣上一篇文章因为出现了一个省的名字，就被河蟹了<br>群里对这件事基本也是闭口不谈，零星的一两个提一下，立即就有人提醒</p>
<p>《越读者》里提到的，当你阅读上升到一个阶段时，就会自发的去关心 ZF 政策问题</p>
<p>为什么呢，引用约翰·堂恩的一段话：</p>
<blockquote>
<p>谁都不是一座岛屿，自成一体；每个人都是欧洲大陆的一小块，那本土的一部分；如果一块泥巴被海浪冲掉，欧洲就小了一点，如果一座海岬，如果你的朋友或你自己的庄园被冲掉，也是如此；任何人的死亡使我有所缺损，因为我与人类难解难分；所以<br><strong>不需去问丧钟为谁而鸣；丧钟就是为你而鸣。</strong></p>
</blockquote>
<hr>
<p>下午才看到这则消息，点开新闻，听了两分钟，“谴责、有关部门、正义、分裂…”<br>又是老一套说辞，事情的真相呢？<br>从一个国家对危机事件的处理，能看到一个国家的未来</p>
<p>无所谓希望，也无所谓失望</p>
<p>寻求正能量可以用祖传的 CH，真相的话，还是用别国的语言搜索吧</p>
<p>为死者默哀</p>
]]></content>
      <tags>
        <tag>Me</tag>
      </tags>
  </entry>
  <entry>
    <title>Single Forever</title>
    <url>/cn/Single-Forever/</url>
    <content><![CDATA[<h1 id="注孤生"><a href="#注孤生" class="headerlink" title="注孤生"></a>注孤生</h1><p>小法师有一阵子没动静了，为什么又冒出来了呢？因为这次比较特殊</p>
<p>下午小法师正在阳台上晒太阳，看着前两天女神推荐的乌合之众，无聊了刷下 Q，看到女神在线，就去聊了两句</p>
<p>本来没有没想到女神每句必回，响应十分迅速</p>
<a id="more"></a>

<p>按说小法师应该十分高兴，但他却本能的感觉到了一种凉意 —— 太反常了<br>小心翼翼的试探：</p>
<p>加薪了？<br>没<br>升官了？</p>
<p>恋爱了？小法师已经打好还没发出去的时候<br>女神就自动把这个好消息告诉了小法师<br>小法师，眼前一黑，差点晕了过去</p>
<p>现实总是残酷的，而且往往富有戏剧性<br>眼看 Gap 就要结束，小法师已经在勾画未来怎样怎样的时候，又狠狠扇了他一巴掌<br>并且历史总是惊人的相似，去年这个时候，小法师已经遭受过一次不亚于灭顶之灾的打击</p>
<p>根据啥啥啥原理（我忘了，大致是情绪出自于爬虫脑，不经过人类新皮层，所以在非生命危险的情况下，一瞬间的感觉往往是有害的判断），小法师深呼吸 10 秒钟，然后…</p>
<p>忍着已在滴血的心，打了个电话，闲扯了一通，末了还未忘记祝福他们幸福<br>心中真正所想，只字未提</p>
<p>挂掉电话后，望着那精心准备的礼物，小法师充满了悲凉<br>这是注定孤独一生的节奏吗？</p>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>Go Web</title>
    <url>/cn/Go-Web/</url>
    <content><![CDATA[<p>没看完，过了上学的年纪，编程方面的书只能挑重点章节看看，例子没法一个个跑过，不得不说是种遗憾</p>
<p>相对来说，涵盖面是比较全面的，例子也很有代表性，买了是物超所值的</p>
<p>更别说作者把书放到网上了，搜下就能找到</p>
<p>Learning By Doing，动手写了个网站试试水：</p>
<a id="more"></a>

<p><a href="http://zhihudaily.ahorn.me/">http://zhihudaily.ahorn.me/</a></p>
<hr>
<p>从 Python 到 Ruby 到 Node.js，再到 Golang</p>
<p>Ruby 真让人惊叹，先不说自由度，语法糖方面是我感觉最接近伪代码的语言(要是没’end’，那真可以称得上是在写伪代码了，也不需要像 Python 那样人肉关注缩进)</p>
<p>Node.js，由于 JavaScript 不了解，这个也不怎么了解</p>
<p>然后就看到了 Go，由于我的入门语言是 C，这个有自然的亲切感，自来熟</p>
<p>不过从 Ruby 转到 Go，最难受的地方是又要声明变量类型了，复杂点的数据要 interface 去转换，没了之前的随心所欲</p>
<p>慢慢也知道了这是要编译前检查出 BUG 的缘故，动态语言只能人肉测试各个分支了</p>
<p>蛋疼</p>
]]></content>
      <tags>
        <tag>Programming</tag>
        <tag>Books</tag>
      </tags>
  </entry>
  <entry>
    <title>Complications of Lovelorn</title>
    <url>/cn/Complications-of-Lovelorn/</url>
    <content><![CDATA[<h1 id="失恋的并发症"><a href="#失恋的并发症" class="headerlink" title="失恋的并发症"></a>失恋的并发症</h1><p>一般来说，一个系列的主角挂了之后，往往就是结束的时候</p>
<p>比如《冰雪奇幻》里，故事的最后，姐姐横刀夺爱，两个菇凉蕾丝了，男猪脚只好和畜生在一起（赖着不死的下场往往比较悲催）</p>
<p>不过鉴于这是小说，并且之前还有过先例，《Rework》中也提到“修改一个 BUG 往往引入一个新的 BUG”<br>无奈之下，我们默认小法师是可以复活的</p>
<p>但小法师受的打击实在太大，以至于突破了等级复活时间，呆在祭坛里迟迟不愿意出来，只好弄个番外先</p>
<a id="more"></a>

<hr>
<p>当我们看一些描写历史的书时，往往会注意到一个词：历史局限性</p>
<p>对于独立个体来说，也是存在的<br>比如半年或一年之后，只要心智上在持续的向前走，蓦然回首，也常常能发现自己的局限，比如现在已信手拈来的事情，当时却手忙脚乱</p>
<p>作为过来人，往往</p>
<p>劝说：</p>
<blockquote>
<p>没有过不去的现实<br>女神没了 就重新找一个<br>我经历的挫折比你大得多，还不是挺过来了，你完全是抗压能力太弱了</p>
</blockquote>
<p>身为当事人，不说过去揍他们一顿，毕竟人家是好心，但心里也着实减轻不了多少痛苦</p>
<p>其实反观我们自己作为当事人时，也往往逃脱不了这个怪圈</p>
<p>人类都有遗忘痛苦的功能，最明显的是作为顶级痛苦的分娩，一个麻麻过了一两年后，又会萌生再生一个孩纸的念头</p>
<p>所以把时间拉到足够长后，自然会遗忘当初的痛苦，失恋也就不算个什么事儿</p>
<p>这时周围要有失恋的童鞋，我们也会有同样的感觉 —— 不就是失恋么，有啥大不了的，往往会 <code>goto &#39;劝说&#39;</code></p>
<hr>
<p>写东东要注意跌宕起伏，内功深厚的作者会把此内化到情节铺垫气氛烘托中，了无痕迹，而低级的往往会看到一个干巴巴的转折语气词儿：</p>
<p><strong>但是</strong></p>
<p>大多数时候，我们往往不知道为何痛苦，只能用“失恋”这个现象去概括</p>
<p>那么大家同为失恋，为什么有人立即就能转去追别的女生（禽兽！！！好吧，羡慕死了），而有人要以殉情明志</p>
<p>我们知道，由于潜意识的存在，意识到的内容，往往只是冰山一角</p>
<p>失恋之所以痛苦，并不仅仅是失去了一个人那么简单<br>它往往包括了你对爱情的憧憬，对未来的幻想，甚至个人信仰的破灭</p>
<p>其实你也知道，她并没有你想想中的那么完美，但沉溺在幻想中，主观的忽略了这些<br>如同阳光下的色彩斑斓的肥皂泡，无限美丽，戳破后便一切都消失了</p>
<p>在极短时间内，生活中美好的部分，全部被夺走（至少你会认为是全部）<br>这种堪比颠覆三观的事情，自然让人心痛</p>
<p>你感觉生活中如同被夺走了氧气，心中空空如也<br>平时在众人面前强作笑颜，只在要好的朋友面前提起此事<br>若你不幸又比较自觉，知道自己是在打扰别人，往往会闭口不言，说两句就沉默了<br>恢复到自己一人时，空虚又从四面八方涌来，无可躲避</p>
<p>恭喜你，因为此时，你碰到了人类甚至宇宙的终极问题：孤独</p>
<hr>
<p>从经济学的角度来看，我们知道，之前对于女神付出的一切，已属于沉没成本</p>
<p>这时科学的做法是：心如钢铁及时止损，即——有决裂，才有重生！严格控制机会成本的扩大</p>
<p>而现实是股神往往只有那么为数不多的几位</p>
<p>概因人类的情绪先于逻辑</p>
<p>要知人类大部分情绪来自于古动物脑，路径短、反应速度快，属于内核级别，权限较高<br>而负责思维的新皮层路径长、反应速度慢，属于应用层，权限最低<br>如果碰到 杏仁核劫夺、扣带回锁死一类，就会导致应用层权限不够而被拒绝</p>
<p>此时，人就完全被情绪控制了</p>
<p>那么小法师不愿意复活，我们也就可以理解了</p>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>Self Healing</title>
    <url>/cn/Self-Healing/</url>
    <content><![CDATA[<h1 id="如何自愈"><a href="#如何自愈" class="headerlink" title="如何自愈"></a>如何自愈</h1><p>上次分析了背后的一些原因，这次说说如何应对</p>
<p>首先这里默认没有任何挽回机会了，而不是你跪在女神面前大哭一场，或作出一哭二闹三上吊这种夸张的事情便可力挽狂澜的</p>
<p>如果你真做了，并且挽回了，那么请参考如何恋爱的番外，而非下文</p>
<p>对于个体而言，如何尽快走出困境，把损失降到最低，这是我们现在最为关心的</p>
<a id="more"></a>

<hr>
<p>好，我们先来处理《黄帝内经》中着重强调的“治未病”阶段</p>
<p>首先，要正视自己的备胎身份</p>
<p>大多数人往往不愿意承认这个事实<br>比如我们的小法师，一直沉浸在与女神的幻想中<br>再比如高买低卖的那些散户们</p>
<p>经济学里有个概念叫做<strong>路径依赖</strong>，官方解释是：</p>
<blockquote>
<p>一旦人们做了某种选择，就好比走上了一条不归之路，惯性的力量会使这一选择不断自我强化，并让你不能轻易走出去</p>
</blockquote>
<p>比如我们熟知的 QWERTY 键盘（我用过 Dvorak 几个月，感觉蛮爽的，不知道是不是心里作用）</p>
<p>《素问·四气调神大论》同样提到：</p>
<blockquote>
<p>夫病已成而后药之，乱已成而后治之，譬犹渴而穿井，斗而铸锥，不亦晚乎</p>
</blockquote>
<p>培养一颗敏感的心，通过一些小事情，见微知著，窥破这层幻想，而非持续的沉溺在其中</p>
<p>走出幻觉，走向成熟，斩断羁绊，同过去的自己一刀两断</p>
<p>当然，如果你没做到管中窥豹，一叶落而知秋，也不用太悲观</p>
<p>毕竟，靠自身力量走出这种幻觉是比较困难的<br>这无异于要求代码中的一个变量去检查 BUG，往往是不现实的（比如我们的小法师碰到了 被表白 这种打脸的事儿才被暴力扇醒的）</p>
<hr>
<p>现在我们来处理“不亦晚乎”的情况</p>
<p>网络上广为流传着一些方式，如：</p>
<ol>
<li>看一本已经想看很久的书</li>
<li>出门走走运动运动</li>
<li>旅游</li>
<li>多和朋友待待 聊聊</li>
<li>转移下注意力</li>
</ol>
<p>不得不说，这些确实是有一定的作用，但不能从根本上解决问题</p>
<p>运用这些方法时，当时有说有笑好热闹，但从另外一个角度看，未尝不是另一种幻觉</p>
<p>因为别人无法也不可能一直陪着你，当众人散去后，迎面扑来的那种孤独感，仿佛法条上定义的不可抗力，挡无可挡（留学的孩纸可能都有这种体会）</p>
<p>那么究竟该怎么办呢？</p>
<p>如果你看过 <a href="http://v.163.com/movie/2012/9/P/4/M8I5TK339_M8KTJOSP4.html">斯坦福大学公开课：如何像心理学家一样思考 - 我们真的能控制情绪吗</a>，应该会有所感悟</p>
<p>正如上一篇提到的，人类大脑有种种缺陷，但事实上，只要不触发硬件 BUG，往往是可以继续顺利的运行</p>
<p>主观上，我们感觉大脑是单核单进程的，强行大量并发往往意味着智力和判断力全面下降，更不用说并行运算了</p>
<p>但我们常常意识不到或忽略了呼吸，心跳等系统进程的存在</p>
<p>出于内核或软硬件保护机制的存在，如果想自身对其进行元编程，绕过操作系统的监控也往往不现实（外物如毒品不算进去）</p>
<p>基于此，我们可以尝试着<code>fork</code>出一个新进程，把悲伤失望等情绪统统扔进去，然后执行<code>disown %</code>，而非让它们占用<code>fg</code>，从而影响了处理日常生活的程序</p>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>Side Story</title>
    <url>/cn/Side-Story/</url>
    <content><![CDATA[<h1 id="番外-闲扯"><a href="#番外-闲扯" class="headerlink" title="番外-闲扯"></a>番外-闲扯</h1><p>本来只是一时冲动，当时正在看 ROR，当时还不知道测试先行，加上都是 E 文，完全不知道在干吗，有种被玩了的赶脚</p>
<p>加上当时看了一个视频，大致是说乘客不断问空姐为啥灰机上不能玩手机，那空姐不断从科学的角度解释，最后抓狂说你们这些麻瓜，灰机是靠魔法驱动的，不然这么大的玩意儿怎么飞上天的，空气动力学、电磁学是外星人编出来骗你们这些愚蠢的人类的…</p>
<p>然后我就赶脚编程和魔法是有点像啊，平时听公开课，教授也常常提到 there’s no magic here，我赶脚恰恰相反，码丫码，码出那么一大堆字母，然后就可以 run 了，这还不神奇么</p>
<a id="more"></a>

<hr>
<p>我想，如果能写到 10，就在 Github 单开个项目<br>嗯，其实我应该写到 100，才应该有回顾神马的</p>
<p>可是我知道自己太懒啦，不知道啥时候就赶脚无聊，不再继续了，所以还是早早把这件事做了好</p>
<p>自己也很吃惊居然破个位数了<br>很大程度上要归功于人家一章的字数，够我 12345 加起来</p>
<p>还好我给自己的目标很低啦，又不是专业码字，写的时候能乐一下就好</p>
<p>话说回来，码农是苦逼啊，平时闷头码代码也就算啦，想记录个什么东东，不上相都不敢抛头露面的，只有靠<strong>纯文本</strong>好吗</p>
<p>纵观文艺青年，哪个不是照片美食一路高歌铺过去的<br>差距 ╮(￣ ▽ ￣”)╭</p>
<hr>
<p>一般来说，小说中鲜有中途演员挂了这种事情，如果不幸出现了，都是了不得的大事儿，要么主角突变了，像赛亚人那样功力暴增 100X；要么是剧情有转折，轮到下一代出场了，比如《倚天屠龙记》中的张翠山，张无忌，丫换主角了；要么呢，就是作者换了，要另起炉灶了（-_-|||）</p>
<p>还有，武侠玄幻的这种，主角只有越来越强<br>金大侠的 <em>飞雪连天射白鹿， 笑书神侠倚碧鸳</em> 就是这类的巅峰</p>
<p>大学里我还在看《蛮荒记》时，曾好奇过这个问题，为啥酱紫呢？<br>像拓拔野，《搜神记》结束时，已可以和仙级一战，当《蛮荒记》快结束时，三天子心法、什么乱七八糟的都会了，更不用说最后类似 bug 的 刹那芳华 了<br>当然，此时也就到头了，再往下没法写了</p>
<p>当然现在我知道金式的代入感比较强，读者可以跟随主角的成长而成长，这样用户的<strong>回头率、粘性和忠诚度</strong>都很高，若干年后再看《神雕》仍然有当初废寝忘食的冲动</p>
<p>反观古龙大神的作品中，上来就是神级，不用打怪，以悬疑推理驱动，但也没听说有降级的<br>市面上貌似也没有“倒成长”这种模式</p>
<p>然后问了一个读书破万卷的室友，他说纵观他所看过的所有玄幻中，只有一个是越练越弱的</p>
<p>可想而知我多么吃惊，连忙追问怎么样？他说还能怎么样，猪脚刚开始秒杀神界，后来越打越弱，被本来完虐的对手各种羞辱，最后发现连个普通人都打不过后，自戕了…</p>
<p>我听完，一阵惆怅</p>
<p>然后他继续说，主角随之复活，转世成 XXX，洗心革面从零开始，终于会当凌绝顶，抱得美人（们）归</p>
<p>真是不作死就不会死</p>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>Harry Potter and the Goblet of Fire</title>
    <url>/cn/harry-potter-and-the-goblet-of-fire/</url>
    <content><![CDATA[<p><img src="http://cl.ly/image/042v2j0o2J1f/hp4.jpg" alt=""></p>
<p>When I read Chinese version of HP4, I was still in junior middle school.</p>
<p>In the final battle, One of my classmate was amused by <code>Avada Kedavra</code> VS. <code>Expelliarmus</code>, and I had the same feeling.</p>
<p>Because Harry should beat Voldemort and fight endless Death Eaters all by himself, and married Hermione Qiu Ginny… if it’s a Chinese novel.</p>
<p>And now, I no longer a child and begin to realize how brave Harry is.</p>
]]></content>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>2013 Summary</title>
    <url>/cn/2013-Summary/</url>
    <content><![CDATA[<h3 id="2014-03-31-13-47-59"><a href="#2014-03-31-13-47-59" class="headerlink" title="2014-03-31 13:47:59"></a>2014-03-31 13:47:59</h3><p>嗯~ o(*￣ ▽ ￣*)o ，我果然又拖到三月了，赞一个先</p>
<p>背后的原因应该是，对进入人生下一个阶段的恐惧<br>非得等到生日过了才算自己进入 24</p>
<p>另外一个也因为《黄帝内经》中把男子以 8 年为一周期<br>16 岁那年，感觉自己有明显的变化，这次肿么木有呢，怕怕<br>但 24 还是不可避免的到来啦，而且一眨眼已经过去几天啦<del>~</del></p>
<a id="more"></a>

<h4 id="Gap-year"><a href="#Gap-year" class="headerlink" title="Gap year"></a>Gap year</h4><p>最早的想法大致来自那个神贴：<br>一年完成计算机，一周完成线性代数<br>我只能说，看完后 TM 惊呆了，居然还可以这样玩，碉堡了好吗</p>
<p>无奈当时已卖身，并且穷的叮当响<br>但心中一直不甘，总想找个机会，用半年或一年时间，爽一把</p>
<p>本来打算的是 1.5 年时开始计划，但木有想到这么快机会就来啦</p>
<ol>
<li>老大跳槽了</li>
<li>新项目经理搞办公室政治（继我闪了之后，大家陆陆续续走了一大半）</li>
<li>项目属于《人月神话》中的死亡计划，没奔头</li>
<li>房东要装修房纸，撵人…</li>
<li>血汗钱攒的那么一点</li>
</ol>
<p>当时感觉像是有一只看不见的手推着我<br>既然这样，那就顺应天时，果断拒绝继续出卖廉价的劳动力</p>
<h4 id="父母"><a href="#父母" class="headerlink" title="父母"></a>父母</h4><p>老爸老妈属于古板型的那种，Blog 里面也说过<br>所以他们听到我辞职不干了，还是不找工作的那种，都无语啦</p>
<p>这方面我感觉自己做的还是八错的<br>自己独立了，一段时间搞个在他们看起来脑残的事情，也没有和他们闹掰过，还不加上以前天天揍我</p>
<p>过年按道理来说，应该是很凄惨的，没老婆就算了，还没工作<br>结果我呆到元宵后才离开，我嫂子都震惊了</p>
<h4 id="芝士就是力量"><a href="#芝士就是力量" class="headerlink" title="芝士就是力量"></a>芝士就是力量</h4><p>虽说是全职学习了，可惜大半年也就看了 100 来本书，搞啥啊，不是太满意</p>
<p>但话说回来，也不应该用本数来衡量<br>说不定有人几本就悟道了，有人不看书不照样是壕么</p>
<h4 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h4><p>Github 终于搭起来啦，markdown 写东东<br>开了个脑残系列，慢慢码吧</p>
<p>但我发现，编程方面东西写的真的好少哦</p>
<p>那个 ￣ △ ￣ 我真是程序员吗？</p>
<p>虽然有种种怀疑，我还是连蒙带骗的拐了个孩纸当徒弟</p>
<h4 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h4><p>买了 rMBP 终于不用天天 Ghost 系统啦（Xcode 拖到现在才看…）<br>拿到小伙伴的 mini，感觉很好，立即弄了个 Air，用了一个月，发现自己真的是已看书为主，游戏都不玩的…<br>等 6 出来，全线换成苹果的<br>平时和小伙伴看看电影，吃吃烧烤，在阳台上晒晒太阳看看书</p>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>总有结束的时候，太可惜了<br>引用罗素的话：</p>
<blockquote>
<p>如果有机会，我愿意再来一次</p>
</blockquote>
<h3 id="2014-01-10-23-32-33"><a href="#2014-01-10-23-32-33" class="headerlink" title="2014-01-10 23:32:33"></a>2014-01-10 23:32:33</h3><p>记得去年的总结，我说，是我成长最大的一年，看来今年又要这样说了<br>有些没完成的事情，始终是没完成，并不能眼瞅着到年底了，一鼓作气就能突破的</p>
<p>回头看毕业的这两年，感觉真像重新活过一遍一样<br>当然实际过程是渐变与线性的，突变的话估计就是第二人格了</p>
<p>以前的那个我，也不能用傻来概括</p>
<p>想来还是因为：</p>
<blockquote>
<p>古之善为道者，非以明民，将以愚之</p>
</blockquote>
<p>后来接触了不少神奇的概念，我，是愿意相信这些事情是真实的</p>
<p>闲来无事，回顾了下思维导图，大多是一年或半年前的</p>
<p>发现几个点：</p>
<ol>
<li>提出了问题，没有直接联系解决方案</li>
<li>有些学习理论不正确，或者并不适合我</li>
<li>不切实际的目标</li>
<li>有些节点已经完成了（好开心 O(∩_∩)O~~）</li>
</ol>
<h3 id="2013-12-31-23-46-22"><a href="#2013-12-31-23-46-22" class="headerlink" title="2013-12-31 23:46:22"></a>2013-12-31 23:46:22</h3><p>这…说好的总结呢？？？<br>又打脸了<br>之前的列表就没有做完的<br>晚上在 Codecademy 刷 Ruby，心想马上就明年了，还没 100%，上头了，也不管 EP 了，一直刷到刚才，破天荒顶了 12 个番茄钟<br>但是呢，有时候吧，并不是你钢一钢，就能突破的，也不科学</p>
<p>据说：</p>
<blockquote>
<p>懂得放弃的人，不会过分计较眼前的得失，他们的心胸宽广，眼光远大…</p>
</blockquote>
<p>算了，骗自己没意义<br>不说了，桑心，洗洗睡了，明天还得抢车票呢…</p>
<p>这个没完，过两天再战，总结继续<br>To Be Continue…</p>
<hr>
<h3 id="2013-12-20"><a href="#2013-12-20" class="headerlink" title="2013-12-20"></a>2013-12-20</h3><p>这几天头好痛，眼瞅着 2013 就要过去了，前些天准备做做扫尾工作，不多增加任务，但现在看看，单单是扫尾，也居多无比<br>特别是 mac 到了后，各种熟悉，又耽误了两天</p>
<p>赶紧罗列下 To-Do list，把它们从头脑中赶出去</p>
<ul>
<li>真气运行</li>
<li>咏春：标指</li>
<li>十多本未读完的书</li>
<li>ESL</li>
<li>这个总结</li>
<li>更新 Blog/about</li>
</ul>
<p>去年的总结拖到 3 月份才做，今年表酱紫了</p>
]]></content>
      <tags>
        <tag>Me</tag>
      </tags>
  </entry>
  <entry>
    <title>Reading Plan</title>
    <url>/cn/Reading-Plan/</url>
    <content><![CDATA[<p>2014-04-08</p>
<p><img src="http://cl.ly/image/2C2Z3D0i1q1i/%E8%AF%BB%E4%B9%A6%E8%BF%9B%E5%BA%A62.png" alt=""><br>上次有个地方算错了，导致露珠都以为快速阅读练成了呢<br>修正后知道真相的我眼里掉下来</p>
<a id="more"></a>

<hr>
<p>买了 Air 后，傻傻的用了几个月看书<br>前两天才发现 Game Center，怪不得人家说 iPad 是用来玩游戏的<br>一发不可收的刷榜两天<br>然后我想到了游戏奖赏机制，以及看书特别烦躁</p>
<p>记得哪里说过，读书是个超长期回报过程，所以小时为单位根本无法感到奖赏<br>一味说内在驱动属于滥用意志力了</p>
<p>潜意识又不懂这些的，就感觉很无聊，控制着你搞别的</p>
<p>我感觉突破 1k 以上后，就内化到习惯里面去了，应该就不会在意这个了，但在几百这个阶段特别特别难受(╯﹏╰）</p>
<p>所以我想有没有一种可以可视化的<br>类似于 KPI 那种，纯打鸡血用<br>而且书的页数比较容易量化</p>
<p>然后用 omniplan, 甘特图弄了半天，没做成自己想要的样子</p>
<p>一怒之下想自己写，做成网站或者 ios app，后来发现原来 Excel 就可以满足了……</p>
<p>程序员模式动不动就向自己造轮子么…</p>
<p>Thinking out of box</p>
]]></content>
      <tags>
        <tag>Reading</tag>
        <tag>Tech</tag>
      </tags>
  </entry>
  <entry>
    <title>The Interpretation of Dreams</title>
    <url>/cn/The-Interpretation-of-Dreams/</url>
    <content><![CDATA[<h1 id="梦的解释"><a href="#梦的解释" class="headerlink" title="梦的解释"></a>梦的解释</h1><p>小法师发现自己在打点滴<br>针头扎在手背上，红色的血液针管内<br>没有多想，按下了 C（暂停？）键</p>
<a id="more"></a>

<p>呼吸一紧，瞬时仿佛被噎住了，感觉像置身在真空中，体内的空气刷刷的从针孔处泄露了出去<br>小法师吓坏了，赶忙再次按下暂停键</p>
<p>大概过了几秒钟，小法师猛地喘了一口气，终于感觉自己可以呼吸了<br>他深深地吸了几口气，还没想到“大难不死必有后福”，就发现了一个严重的问题 —— 没有心跳了</p>
<p>这一下又吓得小法师不轻<br>天啊，怎么会这样，小法师心想，有呼吸没脉搏，这是肿么回事</p>
<p>在精灵国度，急性心跳停止是重要的死因之一<br>还好小法师在天朝，他并没放弃治疗，着手对自己施展心肺复苏术，这时他已经躺在了床上</p>
<p>但是，高质量的心肺复苏有几个要点：</p>
<ul>
<li>按压速率至少为每分钟 100 次</li>
<li>成人按压幅度至少为 5 厘米</li>
<li>保证每次按压后胸部回弹</li>
<li>尽可能减少胸外按压的中断</li>
<li>避免过度通气</li>
</ul>
<p>这样看来，小法师现在的情况简直就是笑话</p>
<p>另外，没血液循环意味着没有能量与氧气交换，机体活动逐渐停止<br>但自己还能动，还在给自己做胸腔按压，还有如此清醒的意志<br>虽然小法师迷惑不解，但并没有因此停歇对自己的救治</p>
<p>努力了一会儿，然后他醒了…</p>
<p>正值深夜，四周静悄悄的，没有一点儿的声音<br>每每做噩梦，小法师醒来时，往往发现自己的手都压在心脏的位置，而这次却在右边</p>
<hr>
<p>想当年还在法师学院一年级时，小法师就接触了催眠，每次做完都很放松舒服，后来每晚睡觉前听一次，睡眠质量飞升</p>
<p>偶然的一个机会，小法师翻到了一本古籍 <a href="http://book.douban.com/subject/1201821/">揭开人类心灵的奥秘</a><br>可惜此书太厚，到了还书期限，小法师也只读掉一半</p>
<p>但秘籍就是秘籍，比如梅超风只得到了半部九阴真经，便足以秒杀丘处机等一波老道</p>
<p>小法师一下子被弗氏的弑父恋母理论惊呆了，但“梦是为了达成某种愿望”启发了他<br>一些梦自己可以找出形成的原因了</p>
<p>由于得到了貌似科学的解释，再加上催眠光环的加成，小法师的梦渐渐少了</p>
<p>PS: 若干年后，小法师再次翻阅此书，读掉剩下的一半，果然看到了对控梦的描述，虽然只有一句：</p>
<blockquote>
<p>有些人在夜晚时能很清楚地知道自己在睡觉与做梦，因此似乎具备用意志指导梦的能力。譬如说这种梦者对梦感觉不满意时，他能够不醒过来而将梦中断，然后再以另一个新方向开始。</p>
</blockquote>
<p>小法师只能感叹造化弄人，距离此已咫尺之遥，如果当年坚持一下翻完，可能就不会走了那么多弯路了<br>同样的还有另一件事情，以后有机会再说[坑]</p>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>Polyphasic Sleep</title>
    <url>/cn/Polyphasic-Sleep/</url>
    <content><![CDATA[<h1 id="达芬奇睡眠"><a href="#达芬奇睡眠" class="headerlink" title="达芬奇睡眠"></a>达芬奇睡眠</h1><p><a href="http://book.douban.com/subject/7067548/">Powerful Sleep</a> 中说过</p>
<blockquote>
<p>实际情况是他们已经睡的太多了，而且精神状态和睡眠质量一样差。之所以出现这种情况是因为他们没有意识到他们体内潜在的精力和睡眠机制（Energy and sleep mechanism）</p>
</blockquote>
<p>这句话点出了很久很久以前，小法师有时睡 10 个小时，醒来还是感到疲劳困倦精力不足的原因</p>
<p>芝士就是力量<br>之后小法师根据自己 Deep sleep 和 REM 的周期，做了适当调整，并加强光照（注意是褪黑素，而不是光合作用）</p>
<p>即使在强大的工作鸭梨下，睡眠质量还是呈线性提高</p>
<a id="more"></a>

<hr>
<p>后来小法师又了解到了神奇的 <a href="http://zh.wikipedia.org/wiki/%E5%A4%9A%E9%98%B6%E6%AE%B5%E7%9D%A1%E7%9C%A0">达芬奇睡眠</a>，又称 多项睡眠（Polyphasic sleep）</p>
<p>当时小法师比较傻，居然真去尝试了下，结果直接导致白天工作时萎靡不振<br>如果他看过 <a href="http://book.douban.com/subject/3662227/">私密的神话</a>，应该就不会做这种愚蠢的事情了</p>
<p>事实上，NREM REM 都是有其不可替代的作用的<br>首先，REM 并不是人类的专利，哺乳类和鸟类都会发生；其次，在 NREM 阶段其表达方式可能是 “感觉”，所以这时虽没有梦的产生，但不代表可以随意缩短</p>
<p>同时，有此尝试的一些勇士们，大多也是以月为单位，好像并没有出现十年如一日并且成功的栗子</p>
<p>不过，小法师受一个用此法考托福的孩纸 6 + 3 * 20′ 的启发（ 夜间 6 小时， 白天分三个时段 20 分钟的小憩），完善了自己的方法</p>
<p>以至于后来，居然一夜无梦了</p>
<hr>
<p>按说小法师应该高兴的，此时他已经可以通过 <strong>催眠</strong>[坑，后面填]，很顺利的进入深度睡眠，并且醒来后全身酥松，仿佛打通了奇经八脉[坑]</p>
<p>但小法师还是郁闷的，连续几个月没有梦相当于少了一项技能，并且这种事情以前还没出现过，很难不怀疑自己的人脑是不是出了什么 BUG</p>
<p>前面说过，小法师已经可以根据 弗洛伊德 的解梦理论，看看自己的潜意识在搞些神马了<br>但现在居然是没有梦了，这怎么解释呢，难道说小法师已无欲无求了？</p>
<p>小法师为此困惑了很长一段时间，直到他看到了 <a href="http://book.douban.com/subject/1316093/">超越自卑</a></p>
<p>阿德勒 在 个体心理学对梦的研究中提到：</p>
<blockquote>
<p>如果说梦的意义只在于留下某些感觉在生活中，我们经常会发现那种不愿意被感觉左右的人，大多时候，他们只相信科学，这种类型的人就不太会做梦，有的人甚至根本就不做梦。</p>
<p>梦中提供的任何方法其实都比你在清醒的时候所思考出的解决方式要差。换个说法，就是说，在做梦的时候，个人就等于在睡觉的过程中解决问题，这样说一点都不过分。</p>
</blockquote>
<p>小法师释怀了，连忙做笔记以加强记忆</p>
<p>可惜他不知道，这些书由于年代较早，著书者都属于在黑暗中摸象的半盲人，每个人都以为摸到了整只象，其实只摸到了象鼻、象腿、象尾。弗作为开创者也未能幸免，显然只摸到了大象的生殖器官。</p>
<p>就酱紫，小法师一直为自己是 “不愿意被感觉左右的人”而沾沾自喜<br>直到他接触了 —— 清明梦</p>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>Learn Go in 20 days</title>
    <url>/cn/Learn-Go-in-20-days/</url>
    <content><![CDATA[<p>我看了下 Log，其实不到 20 天，但标题写个 16，赶脚怪怪的，没有 10 的倍数霸气</p>
<p>首先谈学习时间不能脱离环境</p>
<p>露珠大学时深受 “先学好一门语言” 只害，结果到毕业时，仅仅了解 C，结果也没学精（别的语言会拓展你对编程的认识）</p>
<p>所以泥们应该可以更快！！！</p>
<a id="more"></a>

<p>说两句就累了 ＞﹏＜ ，赶紧帖步骤</p>
<ol>
<li><p><a href="http://book.douban.com/subject/24316255/">Go Web 编程</a></p>
<p>除了类型声明在后面，Golang 和 C 的语法还是比较像的，至少没 Obj-C 那么蛋疼，语法糖方面一下就能过去<br>然后是 Web 编程方面， 仔细看看也用不了多久</p>
</li>
</ol>
<p>2) <a href="http://go-tour-zh.appspot.com/#1">Go 官方 指南</a></p>
<p>   这个相当于上机环境，检验一些用法</p>
<p>   上面两步熟悉了之后，已经可以自己写点东西玩玩了<br>   比如露珠写了个 Web 版的知乎日报首页， 点 <a href="http://zhihudaily.ahorn.me/">这里</a><br>   当时开发的一些情况以及源代码在 <a href="https://github.com/leihao0/GO-ZhihuDaily">这里</a></p>
<p>   当然，Github 又是另外一项技能了</p>
<p>3) 框架，露珠用的 <a href="https://github.com/go-martini/martini">Martini</a></p>
<p>   框架感觉是另外一个东西了，即使你语音会了，基于此语音的框架，还是要耗费时间另外学习，比如 Ruby 本身 完全被 ROR 掩盖住了</p>
<p>   所以一开没想到用框架，后来写着写着发现路由神马的都要自己实现，就上喽</p>
<p>性能方面网上有各种讨论，就不说了</p>
<p>而人件是最重要的，所以从对程序员的角度来说，Golang 还是很好的，本身是静态语音某种程度上可以像动态语言那样写，除了 Json 转换的蛋疼以及不停的 checkerr 之外（我真的不是黑它！！！）</p>
<p>好吧，我是用了点 Ruby 后过来的，Ruby 太爽了，以至于转过来后各种难受有木有</p>
]]></content>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Lucid Dream</title>
    <url>/cn/Lucid-Dream/</url>
    <content><![CDATA[<h1 id="清明梦"><a href="#清明梦" class="headerlink" title="清明梦"></a>清明梦</h1><p>不得不说，这个世界真的很神奇，你不知道的东西，不代表它不存在</p>
<p>小法师在看完《教你如何控制梦境》那篇神贴后，整个人就呆掉了<br>之前的 盗梦空间 完全就是当成电影，看完就忘了，没想到居然是有现实依据的<br>真是内行看门道，外行看热闹<br>由于自己的愚蠢，导致鬼压床这种可遇而不可求的事情再也没有出现</p>
<a id="more"></a>

<p>PS: 盗梦的原型好像是 筒井康隆 <a href="http://book.douban.com/subject/4887589/">梦侦探</a>，没时间的可以看下改编的动漫电影 <a href="http://movie.douban.com/subject/1865703/">红辣椒</a><br>不过还是推荐小说，因为里面由浅入深的描述了 非确定多项式（NP）问题，并且给出了很多实例</p>
<p>之后小法师不停的 Google，找到了百度 清醒梦 贴吧，看到了 天涯上 鬼压床的孩纸们，你可能《错过了一个精彩的世界》，再到 蚂蚁 的 追梦空间<br>如果这些都不能让他信服的话，他又看到 TED 里，<a href="http://v.163.com/movie/2013/3/6/B/M92INA100_M92INHT6B.html">哈佛脑神经系的博士中风后的感受</a></p>
<p>小法师为啥那么激动呢？<br>不仅是因为清明梦可以当做大型 3D 游戏来玩，最最重要的是：据说如果做到了控梦的话，是可以在梦里做任何事情，任何事情呦( ✧≖´◞౪◟≖ ｀)</p>
<p>小法师立即展开了实验，之后成功过几次，都详细的记录了下来，摘录点</p>
<hr>
<p>第一次：</p>
<blockquote>
<p>用回笼觉，把本本抱来，看着软件，六芒星，三种转换方法（扳机！其实那已经睡着了，不然半夜哪来的笔记本），啪的一下倒在床上，全身毛孔麻麻的，好像都张开了一样，然后立即起来了！！！<br>出体了？才第三天哎，正兴奋，发现自己又回身体里了……<br>然后看到自己是个发白光的东东，有四肢+身体，没有手脚，就是末端是圆弧状的，这是能量状态？然后怎么试都出不去，下面一步不就是睁眼么<br>然后就睁眼啊，发现阳台的门是开着的，外面有不知道神马响动，有点可怕，大概是吓到了，就真醒了，发现门关的好好的，外面漆黑一片，也没啥响动<br>继续拿出本本，又出现了全身麻麻的……<br>下面的模模糊糊记得是 去歌厅 回学校 公交车 出租车 修电线，沦为普通梦了……</p>
</blockquote>
<p>之后的一次：</p>
<blockquote>
<p>梦里面貌似在学校，想到按住 ctrl 就可以飞起来了，shift 是加速，然后在失重的状态下玩了好一阵子<br>然后有个啥 Q 版的小动物比赛，我正准备飞，突然那个绿色的小动物变成了马克洛夫（现代战争 3），要么是 T-bag（越狱）… 他要抓住我，我就向后飘走了…</p>
</blockquote>
<p>还有一些，比如：<br>乔布斯的 “your time is limited”，梦里给小法师上了沉重的一课<br>以及在梦中为大学那段就扯不清的感情完成了闭环，可以继续向前走<br>还有之前 揭开人类心灵的奥秘 提到的那个梦，小法师经常好奇活着有什么意义么，梦里就给他来那么一下，把他搞死让丫知道活着是多么美妙</p>
<p>##方法<br>网上一大堆，各有各的玩法，其实只要掌握核心思想就行了：<strong>梦中之梦，进而控梦</strong></p>
<ol>
<li>早晨一醒来就要记录梦境，哪怕想不起来任何梦境，也要写写画画<br>一般的短期记忆 5 分钟清空，所以不立即记录梦境的话，梦瞬间就会遗忘</li>
<li>日常生活中时常提醒自己，“我是否在做梦？”<br>习惯是可以带入梦中的，原理可参考：<a href="http://book.douban.com/subject/20507212/">习惯的力量 - 我们为什么会这样生活，那样工作？</a></li>
</ol>
<p>具体可参考 <a href="http://book.douban.com/subject/4740779/">梦的指南 - 解析奥妙的清明之梦</a></p>
<p>里面还描述了一种可能是比 清明梦 更高级的一种状态：无梦，即 <strong>纯意识</strong> 状态</p>
<p>PS：<br>这里的 无梦 并不是小法师那种催眠后，一觉睡到天亮神马都布吉岛<br>可能是《当下的力量》里描述的那种全然的活在当下的状态<br>另外，大脑进化出 REM 时，还没有文字的产生，所以我们的梦常常是以图像的形式展现</p>
<hr>
<p>其实即便是知梦，还是忍不住那种恐惧感，比如身上凉凉的，全体通透，少个胳膊断条腿的情况<br>如果是你天天生活的场景就更恐怖了，比如奇怪的声音，怪兽骷髅啊什么的<br>由于根植于人类基因中的 Fight-or-flight，这时你很难忍住不醒过来</p>
<p>因为 —— 万一是真的呢！</p>
<p>在唐望系列 <a href="http://book.douban.com/subject/4199618/">做梦的艺术</a> 中，把清明梦描述成了另外的世界，而我们日常生活中的反而为虚幻<br>听起来有点像是 阿瓦隆——英雄灵魂安息的理想乡</p>
<p>虽然听起来比较扯淡，但庄生晓梦迷蝴蝶，谁又知道，到底哪个世界是真的呢</p>
<p>##真実は いつも 一つ<br>说了那么多，用柯南的话说：真相只有一个</p>
<blockquote>
<p>月收入五万以上可考虑欧美中端游<br>月收入三万可考虑低端欧洲游<br>月收入一万到两万请选择东南亚游<br>月收入低于一万请选择国内游<br>月收入低于五千请选择省内游<br>月收入三千请选择郊游<br>低于两千请选择花生油<br>低于一千的请选择地沟游<br><strong>没有收入的</strong>请选择 <strong>梦游</strong> ！<br>祝大家五一快乐！</p>
</blockquote>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>Sleep Paralysis</title>
    <url>/cn/Sleep-Paralysis/</url>
    <content><![CDATA[<h1 id="睡眠瘫痪"><a href="#睡眠瘫痪" class="headerlink" title="睡眠瘫痪"></a>睡眠瘫痪</h1><p>曾经，小法师还在魔法学院做魔法学徒的时候，经历过两次 <a href="http://zh.wikipedia.org/zh/%E7%9D%A1%E7%9C%A0%E7%98%AB%E7%97%AA%E7%97%87*">鬼压床</a></p>
<p>第一次据现在已经四年了，当时的小法师甚至不知道这叫 “鬼压床”，只是完全不知所措，把此事定义为 “灵异事件”</p>
<p>让我们回到四年前，（_括号中为运用《梦的解释》理论的分析_）：</p>
<p>当时小法师中午 shopping 回来，去睡了会午觉<br>又加上他在感冒，十分不舒服，小法师就用继续用催眠疗法<br>之前已经提过，小法师用此法后，就没做梦的烦恼，并且快两年了也没出过什么问题</p>
<p>而这次他就要大吃一斤了</p>
<a id="more"></a>

<hr>
<p>小法师慢慢放松下来，突然他发现自己有了内视能力（_道家修炼可以看到脏腑_），扫描到胃时看到了一个好大的肿瘤。<br>晕，小法师心想，这已经是绝症了啊，然后画面缩小，之前的那个是放大了好多倍的象（_高中生物书中的肿瘤细胞_）</p>
<p>…</p>
<p>再次有意识时，小法师发现自己在一个湖的桥上（_当地的一个湖的映射_）<br>突然一只手从水中伸出的画面闪现（_植物大战僵尸_）<br>从桥上穿过大半个湖时，右边发生骚乱，好像有人落水（_殉情跳湖的新闻_）<br>然后看见水中有个小孩（<em>小法师幼年经过某家门口时，小伙伴说里面闹鬼，绝对不能往里面看（</em>绝对不要想象粉红色的大象<em>），不然会鬼上身。然后小法师就往里面看了看，瞥见了一个永生难忘的画面</em>）<br>小法师沿着弧线向一艘船下游去，手从水中伸出的画面再次闪现。然后他就飞起来了或是落水了？画面都倾斜了约 90 度（_CS 死掉从楼上落下 &amp; “我上次就是落水死的” —— Angel Beats_）</p>
<p>之后小法师和那个东西搅在了一起。不知道过了多长时间，也可能就是瞬间的事<br>然后他感觉全身发麻，脑子里有嗡嗡声（_电影中 UFO 出现时的那种，其实就是脑波_）</p>
<p>小法师吓坏了，有种被鬼附身即将被占领的恐怖<br>他一直想把它驱除出去，还尝试阳光普照什么的，一共三次，只有最后一次出来了一个红色的火焰，里面一张小鬼脸（_魔兽争霸火焰领主的熔岩生物_）<br>而此时嗡嗡的声音越来越大，全身越来越麻</p>
<p>不知是他自己想出来还是旁边在抢救的人提醒：只要把眼睛睁开就好了<br>这无疑是根救命稻草，小法师拼命照做，但他对自己的身体似乎已经没有控制的能力，全身瘫痪，甚至眼睛都无法睁开<br>当时小法师只有一个感觉：“在不睁开眼，就植物了”<br>努力的试了几次，最终右眼先睁开了一点，看见了寝室的天花板，只是比较暗淡，幻象和幻音也立即消失了，他才意识到在睡午觉</p>
<p>虽然有《梦的解释》顶住，但有些是小法师无法解释的，并且引发了他一连串的疑问：<br>如果都是幻象，为什么全身会麻痹呢？<br>等了好一会儿他才有能力控制胳臂把耳机拿掉，而平时根本不用想肢体应该如何运动，它就可以按照我们的意识活动的<br>精神上的活动能引起物理上的损伤吗？<br>另外当时是 3 点多，虽然属于一天的阳中之阴，但也不至于鬼魂跑出来<br>还有就是，如果不睁开眼睛会怎样呢？意识消失？对于那个东西，小法师没感觉到有什么情绪，对他也没什么精神上的影响<br>现在是还停在他的脑子里，还是已经出去了？还是本来就是他的一部分？</p>
<p>总之鬼压床的经历是诡异与奇特的，特别是第一次时，在没有科学指导的前提下，是很难不去做鬼怪的联想<br>此后一段时间小法师一直百思不得其解，几周之后他又经历了一次<br>有了第一次的经验，小法师很快就睁开眼自认为搞定了</p>
<p>之后又过了一段时间，小法师刷 Q 领域，突然发现天天发导购他已准备屏蔽的一个公共账号转了一篇：<br>教你如何控制梦境 【超强技术】</p>
<p>小法师彻底傻逼了</p>
<hr>
<p>PS:<br>其实真正令小法师信服的答案反而在 <a href="http://book.douban.com/subject/5375620/">失控 - 全人类的最终命运和结局</a> 这本和梦八竿子打不着的书中，其中 众愚成智 那一章说道：</p>
<blockquote>
<p>人类有大脑，但它既非中央集权，也没有所谓的中心<br>… 意识是从一个由许许多多微渺而无意识的神经环路构成的分布式网络中涌现出来的</p>
</blockquote>
<p>里面还引用了《心智社会》（The Society of Mind）：马文·明斯基于 1988 年出版的哲学人文著作 中的一段：</p>
<blockquote>
<p>人类心智活动和任何自然进化出的感知系统是由无数「碌碌众生」式的代理（agent）所完成的单独简单进程组合成的大社会。从脑部高度关联的互动机制中，涌现出各种心智现象。</p>
</blockquote>
<p>做个不精确的类比，人脑大概是像 GPU 那样，有着许许多多的运算单元，大家各自为政，汇总起来，才形成了现在的这个“你”<br>而睡觉的时候，如果恰好 意识那部分细胞在运行，而控制身体的那部分却在休眠，大概就会产生感觉自己是清醒的但又无法控制身体这种恐怖的现象（中风患者？）</p>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>How to install reaver on Mac OS X</title>
    <url>/cn/how-to-install-reaver-on-mac-os-x/</url>
    <content><![CDATA[<p>update: 2017-05-24 09:03:10</p>
<p>Sorry about this post, I did not realise how <strong>dangerous</strong> it is earlier.</p>
<a id="more"></a>

<p>Last October my net was overdue, I reaver a wifi for a tmp use for the new net needed national day holiday past.</p>
<p>I found my TV (android system) had a subtitle which said “This net is only for my personal use, is that you have some problem?” when I played the <em>Open Yale Courses - Listening to Music</em> on my NAS.</p>
<p>I was shock by this, my NAS has a PandoraBox System, I use it as a bridging, usually my TV should not a appear on their router. It is clearly this wifi which I reavered is a phishing wifi, and my TV was hacked.</p>
<p>So, if some stupid apps were still using http, all my data was exposed. Even https have a <a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">MitM</a> problem. ’s products say iOS, macOS have a login trusted Certificates in Keychain, but what for Android? Some devices have they own back doors.</p>
<p>As for my TV, I think it used <code>adb connect &lt;TV IP address&gt;</code> which is <em>Android Debug Bridge (adb) Wireless Debugging Over Wi-Fi</em>.</p>
<p>However, I changed most password laterly.</p>
<p>So, you can try reaver for tech explore, but <strong>nerve use it</strong>.</p>
<hr>
<p>update: 2015-07-27 13:14:32</p>
<p>I wrote this in 2014-05-11, however after one year late, you can easily install reaver by using <code>Homebrew</code> right now.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install reaver</span><br></pre></td></tr></table></figure>

<p>Thanks for Rustam’s tips</p>
<hr>
<p>I always use beini in vmware, and plug an extra usb wireless adapter to my PC every time.</p>
<p>When I have my Mac, I just copy beini’s VMX from Windows to Mac, which means I still have to use the wireless adapter.</p>
<p>In fact, <code>minidwep</code> or <code>inflator</code> are using <code>Reaver</code> as a powerful tool to … (You know it), and Mac is a unix based system, which can run <code>Reaver</code> directly.</p>
<ol>
<li>Download: <a href="https://docs.google.com/file/d/0B3tHnfnS08GycG1fVENETEdvazA/edit">reaver-osx.zip</a><br>( tips: the original reaver-1.4 can’t direct <code>make</code> on Mac )</li>
<li>unzip reaver-osx.zip</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> reaver-wps/src/</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<p>Enjoin it &amp; Don’t be evil :-)</p>
]]></content>
      <tags>
        <tag>Tech</tag>
      </tags>
  </entry>
  <entry>
    <title>The Entrepreneur&#39;s Credo</title>
    <url>/cn/the-entrepreneurs-credo/</url>
    <content><![CDATA[<h1 id="美国企业家之信条"><a href="#美国企业家之信条" class="headerlink" title="美国企业家之信条"></a>美国企业家之信条</h1><p>看起来很鸡冻，大致意译了下，表太较真<br>做完了才发现这就是英文版的《有梦想就有希望》丫</p>
<blockquote>
<p>I do not choose to be a common man,</p>
</blockquote>
<p>我乃被选召之人，注定生非常人</p>
<blockquote>
<p>It is my right to be uncommon … if I can,</p>
</blockquote>
<p>如果我愿意，有权特立独行</p>
<blockquote>
<p>I seek opportunity … not security.</p>
</blockquote>
<p>我寻求机遇，而非安全感</p>
<blockquote>
<p>I do not wish to be a kept citizen, Humbled and dulled by having the State look after me.</p>
</blockquote>
<p>我不想成为小市民，卑贱并麻木的被联邦圈养</p>
<blockquote>
<p>I want to take the calculated risk, to dream and to build, to fail and to succeed.</p>
</blockquote>
<p>我期望冒可控的风险，经梦想到实现，由失败到成功</p>
<blockquote>
<p>I refuse to barter incentive for a dole;</p>
</blockquote>
<p>我拒绝领救济金的诱惑</p>
<blockquote>
<p>I prefer the challenges of life to the guaranteed existence;</p>
</blockquote>
<p>相对于有保障的存在，我选择绳命中的挑战</p>
<blockquote>
<p>the thrill of fulfillment to the stale calm of Utopia.</p>
</blockquote>
<p>相对于乌托邦式的宁静，我选择<del>基情</del>激情的实践</p>
<blockquote>
<p>I will not trade my freedom for beneficence nor my dignity for a handout.</p>
</blockquote>
<p>我不会拿 自由去交换恩惠，拿尊严去乞求救济</p>
<blockquote>
<p>I will never cower before any master nor bend to any threat.</p>
</blockquote>
<p>我绝不会在权威前畏缩，在恐吓前屈服</p>
<blockquote>
<p>It is my heritage to stand erect, proud, and unafraid;</p>
</blockquote>
<p>顶天立地、自豪、无所畏惧 是我的传统</p>
<blockquote>
<p>to think and act for myself;</p>
</blockquote>
<p>作为自我去思考并行动</p>
<blockquote>
<p>to enjoy the benefit of my creations;</p>
</blockquote>
<p>去享受我所创造之物的益处</p>
<blockquote>
<p>and to face the world boldly and say:</p>
</blockquote>
<p>勇敢的面对世界并宣称：</p>
<blockquote>
<p>“This, with God’s help, I have done.”</p>
</blockquote>
<p>综上所诉，有了<strong>神</strong>的帮助（哇靠，重点终于出现了），我终于搞定了（PS: 如果没上面那句，是否应该译成“我已经完蛋了” →_→）。</p>
<blockquote>
<p>—Entrepreneur’s Credo of the American</p>
</blockquote>
<p>——美国企业家之信条</p>
<p>那个人艰不拆的重点后，让我想起了一篇神贴：</p>
<p>《有梦想就有希望》</p>
<blockquote>
<p>五年前，刚毕业的小柯，只有不知名大学的学历，求职时处处碰壁，最后在广州某间小 IT 公司上班担任小程序员。</p>
</blockquote>
<blockquote>
<p>过了半年，小柯觉得这样下去不是办法，突然觉醒，决定订出一个五年买房计划，步步规划彻底执行！</p>
</blockquote>
<blockquote>
<p>“刚开始真的很痛苦，什么交际应酬与娱乐消费都不能做了”小柯回忆道。但是回想起自己过去的人生，其实也这样浑浑噩噩，突然有一股声音在自己体内觉醒，“我开始利用下班时间去上财务规划课程与程序课程，增加自己的实力。”利用网络上大大小小免费的资源，小柯发现自己过去学生生涯实在浪费了很多时间。</p>
</blockquote>
<blockquote>
<p>“刚开始会觉得很懊悔自己过去到底在干嘛，所以现在有机会反而更努力，加强冲刺。”就这样，小柯利用通过大大小小的 IT 技能检定考试，让公司逐年帮他加薪 3%。</p>
</blockquote>
<blockquote>
<p>“除了薪水成长还不够，我还去报名了许多管理课程，认识许多业界杰出人士。”透过这样的交流，小柯逐步建立起自己的人脉。</p>
</blockquote>
<blockquote>
<p>最后，靠着这五年来累积的五万，在加上父母给的 495 万，小柯买下人生第一栋房子，而且是在广州珠江新城区域。</p>
</blockquote>
<blockquote>
<p>“有梦最美，筑梦踏实。”小柯眼神坚毅的说着。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Wealth</tag>
      </tags>
  </entry>
  <entry>
    <title>Highway to Heaven</title>
    <url>/cn/Highway-to-Heaven/</url>
    <content><![CDATA[<h1 id="直通天堂"><a href="#直通天堂" class="headerlink" title="直通天堂"></a>直通天堂</h1><p>維多利亞時代英国最伟大的作家 查尔斯·狄更斯 在 《双城记》中曾说过：</p>
<blockquote>
<p>这是一个最好的时代，也是一个最坏的时代；<br>这是明智的时代，这是愚昧的时代；<br>这是信任的纪元，这是怀疑的纪元；<br>这是光明的季节，这是黑暗的季节；<br>这是希望的春日，这是失望的冬日；<br>我们应有尽有，我们一无所有；<br>这里直通天堂，这里直堕地狱</p>
</blockquote>
<a id="more"></a>

<p>当然本文和这段话关系不大<br>引用在这里的原因只是这些句子读起来朗朗上口&amp;狂拽酷炫吊炸天</p>
<p>不过小法师确实动身，前往天堂了</p>
<p>不得不感叹天朝的飞速发展，两年前小法师从 两个胖纸 去 天堂 时，还只有 K 系<br>其实那时 G 系不是没有，只不过 仿佛 但丁 的 《神曲》，路线上分为：</p>
<blockquote>
<p>地獄篇(Inferno) - ‎ 煉獄篇(Purgatory) - ‎ 天堂篇(Paradise)</p>
</blockquote>
<p>去天堂前，小法师还要到 魔都 走一遭，先不说价格上贵了几倍，在时间上居然可以 ＞= K 系</p>
<p>有次回城，小伙伴为了省钱，买了硬座，并且成功撺掇小法师入坑<br>本来小法师就在法师学院练习魔法时太过努力，导致腰椎有点小问题<br>结果这下可好，连续 6 小时的颠簸差点就折断了小法师那瘦弱的腰<br>从此小法师发誓只要有票，绝对要躺着去</p>
<p>不想时隔一年，就有了直通的 G 系列，安静快速干净，航程也缩短为 2.5 小时</p>
<p>但即使酱紫，在火车上还是比较无聊的<br>以前小法师都是带本书或者直接在手机上看，而这次有了 撸码神器，自然大大不同</p>
<p>不过小法师还是比较顾虑的，一直犹豫要不要把 神器 祭出来，毕竟周围都是些普通的法器，如 瘟都死 之流</p>
<p>其实以前小法师也用过并且长期用着这种普通的法器，从古老的 诶渴死皮 到 最新型的 瘟都死吧，陪伴小法师度过了 1k 多个日夜</p>
<p>那真是一段美好的回忆，小法师的腰也是那时开始累坏的，以后有机会再说吧</p>
<p>其实小法师担心完全是多余的，因为：</p>
<p>小法师眼中的小法师:<br>哇，年纪轻轻就拿到了 神器，这小伙子不简单啊<br>别人眼中的小法师：<br>苦逼的码农，火车上还得改 BUG</p>
<hr>
<p>Tips:</p>
<p>有个实验：<br>让别人帮看下东西，可以减小被偷的概率<br>也不知真的假的，不过小法师倒是经常用<br>路人们也很给力，还没出现过黑天鹅事件</p>
<hr>
<p>之前小法师让一个小伙伴在他所在的小区找了个农民房，临时一个月作为过渡</p>
<p>然后他就知道了什么叫做 蚁族的奋斗，什么叫做 北漂</p>
<p>那环境…<br>那噪音…<br>那异味…</p>
<p>另外这里的店面，仿佛也像商量好了一样，一家接一家的关门，每次都发出巨响，给予小法师连续不断的持续刺激<br>此起彼伏，更甚于当年 小法师 所在寝室的呼噜</p>
<p>等到凌晨三点，最后一家店面终于关门了<br>小法师心想这回总算可以睡了<br>刚刚卧倒，又传来一阵阵的巨响，小法师惊奇的发现卖早点小店开始一家家的开门奋斗了</p>
<hr>
<p>小法师心理打算的好好的，心想自己这一年，又 饱读了那么多诗书，一个月还不绰绰有余</p>
<p>如果他看过 英国广播公司（BBC）和丹麦广播公司（DR）邀请各国纪录片导演合作出品的纪录片《Why Poverty? 》其中的第八集<a href="https://www.youtube.com/watch?v=tcMzVgurk-0">《读书致贫》</a>，应该就不会这么天真了</p>
<p>果然，小法师猛投了一圈后，几天下来后，结果喜人<br>面试的电话只有俩，转化率不到 20%，并且面的这个已挂<br>挂的这个还被说做的杂、没优势、闷骚、思想务虚空洞，最最重要的是还被嫌弃法术不行</p>
<p>小法师桑心之余，晚饭也不吃了，默默的回到农民房里，又去翻老子的 《道德经》<br>反复的用那句：</p>
<blockquote>
<p>祸兮，福之所倚；福兮，祸之所伏</p>
</blockquote>
<p>来安慰自己了</p>
<p>╮(╯_╰)╭</p>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>global gitignore</title>
    <url>/cn/global-gitignore/</url>
    <content><![CDATA[<p><code>xxx.xcodeproj/project.xcworkspace/xcuserdata/xxx.xcuserdatad/UserInterfaceState.xcuserstate</code></p>
<p>I was annoyed by this file.</p>
<p>It seems <code>xCode</code> update this file almost every second.<br>So, everytime I wanted to merge two heads, I would get a yellow conflict notification with this <em>advantage</em> function…</p>
<a id="more"></a>

<p>All in all, I forgot to set a global gitignore files.</p>
<p>This file is in your home directory, which means <code>~/.gitignore</code>.</p>
<p>And, I found a very good website</p>
<p><a href="http://www.gitignore.io/">http://www.gitignore.io/</a></p>
<p>According to your Operating System, IDE, or Programming Language, it can generate a ignore list.</p>
<p>Here is Xcode’s:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Created by http://www.gitignore.io</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Xcode ###</span></span><br><span class="line">build/</span><br><span class="line">*.pbxuser</span><br><span class="line">!default.pbxuser</span><br><span class="line">*.mode1v3</span><br><span class="line">!default.mode1v3</span><br><span class="line">*.mode2v3</span><br><span class="line">!default.mode2v3</span><br><span class="line">*.perspectivev3</span><br><span class="line">!default.perspectivev3</span><br><span class="line">xcuserdata</span><br><span class="line">*.xccheckout</span><br><span class="line">*.moved-aside</span><br><span class="line">DerivedData</span><br><span class="line">*.xcuserstate</span><br></pre></td></tr></table></figure>

<p>Do you see that <code>*.xcuserstate</code> above?</p>
<p>And your can also install it on your system by <a href="http://www.gitignore.io/cli">command line</a>.</p>
<p>Then, you can list it by <code>gi xcode</code> or append it by <code>gi xcode &gt;&gt; ~/.gitignore</code></p>
]]></content>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS developer account and app store</title>
    <url>/cn/ios-developer-account-and-app-store/</url>
    <content><![CDATA[<h1 id="iOS-开发者账号-以及-如何上架"><a href="#iOS-开发者账号-以及-如何上架" class="headerlink" title="iOS 开发者账号 以及 如何上架"></a>iOS 开发者账号 以及 如何上架</h1><h2 id="开发者账号申请"><a href="#开发者账号申请" class="headerlink" title="开发者账号申请"></a>开发者账号申请</h2><p>中间还因提供照片耽误了一次，又赶上 <code>Swift</code> 大潮，但也只用了 4-5 天 ，效率还是很高的</p>
<p>开始我还以为要用双币信用卡，到处抓人要卡<br>结果时代在进步，现在（2014）普通信用卡就行，所以就十分方便了</p>
<p>PS:<br>99$ == 688 ￥ ?<br>因为要交税么…</p>
<p>可能我账号调的 E 文的，结果所有返回 Email 都是 E 文了，其中有句：</p>
<blockquote>
<p>we’ll need a PDF copy of your government-issued photo ID.</p>
</blockquote>
<p>弄了半天才明白 <code>government-issued ID</code> 原来就是身份证啊… 真涨姿势</p>
<a id="more"></a>

<p>这多耽搁的一步我也没多想，结果前两天去联通官网买卡，电话反馈误打误撞知道了原因</p>
<p>这奇葩的原因是：转过户口…<br>联通反馈说这样通过身份证号码就查询不到信息了（这是为什么？）<br>PS: 联通也蛮奇葩的，居然让发送到一个 QQ 邮箱，开始我还以为骗子呢…</p>
<h2 id="如何上架"><a href="#如何上架" class="headerlink" title="如何上架"></a>如何上架</h2><p>参考 <a href="http://my.oschina.net/u/1245365/blog/201920">这里</a><br>很详细，基本一步一步比着来的</p>
<p>我的话，碰到这俩卡住的地方：</p>
<h3 id="1-no-identities-were-available"><a href="#1-no-identities-were-available" class="headerlink" title="1. no identities were available"></a>1. no identities were available</h3><p>xCode 提示这个，账号我买过了啊，肿么回事呢？<br>主要如果是第一次发的话，可能没有自动设置</p>
<p>参见<a href="http://blog.csdn.net/kafeidev/article/details/8250051">这里</a><br>界面不太一样，但仔细看看就 pass 了</p>
<h3 id="2-iOS-validation-got-Main-iPad-ipad-storyboardc-was-not-found"><a href="#2-iOS-validation-got-Main-iPad-ipad-storyboardc-was-not-found" class="headerlink" title="2. iOS validation got Main_iPad~ipad.storyboardc was not found"></a>2. iOS validation got Main_iPad~ipad.storyboardc was not found</h3><p>之前我创建的时候用的 universal，虽然后来各个地方都调整成了 iPhone，没想到还有 <code>plist</code> 这个阴暗的小角落啊 O__O”…</p>
<p>参建：<a href="http://stackoverflow.com/questions/19873058/ios-validation-got-main-iphoneiphone-storyboardc-was-not-found">这里</a></p>
<p>然后就等呗，又得 4-5 天了~ 别打回来啊 (&gt;_&lt;)</p>
<hr>
<p>2014-07-01<br>等了整整七天，然后被拒了，悲剧了…</p>
<blockquote>
<p>2.2: Apps that exhibit bugs will be rejected<br>22.2: Apps that contain false, fraudulent or misleading representations or use names or icons similar to other Apps will be rejected</p>
</blockquote>
<p>目前也没时间仔细看，先扔那吧…</p>
]]></content>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS Programming - Big Nerd Ranch Guides</title>
    <url>/cn/ios-programming---big-nerd-ranch-guides/</url>
    <content><![CDATA[<p>1 day = 15 PomoToDo = 90 pages<br>So, I not only passed this book just in one week, but also wrote all the code in the samples to Xcode.</p>
<a id="more"></a>

<p>But I still feel a little bit of slower in this progress, considering my programming language skills, especially learning <code>Go</code> in a few weeks.</p>
<p>I think the biggest obstacle isn’t <code>Objective-C</code> but <strong>iOS’s framework</strong>.</p>
<p>By the way, if I learn MFC or Android in school with heart, this may be faster and easier for me now.</p>
<p>And another big thing is the <strong>Nature Language</strong> or just English. Because the latest documents of iOS dev are all written in English…</p>
<p>As you know, iOS 7 &amp; <code>Obj-C</code> were something old after iOS 8 and <code>Swift</code> were coming at the same time in this WWDC. But a lot of books of Chinese version are still using xib or even MRC… And most of all, English is not my mother tongue.</p>
<p>All in all, <strong>Cookbook</strong> should be read in the next step.</p>
]]></content>
      <tags>
        <tag>Programming</tag>
        <tag>Books</tag>
      </tags>
  </entry>
  <entry>
    <title>Enhance your Lifestyle</title>
    <url>/cn/enhance-your-lifestyle/</url>
    <content><![CDATA[<p><a href="http://www.zhihu.com/question/21752718">一个人在陌生的城市租了单间，有什么方法能让小空间的生活更有趣？</a><br><a href="http://www.zhihu.com/question/23136740/answer/27439893?group_id=447934822">有点贵但很值得买的商品有哪些？</a><br><a href="http://www.zhihu.com/question/20840874/answer/27408093?group_id=441891457">哪些东西买了之后，会让人因生活质量和幸福感提升而感觉相见恨晚？</a><br><a href="http://www.zhihu.com/question/20228439/answer/27418171?group_id=444370212">有哪些不為外行所知的好產品或好品牌？</a></p>
<a id="more"></a>

<p>一两年前刚工作时，去小组合租的房纸里玩，发现一女生把她的小屋用各种东东点缀的很温馨</p>
<p>当时我收入将近她的两倍，而看我们的生活空间与方式，确实像是反过来<br>随即意识到生活质量和收入相干系数不是正比的，或者说至少不是原来认为的那样纸</p>
<p>知乎那几个帖子好长啊，前阵子看了半天，还没看完，根据需求先选了一些：</p>
<h2 id="Cote-amp-Ciel-Rucksack"><a href="#Cote-amp-Ciel-Rucksack" class="headerlink" title="Cote&amp;Ciel Rucksack"></a><del>Cote&amp;Ciel Rucksack</del></h2><p>作为一只雄性，鼠键神马的 1K 无所谓，但包包这个价位就赶脚好贵啊<br>等发工资</p>
<h2 id="OKO-滤水壶"><a href="#OKO-滤水壶" class="headerlink" title="OKO 滤水壶"></a><del>OKO 滤水壶</del></h2><p>这奇葩的把可乐变纯净水，雷死了（其实是为了喝高浓度可乐么 →_→）<br>不过平时还要泡茶或咖啡，需求不强烈</p>
<h2 id="Retina-MacBook-Pro-13"><a href="#Retina-MacBook-Pro-13" class="headerlink" title="Retina MacBook Pro 13"></a><del>Retina MacBook Pro 13</del></h2><p>开发神器+吃饭的家伙<br>这样来看就属于投资而非消费<br>后悔没上 15 顶配</p>
<h2 id="iPad-Air"><a href="#iPad-Air" class="headerlink" title="iPad Air"></a><del>iPad Air</del></h2><p>之前受蛊惑买了 kindle，后来还是免不了 pad<br>看 PDF 爽啊，kindle 直接扔抽屉里了，没买 kindle 的不要纠结了</p>
<h2 id="iPhone-6"><a href="#iPhone-6" class="headerlink" title="iPhone 6"></a><del>iPhone 6</del></h2><p>等啊等，终于有大屏了啊，坐等发布</p>
<h2 id="BOSE-QC-20i（主动降噪）"><a href="#BOSE-QC-20i（主动降噪）" class="headerlink" title="BOSE QC 20i（主动降噪）"></a><del>BOSE QC 20i（主动降噪）</del></h2><p>整个世界都安静了…</p>
<blockquote>
<p>感受：<br>超值超赞超推荐</p>
</blockquote>
<h2 id="罗技（Logitech）-G700s"><a href="#罗技（Logitech）-G700s" class="headerlink" title="罗技（Logitech） G700s"></a><del>罗技（Logitech） G700s</del></h2><p>从 G1 到 MX518，现在该入个无线了<br>不过现在游戏打的少了，等发工资</p>
<blockquote>
<p>感受：<br>11 个自定义快捷键，真心用不到…<br>1W6 的 DPI ，像飘似得</p>
</blockquote>
<h2 id="Filco-87"><a href="#Filco-87" class="headerlink" title="Filco 87"></a><del>Filco 87</del></h2><p>查了半天，什么青轴红轴茶轴黑轴我居然搞清楚了</p>
<p>原来我以为 rMBP 自带的键盘+触控板就够了</p>
<p>结果用 Filco 打了把魔兽，又码了会代码<br>再切回自己的本本后，差异立即出来了——按快了的话，键帽软软的弹不起来（中毒了…）</p>
<p>退烧上传说中的 <strong>静电容键盘</strong>： HHKB 或 Realforce<br>但 HHKB 没 F1，Realforce 实在太丑…</p>
<p>还有，要毛的静音，办公室噪音大死了好吗，再说我还有 QC 20<br>另外我就喜欢打魔兽时键盘哗啦哗啦的，磁悬浮键盘还在概念中，自然入机械了</p>
<p>Filco 外形八错<br>67 键位比较怪异， 最最重要的是，没法选英雄啊啊啊啊啊啊啊啊啊啊啊啊啊啊<br>104 的小键盘用不着<br>所以就 87 喽</p>
<blockquote>
<p>感受<br>只能说 Macbook 的触控板体验真是做到位了<br>码代码时用板子定位，手移动并不大，而鼠标就做不到这一点<br>所以才出现了 <code>Vim</code> <code>Emacs</code> 等纯鼠标流<br>打游戏也没有哗啦哗啦的声音<br>测下 APM，还是那个数…<br>和人有关…</p>
</blockquote>
<h2 id="博朗冰感剃须刀"><a href="#博朗冰感剃须刀" class="headerlink" title="博朗冰感剃须刀"></a>博朗冰感剃须刀</h2><h2 id="欧乐-B-电动牙刷-S26"><a href="#欧乐-B-电动牙刷-S26" class="headerlink" title="欧乐 B 电动牙刷 S26"></a><del>欧乐 B 电动牙刷 S26</del></h2><blockquote>
<p>感受：<br>确实八错，又给父母买了份<br>现在天天早晚刷牙</p>
</blockquote>
<h2 id="木质-SPA-浴桶"><a href="#木质-SPA-浴桶" class="headerlink" title="木质 SPA 浴桶"></a>木质 SPA 浴桶</h2><p>有自己的房纸再说吧</p>
<p>唔，看来和收入还是很相关的….</p>
]]></content>
      <tags>
        <tag>Shopping</tag>
      </tags>
  </entry>
  <entry>
    <title>Count Lines of Code</title>
    <url>/cn/count-lines-of-code/</url>
    <content><![CDATA[<p>When I was reading <em>iOS 7 Programming Cookbook</em>, it occurred to me that how many lines of Obj-c codes exactly I have written.</p>
<p>I used to use <a href="https://code.google.com/p/boomworks/">SourceCounter</a> to do this earlier when I was still in Windows OS.</p>
<p>But <a href="https://code.google.com/p/boomworks/">SourceCounter</a> do not support Mac OS X.</p>
<p>So, I found and interesting commond line:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -name <span class="string">&quot;*.m&quot;</span> -or -name <span class="string">&quot;*.h&quot;</span> | xargs grep -v <span class="string">&quot;^$&quot;</span> | wc -l</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>“^$“ means blank line<br>“wc -l” means WordCount line</p>
<hr>
<p>I still recommend another tool which is written by <code>Perl</code>:</p>
<p><a href="http://cloc.sourceforge.net/">CLOC - Count Lines of Code</a></p>
<h4 id="Install"><a href="#Install" class="headerlink" title="Install:"></a>Install:</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install cloc</span><br></pre></td></tr></table></figure>

<h4 id="Use"><a href="#Use" class="headerlink" title="Use"></a>Use</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cloc --exclude-dir=<span class="comment">#excludeDir, #dir1 #dir2 ...</span></span><br></pre></td></tr></table></figure>

<p>Here is result of my codes</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2014-08-19</span><br><span class="line"></span><br><span class="line">http://cloc.sourceforge.net v 1.60  T=20.51 s (67.8 files/s, 4427.5 lines/s)</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Language                     files          blank        comment           code</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">C++                            409           5440           4917          21968</span><br><span class="line">C/C++ Header                   250           2997           3436          10458</span><br><span class="line">Objective C                    298           3999           3720           9616</span><br><span class="line">XML                            184            408             97           6725</span><br><span class="line">HTML                            27            851             13           4743</span><br><span class="line">Java                           110            732            985           4082</span><br><span class="line">C                               54            492            533           2046</span><br><span class="line">Assembly                        23            234             16            600</span><br><span class="line">Python                          19            200            117            435</span><br><span class="line">Go                               2            109             21            303</span><br><span class="line">CSS                              2             33              7            223</span><br><span class="line">JSP                              4             10              0             66</span><br><span class="line">Javascript                       2              0              9             49</span><br><span class="line">YAML                             5             16             16             44</span><br><span class="line">Ruby                             1             13              3             11</span><br><span class="line">Bourne Shell                     1              4              1              7</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">SUM:                          1391          15538          13891          61376</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 7 Programming Cookbook</title>
    <url>/cn/ios-7-programming-cookbook/</url>
    <content><![CDATA[<h1 id="如何刷-Cookbook"><a href="#如何刷-Cookbook" class="headerlink" title="如何刷 Cookbook"></a>如何刷 Cookbook</h1><p>天哪，终于翻完了，1k 多页啊！！！<br>把里面 80% 的代码手打了一遍，发现了代码中的两个 BUG<br>另外有错误的，童鞋们可以在 Github 上 <code>Pull Requests</code> 给 <a href="https://github.com/oreillymedia/iOS7_Programming_Cookbook">oreillymedia/iOS7_Programming_Cookbook</a></p>
<a id="more"></a>

<h2 id="适合人群："><a href="#适合人群：" class="headerlink" title="适合人群："></a>适合人群：</h2><p>一般来说，<code>Cookbook</code> 系列都被类比做字典，用到什么，查什么，没必要头到尾翻一遍</p>
<p>但刷一遍后，对相关<strong>知识体系</strong>搭建的好处是显而易见的</p>
<p>不适合:</p>
<ol>
<li>小白</li>
<li>iOS 资深开发者</li>
</ol>
<p>小白们可以先把这两本刷了：<br><a href="http://book.douban.com/subject/6959487/">Head First iPhone and iPad Development</a><br><a href="http://book.douban.com/subject/24538384/">The Big Nerd Ranch Guide</a></p>
<h2 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h2><ol>
<li><p>首先要做好崩溃的准备 →_→<br>想想当年多少童鞋背字典到 abandon 就跪了</p>
</li>
<li><p>选择<strong>重点</strong>的几章，即和你当前工作相关的章节<strong>一字不漏</strong>的看<br>由于看的东东立即就能用到，所以效果比较好<br>非代码部分是 原理 以及 tips，所以认真看下</p>
</li>
<li><p>到 50% 左右时，重点<strong>转向代码</strong><br>这时基本熟悉作者的叙述方式了，扫下标题，基本上就知道要干嘛，结合代码连蒙带猜，文字部分扫一下就行了</p>
</li>
<li><p>要懂得放弃<br>背字典并不能让你说一口流利的英语，所以此书也无全部刷完的必要<br>比如我看的时候，就嫌 iCloud 之类的太麻烦了，如果简单的同步数据，还不如直接搭个后台方便，所以就略过<br>算下来正好符合 二八法则</p>
</li>
<li><p>结对<br>自己单干的效果是没有小组学习高的<br>不过你们可以看的不一样，比如我盆友看的就是 Python 的 Cookbook，达到相互促进的目的就行<br>PS: 当我看了一大半时，才知道他看的是译文版的…</p>
</li>
<li><p>英语<br>iOS 更新太快了，最新的都是英文的，7 还没翻译呢，8 的正式版就要发布了…<br>So，学好英语吧，骚年</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Books</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>The Cathedral and the Bazaar</title>
    <url>/cn/the-cathedral-and-the-bazaar/</url>
    <content><![CDATA[<h1 id="如何成为一名黑客"><a href="#如何成为一名黑客" class="headerlink" title="如何成为一名黑客"></a>如何成为一名黑客</h1><p>—— 大教堂与集市【美】雷蒙德（Eric S. Raymond） 读后感</p>
<p>一直以来，我就很奇怪<br>大众眼中的程序员，一般是呆头呆脑，按逻辑办事，终日沉浸在自己世界，沉默寡言，高智商低情商，为哪种编程语言或框架比另一种要好争论不休<br>哦，还有最重要的一条：木有妹纸</p>
<p>这也让我很困惑，甚至有段时间我发自内心的不认同这个标签</p>
<p>因为纵观国外的一些大牛，他们除了代码精湛之外，还写 Blog、出书、营销、开公司、拉风投、潜水、登山、旅行…<br>而且并非浅尝辄止，只能用逆天来形容<br>这…还是程序员么</p>
<p>看了此书才明白，此人种名曰：黑客（Hacker）</p>
<a id="more"></a>

<p>上次看《黑客与画家》时，就很鸡冻<br>还记得刚学 C 语言时，就和我哥说，不想当一名黑客，也不想搞安全相关的东东<br>毕竟当时学校那破图书馆里都是《黑客攻防实践》《黑客反汇编》之类的东东</p>
<p>时隔多年，现在是知道了，原来我不想成为的是 骇客（cracker）</p>
<p>对于 骇客，Eric 文中给出了一些建议：</p>
<blockquote>
<p>如果你想成为一名黑客，请接着读下去。如果你想成为一名骇客，去读 alt.2600 新闻组（news:alt.2600），如果你发现自己并没有想象中那么聪明，做好准备去蹲上 5 到 10 次监狱吧。这就是我想对骇客说的。</p>
</blockquote>
<p>关于这个，我是存有疑问的，以后有时间看下 2000 年之前他们分别是什么版本</p>
<blockquote>
<p>Java 也是一个不错的学习编程的语言。它比 Python 要难，但可以产生比 Python 更快的代码，我想它可以作为一个优秀的第二语言</p>
</blockquote>
<p>没看<code>Python</code> 的直接来看 <code>Ruby</code> 吧，这是一门让你爽的语言，还有，此书由于出版时间，iOS &amp; Android 尚未出现</p>
<blockquote>
<p>最好把这五种语言（Python、Java、C/C++、Perl 和 LISP）都学了。它们不只是最重要的黑客语言，还代表了截然不同的编程方法，每一种都会让你受益匪浅</p>
</blockquote>
<p>重复造轮子</p>
<blockquote>
<p>创造性头脑是无比珍贵的有限资源，它们不应浪费在重新发明轮子这种事上，尤其是还有这么多迷人的新问题在那里等着的时候</p>
</blockquote>
<p>GUI</p>
<blockquote>
<p>问题主要出在人机工程学设计和界面心理学上，黑客在这些方面从来就很弱。黑客在为其他黑客设计接口时做得很好，但他们往往不善于为另外 95%人群的思维过程建模</p>
</blockquote>
<p>下面是书摘，附录很有意思</p>
<hr>
<h2 id="2-大教堂与集市"><a href="#2-大教堂与集市" class="headerlink" title="2. 大教堂与集市"></a>2. 大教堂与集市</h2><ol>
<li>好的软件作品，往往源自于开发者的个人需要</li>
<li>优秀的程序员知道写什么，卓越的程序员知道改写（和重用）什么</li>
<li>“计划好扔掉一个吧，迟早你会这么做的。”（Fred Brooks，《人月神话》第 11 章）</li>
<li>如果你有正确的态度，有趣的事情自然会找到你。</li>
<li>当你对一个程序不再感兴趣时，你最后的责任就是把它交给一个可以胜任的接棒者</li>
<li>把你的用户当成开发合作者对待，如果想让代码质量快速提升并有效排错，这是最省心的途径。</li>
<li>早发布，常发布，倾听用户的反馈。</li>
<li>如果有足够多的 beta 测试者和合作开发者，几乎所有问题都会很快显现，然后自然有人会把它解决。</li>
</ol>
<ul>
<li>Linus 定律道出了大教堂模式和集市模式最关键的区别：在大教堂建筑者看来，bug 是棘手的、难以发现的、隐藏在深处的，要经过几个人数月的全心投入和仔细检查，才能有点信心说已经剔除了所有错误。而发布间隔越长，倘若等待已久的发布版本并不完美，人们的失望就越发不可避免。</li>
<li>对集市模式而言则完全不同，在上千名合作开发者热切钻研每个新发布版本的情况下，你可以假定 bug 是浅显易找的，或者至少可以很快变得浅显易找。所以你会频繁发布以获取更多的修正，其副作用是良性的：即便发布中有些小问题，你也不会损失太多。</li>
</ul>
<ol start="9">
<li>聪明的数据结构配上愚笨的代码，远比反过来要好得多。</li>
<li>如果你把 beta 测试者当做最珍贵的资源对待，他们就会成为你最珍贵的资源</li>
<li>仅次于拥有好主意的是，识别来自用户的好主意，有时后者会更好</li>
<li>通常，那些最有突破性和最有创新力的解决方案来自于你认识到你对问题的基本观念是错的。</li>
<li>“设计上的完美不是没有东西可以再加，而是没有东西可以再减。”</li>
<li>任何工具都应具备预期内的功能，但一个伟大的工具能给你带来预期外的功能。</li>
<li>写网关类软件时，尽可能不要干扰数据流，而且绝不要扔掉信息，除非接收方强迫你这么做</li>
<li>当你的语言还远不是图灵完备（Turing-complete）的时候，语法糖会让你受益良多。</li>
<li>系统的安全性只取决于它所拥有的秘密。谨防虚假的秘密。</li>
<li>想要解决一个有趣的问题，先去找一个让你感兴趣的问题。</li>
<li>如果开发协调者有一个至少像 Internet 这样好的沟通媒介，并且知道如何不靠强制来领导，那么多人合作必然强于单兵作战</li>
</ol>
<ul>
<li>如果你在工作过程中感到恐惧和厌恶（即便你以自嘲的形式来表达——比如悬挂呆伯特玩偶），就应该意识到过程已经出了问题。快乐、幽默和玩兴是真正的资产</li>
<li>玩”是创造性活动中最具经济效能的工作模式。</li>
</ul>
<h2 id="3-开垦心智层"><a href="#3-开垦心智层" class="headerlink" title="3. 开垦心智层"></a>3. 开垦心智层</h2><ul>
<li>在礼物文化中，社会地位并不取决于你控制了什么，而是你给予了什么</li>
</ul>
<ol>
<li>如果它不能像我所预期的那样工作，那就不是好的——不管它多么聪明和有原创性。</li>
<li>在心智层的拓展性工作要比在某功能域内（对现有作品）的重复性工作好。</li>
<li>能进入主要发行版的作品比不能进入的好。在所有主要发行版中都包含的作品最令人尊敬。</li>
<li>“使用”是最真实的赞美，类别杀手比同类竞争者好。</li>
<li>相比那些只挑有趣和简单工作的人，长期致力于艰苦和乏味工作（如调试、写文档）的人更令人钦佩。</li>
<li>重要的功能扩展比低层次的修补好。</li>
</ol>
<h2 id="4-魔法锅"><a href="#4-魔法锅" class="headerlink" title="4. 魔法锅"></a>4. 魔法锅</h2><ol>
<li>可靠性/稳定性/可扩展性非常重要。</li>
<li>除了独立的同行评审，没有其他便捷易行的方法验证设计和实现的正确性。</li>
<li>该软件对客户的业务非常关键。</li>
<li>该软件创建或运转一个公共计算或通信基础架构。</li>
<li>关键方法（或能实现同等功能的方法）属于公共知识</li>
</ol>
<h2 id="5-黑客的反击"><a href="#5-黑客的反击" class="headerlink" title="5. 黑客的反击"></a>5. 黑客的反击</h2><ul>
<li>理论和语言的缺乏在两个方面对我们不利：一是我们不能系统性地思考如何改进我们的方法，二是我们难以向别人解释和推销我们的方法</li>
</ul>
<h2 id="附录-A：如何成为一名黑客"><a href="#附录-A：如何成为一名黑客" class="headerlink" title="附录 A：如何成为一名黑客"></a>附录 A：如何成为一名黑客</h2><h3 id="黑客搞建设，骇客搞破坏"><a href="#黑客搞建设，骇客搞破坏" class="headerlink" title="黑客搞建设，骇客搞破坏"></a>黑客搞建设，骇客搞破坏</h3><h3 id="黑客的态度"><a href="#黑客的态度" class="headerlink" title="黑客的态度"></a>黑客的态度</h3><ol>
<li>这个世界充满了迷人的问题等待人们去解决。</li>
<li>不要解决一个问题两次。</li>
<li>无聊和乏味是有害的</li>
<li>自由是好事</li>
<li>态度不能代替能力。</li>
</ol>
<h3 id="黑客的基本技能"><a href="#黑客的基本技能" class="headerlink" title="黑客的基本技能"></a>黑客的基本技能</h3><ol>
<li>学习编程</li>
</ol>
<ul>
<li>想要获得将知识转化为技能的思维模式，只能通过实践和跟随大师。做法就是读代码和写代码</li>
</ul>
<ol start="2">
<li>找一个开源 UNIX，学习使用和运行它。</li>
<li>学习如何使用 WWW 和写 HTML。</li>
</ol>
<h3 id="地位之于黑客文化"><a href="#地位之于黑客文化" class="headerlink" title="地位之于黑客文化"></a>地位之于黑客文化</h3><ol>
<li>写开源软件。</li>
<li>协助测试和调试开源软件</li>
<li>发布有用的信息。</li>
<li>帮助做一些基础工作。</li>
<li>服务黑客文化自身。</li>
</ol>
<h3 id="格调问题"><a href="#格调问题" class="headerlink" title="格调问题"></a>格调问题</h3><ul>
<li><p>学习很好地使用你的母语写作。尽管有一种陈旧的看法认为程序员写作不行，但很多黑客（包括我所知道的那些最优秀的黑客们）写得一手好文章，而且其数量多得让人吃惊。</p>
</li>
<li><p>阅读科幻小说，参加科幻小说集会（这是认识黑客和潜在黑客的好方法）。</p>
</li>
<li><p>研习禅修，并且/或者学习武术。（心智训练似乎在很多重要方面都是类似的。）</p>
</li>
<li><p>培养起对音乐的鉴赏力。学会欣赏一些独特类型的音乐。学习很好地演奏乐器，或者学习如何唱歌。</p>
</li>
<li><p>培养出你对双关语和俏皮话的欣赏能力。</p>
<p>但这些事与左右脑技能的结合有关，这可能是问题的关键所在（黑客不仅需要有很强的逻辑推理能力，而且要能够很快从问题的具体逻辑中跳脱出来）</p>
</li>
</ul>
<h3 id="不要"><a href="#不要" class="headerlink" title="不要"></a>不要</h3><ul>
<li>不要使用愚蠢、浮夸的用户名或昵称。</li>
<li>不要卷入 Usenet（或其他任何地方）的网络骂战。</li>
<li>不要自称为“电脑朋克”，也不要浪费时间交往那些自称电脑朋克的人。</li>
<li>不要让你的贴子或 email 充满错误的拼写和糟糕的语法。</li>
</ul>
<p>最后：<br><strong>“只有其他黑客认为你是黑客时，你才是黑客”</strong><br>所表达出来的价值观，类似于中世纪欧洲骑士时代精英团体所宣称的理想（通常总是无法实现），这些社会精英有足够的财力超脱于所处的稀缺经济。像人们期望的那样，一个有抱负的骑士为正义而战，他追求荣誉而非获取钱财，他站在弱势和受压迫者一边，不断寻求机会挑战自己英勇才能的极限。也正因如此，他会认为自己（并被别人认为）是人中翘楚——前提是他的能力和品行已获得其他骑士的承认和正式认可。在亚瑟王传奇（Arthurian tales）和武功歌（chansons de geste）所颂扬的骑士精神中，我们看到了理想主义、对自我的不断挑战和对地位的追求，这与当今激励黑客的要素是类似的。</p>
]]></content>
      <tags>
        <tag>Tech</tag>
        <tag>Books</tag>
      </tags>
  </entry>
  <entry>
    <title>what technology wants</title>
    <url>/cn/what-technology-wants/</url>
    <content><![CDATA[<h1 id="科技想要什么【美】凯文·凯利"><a href="#科技想要什么【美】凯文·凯利" class="headerlink" title="科技想要什么【美】凯文·凯利"></a>科技想要什么【美】凯文·凯利</h1><p>最后一句碉堡了<br>这让我想到 张小龙在知乎 <a href="http://www.zhihu.com/question/20198823">如果这个世界只是一段代码，迄今为止你发现了哪些 bug？</a> 这个问题下颇为幽默的回答</p>
<blockquote>
<p>要求代码中的一个变量去检查代码的 bug，是不现实的。</p>
</blockquote>
<a id="more"></a>

<h2 id="书摘："><a href="#书摘：" class="headerlink" title="书摘："></a>书摘：</h2><p>自由的含义并非可以率性而为，而是“选择的自由”</p>
<p>生命和科技似乎都是以非物质的信息流为基础的。</p>
<p>自主性：自我修复、自我保护、自我维护（获取能源、排放废物）、对目标的自我控制、自我改进</p>
<p>我们应该像对待自然那样对待技术元素。我们不能要求科技服从我们，就像不能要求生命服从我们。有时我们应该臣服于它的指引，乐于感受它的多姿多彩；有时我们应该努力改造它的本来面目，以迎合自己的需求。我们不必执行技术元素的所有要求，但是我们能够学会利用这股力量，而不是与之对抗</p>
<p>语言是技巧，让思维能够自我质疑；是魔镜，告诉大脑自己在想什么；是控制杆，将思想转化为工具。语言掌握了自我意识和自我对照的捉摸不定的无目标运动，从而能够驾驭思维，使之成为新思想的源泉。没有语言的理性架构，我们无法获知自己的精神活动，自然就不能思考我们的行为方式。</p>
<p>金钱带来的是更多选择，而不只是更多物质（尽管更多物质也是结果）。我们不会因为更多器具和阅历而快乐，让我们真正感到快乐的是能控制时间和工作，有机会享受真正的休闲，逃离战争、贫困和腐败导致的不确定性，以及抓住时机追求个人自由——这一切都伴随财富增长而发生。</p>
<p>人类本性是可塑的。我们通过思维改变自己的价值、预期和自我认知。从类猿人时期开始我们就在改变本性，而一旦发生改变，我们将继续深入地改造自己</p>
<p>科技是生命的延伸，二者的共同需求是：</p>
<ul>
<li>提高效率</li>
<li>增加机会</li>
<li>提高自发性</li>
<li>提高复杂性提高多样性</li>
<li>提高专门化</li>
<li>提高普遍性</li>
<li>增加自由</li>
<li>促进共生性</li>
<li>增加美感</li>
<li>提高感知能力</li>
<li>扩展结构</li>
<li>提高可进化性</li>
</ul>
<p>自由<br>与其他事物一样，我们的自由意志不是独一无二的。潜意识的自由意志下的选择存在于动物的原始行为模式中。每种动物都有基本需求，它们会作出选择来满足这些需求。可是自由意志甚至先于生命出现。一些理论物理学家——包括弗里曼·戴森（Freeman Dyson）——认为自由意志在原子似的粒子中出现，因此自由选择诞生于大爆炸的高温中，自那以后持续扩展。</p>
<p>技术元素是宇宙创造自我意识的方法。卡尔·萨根（Carl Sagan）对此作了令人印象深刻的阐释：“我们是思考星空的星尘。</p>
]]></content>
      <tags>
        <tag>Tech</tag>
        <tag>Books</tag>
      </tags>
  </entry>
  <entry>
    <title>Willpower</title>
    <url>/cn/Willpower/</url>
    <content><![CDATA[<h1 id="意志力"><a href="#意志力" class="headerlink" title="意志力"></a>意志力</h1><p>由于现代魔法咒语越来越复杂，一个成功的项目往往需要以月来计算，深谙此道的魔导师们便被尊称为了人月神话</p>
<p>在这种环境下，精神力对于法师们来说，就显得十分宝贵与重要</p>
<p>说起精神力，其实在精灵国度发音为 <code>WillPower</code>，只不过传入天朝后，被不知情的麻瓜们硬译为 自控力 或 意志力</p>
<p>听起来十分神秘 + 高大上，其实只要抓住两个特性即可</p>
<ol>
<li>电池</li>
</ol>
<ul>
<li>法师们利用精神力控制魔法元素</li>
<li>早晨 &gt; 晚上</li>
<li>可利用 睡眠/冥想 回电</li>
<li>不同的魔法耗电量不同</li>
</ul>
<ol start="2">
<li>肌肉</li>
</ol>
<ul>
<li>总储量可变</li>
<li>可通过特定的锻炼扩充</li>
</ul>
<a id="more"></a>

<p>布鲁克斯先生在获颁年度商业人物的晚宴上，低头默祷；祷词来自尼布尔 1934 年写下的一篇堪称 20 世纪最着名的祷告文：</p>
<blockquote>
<p>My God grant me the serenity to accept the things I cannot change, The courage to change the things I can, And the wisdom to know the difference.</p>
</blockquote>
<p>(PS: 童鞋们听着耳熟么~)</p>
<p>特性中 <strong>特定的锻炼方式</strong> 与 <strong>睡眠</strong>，即为我们可以改变的</p>
<p>奇普.希思 / 丹.希思 合著的 <a href="http://book.douban.com/subject_search?search_text=%E7%9E%AC%E5%8F%98&cat=1001">瞬变 : 如何让你的世界变好一些</a> 中提到</p>
<blockquote>
<p>我们日常行为中的绝大部分都是自动自发而非是受到监督的。而这是一件好事情，因为进行监督是困难的，它会逐渐消耗掉自控能力。</p>
</blockquote>
<p>紧接着说道</p>
<blockquote>
<p>自控能力是一种可耗尽的资源，这是一个至关紧要的认识。因为当我们谈到“自我控制”的时候，我们说的并不是这个词的表面意思，而是意味着意志力需要跟恶习（抽烟、吃曲奇、酗酒)进行搏斗。</p>
</blockquote>
<p>鉴于此，书中给出了一个简单又有效的锻炼方式：<br><strong>内化习惯</strong>——即设置一个<strong>行动触发器</strong>，其所起到的作用，是创造一个“即时习惯”（instanthabit)</p>
<p>因为在这样的循环当中，不存在什么有意识的深思熟虑，而这也能够避免损耗人用于自控的精力</p>
<p>其结果如同学开车，刚开始手忙脚乱，后来(自认为)打电话也不会开到沟里去了(→_→)</p>
<p>而 睡觉 方面并非单单指夜间这种超过六小时的睡眠，白天不超过半小时的小憩也可加入进去<br>其中最重要的一条是：困了即睡<br>毕竟精神力不足的情况下，强行操控魔法元素会有爆裂法器的风险</p>
<p>如果还不死心的话，请调用下面的公式：<br>成果 = 效率 X 时间</p>
<p>PS：万一效率是负数的话…</p>
<hr>
<p>有了正确的思想指导，又经过一段时间的魔鬼训练，小法师欣喜的发现自己精神力有了明显的提高<br>最明显的是状态好的情况下，每天可控制 15+ 番茄钟，而平时也有 12 左右</p>
<p>同时小法师也发现，他的精神力储量并非可以无限增大<br>并且如果是《信息简史》《失控》这种信息量超大的书籍，耗电就会十分迅速</p>
<p>所以只能把有限的精力投入在更加重要的事情上</p>
<p>这也是 胜间和代 <a href="http://book.douban.com/subject/3729173/">时间投资法</a> 里 <strong>时间投资分布图</strong>（四象限法则+时间记录）粉墨登场的地方</p>
<p>但最吊诡之处在于：控制了想做的事情后，其他事情就一塌胡涂了</p>
<p>比如 <a href="http://book.douban.com/subject/10786473/">自控力</a> 中就提到：</p>
<blockquote>
<p>节食后更愿意“尝试多种交配策略”</p>
</blockquote>
<p>这是否也是一些明星出轨的原因之一？(→_→)</p>
<p>不过我们的小法师连女盆友都木有，所以也就不太明显<br>副作用最多就是十几个番茄后，继续强看书，会出现栈满无法压栈<br>另外反应变得迟钝，图书馆闭馆后回家路上一脸痴呆状</p>
<hr>
<p>PS: 意志力有点像免疫力，并不是越强越好，过强的意志力 = 慢性压力<br>PS2: 融合了自己的人，有着恰到好处的意志力</p>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>BeiJing</title>
    <url>/cn/BeiJing/</url>
    <content><![CDATA[<h1 id="帝都"><a href="#帝都" class="headerlink" title="帝都"></a>帝都</h1><p>鉴于自己阅读快到半千，一直想用几个段落介绍下关于快速阅读的东东</p>
<p>结果一拖这个系列就木有然后了…<br>估计还是水平有限导致写不出来…</p>
<p>还是先做点别的吧</p>
<a id="more"></a>

<hr>
<p>纳西姆·尼古拉斯·塔勒布 用了《随机漫步的傻瓜》整整一本书来阐述“不确定性”，然后又用了《黑天鹅》一整本书描述如何应对不可预知的未来<br>小法师匆匆翻完就自以为得其精要</p>
<p>在神针和帝都之间，深思熟虑(tou nao yi re)后决定选 <code>Hard</code> 模式，看看能否开启隐藏技能 get√</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>赶脚南方的大部分童鞋对于帝都的印象一直是酱紫：</p>
<p><img src="http://cl.ly/image/3P2e3a2u1a0Z/beijing-sandstorm.jpg" alt=""></p>
<p>下雨的时候，又是酱紫：<br><img src="http://cl.ly/image/1f2M383a0m0F/%E6%B0%B4%E6%BC%AB%E5%B8%9D%E9%83%BD.jpg" alt=""></p>
<p>经过实地考察一周后，小法师得出一个结论</p>
<p>“上面的图夸张是夸张了点，但是真的是真的啊！！！”</p>
<p>君不见空气太过干燥，路上的女孩纸的皮肤都不好了<br>君不见由于灰尘过大，路边的车和地面都蒙了一层灰</p>
<p>自从小法师在天堂有次下雨时发现路边的女孩纸裸脚走在柏油马路上后，就不再穿袜纸了<br>结果帝都走两步就弄了一鞋沙纸…</p>
<h2 id="口音"><a href="#口音" class="headerlink" title="口音"></a>口音</h2><p>从地理位置上来说，小法师出生在淮河以北，并且心理一直认为自己是北方人，只是比较认同南方的生活方式<br>最初到天堂时，就被孩纸们说“儿”音很重，还被说把他们带歪了</p>
<p>来到帝都后，才知道小巫见大巫了<br>这哪里是官方描述的：</p>
<blockquote>
<p><em>普通话</em>以<strong>北京语音</strong>为标准音，以北方话为基础方言…</p>
</blockquote>
<p>这边“儿”音已经重到听起来十分滑稽，小法师路上听到路人说话就忍俊不禁<br>但仅仅两天时间，小法师就发现自己被带沟里去了…</p>
<p>不过路上真的有许多歪果仁，并且很多说的不是英语（小法师还是略懂英语的，应该不是口音问题）</p>
<h2 id="中介"><a href="#中介" class="headerlink" title="中介"></a>中介</h2><p>遥想当年还在天堂时，租房只要往小区门口一站，立即围上来一群热情的大妈，也无神马中介费<br>帝都初来乍到，小法师准备不足，还是以为和天堂差不多，结果到了小区门口，发现小黑板（除了蒙了一层灰之外）干干净净。问门口保安租房情况，保安连连摇头，答曰“不知道儿”</p>
<p>以前在天堂 0.8k 的就有十多平米，1.3k 足以朝南+大阳台<br>并且无论多便宜的房纸，就算地下室，都有独立卫生间，洗完澡就可直接裸奔<br>就酱紫小法师还（领着那微薄的薪水）叫苦连天</p>
<p>而帝都价格上就要 x2.5，并且卫生间公用<br>还有三环以内的房子各种古老，有些比小法师在世时间还要悠久<br>墙壁泛黄墙角蜘蛛网，屋外屋内各种脏乱差<br>并且大多五居室，万一一屋挤着小两口，不算小法师就已 8 个，早晨 WC 高峰期时… 小法师想到了可以用 Queue 实现 FIFO</p>
<p>等晚上回宾馆上网搜靠谱中介时，发现帝都已无全尸，无论大小，只要是中介，都已被黑出了翔</p>
<p>只可惜小法师初来乍到，人生地不熟，明知“我为鱼肉人为刀俎”，却又无可奈何</p>
<h2 id="忠告"><a href="#忠告" class="headerlink" title="忠告"></a>忠告</h2><p>南方的孩纸们，泥们千万表被灌太多的鸡汤，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">趁着年轻，多去看看外面的世界</span><br><span class="line">年轻就应该有梦想，不管最后怎么样，起码尝试过，不后悔</span><br><span class="line">旅行并不是旅游，要在那里 挤公交挤地铁，上下班...</span><br></pre></td></tr></table></figure>

<p>小法师用绳命给泥们一个忠告：</p>
<p>千万表过来，因为：<br><strong>真！的！！会！！！死！！！！的！！！！！</strong></p>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>A simple VS. between Sinatra and Martini</title>
    <url>/cn/A-simple-VS-between-Sinatra-and-Martini/</url>
    <content><![CDATA[<h1 id="Sinatra-VS-Martini"><a href="#Sinatra-VS-Martini" class="headerlink" title="Sinatra VS. Martini"></a>Sinatra VS. Martini</h1><p>网上已经有许多对比的数据了<br>但都不如自己来的实在</p>
<p>于是在 <code>VPS</code> 上分别用 <code>Martini</code> <code>Martini</code> 搭了两个 <code>Hello World</code><br>选了 <code>Linux</code> 上的 <code>siege</code> 作为测试工具</p>
<a id="more"></a>

<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><h3 id="Martini"><a href="#Martini" class="headerlink" title="Martini"></a>Martini</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">siege -q -c 1000 -r 30 -f sinatra.url</span><br></pre></td></tr></table></figure>

<!--more-->

<p><img src="http://cl.ly/image/0t2P2B0T123a/sinatra.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Transactions: 29332 hits</span><br><span class="line">Availability: 97.77 %</span><br><span class="line">Elapsed time: 107.10 secs</span><br><span class="line">Data transferred: 0.38 MB</span><br><span class="line">Response time: 1.73 secs</span><br><span class="line">Transaction rate: 273.87 trans&#x2F;sec</span><br><span class="line">Throughput: 0.00 MB&#x2F;sec</span><br><span class="line">Concurrency: 473.90</span><br><span class="line">Successful transactions: 29332</span><br><span class="line">Failed transactions: 668</span><br><span class="line">Longest transaction: 25.45</span><br><span class="line">Shortest transaction: 0.00</span><br></pre></td></tr></table></figure>

<h3 id="Martini-1"><a href="#Martini-1" class="headerlink" title="Martini"></a>Martini</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">siege -q -c 1000 -r 30 -f martini.url</span><br></pre></td></tr></table></figure>

<p><img src="http://cl.ly/image/401c0o2r1D0t/martini.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Transactions: 29988 hits</span><br><span class="line">Availability: 99.96 %</span><br><span class="line">Elapsed time: 58.56 secs</span><br><span class="line">Data transferred: 0.34 MB</span><br><span class="line">Response time: 0.46 secs</span><br><span class="line">Transaction rate: 512.09 trans&#x2F;sec</span><br><span class="line">Throughput: 0.01 MB&#x2F;sec</span><br><span class="line">Concurrency: 235.70</span><br><span class="line">Successful transactions: 29988</span><br><span class="line">Failed transactions: 12</span><br><span class="line">Longest transaction: 31.10</span><br><span class="line">Shortest transaction: 0.00</span><br></pre></td></tr></table></figure>

<h2 id="代码量"><a href="#代码量" class="headerlink" title="代码量"></a>代码量</h2><p>当然开发是不可能仅仅关注服务器性能的<br>《人件》中早就强调，相对于机器，<strong>程序员的速度</strong>要放在优先位置</p>
<p>由于只是单纯的打印 _hello world_，无法对代码量做进一步详细的对比（<strong>欢迎留言</strong>）</p>
<p><code>Go</code> 目前的库大部分是从 <code>Github</code> 上 <code>Get</code> 下来的，代码质量是否有保障？<br>反观 <code>Ruby</code>，已经比较成熟（好像几年前 <code>Python</code> 对比 <code>Ruby</code> 的结果…）</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>所以如果确定日访问量在千万 PV 以下，<code>Ruby</code> 是完全没有问题的</p>
<p>另外在 <a href="http://book.douban.com/subject/6756090/">《松本行弘的程序世界》</a>这本书中提到，Ruby 的设计哲学是：开发效率大于运行效率，成为一个“人性化”的语言</p>
<p>最最重要的是 <code>Ruby</code> 写起来真的很爽有木有…</p>
<p>最后弱弱的问一句，您幸福嘛？</p>
]]></content>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>The primary principle of Delegate</title>
    <url>/cn/The-primary-principle-of-Delegate/</url>
    <content><![CDATA[<h1 id="Delegate-原理浅析"><a href="#Delegate-原理浅析" class="headerlink" title="Delegate 原理浅析"></a>Delegate 原理浅析</h1><p>B 的一个方法运行到某处，需要把自己的一个值告诉 A，并且做一定处理</p>
<p>怎么来实现呢？</p>
<p>首先 B 要知道自己去告诉谁，然后再调用 A.aFunc()</p>
<p>我知道想知道原理的不想看代码，尽量简化了</p>
<a id="more"></a>

<p>A, B 类</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">A</span>.swift</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">func</span> <span class="title">aFunc</span><span class="params">(b:B)</span></span> &#123;</span><br><span class="line">		<span class="built_in">println</span>(b.value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">B</span>.swift</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> value = <span class="number">0</span></span><br><span class="line">	<span class="function"><span class="keyword">func</span> <span class="title">bFunc</span> <span class="params">()</span></span> &#123;</span><br><span class="line">        value = <span class="number">213</span> <span class="comment">// value 有变化，想通知 A 执行 aFunc()</span></span><br><span class="line">		a.aFunc(b) <span class="comment">// 错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<!--more-->

<p>上面是不行的，为啥呢？<br>因为 b 里面并没有 a，如果直接把 A 传进去，就要修改 B 的代码，也就丢失了封装</p>
<p>我们看下 <strong>Delegate</strong> 怎么实现这种机制的</p>
<h2 id="Delegate"><a href="#Delegate" class="headerlink" title="Delegate"></a>Delegate</h2><p>既然是 B 要往外发送消息，就先从 B 下手：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">A</span>.swift</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">func</span> <span class="title">aFunc</span><span class="params">(b:B)</span></span> &#123;</span><br><span class="line">		<span class="built_in">println</span>(b.value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b.swift</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">BDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">aFunc</span><span class="params">(b:B)</span></span>  <span class="comment">// 1. 把 A 的 aFunc 声明成 BDelegate 的一个方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> delegate:<span class="type">BDelegate?</span>  <span class="comment">// 2. 声明一个 BDelegate 类型的 delegate 变量</span></span><br><span class="line">    <span class="keyword">var</span> value = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">bFunc</span> <span class="params">()</span></span> &#123;</span><br><span class="line">        value = <span class="number">213</span></span><br><span class="line">        delegate?.aFunc(<span class="keyword">self</span>) <span class="comment">// 3. 把自己 b，作为参数，调用 aFunc()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>做了 1、2、3 后，还是不行，为啥呢？<br>因为 A 不知道 B 进行了委托，两者没关联起来</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">a.swift</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>: <span class="title">BDelegate</span> </span>&#123; <span class="comment">// 1. BDelegate</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">aFunc</span><span class="params">(b:B)</span></span> &#123;</span><br><span class="line">        b.delegate = <span class="keyword">self</span> <span class="comment">// 2. 把 b 的 delegate 变量设置成 self，也就是 a</span></span><br><span class="line">        <span class="built_in">println</span>(b.value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b.swift</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">BDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">aFunc</span><span class="params">(b:B)</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> delegate:<span class="type">BDelegate?</span></span><br><span class="line">    <span class="keyword">var</span> value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">bFunc</span> <span class="params">()</span></span> &#123;</span><br><span class="line">        value = <span class="number">213</span></span><br><span class="line">        delegate?.aFunc(<span class="keyword">self</span>) <span class="comment">// 3. 这下看懂了吧？delegate?.aFunc(self) 等价于  a.aFunc(b)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main.swift</span><br><span class="line"><span class="keyword">let</span> b = <span class="type">B</span>()</span><br><span class="line"><span class="keyword">let</span> a = <span class="type">A</span>()</span><br><span class="line">a.aFunc(b)</span><br><span class="line">b.bFunc()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个可以在 Playground 里看结果了</span></span><br></pre></td></tr></table></figure>

<p>大功告成</p>
<p>回想下常见的代码，比如：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">mScrollView.delegate = <span class="keyword">self</span></span><br><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MYScrollView</span> : <span class="title">UIScrollView</span>, <span class="title">UIScrollViewDelegate</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidEndDecelerating</span><span class="params">(scrollView: UIScrollView)</span></span> &#123;</span><br></pre></td></tr></table></figure>

<p>是不是有种豁然开朗的感觉？</p>
<p>过两天说说 <code>SEL</code> 和 <code>Block</code></p>
<hr>
<p>赶脚还是木说清楚呢，有不清楚的地方，欢迎留言探讨哈<del>~</del></p>
]]></content>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>xmlParseEntityRef no name AND Input is not proper UTF-8</title>
    <url>/cn/xmlParseEntityRef-no-name-AND-Input-is-not-proper-UTF-8/</url>
    <content><![CDATA[<p>I found that the RSS of my blog was dead a few days ago.</p>
<p>First, I thought it’s a bug of the theme, so I updated the theme today, but the problem was still there.</p>
<a id="more"></a>

<p>It yelled:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This page contains the following errors:</span><br><span class="line"></span><br><span class="line">error on line 70 at column 81: xmlParseEntityRef: no name</span><br><span class="line">Below is a rendering of the page up to the first error.</span><br></pre></td></tr></table></figure>

<p>I Googled and found that it was a silly problem just because I felt that it’s cool using <code>&amp;</code> rather than <code>and</code>.<br>The truth is that <code>&amp;</code> will conflict with <code>HTML</code> tags and it costed me 1 hour.</p>
<p>But after that, The RSS was still not resurrection.</p>
<p>It said something in the graveyard.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This page contains the following errors:</span><br><span class="line"></span><br><span class="line">error on line 74 at column 28: Input is not proper UTF-8, indicate encoding !</span><br><span class="line">Bytes: 0x01 0x72 0x65 0x64</span><br><span class="line">Below is a rendering of the page up to the first error.</span><br></pre></td></tr></table></figure>

<p>It seems some odd characters exist in that article.</p>
<p>After check the syntax of RSS feeds of my blog on <a href="http://validator.w3.org/feed/">Feed Validation Service</a></p>
<p>It shows this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">line 84, column 688: XML parsing error: &lt;unknown&gt;:84:688: not well-formed (invalid token) [help]</span><br><span class="line">... an&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;line&quot;&gt;Data transferred: &lt;span class&#x3D;&quot;number&quot;&gt;0.38&lt; ...</span><br></pre></td></tr></table></figure>

<p>Coping the text to Sublime</p>
<p><img src="http://cl.ly/image/30433p2q1m1y/rss_error_1.png" alt=""></p>
<p>What a surprise…</p>
]]></content>
      <tags>
        <tag>Bugs</tag>
      </tags>
  </entry>
  <entry>
    <title>Pull to Refresh UIViewController in iOS</title>
    <url>/cn/Pull-to-Refresh-UIViewController-in-iOS/</url>
    <content><![CDATA[<p>If you force to add a <code>UIRefreshControl</code> to a <code>UIViewController</code>, you will get an error:<br><code>UIRefreshControl may only be managed by a UITableViewController</code></p>
<p>So, here is the trick</p>
<a id="more"></a>

<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>1 init a tableView in your <code>UIViewController</code></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> refreshControl = <span class="type">UIRefreshControl</span>()</span><br><span class="line"><span class="keyword">var</span> tableView = <span class="type">UITableView</span>()</span><br></pre></td></tr></table></figure>

<p>2 add <code>refreshControl</code> to <code>tableView</code>, not <code>view</code></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">tableView.frame = view.frame</span><br><span class="line"></span><br><span class="line">refreshControl.addTarget(<span class="keyword">self</span>, action: <span class="type">Selector</span>(<span class="string">&quot;refreshView:&quot;</span>), forControlEvents: .<span class="type">ValueChanged</span>)</span><br><span class="line">tableView.addSubview(refreshControl)  <span class="comment">// here it is</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.view.addSubview(tableView)</span><br></pre></td></tr></table></figure>

<p>3 <code>refreshView</code> function</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">refreshView</span><span class="params">(refreshControl: UIRefreshControl)</span></span> &#123;</span><br><span class="line">    refreshControl.attributedTitle = <span class="type">NSAttributedString</span>(string: <span class="string">&quot;Refresh&quot;</span>)</span><br><span class="line">    refreshControl.attributedTitle = <span class="type">NSAttributedString</span>(string:<span class="string">&quot;Last updated on&quot;</span> + <span class="type">NSDate</span>().description)</span><br><span class="line"></span><br><span class="line">    refreshControl.endRefreshing()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="If-you-like-to-use-Storyboard-like-me"><a href="#If-you-like-to-use-Storyboard-like-me" class="headerlink" title="If you like to use Storyboard like me"></a>If you like to use <code>Storyboard</code> like me</h2><ol>
<li>Storyboard -&gt; UITableViewController -&gt; enable Refreshing<br><img src="http://cl.ly/image/0z3z0R1D3U0Q/Pull%20to%20Refresh%20TableView%20in%20iOS_1.png" alt=""></li>
<li>Then you can <code>Ctrl</code> drag just like <code>UIButton</code><br><img src="http://cl.ly/image/0S1B040n3N2s/Pull%20to%20Refresh%20TableView%20in%20iOS_2.png" alt=""></li>
</ol>
]]></content>
      <tags>
        <tag>Programming</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>How to manipulate Filco keyboard layout to Mac OSX</title>
    <url>/cn/How-to-manipulate-Filco-keyboard-layout-to-Mac-OSX/</url>
    <content><![CDATA[<p>之前入了 <code>Filco</code> 红轴，游戏 编码 两不误</p>
<p>之前虽然用 <code>System Preferences -&gt; Keyboard -&gt; Modifier Keys -&gt; Select keyboard -&gt; Opt-Cmd Cmd-Opt</code>，可以把 <code>Cmd-Opt</code> 调成苹果的键位<br>但每次打星际都要再改一次，从上面的过程也能看出来很繁琐</p>
<p>至于 <code>F1 - F12</code>，根本就没办法，另外锁屏也是问题</p>
<a id="more"></a>

<p>皇天不负苦心人，终于找到了这个，而且还是免费的：<br><a href="https://pqrs.org/osx/karabiner/index.html.en">Karabiner</a></p>
<p>设置好 <code>Opt-Cmd</code> 后，又把 <code>F1 - F12</code> 改成了苹果的功能键<br>顺便把右下角倒数第二个无用的键 改成了 FN<br>然后又把 <code>Ctrl_R</code> <code>FN</code> 位置换了下<br>右上角的 <code>Pa/Br</code> 改成了 <code>Power</code></p>
<p><img src="http://cl.ly/image/1y210f3F260Z/Karabiner.png" alt=""></p>
<p>然后在 <code>MenuBar -&gt; SettingList -&gt; +</code> 一个无键位修改的 <code>Profile</code>，比如叫 <code>Game</code></p>
<p>以后如果玩游戏，点击状态栏的图标，一键切换成 <code>Game</code> 就行了</p>
]]></content>
      <tags>
        <tag>Shopping</tag>
      </tags>
  </entry>
  <entry>
    <title>why are we tend to be conserved</title>
    <url>/cn/why-are-we-tend-to-be-conservation/</url>
    <content><![CDATA[<h1 id="为什么我们会渐渐趋于保守"><a href="#为什么我们会渐渐趋于保守" class="headerlink" title="为什么我们会渐渐趋于保守"></a>为什么我们会渐渐趋于保守</h1><p>有那么一个阶段，总感觉父母属于老顽固，嫌弃不愿意接触新的东西，由于年少无知，还曾经嘲笑过他们</p>
<p>今天当我为了 IE8，搞了一上午，终于把 Win 8.1 换成 Win7 ，（至于为什么，我是说俩字：网银），并且想以后不到万不得已再也不用新系统时，心中一惊</p>
<a id="more"></a>

<p>最近微软被各种浏览器逼的也开始刷版本号了<br>中信银行客服说 USB 优盾 最好用 IE8，我一看 Win8.1 自带 IE，已经飙到 11 了…</p>
<p>但 IE 和系统是绑定的，无奈之下，只能换系统，由于又是装在虚拟机中，各种折腾，虽然最后是 Happy Ending，但一上午的时间却回不来了</p>
<p>回想这次 Yosemite 10.10 Dev 版出来时，作为开发者，我居然没手贱，硬是撑到正式版发布了才升级</p>
<p>究其原因，曾经在大学时，Win7 的预览版刚刚流出，就迫不及待的升级，结果发现每次重启宽带连接消失</p>
<p>以前还尝试过 <a href="http://zh.wikipedia.org/zh/%E5%BE%B7%E6%B2%83%E5%A4%8F%E5%85%8B%E9%8D%B5%E7%9B%A4">Dvorak 键盘</a> 一个月后键位熟悉到 魔兽 都不是问题<br>并且感觉速度上确实有所提升，虽然可能有一定的心理因素，但明显感觉到中间一排的键位按的比较多</p>
<p>但是！当我用别人的电脑时，就完完全全成了别人眼中的傻逼！每次都要苦口婆心的说一遍“我用 Dvorak 键盘”<br>最致命的是，之后用了 Ubuntu，英文还好，系统有，中文又悲剧了<br>再加上 Android 开始流行，手机键盘基本不可能有 Dvorak 这种布局了</p>
<p>然后，我只能妥协了</p>
<p>再比如工作时，用 Ubuntu 10.10 编译 Android 的 ROM，虽然 11 更漂亮，甚至 10.10 官方已经放弃支持了，但若手贱的一点，就完全没法编译了</p>
<p>酱紫的例子数不胜数</p>
<p>想我还没到而立之年，就已经开始畏手畏脚，所以年龄大的人是否因为是吃了不少的亏，掉的坑比较多，所以渐渐的不愿意再接触新鲜的事物了呢？</p>
<p>参考 <a href="http://zh.wikipedia.org/wiki/%E7%BF%92%E5%BE%97%E6%80%A7%E5%A4%B1%E5%8A%A9">习得性无助实验</a>，这又是动物本性决定，好像没有什么太好的办法</p>
<p>但这样的人，会渐渐的变得无趣，像一潭死水慢慢发臭</p>
<p>我不想成为那样的人</p>
<p>纵观有些年长并有意思的人，和他们交谈，没有什么压力，可以更好的阐述自己的想法</p>
<p>那么他们是如何与时俱进，保持好奇心的呢？</p>
]]></content>
      <tags>
        <tag>Psychology</tag>
      </tags>
  </entry>
  <entry>
    <title>An indigestible programming language is a bad language</title>
    <url>/cn/An-indigestible-programming-language-is-a-bad-language/</url>
    <content><![CDATA[<p>Gap Year 时，就看到了这本书，当时正在 <a href="http://www.codecademy.com/">codecademy</a> 刷题， 只看到 Ruby 那章，那时感觉知道 <code>Go</code> 已经很 Geek 了</p>
<p>时隔一年，现在所在的公司重构后端时，曾考虑过 <code>Scala</code>，有个基友看游戏工资高，毅然决然的去看<code>Erlang</code>，有次 <code>Thoughtworks</code> 活动分享听到了 <code>Clojure</code></p>
<p>再看这本书时，赫然发现 <code>Ruby, Io, Prolog, Scala, Erlang, Clojure, Haskell</code></p>
<p>坐井观天了啊，再次翻阅这本书，发现其实并不用看这本书</p>
<p>所以若是猎奇，满足好奇心，可以看看，如果是想认认真真的学，还是跳过吧</p>
<a id="more"></a>

<hr>
<p>纵观编程语言，林林总总，大致逃脱不了以下范畴：</p>
<ol>
<li>模型</li>
</ol>
<ul>
<li>函数式</li>
<li>OO</li>
<li>原型</li>
</ul>
<ol start="2">
<li>数据结构算法</li>
<li>数据结构<ul>
<li>类型</li>
<li>链表</li>
<li>哈希表</li>
</ul>
</li>
<li>过程<ul>
<li>判断</li>
<li>循环</li>
</ul>
</li>
<li>并发</li>
</ol>
<p>关于并发，由于过程不符合人类思维，目前貌似还没什么好办法<br>我想以后即使解决了，也应该是通过天才的一些人，写好封装起来，让我这种智商平平的人，像写 <code>ifelse</code> 那么简单来解决掉的</p>
<p>个人感觉，一个语言的流行，与以下几点密不可分：</p>
<ol>
<li>商业推广（Java|OC）</li>
<li>安全稳定</li>
<li>是否易于人类阅读</li>
</ol>
<p>前两点无需多言，说多了都是泪</p>
<p>七周七语言中有提到：<br>In many ways, Clojure is the wise kung fu master, the oracle on the hill, or the enigmatic Jedi trainer.</p>
<p>Lisp 的好处，从《黑客与画家》就得知了，并且 Emace 誉为“神用的编辑器”</p>
<p>但是，说的那么好那么牛逼，却流行不起来，是个值得深思的问题</p>
<p>从语法糖的角度来说，还记得有次用 <code>Swift</code>，一个上一代的(C/C++/Java)程序员（无贬义），仅仅是看到返回值变成了 -&gt; , 变量类型在后面就惊呼不已<br>至于我自己，完全接受 <code>Go Swift</code> 等语法糖，却也感觉 <code>Lisp</code> 的前缀表达式各种难受，简单还好，一长就晕了，并且结尾一堆右括号很有异端的感觉<br>可见程序员习惯了一套体系后，再接受新语法有多困难</p>
<p>“代码是写给人看的”</p>
<p>所以我想，反人类阅读方式的语言不说会消失，至少不会在人类中流行开来</p>
<p>所以 Mazi 另辟蹊径，把重点放到了如何让程序员快乐的写代码上</p>
<p>所以没什么最好的语言，只有最合适的语言</p>
<p>当然上述所说的，都不是用于一种情况，即电脑进化到可以编写代码</p>
<p>因为这已经脱离了人类的范式</p>
]]></content>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>SB on Rails</title>
    <url>/cn/SB-on-Rails/</url>
    <content><![CDATA[<p>在个人观念里，到生日才算一年逝去<br>阳寿一去时再总结（拖延症）</p>
<p>不过看盆友圈各种悟已往之不谏，知来者之可追<br>所以先粗略的看看完成了什么吧</p>
<a id="more"></a>

<ol>
<li>看了 159 本书</li>
<li>柳比歇夫记录法 2256 h</li>
<li>年初计划实现俩</li>
<li>换座城市</li>
</ol>
<p>反过来看就是：</p>
<ol>
<li>还有 29 本 没看</li>
<li>自控力不足</li>
<li>只完成一半</li>
<li>吃了很多灰</li>
</ol>
<p>还有事情越来越多越来越乱，尽管我饱读各种 GTD，还是感觉像 SB on Rails<br>另外父母不理解也是个棘手的问题</p>
]]></content>
      <tags>
        <tag>Books</tag>
      </tags>
  </entry>
  <entry>
    <title>Refactoring is not a silver bullet</title>
    <url>/cn/Refactoring-is-not-a-silver-bullet/</url>
    <content><![CDATA[<h1 id="重构不是银弹"><a href="#重构不是银弹" class="headerlink" title="重构不是银弹"></a>重构不是银弹</h1><p><img src="http://cl.ly/image/0M1z2O0j0k3N/Image%202015-01-25%20at%2011.17.20%20PM.png" alt=""></p>
<p>成书时，面向对象尚是小众，而如今函数式编程已开始流行</p>
<p>时至今日，重构的大部分思想以及方法，有点追求的程序员都略有耳闻，如果是 <code>Java</code> 程序员，更是不想知道都难<br>发展至今，重构已经类似于编码的一部分了</p>
<p>此书 1 2 3 章已把重构是什么以及什么时候重构说清楚了，应该细看<br>4 5 6 7 8 9 10 11 都是具体的方法，熟悉 Java 的可以对应着看一下<br>之后的章节大略过一下就行了</p>
<a id="more"></a>

<hr>
<p>曾经在学校里刷了<a href="http://book.douban.com/subject/1477390/">《代码大全》</a>，所以，再看此书，<strong>相对</strong>就没那么重要了</p>
<p>比如虽然我 iOS 弱爆了，但看到现在公司的项目，上来蹭蹭蹭几百行的函数，大量的重复代码，各种神奇数字，也是醉了<br>当然这并不是说之前项目不好，毕竟大家都有被 <em>deadline</em> 逼成傻逼的时候</p>
<p>总得来说，此书还是应该<strong>过一遍</strong>，毕竟封面印着：</p>
<blockquote>
<p>普通程序员进阶到编程高手必须修炼的秘籍</p>
</blockquote>
<p>因为不看的话，可能意识不到一些前人路过的坑</p>
<p>像我对临时变量的理解就不妥<br>还有以前写函数<strong>过于随意</strong>，像参数不带 <code>let</code> ，不暴露的也没加 <code>private</code></p>
<p>比较有启发的是：</p>
<ul>
<li>消除 临时变量</li>
<li>多态 替换 Switch</li>
<li>Null Object</li>
</ul>
<p>目前做 iOS 的时间尚短，属于初级程序员，不懂的地方巨多，每每在试错中做功能，写的时候这些东东也就统统忽略了<br>虽然时常想着功能 OK 后立即重构，但人都有惰性，往往看到能跑了就万事大吉，然后把整理代码的希望寄托在重构上</p>
<p>比较理想的情况是：<br>版本控制 + Review + 结对 + 重构 （目前的公司好赞啊，已实现了大半）</p>
<p>但这又让我想起了 Fred Brooks 在 1987 年所发表的一篇关于软件工程的经典论文 ——<a href="http://zh.wikipedia.org/wiki/%E6%B2%A1%E6%9C%89%E9%93%B6%E5%BC%B9">《没有银弹》</a></p>
<p>重构当然也不是银弹</p>
<p>只能重写了少年</p>
]]></content>
      <tags>
        <tag>Programming</tag>
        <tag>Books</tag>
      </tags>
  </entry>
  <entry>
    <title>Ten years of work experience</title>
    <url>/cn/Ten-years-of-work-experience/</url>
    <content><![CDATA[<h1 id="让你少奋斗-10-年的工作经验"><a href="#让你少奋斗-10-年的工作经验" class="headerlink" title="让你少奋斗 10 年的工作经验"></a>让你少奋斗 10 年的工作经验</h1><p>亚马逊特价，一看豆瓣评分不低，就入了</p>
<p>不想第一准则就是：<br><strong>绝不亲自用电脑工作</strong></p>
<p>在看第二准则居然是：<br><strong>视专业知识为绊脚石</strong></p>
<p>作为一个码农，我只能呵呵了</p>
<a id="more"></a>

<p>还好第三第四：</p>
<ul>
<li><strong>挤进权力中心</strong></li>
<li><strong>决不能相信 HR</strong></li>
</ul>
<p>总算 make sense 了</p>
<p>接下来又给了些什么</p>
<ul>
<li><strong>及时把没用的人踢出人脉圈</strong></li>
<li><strong>违反规则</strong></li>
<li><strong>抓住大人物</strong></li>
<li><strong>见风使舵</strong></li>
<li><strong>no mercy</strong></li>
<li><strong>抢占下属功劳</strong></li>
<li>…</li>
</ul>
<p>之类的，颇有厚黑教主李宗吾大神 <code>心黑如煤碳，脸皮如城墙</code> 的风范</p>
<p>看得我直接跪了</p>
<p>书的结尾在权衡家庭与事业，就在我以为维塞尔这个老油条要让猪脚放弃婚姻时<br>不想话锋一转，冷冷的丢过来一句：<br><strong>这是你想要的吗？</strong></p>
<p>总之整本书看下来只有一个感受：</p>
<p>你说的好有道理，我竟无言以对</p>
<p>233333</p>
]]></content>
      <tags>
        <tag>Career</tag>
        <tag>Books</tag>
      </tags>
  </entry>
  <entry>
    <title>The Non-Designer&#39;s Design Book</title>
    <url>/cn/The-Non-Designer-s-Design-Book/</url>
    <content><![CDATA[<h2 id="写给码农看的射击书"><a href="#写给码农看的射击书" class="headerlink" title="写给码农看的射击书"></a>写给码农看的射击书</h2><p>这本书我看着好有启发<br>结果前几天晚上我们 CTO 拿起来翻了翻，说：画的那么丑，还好意思说是设计</p>
<p>囧囧</p>
<a id="more"></a>

<p>不过这到让我想起来大学时看的 <a href="http://book.douban.com/subject/3765227/">写给大家看的 C++书</a>，当时就感觉一般般，但豆瓣却 8+</p>
<p>所以说在正确的时间碰到正确的书真的蛮重要的</p>
<p>当时我从 <code>C</code> 跳到 <code>C++</code> 已经有一段时间了，<code>MFC</code> 也在用，所以大概算不上 <em>大家</em> 了，没什么启发也是正常的</p>
<p>关于这本书，个人感觉其目的倒不是把你调教成高手，而是针对<strong>从来没留意过设计</strong>或者<strong>想入门又不知如何入手的童鞋</strong></p>
<p>所以里面的用例都是 <strong>没有设计</strong> 和 加了点<strong>基本的设计元素</strong> 的对比，自然不入高手的眼了</p>
<ol>
<li>四大原则：</li>
</ol>
<ul>
<li>亲密性</li>
<li>对齐</li>
<li>重复</li>
<li>对比</li>
</ul>
<ol start="2">
<li>色彩</li>
</ol>
<ul>
<li>互补</li>
<li>三色组</li>
<li>分裂互补三色组</li>
<li>类似色</li>
<li>暗色和亮色</li>
</ul>
<ol start="3">
<li>字体</li>
</ol>
<ul>
<li>Oldstyle</li>
<li>Modern</li>
<li>Slab serif</li>
<li>Sans serif</li>
<li>Script</li>
</ul>
<p>这些基本点，没做过设计的人，平时可能留意到，但没自成体系</p>
<p>人类大脑就是一旦知道某样东西，就没法回到或模拟不知道时的状态，此为<strong>知识的诅咒</strong>，这也是开篇所述的 “约书亚树”</p>
<p>所以布吉岛设计的童鞋赶紧开卷啊</p>
]]></content>
      <tags>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>Never Expected</title>
    <url>/cn/Never-Expected/</url>
    <content><![CDATA[<h1 id="万万没想到"><a href="#万万没想到" class="headerlink" title="万万没想到"></a>万万没想到</h1><h2 id="一步赶不上意味着步步赶不上"><a href="#一步赶不上意味着步步赶不上" class="headerlink" title="一步赶不上意味着步步赶不上"></a>一步赶不上意味着步步赶不上</h2><a id="more"></a>

<h4 id="常见思维误区"><a href="#常见思维误区" class="headerlink" title="常见思维误区"></a>常见思维误区</h4><p>这个平时看心理学书都基本提到过</p>
<h4 id="如何逆袭"><a href="#如何逆袭" class="headerlink" title="如何逆袭"></a>如何逆袭</h4><p>改变规则 disagreeableness</p>
<h4 id="Willpower"><a href="#Willpower" class="headerlink" title="Willpower"></a>Willpower</h4><ul>
<li>可训练的肌肉</li>
<li>美女</li>
<li>口头禅</li>
</ul>
<h4 id="1W-小时"><a href="#1W-小时" class="headerlink" title="1W 小时"></a>1W 小时</h4><p>老虎伍兹一旦被打扰，立即中断动作，这在高手看来无疑是惊骇的</p>
<p>刻意的训练无疑是枯燥的，我之前认为的可以<strong>玩中学</strong>其实是在比较肤浅的阶段，即：娱乐</p>
<p>还好下面又说道：<strong>兴趣</strong> 可以抵消这种枯燥</p>
<p>并且基因有着：</p>
<blockquote>
<p>Experience Producing Drive theory</p>
</blockquote>
<p>目前《自私的基因》看了小半本，原来还有个理论</p>
<p>书中有段话，解释了我一直来的困惑，因为我发现无论如何努力，都和很小就开始的人有很大的差距，即我已输在了起跑线上：</p>
<blockquote>
<p>到 18 岁，第二组比第一组少练了 2000 多个小时——现在他们一样努力，可是已经晚了。音乐如此，体育（编程）也是如此，一步赶不上就意味着步步赶不上。</p>
</blockquote>
<!--more-->

<h4 id="科学"><a href="#科学" class="headerlink" title="科学"></a>科学</h4><ul>
<li>有限制的想象</li>
<li>解释 + 预测</li>
</ul>
<h4 id="思维密集度-准备时间-阅读时间"><a href="#思维密集度-准备时间-阅读时间" class="headerlink" title="思维密集度 = 准备时间/阅读时间"></a>思维密集度 = 准备时间/阅读时间</h4><h4 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h4><ul>
<li>toss skim read</li>
<li>narrow | broad framing</li>
<li>笔记</li>
</ul>
<p>其实看过《如何阅读一本书》后，就打算把书看两遍，但是一直没有实施，幻想着自己都能记那种感觉（很多时候看书不是记住知识）了<br>这本书决定开始实施，果然第二遍又发现不少遗漏点</p>
<h4 id="夺魁者本色"><a href="#夺魁者本色" class="headerlink" title="夺魁者本色"></a><a href="http://www.geekonomics10000.com/829">夺魁者本色</a></h4><ul>
<li>竞争- 睾酮 - 无名指长</li>
<li>Warriors - Worriers</li>
<li>压力 - COMT（快|慢酶）</li>
<li>finite - infinite game</li>
<li>The evolution of overconfidence</li>
</ul>
<p>这个之前在博客上看到过<br>很明显我是 Worriors，比较适合无限回合制游戏，不适合打爆发<br>平时应该尽量压着打，关键时刻减压</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>体力 - 及时反馈<br>脑力 - 自由空闲</p>
<p>别和熟人合伙？（Youtube 为雅虎重聚，是个反例，不过红杉确实是弱联系）</p>
<p>转世处于科学无法解释的状态</p>
<p>集体想象力</p>
]]></content>
      <tags>
        <tag>Tech</tag>
        <tag>Books</tag>
      </tags>
  </entry>
  <entry>
    <title>What I talk about when I talk about running</title>
    <url>/cn/What-I-talk-about-when-I-talk-about-running/</url>
    <content><![CDATA[<p>书中重头至尾弥漫这一种苍老的气息<br>对于时间的流逝，肉体能力的下降，却又无可奈何</p>
<p>与贸然抵抗，坚持不服老不同是的，作者逐渐接受这个事实，并以此为规则应对</p>
<p>很多我好奇的问题，作者也反思过并且更加深入</p>
<p>这大概就是：</p>
<blockquote>
<p>I’m the kind of person who likes to be by himself.</p>
</blockquote>
<a id="more"></a>

<hr>
<blockquote>
<p>I stop every day right at the point where I feel I can write more. Do that, and the next day’s work goes surprisingly smoothly. I think Ernest Hemingway did something like that. To keep on going, you have to keep up the rhythm. This is the important thing for longCterm projects.</p>
</blockquote>
<blockquote>
<p>I’m the type of person who doesn’t find it painful to be alone. I find spending an hour or two every day running alone, not speaking to anyone, as well as four or five hours alone at my desk, to be neither difficult nor boring.</p>
</blockquote>
<blockquote>
<p>I ran a bar, so I learned the importance of being with others and the obvious point that we can’t survive on our own.</p>
</blockquote>
<blockquote>
<p>The clouds are mere guests in the sky that pass away and vanish, leaving behind the sky.</p>
</blockquote>
<blockquote>
<p>it’s precisely because people are different from others that they’re able to create their own independent selves.</p>
</blockquote>
<blockquote>
<p>I had to give it everything I had. If I failed, I could accept that. But I knew that if I did things halfheartedly and they didn’t work out, I’d always have regrets.</p>
</blockquote>
<blockquote>
<p>I only began to enjoy studying after I got through the educational system and became a soCcalled member of society.</p>
</blockquote>
<blockquote>
<p>We’d closed the club, so we also decided that from now on we’d meet with only the people we wanted to see and, as much as possible, get by not seeing those we didn’t. We felt that, for a time at least, we could allow ourselves this modest indulgence.</p>
</blockquote>
<blockquote>
<p>It was my real schooling. But you can’t keep up that kind of life forever. Just as with school, you enter it, learn something, and then it’s time to leave.</p>
</blockquote>
<blockquote>
<p>I’m struck by how, except when you’re young, you really need to prioritize in life, figuring out in what order you should divide up your time and energy. If you don’t get that sort of system set by a certain age, you’ll lack focus and your life will be out of balance</p>
</blockquote>
<blockquote>
<p>In other words, you can’t please everybody</p>
</blockquote>
<blockquote>
<p>Life just isn’t fair, is how it used to strike me. Some people can work their butts off and never get what they’re aiming for, while others can get it without any effort at all.</p>
</blockquote>
<blockquote>
<p>It suits me. Or at least because I don’t find it all that painful.</p>
</blockquote>
<blockquote>
<p>The most important thing we ever learn at school is the fact that the most important things can’t be learned at school</p>
</blockquote>
<blockquote>
<p>while they’re getting by on these, they may actually discover real, hidden talent within them</p>
</blockquote>
<blockquote>
<p>I’ve always done whatever I felt like doing in life. People may try to stop me, and convince me I’m wrong, but I won’t change.</p>
</blockquote>
<blockquote>
<p>My own individual, stubborn, uncooperative, often selfCcentered nature that still doubts itself—that, when troubles occur, tries to find something funny, or something nearly funny, about the situation.</p>
</blockquote>
<blockquote>
<p>This takes time, of course, but sometimes taking time is actually a shortcut.</p>
</blockquote>
]]></content>
      <tags>
        <tag>Books</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS CI (Jenkins + Phabricator + Slack)</title>
    <url>/cn/iOS-CI-Jenkins-Phabricator-Slack/</url>
    <content><![CDATA[<p><code>shell</code> 里 <code>brew install jenkins</code><br>然后 <code>jenkins</code> 启动，牛腩器中输入 127.0.0.1:8080 跳坑</p>
<p>Jenkins 里 <code>xcode</code> 相关插件装上<br>步骤别的博客都有，Google _ios ci 持续集成_，比如：</p>
<ul>
<li><a href="http://www.itiger.me/?p=30">Jenkins+Github+Testflight 在 Mac 下搭建持续集成环境</a> ，</li>
<li><a href="http://www.jianshu.com/p/63073573e2ee">iOS 项目持续集成之 Travis CI</a></li>
</ul>
<a id="more"></a>

<p>版本可能旧一点，但能脑补上</p>
<p>我们这用的 Phabricator，由于是 iOS，放在本地 Mac 上而非服务器，所以私钥配好就行了，Jenkins 和 Phabricator 回调交互啥的就不管了</p>
<p>另外主要遇到几个问题：</p>
<h3 id="jenkins-plugins-slack-ActiveNotifier-hudson-model-listeners-npe"><a href="#jenkins-plugins-slack-ActiveNotifier-hudson-model-listeners-npe" class="headerlink" title="jenkins.plugins.slack.ActiveNotifier hudson.model.listeners npe"></a>jenkins.plugins.slack.ActiveNotifier hudson.model.listeners npe</h3><p>test 推送消息却好好的<br>弄了俩小时也不知怎么回事，睡一觉第二天正常了…</p>
<p>貌似知道原因了，<em>Project Channel</em> 那里不能为空</p>
<h3 id="ResourceRules-plist"><a href="#ResourceRules-plist" class="headerlink" title="ResourceRules.plist"></a>ResourceRules.plist</h3><p>第一天 提示 ResourceRules.plist 不对， 于是在工程和 Jenkins 配置里都加了这个<br><code>Custom xcodebuild arguments $(SDKROOT)/ResourceRules.plist</code></p>
<p>结果第二天提示找不到 ResourceRules.plist，Jenkins 里删掉这个反而 OK 了，真奇葩</p>
<h3 id="iPhone-Developer-no-identity-found"><a href="#iPhone-Developer-no-identity-found" class="headerlink" title="iPhone Developer: no identity found"></a>iPhone Developer: no identity found</h3><p><code>swift-stdlib-tool failed with exit code 1</code></p>
<p>去 developer.apple.com 下载了各种证书，都不管用<br>实在没办法，直接用 xcode 打开了 <code>~/.jenkins/jobs/****</code> 下面的工程，想做个对比，结果发现 keychain 里多出来个证书，然后就 success 了…</p>
<hr>
<p><del>另外企业账号还没买，Jenkins 没开账号系统，继续等坑</del></p>
<h3 id="DUNS-邓白氏码"><a href="#DUNS-邓白氏码" class="headerlink" title="DUNS(邓白氏码)"></a>DUNS(邓白氏码)</h3><p>之前企业账号一直卡在这里，苹果邮件迟迟没回应，所以一定要去电话苹果客服，一两天就 OK 了</p>
<h3 id="bundle-identifier"><a href="#bundle-identifier" class="headerlink" title="bundle identifier"></a>bundle identifier</h3><p>之前 company 账号中 .alpha .beta 占用掉了，企业账号这里无法创建相同的证书，只好<em>删除原来账号里</em> 或 <em>改 ID</em></p>
<p>结果删除时发现需要 app 需要是其中几个状态，官方文档：<a href="https://developer.apple.com/library/mac/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/TransferringAndDeletingApps.html">TransferringAndDeletingApps</a></p>
<p>之前 beta 作为 testflight，并没上传 AppStore，Email 苹果，回复：</p>
<blockquote>
<p>Currently, your app does not have at least one approved version.</p>
</blockquote>
<p>…<br>只好改了 ID</p>
<h3 id="over-the-air-distribution"><a href="#over-the-air-distribution" class="headerlink" title="over the air distribution"></a>over the air distribution</h3><p>万事俱备了，赶紧导出，结果发现 Xcode 6 之后，导 ipa 只有一个 .ipa 没有配套的 .plist，要自己手写…（还好 Jenkins 还能自动生成），大致长这样的：<a href="https://gist.github.com/leihao0/f292d65163b26a2169d4">plist</a> ($ $ 里对应的改一下)</p>
<p>然后<code>python -m SimpleHTTPServer</code>，iPhone 上 Safari 打开，结果… 还是不行…</p>
<p>后来发现服务器必须是 https 的…</p>
<h3 id="build-number"><a href="#build-number" class="headerlink" title="build number"></a>build number</h3><p><code>targets -&gt; Build Phases -&gt; + New Run Script Phase</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">buildNumber=$(/usr/libexec/PlistBuddy -c &quot;Print CFBundleVersion&quot; &quot;$&#123;PROJECT_DIR&#125;/$&#123;INFOPLIST_FILE&#125;&quot;)</span><br><span class="line">buildNumber=$(($buildNumber + 1))</span><br><span class="line">/usr/libexec/PlistBuddy -c &quot;Set :CFBundleVersion $buildNumber&quot; &quot;$&#123;PROJECT_DIR&#125;/$&#123;INFOPLIST_FILE&#125;&quot;</span><br></pre></td></tr></table></figure>

<p>这样 scheme 是 release 的时候，build 会自动 +1</p>
<p>PS:<br>其实这个可以写到 Jenkins build 步骤的 shell 中，然后 push 到 origin/master，再把 *.ipa 上传到服务器</p>
<h3 id="OS-X-Server"><a href="#OS-X-Server" class="headerlink" title="OS X Server"></a>OS X Server</h3><p>坑，有时间整理一个</p>
<h3 id="DistributionProvisioningProfiles"><a href="#DistributionProvisioningProfiles" class="headerlink" title="DistributionProvisioningProfiles"></a>DistributionProvisioningProfiles</h3><p>直接把下载的 <code>*. mobileprovision</code>，写路径发现是不行的，只好自己手动打包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xcodebuild -exportArchive -exportFormat IPA -archivePath &quot;$Yourarchive&quot; \</span><br><span class="line"> -exportPath imeican-Beta-xcodebuild.ipa \</span><br><span class="line"> -exportProvisioningProfile $YourDistributionProvisioningProfiles</span><br></pre></td></tr></table></figure>

<p>总结：<br>一路走来一路坑</p>
]]></content>
      <tags>
        <tag>Programming</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Painless Acupuncture</title>
    <url>/cn/Painless-Acupuncture/</url>
    <content><![CDATA[<h1 id="无痛针灸"><a href="#无痛针灸" class="headerlink" title="无痛针灸"></a>无痛针灸</h1><p>有次在魔法集团粢饭，聊到中医，发现竟有 80% 的 colleagues 认为中医是骗人的，小法师惊呆了</p>
<p>后来和红帽的一个魔法师聊到这个，小法师认为治病犹如行军打仗，</p>
<p>双方战力：我 5 敌 8</p>
<a id="more"></a>

<p>西医直接杀病毒，把敌方战力削减至 3<br>而中医如加光环，把我方战力提升至 10</p>
<p>就结果上来看，打完之后都剩 2，所以最好不要偏信某一种方案</p>
<p>至于不信的，一方面可能是，骗子太多，比如上过几次当之后，就不会再相信爱情了<br>另一方面，医学有其局限性，在西医比较完善的今天，尚会误诊癌症，何况还有些病尚无有效的治疗手段<br>还有就是可能大众对中医理论有种误解，就如常常奇怪学魔法的孩纸居然连法器都不会修</p>
<p>在魔法学院的第三年小法师得了一场大病，不想因祸得福，随之参悟了 <a href="http://leihao0.github.io/2012/05/28/%E4%BA%BA%E4%BD%93%E7%94%9F%E6%80%81%E5%B9%B3%E8%A1%A1%E8%AE%BA/">人体生态平衡论</a> ，大彻大悟后就没生过什么病<br>平时感冒神马的小恙，用牛刀杀鸡，直接祭出<a href="http://book.douban.com/subject/3843957/">黄帝内经</a>之《素问·四气调神大论》</p>
<blockquote>
<p>是故圣人不治已病治未病，不治已乱治未乱，此之谓也。夫病已成而后药之，乱已成而后治之，譬犹渴而穿井，斗而铸锥，不亦晚乎</p>
</blockquote>
<p>在病欲发而有先兆时，算好提前量消灭掉</p>
<p>但之前也说过，小法师由于职业问题，腰和颈椎都有问题，比如 <a href="http://book.douban.com/subject/25981248/">魔法师健康指南</a> 里的 K-W 测试，就无法通过，瑜伽里的摇摆式做不到</p>
<p>但小法师又懒，无法坚持锻炼，更别说像春上春树那样一跑 几十年，所以只有寄希望于针灸了</p>
<hr>
<p>确切来说，针灸分为 针 和 灸，但大众印象中常常以为针灸都是扎针，也就还这样描述吧</p>
<p>笛卡儿在 <a href="http://book.douban.com/subject/1071023/">谈谈方法</a> 中曾把研究问题的方法分四个步骤，其中第一步是：</p>
<blockquote>
<p>永远不接受任何我自己不清楚的真理，就是说要尽量避免鲁莽和偏见，只能是根据自己的判断非常清楚和确定，没有任何值得怀疑的地方的真理。就是说只要没有经过自己切身体会的问题，不管有什么权威的结论，都可以怀疑。这就是著名的“怀疑一切”理论。例如亚里士多德曾下结论说，女人比男人少两颗牙齿。但事实并非如此。</p>
</blockquote>
<p>由于曾喝过药，但没什么改善，所以小法师对于草药，也是的不怎么信的</p>
<p>但是经络，确切的说是 穴位，是很容易感受的到的<br>比如合谷（虎口）、肩井，自己捏一下，再捏下别的地方，就知道不是普通的肉<br>而 经络 和 印度瑜伽的三轮七脉 冲突，所以又是小法师是将信将疑的</p>
<p>下针之前的很多时候，小法师曾模拟过整个过程：<br>只见那 2.5 寸的不锈钢毫针毫不费力的穿透 表皮 -&gt; 真皮 -&gt; 皮下组织，由于认穴不准，不幸触碰到了 动|静 脉，小法师疼的小手一抖，挑断了旁边的自主运动神经，残废着度过了余生…</p>
<p>马克·吐温晚年时感叹道</p>
<blockquote>
<p>我的一生大多在忧虑一些从未发生过的事，没有任何行为比无中生有的忧愁更愚蠢了</p>
</blockquote>
<p>小法师后来被中医大学的一个小伙伴扎了几次没啥大事还可以蹦蹦跳跳后，猜测可能运动神经并不像之前想象的那样如同光纤，只有一根，断了就废了，而是有许多根，况且生物体还有自我修复的能力</p>
<p>但小伙伴住的远，不能常来，每次都留一些医院的针，于是小法师就自己对自己下手了</p>
<p>当然小伙伴这种挖社会主义墙角的行为，应该严厉禁止。但相比另外一个为了不用自家电，去买了一个特大号充电宝，每次回来都把本本充满电，把小法师惊的目瞪口呆的人民警察通知，又不算什么了</p>
<hr>
<p>但还有个问题——小法师怕疼<br>这也是他天天拖着不去体检的原因</p>
<p>于是小法师就先搬出了<a href="http://book.douban.com/subject/4665276/">真气运行法</a> ，妄图通过打通任督二脉一劳永逸的解决这个问题，还傻傻的写了 <a href="http://leihao0.github.io/2014/01/08/%E7%9C%9F%E6%B0%94%E8%BF%90%E8%A1%8C%E6%B3%95-%E6%89%93%E9%80%9A%E5%B0%8F%E5%91%A8%E5%A4%A9%E8%AE%B0%E5%BD%95/">日志</a> 去记录整个过程，可惜当气卡在尾闾上不去后，只能先缓一缓</p>
<p>但颈椎却又不能缓，一来已影响到睡眠，二来生怕自己</p>
<blockquote>
<p>其次治六府，其次治五藏。治五藏者，半死半生也。</p>
</blockquote>
<p>元旦是夜，小法师在床上辗转反侧，便在这万籁俱寂的一刹那间，记起了叔本华<a href="http://book.douban.com/subject/1004699/">作为意志和表象的世界</a>中的几句话：</p>
<blockquote>
<p>原来凡是存在着的，就只是对于主体的存在。</p>
</blockquote>
<p>他在诵读这几句话时，始终不明其中之理，这时候猛地里想起，颈肩腰腿病区别于脏器方面的疾病，难以根治，不规范的治疗或康复训练，只会出现病情反复甚至疼痛加剧的情况，但照着《意志和表象的世界》中的要义，似乎疾病是仅仅对“我”来说存在的<br>想到此处，小法师赶紧爬起来翻书，果然后面又说道：</p>
<blockquote>
<p>身体每次受到外来的作用，这个作用也立刻而直接地刺激我的意志…并且反过来也是一样，意志的每一剧烈激动，也就是感动和激情，都震撼着身体，阻挠身体机能的运行</p>
</blockquote>
<p>小法师想到此处，心下豁然有悟，盘膝坐下，依照《真气运行》所示的法门调息<br>然后把思维集中成一束光，形成毫针的样纸，缓缓的扎入大椎，果不其然，周边肌肉群渐渐松弛下来了<br>之后小法师又取 风池、风府（这不是治感冒的吗？）、膏肓（病入膏肓，真的是个穴道哎）<br>扎针完毕后，又想象光针慢慢的散发热量（<a href="http://leihao0.github.io/2013/09/11/%E6%B8%A9%E9%92%88%E7%81%B8/">温针灸</a>）</p>
<p>慢慢的，小法师安然入梦了</p>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Learn English</title>
    <url>/cn/How-to-Learn-English/</url>
    <content><![CDATA[<h1 id="透析大法"><a href="#透析大法" class="headerlink" title="透析大法"></a>透析大法</h1><p>小法师很早就想看看自己的精灵语水平如何<br>虽然在魔法学院毕业前，拿到了大天朝认证的 CET6<br>无奈此证书无法与真实水平对应</p>
<p>之前小法师对待精灵语，只有一招——背诵 NCE<br>这也帮助小法师顺利的通过了天朝认证</p>
<a id="more"></a>

<p>但书读百遍其义自见并非通用的准则，小法师每篇文章诵读不下几百遍，可仿佛从来没才脑子过一样<br>比如在高中时，在高考的鸭梨下，还因背不出被罚站整节课数次</p>
<p>冥冥之中自有天意，大约在一年前，小法师无意中得到一本真经 —— <a href="http://book.douban.com/subject/3748247/">透析大法</a></p>
<p>上当受骗多了，最初小法师以为又是 <a href="http://book.douban.com/subject/1008501/">千万别</a> 这种伪科，而 <em>漏屋</em> 所著的一篇<a href="http://book.douban.com/subject/11522125/">神贴</a>，虽然点出了要诀，但是没有给出与之对应的修习方案</p>
<p>而 透析大法 过犹而无不及，堪称 从坑到神 系列的典范，不仅详尽的写出了每个等级应该修炼神马，甚至可能的关隘也有所涉及</p>
<p>然后小法师就修炼了起来</p>
<hr>
<p>一年后…</p>
<p>不得不说小法师修炼进度实在缓慢，Gap Year 中刚过了 初阶 <a href="http://book.douban.com/subject/4201317/">Introductory Phonetics</a>（修行笔记参见 <a href="http://book.douban.com/review/6300403/">三观尽毁，细细数来</a>）</p>
<p>之后的 中阶 —— ESL（慢速），小法师耐着性质听完前 80，便忍不住跳科技了</p>
<p>至于中高阶的 APW Podcast，小法师随便看了看，听了听，就算练完了</p>
<p>然后又把次高阶 AAC 刷掉，强行修炼最高阶的 SSS</p>
<p>当然这些就注定了 <strong>然并卵</strong>…</p>
<hr>
<p>大约在魔法学院的时候，小法师就听说西方有种名为 IELTS 的测试，从结果上来看，本土精灵们都会取得不错的徽章，小法师便有了一试的心</p>
<p>但一查费用惊了个呆，遥想 CET6 百分之一的 天朝币就可参加，可见其分量之重</p>
<p>所以小法师打定主意要好好准备，把钱用在刀刃上，不做无谓牺牲，不送经验</p>
<p>不想通胀之烈猛于虎也，此费年年上涨，大有破 2 的趋势</p>
<p>前一阵子小法师看到小伙伴报了名，加上他的一句“拖延税”，咬咬牙一并报了</p>
<hr>
<p>测试地址十分理想，就在小法师现任魔法集团隔壁</p>
<p>小法师报名时，小算盘打的很好——考完了还可回公司吃顿饭，真是棒棒哒</p>
<p>to be continued</p>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>Blue Sky and Sea</title>
    <url>/cn/Blue-Sky-and-Sea/</url>
    <content><![CDATA[<h1 id="碧水蓝天"><a href="#碧水蓝天" class="headerlink" title="碧水蓝天"></a>碧水蓝天</h1><p>遥远的天际线中出现两个黑点，慢慢扩大后，依稀是两个人，哦，两名魔导师<br>他们的飞行速度极快，而支持这样的速度，可见俩人的魔力之高</p>
<a id="more"></a>

<p>只听魔导师 α 对 β 说，这样加速，即使赶上 Deadline，魔力也所剩无几，不如我们压抑魔力值，走 Stargate 吧<br>β 看了 α 一眼，继续向前飞行，良久，缓缓说道，万一失败了呢<br>α 不禁打了个寒颤，也不知是不是受高空太冷的刺激</p>
<p>接住了，β 说完扔了一瓶 soylent 给 α，然后自己也默默的喝下补充魔力</p>
<p>所谓 StarGate，是一种远距离传送的工具，虽然魔法师们也可通过并且不费吹灰之力，但无奈的是各地 Stargate 已被麻瓜们占领，并且进入前，值岗人员会用一个类似圣火令的黑曜石检测通过者是否携带杀伤性武器<br>虽然法师们 99% 是善良之辈，但他们随身携带的魔法石却会让圣火令尖叫个不停，到达魔导师级别的法师更是全身遍布魔法，即使不带任何道具，也会激发黑曜石<br>若不及时撤离甚至孤注一掷硬闯，几分钟后国家级武装力量便会出现，把你抓住关小黑屋，自此就人间蒸发了</p>
<p>接近城区时，他们迅速的降低至海平面 1500 以下，以免被误认作不明飞行物而被帝都的导弹防御系统击落</p>
<hr>
<p>帝都西北东三面环山<br>西部山地，为<a href="https://www.baidu.com/s?wd=%E5%A4%AA%E8%A1%8C%E5%B1%B1%E8%84%89&hl_tag=textlink&tn=SE_hldp01350_v6v6zkg6">太行山脉</a>的东北余脉<br>北部、东北部山地，为<a href="https://www.baidu.com/s?wd=%E7%87%95%E5%B1%B1%E5%B1%B1%E8%84%89&hl_tag=textlink&tn=SE_hldp01350_v6v6zkg6">燕山山脉</a>的西段支脉。<br>整体呈一个半盆地地形</p>
<p>远远的看到每个山顶上，大部分魔法师们已经就位<br>接近午时，刻画出的巨大魔法阵隐约闪现</p>
<blockquote>
<p>其时，日影下照，如万顷琉璃<br>—— 明·凌蒙初《初刻拍案惊奇》卷二十八</p>
</blockquote>
<p>山脉呈现出一派帝王之相</p>
<p>α β 分别飞向自己的岗位就绪待命</p>
<hr>
<p>正午已到，黄沙漫天，滚滚而来</p>
<p>此时，最高的山峰上，Release 大魔导师在天空中划出了一串神秘的咒文<br>一道闪亮的七色光柱直冲天际，各峰顶的魔导师们接到信号后，纷纷用魔杖指向天空，用魔力凝结出一段咒语：<br> <a href="https://en.wikipedia.org/wiki/Asia-Pacific_Economic_Cooperation">Asia-Pacific Economic Cooperation</a></p>
<p>一时间，帝都周围的山脉上缓慢升起一张如水般透明的巨大的 <a href="https://en.wikipedia.org/wiki/HEPA">HEPA</a><br>自然之力与魔法召唤物接触的一刹那，<a href="https://en.wikipedia.org/wiki/Command-line_interface">Shell</a>上如雨时的湖面，泛起了一层层涟漪</p>
<p>至此，在魔导师们魔力耗尽之前</p>
<p>穹顶之下，天高云淡、碧水蓝天</p>
<hr>
<p>当然，小法师等级太低，除非带了装备，不然平时 Stargate ，只要交了涨价后的费用，都是随便过<br>所以上面那些事情和他没有任何关系，并且对于此事是丝毫不知情的</p>
<p>只是小法师感觉最近这些天，天空特别特别的蓝，空气中弥漫着大量的水气<br>仰望苍穹，碧空如洗，让人心醉</p>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>Xcode plugins faild to be loaded after updated</title>
    <url>/cn/xcode-plugins-faild-to-be-loaded-after-update/</url>
    <content><![CDATA[<p>You can type the command in terminal after Xcode updated</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins -name Info.plist -maxdepth 3 | xargs -I&#123;&#125; defaults write &#123;&#125; DVTPlugInCompatibilityUUIDs -array-add `defaults <span class="built_in">read</span> /Applications/Xcode.app/Contents/Info.plist DVTPlugInCompatibilityUUID`</span><br></pre></td></tr></table></figure>

<p>this will added your new Xcode UUID to <code>DVTPlugInCompatibilityUUID</code></p>
<a id="more"></a>

<p>But that is a risky way, for instance my Xcode 6.3.2 always crash after I ran this command without brain.</p>
<p>So I had to open the folder <code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins</code> and deleted some suspicious plugins.</p>
<p>Of course also you can check the <code>tail -f /var/log/system.log</code>, and found which plugin cause the Xcode crash exactly in <code>~/Library/Logs/DiagnosticReports/Xcode_$time_$macbookname.crash</code></p>
<p>Finally，with my best wishes :)</p>
]]></content>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>How to update homebrew daily</title>
    <url>/cn/How-to-update-homebrew-daily/</url>
    <content><![CDATA[<h1 id="How-to-update-homebrew-daily"><a href="#How-to-update-homebrew-daily" class="headerlink" title="How to update homebrew daily"></a>How to update homebrew daily</h1><p><a href="https://gist.github.com/leihao0/26a056bdf830e766e3af">Example</a></p>
<p>The <code>$Path</code> must be your files full path</p>
<p>It’s weird that <code>launchctl start</code> didn’t work, so I had to added</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;key&gt;RunAtLoad&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;true&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>It will run immediately after the plist be loaded.</p>
<a id="more"></a>

<hr>
<p><a href="https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html">CreatingLaunchdJobs</a><br>Apple’s document is so specific, so I just wrote some mistakes that I made</p>
<h3 id="Be-careful-of-the-Lable"><a href="#Be-careful-of-the-Lable" class="headerlink" title="Be careful of the Lable"></a>Be careful of the <strong>Lable</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;key&gt;Label&lt;&#x2F;key&gt;</span><br><span class="line">   &lt;string&gt;com.example.hello&lt;&#x2F;string&gt;</span><br></pre></td></tr></table></figure>

<p>first I thought that this was unique, so I changed it</p>
<p>but when I loaded <code>launchctl load launchd.plist</code> after I finished the plist, it yeild:</p>
<blockquote>
<p>launchd.plist: Invalid or missing service identifier</p>
</blockquote>
<p>hence the <code>&lt;key&gt;</code> can not changed</p>
<h3 id="Owner"><a href="#Owner" class="headerlink" title="Owner"></a>Owner</h3><p>It’s puzzled <code>brew update</code> if the user of the runner shell was <strong>system</strong> instead of <strong>ME</strong>. So I tested by <code>users</code>, luckily, It was <strong>ME</strong></p>
<p>But if you want to log your logs, it’s better to written in your personal document, after all, the owner of the <code>/var/log/</code> is <code>root wheel</code>, you’ll get the <code>Permission denied</code></p>
<h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><p>Just write down <code>#!/usr/local/bin/zsh</code> (you can get yours by <code>which zsh</code>) at the beginning of the *.sh</p>
<h3 id="chmod-a-x-launchd-sh"><a href="#chmod-a-x-launchd-sh" class="headerlink" title="chmod a+x $launchd.sh"></a>chmod a+x $launchd.sh</h3><p>Finally don’t forget <code>x</code></p>
]]></content>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Homebrew cannot run C compiled programs</title>
    <url>/cn/homebrew-cannot-run-C-compiled-programs/</url>
    <content><![CDATA[<p>I can’t resist the temptation to upgrade my Mac to 10.11, but several tragedies happened, such as:</p>
<ul>
<li>Proxifier - could not initialize Proxifier kext ( I already sent an email to the author, and replied that they are working to find a real reason of this error.)</li>
<li>istat menus - I never see it again, but can’t watching the network traffic which seems not a big deal</li>
<li>cleanmymac - I download the newest version as it guided and sadly found that they are the same version</li>
</ul>
<a id="more"></a>

<p>but brew - configure: error: cannot run C compiled programs.</p>
<p>so, <code>brew doctor</code> , it shows:</p>
<blockquote>
<p>Warning: You are using OS X 10.11.<br>We do not provide support for this pre-release version.<br>You may encounter build failures or other breakage.</p>
</blockquote>
<blockquote>
<p>Warning: Your Xcode (6.3.2) is outdated<br><strong>Please update to Xcode 7.0.</strong><br>Xcode can be updated from the App Store.</p>
</blockquote>
<p>Then setup my Xcode-beta as the system default Xcode</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo xcode-select -switch /Applications/Xcode-beta.app/Contents/Developer/</span><br></pre></td></tr></table></figure>

<p>:)</p>
]]></content>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Xcode 6.x cannot run on EI Capitan</title>
    <url>/cn/Xcode-6-x-cannot-run-on-EI-Capitan/</url>
    <content><![CDATA[<p>I watched WWDC and updated OS X to EI Capitan(10.11).<br>Everything seemed fine until I opened Xcode:</p>
<a id="more"></a>

<blockquote>
<p>You can’t use this version of the application “Xcode” with this version of OS X.<br>You have “Xcode” 6.x.</p>
</blockquote>
<p>Swift 2.0 is awesome, but according to Apple, if you want to submit an app which written by 2.0 to App Store, you need to wait until September.</p>
<p>Fortunately I found a hack command:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/Applications/Xcode.app/Contents/MacOS/Xcode &lt; /dev/null &amp;&gt; /dev/null &amp;</span><br></pre></td></tr></table></figure>

<p>Which means you run Xcode from <code>/dev/null</code> and redirect output &amp; error output to <code>/dev/null</code> in background.</p>
<p>Everything perfect in past several weeks.</p>
]]></content>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Calculating God</title>
    <url>/cn/Calculating-God/</url>
    <content><![CDATA[<ol>
<li>there is no design document at all</li>
<li>totally depending on reverse engineering with helpless APIs</li>
<li>an unstable, crash frequently system, the latest crash happened 65 millions years ago</li>
<li>dead codes are everywhere</li>
<li>prototype sourcecode and runnable binary file are all gone, only some unreliable legends</li>
<li>a mass of ctrl c + ctrl v</li>
<li>3 block code severe lovers</li>
<li>zombie threads</li>
<li>a tyro of GA(Genetic Algorithm)</li>
<li>nobody saw the retired god after IPO</li>
</ol>
]]></content>
      <tags>
        <tag>Books</tag>
      </tags>
  </entry>
  <entry>
    <title>How to batch reverse the First and Last names in Mac OS X Contacts</title>
    <url>/cn/how-to-batch-reverse-First-and-Last-names-in-Mac-OS-X-Contacts/</url>
    <content><![CDATA[<p>I was wondering why the family name was always behind the given name in my Contacts, no matter when I check my iPhone or Mac. First I believe some configs was not correct, until I found I messed up the First and Last name.</p>
<a id="more"></a>

<p>In fact, given name was known as the first name, which was opposite in China.</p>
<p>Althought only dozens of people in my Contacts, but I still don’t want to edit them manually as an iOS programmer →_→</p>
<p>So, just open Xcode and new an <code>OS X Application -&gt; command line tool</code> and paster the snippet below to your <code>main.swift</code>, then <code>cmd + R</code> …</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> AddressBook</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> addressBook = <span class="type">ABAddressBook</span>.sharedAddressBook()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> firstKey = <span class="string">&quot;First&quot;</span></span><br><span class="line"><span class="keyword">let</span> lastKey = <span class="string">&quot;Last&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> people <span class="keyword">in</span> addressBook.people() &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> p = people <span class="keyword">as</span>? <span class="type">ABPerson</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> f: <span class="type">AnyObject?</span> = p.valueForKey(firstKey)</span><br><span class="line">        <span class="keyword">let</span> l: <span class="type">AnyObject?</span> = p.valueForKey(lastKey)</span><br><span class="line">        p.setValue(l, forKey: firstKey)</span><br><span class="line">        p.setValue(f, forKey: lastKey)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addressBook.save()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Adding Slack User-rule to Shadowsocks</title>
    <url>/cn/Adding-Slack-User-rule-to-Shadowsocks/</url>
    <content><![CDATA[<p>Slack was always loading even if I use shadowsocks with <code>Auto Proxy Mode</code>.</p>
<a id="more"></a>

<p>I found that the domain of slack was accessible in chrome console so the real reason was <code>amazonaws</code> server was blocked.</p>
<p>Refer to <a href="https://adblockplus.org/en/filter-cheatsheet">Adblock Plus filters explained</a>, I added two rules in <code>Edit User Rule for ...</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">||global.ssl.fastly.net^</span><br><span class="line">||amazonaws.com^</span><br></pre></td></tr></table></figure>

<p>And <strong>don’t forget</strong> to click <code>update PAC from ...</code> once again, otherwise the new user rules you just added won’t take effect immediately.</p>
<p>It seems also fixed <code>trello.com</code> incidentally.</p>
]]></content>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Little tips about rewrite an iOS app</title>
    <url>/cn/Little-tips-about-rewrite-an-iOS-app/</url>
    <content><![CDATA[<p>I finished my Gap year and went to my current company last autumn.</p>
<a id="more"></a>

<p>I did’t do much as a new comer for the first month, and there was a software engineer from AMAP with 10 years experience. Everytime I had something to ask him, he explained it in the deepest level, and inspired me by rhetorical questions patiently. But at the same time, I found thousands and thousands Copy &amp; Paste lines of code in the project. Yes, I counted it by using <a href="http://cloc.sourceforge.net/">CLOC</a>, and found that it’s almost 20 thousands lines in total.</p>
<p>As Objective-C is a excessively long and prolix programming language( which means that your have to write dozens of code to implement the same function which may only a line in Ruby 😫 ), it’s rational for the count of this project. But Copy &amp; Paste should always avoided, worse I saw global variables and magic numbers are everywhere.😰</p>
<p>It’s odd, isn’t it? If a 10 years experienced programer who can deal with pointer easily and knows computer systems deeply, why didn’t he pay any attention to the code styles. After all, we need to prepare for adding new members in the team and new features at any time.</p>
<p>He said that most of code was written by him, it’s quick to fix bugs. However, he went to a start company of his friend in next month. So he just left, and also, the anfractuosity code.😭😭😭</p>
<p>to be continued…</p>
]]></content>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Summer Ends</title>
    <url>/cn/Summer-Ends/</url>
    <content><![CDATA[<p><a href="http://music.163.com/#/song?id=26152612">Summer Ends</a><br>It’s a nice music, for summer really ends.</p>
<p>I wrote less, read less and felt bad in this year, before this, I’m in my gap year, and was productive and efficient, mind flow came up . So, I began to wonder why and try to return.</p>
<p>For I went to the gopher China in April, and meet with one IT crop. CTO, and talk to him that maybe I’m in a bottleneck period.</p>
<p>But it’s September now, the summer ends, I’ve been in Beijing for a most one year, and still trapping in this mass state.</p>
<p>I tried to figure out</p>
<a id="more"></a>

<h2 id="The-model"><a href="#The-model" class="headerlink" title="The model"></a>The model</h2><p>First, the style of living (surviving in deed) was not like Hangzhou, when I was in Hangzhou, I can rent a flat which company was nearby that I can walk to work, and I have my own bathroom in my room so one bother me. But in Beijing, if I still use the same model, I have to live in an old flat, which the building was even old than me! even worse, I have to live with neighbors, share the bathroom kitchen and all other things. So you have to pray for your neighbors are good.<br>For me, as an internal person, I just want to live alone.</p>
<p>Once I resize this cause, I rent a new flat immediately and I’ll move in the end of this month, but one year past and never came back.</p>
<h2 id="English"><a href="#English" class="headerlink" title="English"></a>English</h2><p>I read at least 10 books each month before, but for I narrowed to English edition recent months, the numbers dropped so fiercely that I hardly finished a book in one month.</p>
<p>No books makes me feel sick, and no input, no output. That’s an important reason that I stopped posting blog and The little master series. Needless to say I forced myself all new blogs have to write in English.</p>
<h2 id="Procrastination"><a href="#Procrastination" class="headerlink" title="Procrastination"></a>Procrastination</h2><p>It seems a universal problem. But after I read too much GTDs and found the healthy circle based on <a href="https://en.wikipedia.org/wiki/Polyphasic_sleep">polyphasic sleep</a>. I can do 16+ <a href="https://book.douban.com/subject/4198078/">pomodoroes</a> one day.<br>After I return to work in company, I just do what I want do, and I thought I was still efficient.</p>
<p>Even though I already outsource apply instead DIY, preparing IELTS and working hard still a big challenge to me, not only because I unknown the starting date but also my co-workers ungelivable. I have to write almost 70% codes in the main project and even to rewrote some functions off his part. I want to figure out one way to manage our new team( for right now I like a TL assistant)</p>
<p>So, all the apps that I used were return, and I feels it really improve my situation.</p>
<h2 id="Slack"><a href="#Slack" class="headerlink" title="Slack"></a>Slack</h2><p>It’s not that Slack, although I have to write some code according to it’s API in future for our CI.</p>
<p>I found something I runaround but I have to face it again in future with more effort. like hope my co-workers write more, read the translate version books, excise, etc.</p>
<p>So, I dared not hope anymore.</p>
<hr>
<p>That’s all, winter is coming.</p>
]]></content>
      <tags>
        <tag>Me</tag>
      </tags>
  </entry>
  <entry>
    <title>However, no eggs</title>
    <url>/cn/However-no-eggs/</url>
    <content><![CDATA[<p>I got the score last night and was shocked.</p>
<a id="more"></a>

<p>For these days I always check my score, but as it’s mid-autumn festival and National Day, they didn’t publish the score.</p>
<p>Three months ago, I had planned to take the exam again for the third time if I do not pass the last one. I only got a 5 on the first one, But I just wanted to gauge my real level in English. the score was totally acceptable. But for this time, even though I didn’t prepare either, I do a lot about the speaking part because I had one hour class with a foreign teacher everyday. And the last time, I didn’t even finished the second part, and for this time, I talked a lot with the examiner and made him laughed, so I think it will be at least 5+. But as the result, it’s still be 4.5.</p>
<p>For the reading and listening part, I increased them 0.5 for each, as I don’t have time to finish the second paragraph last time, it’s reasonable. But for the writing part, it’s decreased 0.5, so the total score was still 5.0.</p>
<p>It was hard for me to accepted this fact, because it not only means that my hard work was wasted but it also indicated where my actual limit is.</p>
<p>It made my sick for several hours, should I insist or re-plan?</p>
<p>According to TaiJi, I should reorder my schedule and base it on the fact, not illusion.</p>
<p>After all, I have to achieve goals step by step as a Diaosi.</p>
<p>But, I still need a little bit of time to heal this sorrow.</p>
<hr>
<p>PS: the title means “然并卵” in Chinese.</p>
]]></content>
      <tags>
        <tag>Me</tag>
      </tags>
  </entry>
  <entry>
    <title>How to build an iOS CI without Jenkins</title>
    <url>/cn/How-to-build-an-iOS-CI-without-jenkins/</url>
    <content><![CDATA[<p>I used Jenkins with some Xcode plugins as our iOS CI half a year ago.</p>
<p>The main function I want is to build our project daily in the middle night, and +1 on the build number, then push this commit to <code>Phabricator</code>, if any of these steps is fail, it will post a notification to <code>Slack</code>.</p>
<p>But after we are try to using <code>Carthage</code> instead of <code>CocoaPod</code>, it need to <code>Carthage update</code> before building. The Jenkins can’t run commands before building. So I tried using shell directly.</p>
<a id="more"></a>

<h2 id="update-code"><a href="#update-code" class="headerlink" title="update code"></a>update code</h2><p>First it should <code>cd</code> into the project’s folder, then checkout new commits and update new frameworks</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> $(dirname <span class="variable">$0</span>)</span><br><span class="line">git checkout master</span><br><span class="line">git reset --hard origin/master</span><br><span class="line"></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/carthage update</span><br></pre></td></tr></table></figure>

<p>then check that whether the last author is a coworker or the bot itself</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">author=$(git <span class="built_in">log</span> -1 | head -2 | tail -1 | cut -d <span class="string">&#x27; &#x27;</span> -f2)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$author</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$author</span> != <span class="string">&quot;bot&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span></span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>if it’s a coworker</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">projectName=$(find . -name <span class="string">&quot;*.xcodeproj&quot;</span> -depth 1 | cut -d <span class="string">&#x27;/&#x27;</span>  -f 2 | cut -d <span class="string">&#x27;.&#x27;</span> -f 1)</span><br><span class="line">plist=$(find <span class="variable">$projectName</span> -name <span class="string">&quot;*.plist&quot;</span> -d 1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># buildnum +1</span></span><br><span class="line">shortVersion=$(/usr/libexec/PlistBuddy -c <span class="string">&quot;Print CFBundleShortVersionString&quot;</span> <span class="string">&quot;<span class="variable">$&#123;plist&#125;</span>&quot;</span>)</span><br><span class="line">buildnum=$(/usr/libexec/PlistBuddy -c <span class="string">&quot;Print CFBundleVersion&quot;</span> <span class="string">&quot;<span class="variable">$&#123;plist&#125;</span>&quot;</span>)</span><br><span class="line">buildnum=$(expr <span class="variable">$buildnum</span> + 1)</span><br><span class="line"></span><br><span class="line">/usr/libexec/Plistbuddy -c <span class="string">&quot;Set CFBundleVersion <span class="variable">$buildnum</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;plist&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for AppleWatch</span></span><br><span class="line">WatchAppPlist=$(find WatchApp -name <span class="string">&quot;*.plist&quot;</span> -d 1)</span><br><span class="line">WatchAppExtensionPlist=$(find <span class="string">&#x27;WatchApp Extension&#x27;</span> -name <span class="string">&quot;*.plist&quot;</span> -d 1)</span><br><span class="line"></span><br><span class="line">/usr/libexec/Plistbuddy -c <span class="string">&quot;Set CFBundleVersion <span class="variable">$buildnum</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;WatchAppPlist&#125;</span>&quot;</span></span><br><span class="line">/usr/libexec/Plistbuddy -c <span class="string">&quot;Set CFBundleVersion <span class="variable">$buildnum</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;WatchAppExtensionPlist&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>Here is how to xcodebuild your ipa in the <em>build</em> folder</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">rm -rf build</span><br><span class="line"></span><br><span class="line">xcodebuild clean archive -archivePath build/<span class="variable">$YourApp</span>-Beta \</span><br><span class="line">-scheme <span class="variable">$YourAppScheme</span></span><br><span class="line"></span><br><span class="line">xcodebuild -exportArchive \</span><br><span class="line">-exportFormat ipa \</span><br><span class="line">-archivePath <span class="string">&quot;build/<span class="variable">$YourApp</span>-Beta.xcarchive&quot;</span> \</span><br><span class="line">-exportPath <span class="string">&quot;build/<span class="variable">$YourApp</span>-Beta.ipa&quot;</span> \</span><br><span class="line">-exportProvisioningProfile <span class="string">&quot;<span class="variable">$YourtProvisioningProfile</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>then you can upload your *.ipa to your server ( for instance using curl)</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">rm -rf build <span class="comment"># clean up</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># push to remote</span></span><br><span class="line">git config user.email <span class="string">&quot;bot@yourdomain.com&quot;</span></span><br><span class="line">git config user.name <span class="string">&quot;bot&quot;</span></span><br><span class="line">git commit -a -m <span class="string">&quot;<span class="variable">$buildnum</span>&quot;</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<p>How to post a message to Slack</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># post2Slack $msg</span></span><br><span class="line"><span class="function"><span class="title">post2Slack</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">	SLACK_HOSTNAME=<span class="string">&quot;hooks.slack.com&quot;</span></span><br><span class="line">	SLACK_CHANNEL=“<span class="comment">#YourChannel”</span></span><br><span class="line">	SLACK_BOTNAME=<span class="string">&quot;bot&quot;</span></span><br><span class="line">	ICON=<span class="string">&quot;:x:&quot;</span></span><br><span class="line">	SLACK_BOTEMOJI=<span class="string">&quot;:joy:&quot;</span></span><br><span class="line">	MESSAGE=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Send message to Slack</span></span><br><span class="line">PAYLOAD=<span class="string">&quot;payload=&#123;\&quot;channel\&quot;: \&quot;<span class="variable">$&#123;SLACK_CHANNEL&#125;</span>\&quot;, \&quot;username\&quot;: \&quot;<span class="variable">$&#123;SLACK_BOTNAME&#125;</span>\&quot;, \&quot;text\&quot;: \&quot;<span class="variable">$&#123;ICON&#125;</span> <span class="variable">$&#123;MESSAGE&#125;</span>\&quot;, \&quot;icon_emoji\&quot;: \&quot;<span class="variable">$&#123;SLACK_BOTEMOJI&#125;</span>\&quot;&#125;&quot;</span>;</span><br><span class="line">curl -X POST --data-urlencode <span class="string">&quot;<span class="variable">$PAYLOAD</span>&quot;</span> <span class="variable">$getThisURLInYourSlackChannel</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># post2Slack &amp;&amp; exit</span></span><br><span class="line"><span class="function"><span class="title">post2SlackAndExitWithMsg</span></span>() &#123;</span><br><span class="line">	post2Slack <span class="string">&quot;<span class="variable">$&#123;1&#125;</span>&quot;</span> &amp;&amp; <span class="built_in">exit</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>then you can combine any commands like this:</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git push origin master || post2SlackAndExitWithMsg <span class="string">&quot;git push failed&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>How to update the default ruby on Mac OS X</title>
    <url>/cn/How-to-update-the-default-ruby-on-Mac-OS-X/</url>
    <content><![CDATA[<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># I feel rbenv is easier than rvm</span></span><br><span class="line">brew install rbenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># list all the versions that rbenv support</span></span><br><span class="line">rbenv install --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># install the latest one</span></span><br><span class="line">rbenv install 2.2.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># use 2.2.3 as global ruby</span></span><br><span class="line">rbenv global 2.2.3</span><br></pre></td></tr></table></figure>

<p>Don’t forget to add <code>rbenv</code> as plugins in your <code>~/.zshrc</code></p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">plugins=(git, rbenv)</span><br><span class="line"></span><br><span class="line"><span class="comment"># use rbenv as default</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(rbenv init -)</span>&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Ruby</tag>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Harvard Positive Psychology</title>
    <url>/cn/Harvard-Positive-Psychology/</url>
    <content><![CDATA[<p>I have watched this course in my gap year, and captured many screenshots. This course helps me a lot. For I clear up my old pictures today incidentally, It’s time to turn them to text.</p>
<blockquote>
<p>Psychological maturity is about the ability to willingly shift perspective.</p>
</blockquote>
<a id="more"></a>

<h2 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h2><blockquote>
<p>The step on the way to a destination that you deem valuable that is important to you.</p>
<p>So end goal can often be liberating.</p>
<p>One of the reasons is because love, and especially lust and passion wears over time.</p>
<p>They are also extremely sensitive, wise, way beyond their years, saintly, generous, benevolent</p>
</blockquote>
<h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><blockquote>
<p>The wonder drug: 30 minutes of physical exercise, 4 times a week.<br>At least 15 minutes of mindful exercise 6 or 7 times a week.</p>
<p>I have so many things to do.</p>
<p>Exercise should be the last thing to go. It is an <strong>investment</strong>.</p>
<p>You may lose that 45 minutes. But you’ll gain so much more. It’s such a good investment. Your memory actually gets better when you exercise. So you’ll get more buck for the bank in terms of time you study; your <strong>creativity and concentration</strong> levels go up</p>
<p>Whether you have ADD or not, especially if you have.</p>
</blockquote>
<h2 id="Relationship"><a href="#Relationship" class="headerlink" title="Relationship"></a>Relationship</h2><blockquote>
<p>People stay together out of a sense of duty, out of habit, because they think this is their lot in life.</p>
<p>A lack of alternative</p>
<p>“do unto others what you would unto yourself.”</p>
<p>“do not do unto yourself what you would not do unto others.”</p>
</blockquote>
<h2 id="Love"><a href="#Love" class="headerlink" title="Love"></a>Love</h2><blockquote>
<p>“Perfect love is rare indeed - for to be a lover will require that you continually have the subtlety of the very wise, the flexibility of the child, the sensitivity of the artist, the understanding of the philosopher, the acceptance of the saint, the tolerance of the scholar and the fortitude of the certain.”</p>
<p>But while perfect love doesn’t exist, <strong>true love dose</strong>. True love exists between imperfect humans.</p>
<p>I will find that right person. I don’t believe that. It’s simply not true. It’s not the matter of faith.</p>
<p>So what makes relationship unique? It’s not finding that one right person. Once again it’s cultivating that one chosen relationship. It’s by virtue of working together, of being together, of spending time together, of dedicating one another. That’s how we create the one chosen relationship. That’s how we create the one chosen relationship.</p>
</blockquote>
]]></content>
      <tags>
        <tag>Psychology</tag>
      </tags>
  </entry>
  <entry>
    <title>How to get the AQI without API</title>
    <url>/cn/How-to-get-the-AQI-without-API/</url>
    <content><![CDATA[<p>I googled and only found <a href="http://www.pm25.in">pm25.in</a> provide API in China.<br>I applied the private AppKey one week ago but got no responds, So I have to think out another way.</p>
<p>The common idea is read the web page and parse the wanted informations:</p>
<a id="more"></a>

<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;open-uri&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;nokogiri&#x27;</span></span><br><span class="line"></span><br><span class="line">html = <span class="string">&#x27;http://www.pm25.in/$YOURCITY&#x27;</span></span><br><span class="line">doc = Nokogiri::HTML(open(html).read)</span><br><span class="line"><span class="comment"># doc.encoding = &#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># activity suggestion</span></span><br><span class="line">msg = doc.css(<span class="string">&#x27;.action&#x27;</span>).first.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># AQI PM CO ... values</span></span><br><span class="line">value = <span class="string">&quot;&quot;</span></span><br><span class="line">doc.css(<span class="string">&#x27;.value&#x27;</span>).each <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">	value += node.text</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">caption = <span class="string">&quot;&quot;</span></span><br><span class="line">doc.css(<span class="string">&#x27;.caption&#x27;</span>).each <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">	caption += node.text</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">v = value.gsub(<span class="regexp">/\s+/</span>, <span class="string">&#x27; &#x27;</span>).strip.split</span><br><span class="line">k = caption.gsub(<span class="regexp">/\s+/</span>, <span class="string">&#x27; &#x27;</span>).strip.split</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;&quot;</span></span><br><span class="line">k.zip(v).each &#123; <span class="params">|a, b|</span> text += (((a + <span class="string">&quot; : &quot;</span>) + b )+ <span class="string">&quot;\n&quot;</span>)&#125;</span><br></pre></td></tr></table></figure>

<p>Result:</p>
<blockquote>
<p>API : 207<br>PM2.5/1h : 156<br>PM10/1h : 162<br>…</p>
</blockquote>
<p>And, I want post it to <code>Slack</code> to remind my coworkers that the code review will put off because of the bad weather.</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;slack-notifier&#x27;</span></span><br><span class="line"></span><br><span class="line">notifier = Slack::Notifier.new <span class="string">&quot;https://hooks.slack.com/services/$YourHook&quot;</span>,</span><br><span class="line"><span class="symbol">channel:</span> <span class="string">&#x27;#YourChannel&#x27;</span>, <span class="symbol">username:</span> <span class="string">&#x27;Bot&#x27;</span></span><br><span class="line">notifier.ping <span class="string">&quot;&lt;!channel&gt;\n&quot;</span> + text + msg.strip</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>When a company become bigger</title>
    <url>/cn/When-a-company-become-bigger/</url>
    <content><![CDATA[<p><strong>Do the right thing</strong> much more importent than <strong>doing things right</strong>. the former phrase means you have your own argument and reason. The <strong>right</strong> measures your own justice and can you responsible for your own actions. But when you joined to a big company, your manager concerned is that can you doing things right. That is why startup companies have more energy.</p>
<a id="more"></a>

<p>Humans are by nature social animals, if a group has less than 140 people, it can managed by itself. Because everyone knows what others doing, they can easily have a common points of view about someone, there is no place for cribbers. But when the group become bigger, fog and shadow are appear, your ability and capability largely depend on your manager, it’s no longer based on your real contributions.</p>
<p>Most companies have hundreds of employees, that’s why office politics so common in big companies. How to dealing with office politics is in primary. After all, it related to your <strong>salary and promotion</strong>. If you want that, the best way is to become a politician, everyone knows what’s going on, but no one point out, just like <em>The Emperor’s New Clothes</em>. the risk is you may lose yourself.</p>
<p>That’s why an excellent startup company so attracting, but there always will be one day, the company become big as for it’s excellent. More and more strangers are joined, not everyone are friendly. if you still be yourself, and careless about politics, that may cause inappropriate, gossip will be everywhere, and when the new year come, you have no promotion without rhyme or reason.</p>
<p>The neutral way was working like an android, don’t share any of your emotions and feelings, that will makes your colleagues feels some kind of professional. The disadvantage is that there is no chance you will be consider as a friend. but as for the company already changed ( not a startup any more ), it’s more acceptable than the previous one.</p>
]]></content>
      <tags>
        <tag>Career</tag>
      </tags>
  </entry>
  <entry>
    <title>Chinese New Year</title>
    <url>/cn/Chinese-New-Year/</url>
    <content><![CDATA[<h1 id="过年回家"><a href="#过年回家" class="headerlink" title="过年回家"></a>过年回家</h1><p>2016 最后一天，帝都的大部分人都回家了<br>小法师在廉租房中无聊的刷着打折网站<br>突然万年没动静的 Q 突然打破了平静，小法师一看，居然是女神<br>当他颤颤巍巍的点开头像时，看到四个字：我结婚了</p>
<p>猝</p>
<a id="more"></a>

<hr>
<p>关于过年回家，已成为年轻一代的痛<br>小法师身为二次元，自然知道那个<strong>亲情计算题</strong></p>
<blockquote>
<p>假如父母再活 30 年，假如自己平均每年回家 1 次，每次 5 天，减去应酬、吃饭、睡觉等时间，真正能陪在父母身边的大概只有约 24 小时，30 年总共才 720 小时，差不多一个月</p>
</blockquote>
<p>另外根据《老年人权益保障法》</p>
<blockquote>
<p>家庭成员应当关心老年人的精神需求，不得忽视、冷落老年人。与老年人分开居住的家庭成员，应当经常看望或者问候老年人</p>
</blockquote>
<p>小法师为了避免面临起诉，所以尽量一年见父母两次面</p>
<hr>
<p>但时间上，会错开春节等假日<br>因为有次节假日给小法师留下了巨大的心理阴影：<br>遥想那还是 2013 年的清明节，小法师约女神去西湖玩，经过曲院风荷再去苏堤时，被人流惊了个呆<br>当时小法师站在苏堤的入口却只看得到俩边的人而无法欣赏西湖美景的一丝一毫，小法师没考虑主要原因是因为矮而把锅怒甩到节假日上</p>
<p>而春节正是所有节日中的一等公民，由于上一代的传统，正是被七大姑八大姨追问工资问对象问生孩子的好机会<br>并且如今下一代已经出现在这世界，红包自然必不可少，微薄的年终奖送光的同时，脸上还要赔笑：“丫，这孩子真漂亮”<br>更加过分的是如今郭嘉已全面开放二胎，时间上算来 Double 已准备就绪</p>
<hr>
<p>去年春节时，小法师连连使出<a href="https://zh.wikipedia.org/wiki/%E4%B8%89%E5%8D%81%E5%85%AD%E8%AE%A1">兵法三十六计</a>中的连环计(25)<br>身为魔法师的他自然知道如何刷车票，因此瞒天过海(1)，故意延迟五分钟再去以逸待劳(4)<br>之后通报父母大人”车票木有了“，然后欲擒故纵(16)，表示即使机票 8x，自己也一定要回家<br>自然，小法师的粑粑麻麻被这出苦肉计(24)震撼到了，当即表示你可以不回来了…</p>
<p>有了去年的先河，今年复制去年的成功就容易多了</p>
<p>直到他看到了一条戳穿真相的海报：</p>
<blockquote>
<p>过年回家，才是人生赢家</p>
</blockquote>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>Friends with Benefits</title>
    <url>/cn/Friends-with-Benefits/</url>
    <content><![CDATA[<h1 id="炮友"><a href="#炮友" class="headerlink" title="炮友"></a>炮友</h1><p>不知神马时候起，约炮软件开始流行于大江南北</p>
<p>虽然小法师曾被女神十动然拒，但作为一名读书人，还是挺洁身自好的<br>豆瓣从来只在读书和电影频道转转，一直不照右边的小组有此功能</p>
<p>今天所说的炮友是说小法师基友的炮友</p>
<p>以前小法师和基友经常连星际，遥想那时还是虫群之心，突然有一天，盆友给发了一个豆瓣链接，说自己找到女神了</p>
<p>小法师心中一惊，基友离自己而去</p>
<p>全剧终</p>
<a id="more"></a>

<hr>
<p>然而，十天之后，基友再次上线，很悲伤的说被拒了<br>由于状态不好，星际被小法师连连屠 🐔</p>
<p>说道星际，小法师在现在的帝都公司居然碰到了一个星际 1 时代过来的大叔，试探性的连了一局 2 VS AI，发现是 🐔，就开了 1V1，一时高兴忘了选族只好 9D，不想大叔居然会堵口，赢了后果断拔了路由，两分钟后在 QQ 上声称不好意思断网了再也连不上了…</p>
<p>小法师顿感同病相怜，把自己当时总结的经验教训倾囊相授，然后基友追到了女神</p>
<p>全剧终</p>
<hr>
<p>然而路遥知马力，基友以为的女神原来只是炮友</p>
<p>举个 🌰：有次基友生气，就离家出走了<br>基友的炮友找不到他，无法解决生理问题，就去豆瓣找了路人炮友，并且在基友公司门口一哭二闹三上吊<br>当然更科学的解释是通过自虐的方式唤起基友的重视<br>然而这在博弈论中正好是双输的选项</p>
<p>当小法师被基友的炮友豆油了这件事后，惊了个呆<br>当然，小法师感觉每个人都应该有悔过自新的机会，人非圣贤孰能无过，所以这次的事情就不和基友说了<br>并且毕竟还有别的解决方案，比如：</p>
<blockquote>
<p><a href="http://www.solidot.org/story?sid=44714">男子给女友服镇静剂好继续玩游戏</a><br>一名男子被德国 Castrop-Rauxel 市的一家法院罚款 500 欧元，原因是他为了继续玩游戏给前女友服了镇静剂，法官认为此举相当于“蓄意攻击”…</p>
</blockquote>
<p>然而事态随着时间的漂移而愈加严重，比如这两次玩星际时，基友被他炮友连连拔电源，坐在地上大哭，宛若泼妇</p>
<p>然后小法师就偷偷和基友说了这件事</p>
<p>基友听说被带了绿帽子，勃然大怒，拎起一把菜刀砍向炮友，血溅廉租房</p>
<p>基友被抓，激情杀人，被判死缓，含恨而终</p>
<hr>
<p>不想基友信奉女权，对这件事到不怎么在意</p>
<p>虽然关系到自己的仕途，但基友正值壮年，精力旺盛无处释放，并且觉悟不够，尚无法分清灵与肉的关系，陷入肉欲无法自拔，害怕回到一个人 LOL 的状态</p>
<p>“所以，他们不会分手” 小法师妄加评论道</p>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift useful extensions</title>
    <url>/cn/swift-useful-extensions/</url>
    <content><![CDATA[<h3 id="Time-interval-Int-to-formatted-String"><a href="#Time-interval-Int-to-formatted-String" class="headerlink" title="Time interval (Int) to formatted String"></a>Time interval (Int) to formatted String</h3><p>KEY: <strong><code>yyyy-MM-dd EEE HH:mm:ss.SSS</code></strong></p>
<a id="more"></a>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Int</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> yyyyMMddHHmm: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> date = <span class="type">NSDate</span>(timeIntervalSince1970: <span class="type">NSTimeInterval</span>(<span class="keyword">self</span>)/<span class="number">1000</span>)</span><br><span class="line">            <span class="keyword">let</span> dateFormatter = <span class="type">NSDateFormatter</span>()</span><br><span class="line"></span><br><span class="line">            <span class="comment">// don&#x27;t forget to set locale, otherwise you may get **周五** instead of **FRI**</span></span><br><span class="line">            dateFormatter.locale = <span class="type">NSLocale</span>(localeIdentifier: <span class="string">&quot;en_US&quot;</span>)</span><br><span class="line"></span><br><span class="line">            dateFormatter.dateFormat = <span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span></span><br><span class="line">            <span class="keyword">return</span> dateFormatter.stringFromDate(date)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Trim-decimal-point-zero"><a href="#Trim-decimal-point-zero" class="headerlink" title="Trim decimal point zero"></a>Trim decimal point zero</h3><p>KEY: <strong><code>&quot;%g&quot;</code></strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> trimZero: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">String</span>(format: <span class="string">&quot;%g&quot;</span>, <span class="type">Double</span>(<span class="keyword">self</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Ramdom-alphanumberic-string"><a href="#Ramdom-alphanumberic-string" class="headerlink" title="Ramdom alphanumberic string"></a>Ramdom alphanumberic string</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> randomString: <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> letters : <span class="type">NSString</span> = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span></span><br><span class="line">        <span class="keyword">let</span> len = <span class="number">20</span> <span class="comment">// length</span></span><br><span class="line">        <span class="keyword">let</span> randomString : <span class="type">NSMutableString</span> = <span class="type">NSMutableString</span>(capacity: len)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> length = <span class="type">UInt32</span> (letters.length)</span><br><span class="line">            <span class="keyword">let</span> rand = arc4random_uniform(length)</span><br><span class="line">            randomString.appendFormat(<span class="string">&quot;%C&quot;</span>, letters.characterAtIndex(<span class="type">Int</span>(rand)))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> randomString <span class="keyword">as</span> <span class="type">String</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Add-and-remove-subviews"><a href="#Add-and-remove-subviews" class="headerlink" title="Add and remove subviews"></a>Add and remove subviews</h3><p>KEY: <strong><code>...</code></strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addSubviews</span><span class="params">(views: UIView...)</span></span> &#123;</span><br><span class="line">        <span class="comment">// addArrangedSubviews if it&#x27;s a UIStackView</span></span><br><span class="line">       views.forEach &#123; addSubview($<span class="number">0</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeAllSubviews</span><span class="params">()</span></span> &#123;</span><br><span class="line">        subviews.forEach &#123; $<span class="number">0</span>.removeFromSuperview()&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Set-text-strikethrough-and-line-height-in-UILabel"><a href="#Set-text-strikethrough-and-line-height-in-UILabel" class="headerlink" title="Set text strikethrough and line height in UILabel"></a>Set text strikethrough and line height in UILabel</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UILabel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setStrikethrough</span><span class="params">(text:String, color:UIColor = UIColor.blackColor<span class="params">()</span></span></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> attributedText = <span class="type">NSAttributedString</span>(string: text , attributes: [<span class="type">NSStrikethroughStyleAttributeName</span>: <span class="type">NSUnderlineStyle</span>.<span class="type">StyleSingle</span>.rawValue, <span class="type">NSStrikethroughColorAttributeName</span>: color])</span><br><span class="line">        <span class="keyword">self</span>.attributedText = attributedText</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setLineHeight</span><span class="params">(lineHeight: CGFloat)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> text = <span class="keyword">self</span>.text</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> text = text &#123;</span><br><span class="line">            <span class="keyword">let</span> attributeString = <span class="type">NSMutableAttributedString</span>(string: text)</span><br><span class="line">            <span class="keyword">let</span> style = <span class="type">NSMutableParagraphStyle</span>()</span><br><span class="line"></span><br><span class="line">            style.lineSpacing = lineHeight</span><br><span class="line">            attributeString.addAttribute(<span class="type">NSParagraphStyleAttributeName</span>, value: style, range: <span class="type">NSMakeRange</span>(<span class="number">0</span>, text.characters.<span class="built_in">count</span>))</span><br><span class="line">            <span class="keyword">self</span>.attributedText = attributeString</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Scheme-Version-ShortVersion-BundleVersion"><a href="#Scheme-Version-ShortVersion-BundleVersion" class="headerlink" title="Scheme Version ShortVersion BundleVersion"></a>Scheme Version ShortVersion BundleVersion</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> firstScheme:<span class="type">String?</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> schemes: <span class="type">AnyObject?</span> = <span class="type">NSBundle</span>.mainBundle().infoDictionary?[<span class="string">&quot;CFBundleURLTypes&quot;</span>]?[<span class="number">0</span>][<span class="string">&quot;CFBundleURLSchemes&quot;</span>] &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> scheme = schemes?[<span class="number">0</span>] <span class="keyword">as</span>? <span class="type">String</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> scheme</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bundleShortVersion:<span class="type">String?</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> version = <span class="type">NSBundle</span>.mainBundle().infoDictionary?[<span class="string">&quot;CFBundleShortVersionString&quot;</span>] <span class="keyword">as</span>? <span class="type">String</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> version</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bundleVersion:<span class="type">String?</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> version = <span class="type">NSBundle</span>.mainBundle().infoDictionary?[<span class="string">&quot;CFBundleVersion&quot;</span>] <span class="keyword">as</span>? <span class="type">String</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> version</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>Soylent</title>
    <url>/cn/Soylent/</url>
    <content><![CDATA[<h1 id="饲料"><a href="#饲料" class="headerlink" title="饲料"></a>饲料</h1><p>自从小法师从高阶魔法师手中高价买到一瓶 Soylent 后，就喜欢上这东东了</p>
<p>曾经小法师还在天堂的时候，经常泡西湖区图书馆<br>当时七月流火，而作为郭嘉建筑，自然有工业级降温装置</p>
<p>于是乎那里变成了小法师的圣地，经常一坐一天</p>
<p>以前小法师的法器能量至多坚持 1 小时<br>后来下血本买了个 <code>R, 13-inch, Mid 2013</code> 后，几个小时没问题，之后的时间正好看看书或妹纸</p>
<p>但图书馆地小人多，天堂公民又如此勤奋，无论周末甚至工作日，8 点半开门，9 点后就没了小法师容身之地</p>
<p>所以如何给自己充能成了头等难题，倘若晌午退出吃饭，再杀回来时已物是人非，颇有在魔法学院抢座位之感</p>
<p>所以如果那时有这东东就好了，买个 1L 的杯子，带上 750ml 的粉，加上图书馆提供的纯净水，可坐到天荒地老</p>
<a id="more"></a>

<hr>
<p>小法师曾算过一笔时间账：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// [准备, 做饭, 吃饭, 洗碗]</span></span><br><span class="line"><span class="keyword">let</span> 标准耗时 = [<span class="number">10</span>, <span class="number">30</span>, <span class="number">15</span>, <span class="number">10.0</span>]</span><br><span class="line"><span class="keyword">let</span> 系数 = [<span class="number">0.5</span>, <span class="number">1</span>, <span class="number">0.7</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 一天总耗时 = 标准耗时.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; $<span class="number">0</span> + $<span class="number">1</span> &#125; * 系数.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; $<span class="number">0</span> + $<span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure>

<p>就酱紫一天近三小时木有了</p>
<p>所以小法师常常幻想有一天法师们给法器充能时，可因物理上的接触，连同自己一起充能<br>比如 SC2 中的运输机就是个栗子，并且还是远程的<br>有时也会愤愤不平，Embody 这价格居然不足以自带生物体充能功能</p>
<p>而饲料很好的解决了这些耗时的步骤<br>特别是版本升级到 2.0 后，连摇摇杯都不用了<br>另外老版本 1.5 打折处理 54$，外加 100 ￥ 转运费，即便汇率飙升，每顿饭也就 20 多大洋</p>
<blockquote>
<p>世界上没有十全十美的事情，凡事有利必有弊，做人做人就要学会权衡利弊，做出理性的选择 —— 人民网</p>
</blockquote>
<p>然而 饲料 有三座大山</p>
<ol>
<li>味道</li>
<li>镍和汞加拿大超标</li>
<li>升血糖</li>
</ol>
<blockquote>
<p>善于解决问题的能力通常是缜密而系统化思维的产物，任何一个有才之士都能获得这种能力<br>–麦肯锡思维法</p>
</blockquote>
<ol>
<li><p>天朝常以美食著称，惯出了一个个吃货<br>但小法师经过麻麻十八年日日月月厨艺培养，早就不想粢饭了</p>
</li>
<li><p>帝都</p>
</li>
</ol>
<p>最后一个比较难办，饱腹感是有的，但没咀嚼感<br>另外作为流体型食物，只能停留十几分钟，而通常食物需要几小时不等<br>简而言之 只有化，没有消</p>
<p>所以小法师就早餐拿铁鸡蛋，午餐地沟油，晚餐饲料</p>
<p>折合下来，每月稳定 input 一箱</p>
<hr>
<p>这次过年 双 没回家，小法师怕超市打烊，提前储备了一箱<br>当他捏着鼻子硬灌半杯后，看看自己羸弱的鸡肉，感觉应该补充点真正的肉质<br>打开经常刷的神马不值得买，欣喜的发现牛肉罐头大减价，准备下单<br>结账时突然发现旁边四个大字：狗狗专用</p>
<p>嗯，这一定是长期喂食饲料导致<br>小法师用胃分析到</p>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>High Templar</title>
    <url>/cn/High-Templar/</url>
    <content><![CDATA[<h1 id="高阶圣堂法师"><a href="#高阶圣堂法师" class="headerlink" title="高阶圣堂法师"></a>高阶圣堂法师</h1><p>小法师 Gap 的一年，经历了各种聚变打击<br>然而其中最最烦恼的是技术选型</p>
<p>早在魔法学院（2011），小法师想学 iOS，看看了，发现要钱，转头就去了 Android</p>
<p>那时小法师还用着 瘟都死，刚刚知道原来还有另外一种操作系统叫做 Linux，便携式法器 Nokia 占据大片江山，自然对  没什么概念，只知道新闻上的 Jobs 因癌症去世，是个改变了世界的人<br>等后来看到三大演讲之一的 <a href="http://news.stanford.edu/news/2005/june15/jobs-061505.html">Stay Hungry. Stay Foolish</a> 已经是两年后的事了</p>
<blockquote>
<p>PS: 另外两个分别是 J.K. Rowling 在 Harvard 的 <a href="http://news.harvard.edu/gazette/story/2008/06/text-of-j-k-rowling-speech/">The Fringe Benefits of Failure, and the Importance of Imagination</a> , Randy Pausch 在 CMU 的 <a href="http://www.cmu.edu/randyslecture/videos/">Last Lecture</a> 都是发人深省的好视频，值得反复琢磨</p>
</blockquote>
<a id="more"></a>

<hr>
<p>Android 看了几节课后，就 886，也没什么特别的原因，只是过程中触发不了当年玩 C 的兴致</p>
<p>转眼校招，由于地处偏远，来的公司不多，宣讲基本在 科大 合大，小法师拿着 233 大学的学历，自然受尽了歧视<br>经历了数十场惨败后，终于感动上天，一家 NASDAQ 给了 offer，隶属 预研部，地理位置还是梦想中的天堂<br>小法师临表涕零，立即签订卖身契</p>
<p>HR MM 说公司正值转型，由 C 屁屁 全面转向 Android<br>于是乎，害怕入职即离职的小法师，大四一年，再次硬着头皮学 Android</p>
<p>强扭的瓜不甜，历史反复重演，又 886</p>
<hr>
<p>原本小法师想象中的<strong>预研部</strong>，是类似于《编程之美》里描述的研究院之类的地方<br>然而… 大部分时间是 用 爪哇 做成魔法石（Jar），融入 源元素 中，之后小法师用 乌邦图 召唤出一个修改后的 安卓，再由现场攻城狮把它烧录至各种高仿法器中</p>
<p>说了这么多其实用两个字即可概括：shanzhai</p>
<p>而 Android 一个简单的效果 需要一坨 爪哇，再加上 爪哇 自身特性不变导致诞生了各种 射击模式，弄的小法师心力交瘁</p>
<p>所以现在回想起来，也不知是 shanzhai 还是 爪哇 真的不好<br>直到现在小法师对于这门法师界用的最频繁常年坐头等交椅的法术还是各种不爽 (* ￣︿￣)</p>
<blockquote>
<p>PS: 8 中提供了 Lambda 和 函数式，看起来简洁了许多</p>
</blockquote>
<p>大半年后，小法师无意中 发现了<a href="https://developers.google.com/edu/python/">股沟的蟒蛇阶级</a>，这对于只接触了 C C 屁屁 shell 爪哇 的小法师来说，无异于一针强心剂</p>
<hr>
<p>Gap Year 时，小法师发现了更赞的 红宝石，在 <a href="https://www.codecademy.com/">Codecademy</a> 刷完题后，正好感到在手机上看日爆不方便，加之官方声明了不做 PC 端，就想自己弄一个</p>
<p>然而，🐶🐺 的出现打乱了小法师的计划</p>
<blockquote>
<p>PS: Ruby 是弱类型动态语言，即 不同类型可以赋值，运行时可以改变自身，所以经常出现一行代码干了别人几百行的事情<br>松本行弘也在《程序世界》中提到 Ruby 设计的首要目标是：爽</p>
</blockquote>
<blockquote>
<p>但麻烦在于为了确保正确，要不断的用测试去约束<br>其结果就是 test 越写越长越写越多<br>总体来说小而美，但不适合大规模协作<br>而强类型静态语言可以在编译时就可以检测出很多错误</p>
</blockquote>
<blockquote>
<p>Golang 本身是强类型，但提供了一些便利的语法糖<br>最让人震惊的是，当年一堆需求的情况下，作者先去写 formatter<br>这却是我最喜欢的一个功能，省了多少为代码格式唧唧歪歪的时间<br>话说首届 Gopher🇨🇳，作者还来上海还说了这个东东的实现</p>
</blockquote>
<hr>
<p>纵然红宝石有万般好处，在小法师对两门法术做了下 🍐 测试后，就拥抱 🐶🐺 了</p>
<p>此时计划中 Gap 时间已过了大半<br>如果酱紫下去，小法师可能就走上了向全栈攻城狮<br>然而之前出现了一件决定性的事件，切换了魔法栈点亮的分支</p>
<p>也不知什么原因，选用 🐶🐺 后的小法师，在木有任何收入的情况下，居然进行了 法器升级，把老爸的 瘟都死 换成了自己 rMBP</p>
<p>完成 Demo 级别的网站后，小法师买了个证书，上来就被 Xcode 惊到了 Σ( ° △ °|||)︴，遥想当年在 Android 绑定 button 响应事件，弄的一坨代码，Xcode 中用 Ctrl + 拖线这种优雅的方式完成了</p>
<p>之后的时间里，小法师刷 Stanford 白胡子老爷爷的 <a href="http://cs193p.stanford.edu/">cs193p</a>, <em>Head First iPhone Development</em>, <em>iOS 7 Programming Cookbook</em> 的过程中，<br>“艺术品”这个词时常在脑子里显现</p>
<p>之后就一切就顺理成章了</p>
<hr>
<p>自古全栈出 Archon</p>
<p>小法师避开此路，多少是有自己的小算盘的<br>主要还是全栈太累了，从某种意义上说，是全干<br>而这也意味着休闲时间被无限压缩</p>
<p>能力越小责任越小<br>归根到底，小法师只是个喜欢在闲暇时光读读书的好孩纸罢了</p>
<hr>
<p>然而他又太天真了</p>
<p>在向 高阶圣堂法师 进阶的道路上，&gt;&gt; 以下这些坑</p>
<h3 id="WWDC"><a href="#WWDC" class="headerlink" title="WWDC"></a>WWDC</h3><p>100+/年，下载的时候小法师脚都在抖<br>然而斯德哥尔摩，看到 Cool 的技术还是会激动的拍手哎</p>
<h3 id="适配版本"><a href="#适配版本" class="headerlink" title="适配版本"></a>适配版本</h3><p>小法师曾经饱受 安卓 不同屏幕折磨，傻傻的以为 iPhone 就一个屏幕尺寸<br>结果一年后…</p>
<h3 id="Swift-阵痛"><a href="#Swift-阵痛" class="headerlink" title="Swift 阵痛"></a>Swift 阵痛</h3><p>各种 bug，包括系统自带的…</p>
<hr>
<p>最最悲剧之处在于小法师发现了另外一个天坑</p>
<h3 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h3><p>以前小法师是盲人，如木耳听 IE 800，对色差像素一概不分<br>入坑 iOS 后渐渐有所提高，但对 Design 的理解还是 射击狮 的范畴</p>
<p>结果《人月神话》的作者 Frederick Brooks 出了本 <em>The Design of Design</em> 拍在小法师脸上，而另一本有着类似名字的 <em>Designing Design</em> 的作者是以性冷淡著称 母 🐔 咨询委员会委员 日本平面设计大师原研哉先生</p>
<p>至此，小法师的科技树上又多了三个分支</p>
<ul>
<li>Sketch</li>
<li>摄影</li>
<li>Keynote</li>
</ul>
<p>还好，这些都是小法师所心之向往的<br>毕竟当年让小法师下定决心入坑的就是在冷冰冰的机器上居然也可以实现“艺术”的感觉</p>
<p>这很哭, 不是吗？</p>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
      </tags>
  </entry>
  <entry>
    <title>This certificate has expired</title>
    <url>/cn/This-certificate-has-expired/</url>
    <content><![CDATA[<h2 id="This-certificate-has-expired"><a href="#This-certificate-has-expired" class="headerlink" title="This certificate has expired"></a>This certificate has expired</h2><p><code>keychain -&gt; View -&gt; Show Expired Certificates -&gt; System</code></p>
<p><code>Apple Worldwide Developer Relations Certification Authority</code><br><code>Monday, February 15, 2016 at 2:56:35 AM China Standard Time</code></p>
<p>delete the certificates</p>
<p>Download the new <a href="https://developer.apple.com/certificationauthority/AppleWWDRCA.cer">AppleWWDRCA.cer</a></p>
]]></content>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>ApplePay with UnionPay in China</title>
    <url>/cn/ApplePay-with-UnionPay-in-China/</url>
    <content><![CDATA[<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>Download The <a href="https://open.unionpay.com/ajweb/help/file/techFile?productId=80">银联 ApplePay 控件开发包</a></p>
<h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>After all integrations done</p>
<p>I got</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">-[__NSCFConstantString hexToColor]: unrecognized selector sent to instance <span class="number">0</span>x</span><br></pre></td></tr></table></figure>

<p>Because this project is written in Swift, so</p>
<p><code>Targets -&gt; Build Settings -&gt; Linking -&gt; Other Linker Flags</code></p>
]]></content>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>How to detect 2.4 GHz and 5 GHz Best Channel on Mac OS X</title>
    <url>/cn/How-to-detect-2-4-GHz-and-5-GHz-Best-Channel-on-Mac-OS-X/</url>
    <content><![CDATA[<p>My Zeppelin Air disconnect to my router from time to time</p>
<p>The main reason seems that my 2.4GHz channel in which has to much <em>Noise</em> with other people’s</p>
<a id="more"></a>

<p>If you use Mac, you can</p>
<p><code>alt + wifi icon</code> -&gt; <code>Open Wireless Diagnostics</code></p>
<p><code>Menu</code> -&gt; <code>Window</code> -&gt; <code>Scan</code> -&gt; <code>Scan Now</code></p>
<p>your will see a window like this:</p>
<table>
<thead>
<tr>
<th align="left">Summary</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">…</td>
<td align="left">…</td>
</tr>
<tr>
<td align="left">Best 2.4 GHz</td>
<td align="left">1, 2</td>
</tr>
<tr>
<td align="left">Best 5 GHz</td>
<td align="left">36, 40</td>
</tr>
</tbody></table>
<p>enjoy the music ~</p>
]]></content>
      <tags>
        <tag>OSX</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS App Submission Nightmare</title>
    <url>/cn/iOS-App-Submission-Nightmare/</url>
    <content><![CDATA[<h1 id="iOS-App-Submission-Nightmare"><a href="#iOS-App-Submission-Nightmare" class="headerlink" title="iOS App Submission Nightmare"></a>iOS App Submission Nightmare</h1><h2 id="bluetooth-peripheral"><a href="#bluetooth-peripheral" class="headerlink" title="bluetooth-peripheral"></a>bluetooth-peripheral</h2><ol>
<li>the bluetooth correlative code no longer be used after redesgin app, you should del both code and:</li>
<li>Targets -&gt; Capabilities -&gt; bluetooth</li>
</ol>
<a id="more"></a>

<h2 id="com-apple-security-application-groups"><a href="#com-apple-security-application-groups" class="headerlink" title="com.apple.security.application-groups"></a>com.apple.security.application-groups</h2><ol>
<li>close <code>app group</code></li>
<li>del <code>*.entitlements</code></li>
<li><code>grep -R --include=&quot;*.*&quot; &quot;.entitlements&quot; .</code> you’ll find hidden entitlements in <code>Xcode -&gt; imeican -&gt; build setting</code></li>
</ol>
<h2 id="ITMS-90394-Missing-Icon"><a href="#ITMS-90394-Missing-Icon" class="headerlink" title="ITMS-90394 Missing Icon"></a>ITMS-90394 <code>Missing Icon</code></h2><ul>
<li>We have <code>*29x29@3x.png</code> in Xcode</li>
<li>In fact the .png is a .svg</li>
<li>new a real <code>*29x29@3x.png</code></li>
</ul>
<h2 id="ITMS-90205-90206"><a href="#ITMS-90205-90206" class="headerlink" title="ITMS-90205 90206"></a>ITMS-90205 90206</h2><p>Embed Frameworks Archive del <code>carthage copy-frameworks</code></p>
<h2 id="bcsymbolmap-39-gt-as-expected"><a href="#bcsymbolmap-39-gt-as-expected" class="headerlink" title=".bcsymbolmap&#39;&gt; as expected"></a><code>.bcsymbolmap&#39;&gt; as expected</code></h2><ul>
<li>Enable Bitcode</li>
</ul>
<h2 id="ITMS-90087-90209-x84-64-i386"><a href="#ITMS-90087-90209-x84-64-i386" class="headerlink" title="ITMS-90087 90209 x84_64 i386"></a>ITMS-90087 90209 <code>x84_64 i386</code></h2><ul>
<li>Targets(Embed Frameworks) -&gt; Run Script</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;$&#123;CONFIGURATION&#125;&quot;</span> != <span class="string">&quot;Release&quot;</span> ]; then</span><br><span class="line">    /usr/local/bin/carthage copy-frameworks</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Swift</tag>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>How to config mpv</title>
    <url>/cn/How-to-config-mpv/</url>
    <content><![CDATA[<p>As for lack of time, I begin to play walkthrough gameplay. Even though, the time is still luxury to me, I had to accelerate.</p>
<p>But <code>Movist</code> only support 4x, and <code>VLC</code> will show mosaic in 8x.</p>
<p>Fortunately, I found MPV.</p>
<a id="more"></a>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew cask install mpv</span><br><span class="line">mkdir -p ~/.config/mpv/</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;no-audio\nno-border\nspeed=8\nvo=opengl-hq:icc-profile-auto\nfs&quot;</span> &gt; ~/.config/mpv/mpv.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;q quit_watch_later\nQ quit&quot;</span> &gt; ~/.config/mpv/input.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>the speed can be changed by <code>[</code> or <code>]</code><br>You can read the <a href="https://mpv.io/manual/stable/">manual</a> for more detail.</p>
<p>For the first time, I open <code>mpv</code> by icon, but it can only play a single video file and quit.<br>It’s hard for me to figure out how to play a playlist.<br>In fact, you can use <code>Terminal</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$VideoDir</span></span><br><span class="line">mpv .</span><br></pre></td></tr></table></figure>

<p>It will play all videos under that folder automatically. 😄</p>
]]></content>
      <tags>
        <tag>Mac</tag>
        <tag>OSX</tag>
        <tag>mpv</tag>
        <tag>playlist</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome to Safari</title>
    <url>/cn/Chrome-to-Safari/</url>
    <content><![CDATA[<p>I use Chrome from the very beginning. I was impressed by it is simplicity and variety. Even I upgrade my laptop to Macbook, I’m still using it because of three main reasons</p>
<a id="more"></a>

<ul>
<li>Plugin</li>
<li>Shortcut</li>
<li>Develop</li>
<li>Flash</li>
</ul>
<p>But after my TL <em>amway</em> me, I tried Safari deeply, and found:</p>
<h2 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h2><ul>
<li>Adblock Plus</li>
<li>1Password</li>
<li>Evernote</li>
<li>AutoPagerize</li>
<li>Clean Links for Google</li>
</ul>
<h2 id="Shortcut"><a href="#Shortcut" class="headerlink" title="Shortcut"></a>Shortcut</h2><p>I can use <code>opt+cmd+&gt;</code> on Chrome to change tabs, it is <code>shift+cmd+[</code> on Safari<br><code>shift+cmd+z</code> to unclose the most recent closed tabs, it’s no corresponding key on Safari, I can only use history instead.</p>
<h2 id="Develop"><a href="#Develop" class="headerlink" title="Develop"></a>Develop</h2><p>I used to opt+cmd+i in chrome to simulate iPhone, I can compare iOS version with front end in this way.<br>When I got to know what’s safari’s Develop look like, (<code>cmd+, -&gt; Advanced -&gt; Show Develop menu in menu bar</code> or <code>opt+cmd+r</code>) I surrendered.</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/SafariDevelop.png" alt=""></p>
<h2 id="Flash"><a href="#Flash" class="headerlink" title="Flash"></a>Flash</h2><p>Finally, I accept that different device have their own place. So as for most Chinese video Website still using flash, I chose chrome to watch them.</p>
]]></content>
      <tags>
        <tag>Mac</tag>
        <tag>Software</tag>
      </tags>
  </entry>
  <entry>
    <title>Observer</title>
    <url>/cn/Observer/</url>
    <content><![CDATA[<p>It seems my observer come back.</p>
<p>I began to know the mental models when I was finished <em>be friendly with the time</em>, It took me one month to read that pure thin book.</p>
<a id="more"></a>

<p>When I was glad that my mental models improved, <em>The Power of Now: A Guide to Spiritual Enlightenment</em> announced that mind is a trap, the forecast ability of mind focus on the future, it prevent you to know the power of present. These different arguments confused me at that time. As I continues to read, the concept of observer appeared in my eyes.</p>
<p>For the first time I heard about <em>observer</em> was in my college. I read that word from <em>The dark forest</em>. It’s more fascinating after I read one book about quantum mechanics.</p>
<p>There is also an idea about observer in psychology. It is not only different from the idea above(<a href="https://en.wikipedia.org/wiki/Observer_(quantum_physics)">Observer (quantum physics)</a>) but also <em>Design Patterns(<a href="https://en.wikipedia.org/wiki/Observer_pattern">Observer pattern</a>)</em>. When I finished <em>Think on These Things</em> one year later, I try to build an observer about myself.<br>Because usually things will be more clear when you saw others doing it. The weakness and blind spot is apparent and evident, you will find better solution.</p>
<p>It is glad that I achieved this goal in my gap year, there was two versions of me, one acting, one watching.<br>I do not think the observer equals to superego, but it is clearly a guardian of ego.</p>
<p>But when I worked to Beijing one year and a half ago, all the works I builded ruined. The observer of me was gone. I had some new bed habits like watch the watch frequently which reveal my anxious and nervous.</p>
<p>When I do something wrong, I felt exhausted. Luckily I had a long vacation that I went to my parent’s home. Although that town is not an outfield, but at least it detach me from the supercity. Also, I have some deep talks about my dreams with my parents. They feels helpless because our poor family and the rising hotel rates, and they cannot understand why I’m acting so odd.</p>
<p>After 10 days later my vacation due, I felt relief.</p>
]]></content>
      <tags>
        <tag>Me</tag>
      </tags>
  </entry>
  <entry>
    <title>Segmentation fault: 11</title>
    <url>/cn/Segmentation-fault-11/</url>
    <content><![CDATA[<ul>
<li>Mac OS X 10.11.4</li>
<li>Xcode 7.3</li>
<li>Swift 2.2</li>
</ul>
<a id="more"></a>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name:<span class="type">String</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> sex:<span class="type">String</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> age:<span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list:[(name:<span class="type">String</span>, age:<span class="type">Int</span>)]?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = [<span class="type">Person</span>()]</span><br><span class="line"><span class="keyword">let</span> people = <span class="type">People</span>()</span><br><span class="line"></span><br><span class="line">people.list = person.<span class="built_in">reduce</span>([(<span class="type">String</span>, <span class="type">Int</span>)]()) &#123;</span><br><span class="line">    $<span class="number">0</span> + [($<span class="number">1</span>.name, $<span class="number">1</span>.age)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>error: cannot convert value of type &#39;[(String, Int)]&#39; to expected argument type &#39;[(name: String, age: Int)]?&#39;</code></p>
<p>So, I renamed the tuple list type to <code>[(name: String, age: Int)]</code></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name:<span class="type">String</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> sex:<span class="type">String</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> age:<span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list:[(name:<span class="type">String</span>, age:<span class="type">Int</span>)]?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = [<span class="type">Person</span>()]</span><br><span class="line"><span class="keyword">let</span> people = <span class="type">People</span>()</span><br><span class="line"></span><br><span class="line">people.list = person.<span class="built_in">reduce</span>([(name:<span class="type">String</span>, age:<span class="type">Int</span>)]()) &#123;</span><br><span class="line">    $<span class="number">0</span> + [($<span class="number">1</span>.name, $<span class="number">1</span>.age)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Everything is fine? right?</p>
<p>But when I Archived the project in <code>Fastest, Aggressive Optimizations [-Ofast]</code> and <code>Fast, Whole Module Optimization [-O -whole-module-optimization]</code></p>
<p><code>Command failed due to signal: Segmentation fault: 11</code></p>
<p>The error message is irrelevant and helpless</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> swift                    0x00000001032634eb llvm::sys::PrintStackTrace(llvm::raw_ostream&amp;) + 43</span><br><span class="line">1  swift                    0x00000001032627d6 llvm::sys::RunSignalHandlers() + 70</span><br><span class="line">2  swift                    0x0000000103263b4f SignalHandler(int) + 287</span><br><span class="line">3  libsystem_platform.dylib 0x00007fff8b0f452a _sigtramp + 26</span><br><span class="line">4  libsystem_platform.dylib 0x000000000000000c _sigtramp + 1961933564</span><br><span class="line">5  swift                    0x0000000102fd97a6 llvm::GetElementPtrInst::getGEPReturnType(llvm::Type*, llvm::Value*, llvm::ArrayRef&lt;llvm::Value*&gt;) + 54</span><br><span class="line">6  swift                    0x0000000102fd905d llvm::GetElementPtrInst::Create(llvm::Type*, llvm::Value*, llvm::ArrayRef&lt;llvm::Value*&gt;, llvm::Twine const&amp;, llvm::Instruction*) + 125</span><br><span class="line">7  swift                    0x000000010268d230 llvm::IRBuilder&lt;true, llvm::ConstantFolder, llvm::IRBuilderDefaultInserter&lt;true&gt; &gt;::CreateConstInBoundsGEP2_32(llvm::Type*, llvm::Value*, unsigned int, unsigned int, llvm::Twine const&amp;) + 176</span><br><span class="line">8  swift                    0x000000010109786a (anonymous namespace)::PayloadEnumImplStrategyBase::projectExtraTagBits(swift::irgen::IRGenFunction&amp;, swift::irgen::Address) const + 90</span><br><span class="line">9  swift                    0x00000001010953eb (anonymous namespace)::PayloadEnumImplStrategyBase::initialize(swift::irgen::IRGenFunction&amp;, swift::irgen::Explosion&amp;, swift::irgen::Address) const + 123</span><br><span class="line">10 swift                    0x00000001010f5991 swift::SILVisitor&lt;(anonymous namespace)::IRGenSILFunction, void&gt;::visit(swift::ValueBase*) + 17617</span><br><span class="line">11 swift                    0x00000001010edc4b swift::irgen::IRGenModule::emitSILFunction(swift::SILFunction*) + 9787</span><br><span class="line">12 swift                    0x00000001010494e3 swift::irgen::IRGenModuleDispatcher::emitLazyDefinitions() + 307</span><br><span class="line">13 swift                    0x00000001010d4b3d performIRGeneration(swift::IRGenOptions&amp;, swift::ModuleDecl*, swift::SILModule*, llvm::StringRef, llvm::LLVMContext&amp;, swift::SourceFile*, unsigned int) + 1501</span><br><span class="line">14 swift                    0x00000001010d4f06 swift::performIRGeneration(swift::IRGenOptions&amp;, swift::SourceFile&amp;, swift::SILModule*, llvm::StringRef, llvm::LLVMContext&amp;, unsigned int) + 70</span><br><span class="line">15 swift                    0x0000000100fb8a1c performCompile(swift::CompilerInstance&amp;, swift::CompilerInvocation&amp;, llvm::ArrayRef&lt;char const*&gt;, int&amp;) + 15004</span><br><span class="line">16 swift                    0x0000000100fb441d frontend_main(llvm::ArrayRef&lt;char const*&gt;, char const*, void*) + 2781</span><br><span class="line">17 swift                    0x0000000100fafe3c main + 1932</span><br><span class="line">18 libdyld.dylib            0x00007fff895f35ad start + 1</span><br><span class="line">19 libdyld.dylib            0x0000000000000038 start + 1990249100</span><br><span class="line">Stack dump:</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">1.	While emitting IR SIL function @_TTSg5GVs12_ArrayBufferT4nameSS3ageSi__GS_T4nameSS3ageSi__s16_ArrayBufferTypes_GSaTSSSi__GSaTSSSi__s12SequenceTypes_T4nameSS3ageSi__GVs17IndexingGeneratorGS_T4nameSS3ageSi___GS2_GS_T4nameSS3ageSi___s13GeneratorTypes_T4nameSS3ageSi__GVs12_SliceBufferT4nameSS3ageSi__GS4_T4nameSS3ageSi__s14CollectionTypes_GS2_GS4_T4nameSS3ageSi___GS2_GS4_T4nameSS3ageSi___S3_s_T4nameSS3ageSi__SiSis16ForwardIndexTypes_SiSis18_SignedIntegerTypes_SiSis33_BuiltinIntegerLiteralConvertibles_Si_GS4_T4nameSS3ageSi__GS4_T4nameSS3ageSi__s9IndexablesGS4_T4nameSS3ageSi__S1_s_GS2_GS4_T4nameSS3ageSi___GS2_GS4_T4nameSS3ageSi___S3_s_T4nameSS3ageSi__SiSiS6_s_SiSiS7_s_SiSiS8_s_Si_GS4_T4nameSS3ageSi___T4nameSS3ageSi__T4nameSS3ageSi__T4nameSS3ageSi__GS2_GSaTSSSi___GS2_GSaTSSSi___S3_s_GVs10ArraySliceTSSSi_____TFs20_arrayAppendSequenceu0_Rxs16_ArrayBufferType_s12SequenceTypewx5IndexzSiwx7ElementzW_9Generator7Element_WxS1_8Distance_zSiWxS1_19_DisabledRangeIndex_zSiWxS1_S5_18IntegerLiteralType_zSirFTRxq__T_</span><br></pre></td></tr></table></figure>

<p>I checked out commit by commit, and finally found that it was the <strong>name</strong> of tuple cause the error.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name:<span class="type">String</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> sex:<span class="type">String</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> age:<span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list:[(<span class="type">String</span>, <span class="type">Int</span>)]?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = [<span class="type">Person</span>()]</span><br><span class="line"><span class="keyword">let</span> people = <span class="type">People</span>()</span><br><span class="line"></span><br><span class="line">people.list = person.<span class="built_in">reduce</span>([(<span class="type">String</span>, <span class="type">Int</span>)]()) &#123;</span><br><span class="line">    $<span class="number">0</span> + [($<span class="number">1</span>.name, $<span class="number">1</span>.age)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Swift</tag>
        <tag>Xcode</tag>
        <tag>Bug</tag>
      </tags>
  </entry>
  <entry>
    <title>终端机在Mac上的代理设置</title>
    <url>/cn/Proxy-Settings-on-Mac-for-Terminal/</url>
    <content><![CDATA[<p><code>ProxyChains</code>因为<code>SIP</code>而无法工作。</p>
<a id="more"></a>

<p>而且不能直接设置<code>socks5</code>为终端的代理，也不行。</p>
<p>幸好<code>surge</code>把<code>ss</code>变成了 http(s)代理。</p>
<p>你可以在你的<code>~/.zshrc</code>中添加这个。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="variable">$ip</span>:<span class="variable">$port</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="variable">$http_proxy</span></span><br></pre></td></tr></table></figure>

<p>更有甚者，两个别称</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> startproxy=<span class="string">&#x27;export http_proxy=$ip:$port https_proxy=$ip:$port&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> stopproxy=<span class="string">&#x27;unset http_proxy https_proxy&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>多相睡眠的副作用</title>
    <url>/cn/The-side-effect-of-Polyphasic-sleep/</url>
    <content><![CDATA[<p>第一次听说<a href="https://en.wikipedia.org/wiki/Polyphasic_sleep">多相睡眠</a>的时候，我就试过了。那个时候已经过了快 2 年了。</p>
<a id="more"></a>

<p>这不是一个严格的多相睡眠，因为我采用的是 6 小时的主要睡眠发作和三次 30 分钟的动力小睡。而我在小睡的时候，同时使用催眠术。</p>
<p>这真的很好。通常我会在早上 6 点醒来，做大量的工作，然后我觉得很累，在 10 点或 11 点进行第一次午睡，醒来后有很多中国人。中午吃完饭后我会睡第二个午觉，回家后再睡第三个。</p>
<p>这个黑客方法让我有一种白天被拉长的错觉，因为每次午睡醒来，我都觉得完全是新的一天。</p>
<p>但我最近发现了一个副作用，那就是浑身的不适感也被放大了。特别是我这几天都处于焦虑之中。</p>
<p>我想，这不是多相睡眠的错，该读读伯恩斯-大卫的 <em>When Panic Attacks</em>.</p>
]]></content>
      <tags>
        <tag>Tech</tag>
      </tags>
  </entry>
  <entry>
    <title>View blurred after CGAffineTransformMakeRotation</title>
    <url>/cn/View-blurred-after-CGAffineTransformMakeRotation/</url>
    <content><![CDATA[<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomView</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="meta">@IBInspectable</span> <span class="keyword">var</span> rotation: <span class="type">CGFloat</span> = <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            transform = <span class="type">CGAffineTransformMakeRotation</span>(rotation * <span class="type">CGFloat</span>(<span class="type">M_PI</span>) / <span class="number">180.0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>OOPS!</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ViewBlurred1.png" alt=""></p>
<p><code>layer.shouldRasterize = true</code></p>
<p>But If you have cornerRadius on this view, it will be blurry</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ViewBlurred2.png" alt=""></p>
<p>You should add</p>
<p><code>layer.rasterizationScale = UIScreen.mainScreen().scale</code></p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ViewBlurred3.png" alt=""></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomView</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="meta">@IBInspectable</span> <span class="keyword">var</span> rotation: <span class="type">CGFloat</span> = <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            transform = <span class="type">CGAffineTransformMakeRotation</span>(rotation * <span class="type">CGFloat</span>(<span class="type">M_PI</span>) / <span class="number">180.0</span>)</span><br><span class="line">            layer.shouldRasterize = <span class="literal">true</span></span><br><span class="line">            layer.rasterizationScale = <span class="type">UIScreen</span>.mainScreen().scale</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IBInspectable</span> <span class="keyword">var</span> cornerRadius: <span class="type">CGFloat</span> = <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            layer.cornerRadius = cornerRadius</span><br><span class="line">            clipsToBounds = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>🇺🇸-0-0</title>
    <url>/cn/USA-0-0/</url>
    <content><![CDATA[<h2 id="美帝-0-0"><a href="#美帝-0-0" class="headerlink" title="美帝-0-0"></a>美帝-0-0</h2><div id="googleMap1841" style="
            height: 450px;
            width: 100%;
            margin: 0px;
            padding: 0px
            ">
</div>
<style>.gmnoprint img {max-width: none !important;}</style>
<script defer="defer">
  window.hexoGmaps = window.hexoGmaps || { maps: {}};
  window.hexoGmaps.maps['initgoogleMap1841'] = function init() {
    var mapOptions = {
       'scrollwheel': false,
       'zoom': 10,
       'center': new window.google.maps.LatLng( 37.6938029 , -122.4740425 ),
     },
     target = document.getElementById('googleMap1841'),
     map = new window.google.maps.Map(target, mapOptions);
      
     
     
     var opts0 = {
        'position': new window.google.maps.LatLng( 37.6213129 , -122.3811441 ),
        'map': map,
        'title': 'San Francisco International Airport',
        'zIndex' : 0,
        'icon': ''
      };

     var infowindow0 = new window.google.maps.InfoWindow({
       content: 'San Francisco International Airport'
     });

     var marker0 = new window.google.maps.Marker(opts0);

     marker0.addListener('click', function(){
       infowindow0.open(map, marker0)
     })
     
     
     var opts1 = {
        'position': new window.google.maps.LatLng( 37.7505427 , -122.4136408 ),
        'map': map,
        'title': '1225 York St',
        'zIndex' : 1,
        'icon': ''
      };

     var infowindow1 = new window.google.maps.InfoWindow({
       content: '1225 York St'
     });

     var marker1 = new window.google.maps.Marker(opts1);

     marker1.addListener('click', function(){
       infowindow1.open(map, marker1)
     })
   

  }
  function makeMaps() {
    for (var map in window.hexoGmaps.maps) {
       console.log('map #', map);
       window.hexoGmaps.maps[map]();
    }
  }
  function loadScript() {
    window.hexoGmaps.googleScriptLoaded = true;
    var script = document.createElement('script');
    script.type = 'text/javascript';
        script.src = '//maps.googleapis.com/maps/api/js?v=3.exp&callback=makeMaps&key=AIzaSyB6JxSOGlpKd-7pPtKKG_BIEOiLlaRHxMQ';
    document.body.appendChild(script);
  }
  if (!window.hexoGmaps.googleScriptLoaded) {
    loadScript();
  }
</script>

<a id="more"></a>

<h2 id="抽奖"><a href="#抽奖" class="headerlink" title="抽奖"></a>抽奖</h2><p>小法师 15 年时写了一年多的 Swift，被告知去看 WWDC session<br>莫名其妙，不知道 WWDC 是什么，查了下，点开了一节<br>惊奇的发现虽然英文不行，但连蒙带猜可以做到似懂非懂<br>遥想当年的安卓教程，完全云里雾里<br>于是乎瞬间充满了好感，把当年的大部分视频过了一遍，受益良多</p>
<p>后续了解到只要有开发者账号，Visa/MC 信用卡，就可以抽奖<br>每年三月初在 <a href="https://developer.apple.com/wwdc20/">官网</a> 注册，只有一周的时间，注意别错过了</p>
<p>由于人数众多， 会随机选一些幸运（公司报销）或不幸（自费）的韭菜给予一万一张的门票 🎫<br>之后不管去不去，先扣款<br>无论美签拒签，被拒入境等，钱是不退的<br>票也禁止转让，只能顺给同一个公司的其他的开发者账号<br>总之，抽中就别想退钱，所以抽签要想清楚</p>
<p>不过幸运这种事情从来就没轮到他，所以就无脑的报名了</p>
<h2 id="中签"><a href="#中签" class="headerlink" title="中签"></a>中签</h2><p>抽签结果大概在三月底前公布</p>
<p>夜里突然收到 招商银行 的 $1599 的扣款短信 和 盗刷锁卡电话<br>连忙向银行证明自己是自己<br>第二天中午醒来收到确认邮件<br>连忙电话小伙伴们，被告知要抓紧准备签证和酒店</p>
<p> 是提供了一些会场附近的酒店，然鹅价格很 ，最便宜的也要 $229 一晚<br>想到一个人还是就近原则，所以只能硬着头皮预约</p>
<p>还好一个同事表示虽然没抽到签，但也想去看看<br>另外他有两个小伙伴可以从加拿大 🇨🇦 和 🇺🇸 美国 中部飞到 旧金山去玩耍</p>
<p>于是退了酒店预约了一个看起来还不错的 Airbnb</p>
<p>并且小伙伴会开车，预定了一个 Herz</p>
<p>简直完美</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-00-00.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-00-01.jpg" alt=""></div></div></div>

<h2 id="签证"><a href="#签证" class="headerlink" title="签证"></a>签证</h2><p>首先要有护照<br>不同于上来就人在国外刚下飞机的那些人们<br>之前哪里都没去过，白本一本<br>还好 15 年回老家探望父母时顺带的办了</p>
<p>之后在<a href="https://www.ustraveldocs.com/cn_zh/index.html">官网预约</a><br>网上交钱，预约面签时间</p>
<p>事实证明自己申请比淘宝代理还快一些<br>交钱的页面跳转到中信银行<br>页面古老乍一看以为是钓鱼网站…</p>
<h2 id="面签"><a href="#面签" class="headerlink" title="面签"></a>面签</h2><p>帝都的 美国驻北京大使馆 在朝阳区三元桥</p>
<p>面签的当天下午请假<br>到使馆后傻眼了，之前只在春运见过这么长的队<br>等待面签的人曲曲折折，山路十八弯，排了一万个 Z 形的人龙<br>匍匐前进 3 小时才看到面签的窗口</p>
<p>一共有 5-6 个中文面试窗口，1 个冷冷清清英文窗口</p>
<p>小伙伴突然说反正都会英语，去英文的窗口好了，不用等<br>想想也是，决定试一试</p>
<p>面试官是个老奶奶，当时具体说了什么已经记不清了，大致是：</p>
<p>…<br>小： invite us to join their conference<br>老奶奶吃惊的说道<br>Are you working for Apple?<br>（想了想：emmm, 2019 年还真是，可惜现在的时间线才 2016 年，只好说）<br>小：No, it’s a developer conference.<br>老：Why they invite you?<br>…</p>
<p>打开文件夹拿出  的 Invitation Letter，<br>老奶奶指了指旁边的中文窗口，让他们去一边的中文窗口</p>
<p>旁边维持秩序的保安小姐姐看到他们被踢下来了忙问怎么回事<br>听到这种情况，叹了口气，不过还好没直接拒，就让他们在她旁边等一会儿</p>
<p>然后中文面试的是个外国的小姐姐<br>她也很困惑 Conference<br>猜测可能是非 IT 圈的人并不清楚 Conference 是什么<br>于是拿出邀请函，小姐姐表示不想看，并继续让他解释下为什么</p>
<p>小法师愣住了，如果之前可能因为语言，这次为啥也不看材料呢<br>因为别人面试经验林林总总，只听说过没带材料被拒签的，还没听说过有材料就是不看的<br>还好小伙伴说是 Developer Meeting，小姐姐秒懂了（😓…）</p>
<p>然后问了问美帝有没有亲人，去多久，啥时候回来，住哪</p>
<p>等待了漫长的半分钟<br>小姐姐微笑着说恭喜你们，签证通过了<br>大概几个工作日后会收到邮寄护照</p>
<p>一波三折，也没特别高兴<br>表示了感谢，就和小伙伴回去了</p>
<p>之后一个曾经长居波士顿的壕听说有中文面试<br>还可以两个人一起面<br>还可以一家子拖家带口一起面<br>下巴都掉下来了</p>
<p>美签<br>已经沦陷了<br>他说道</p>
<h2 id="机票"><a href="#机票" class="headerlink" title="机票"></a>机票</h2><p>机票时不知道美联航评价并不好，崇洋媚外的放弃了国航<br>并且那时还没发生臭名昭著的殴打亚裔事件</p>
<p>其实无论哪个航班，连续 12 个小时的飞行，都会变成尸体<br>美联航没那么严格让关机 📴，✈️ 上 拍了张地平线</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-00-02.jpg" alt=""></div></div></div>

<p>万万没想到 UA888 这个航班号四年后 FANNG 的 Assignment 里碰到了</p>
<h2 id="入境"><a href="#入境" class="headerlink" title="入境"></a>入境</h2><p>下了飞机后，入境</p>
<p>一直以来不知怎么有种幻觉，海关后面埋伏着一群狙击手<br>发现嫌疑人就会当场击毙<br>再加上第一次踏入他国领土，还是有些紧张的</p>
<p>海关问了几个常见问题，比如来干嘛，呆几天<br>根据签证的情况，没说是 Conference，而说是 Developer Meeting<br>然后海关啪的给盖了章</p>
<p>拿回护照后，立即表面镇定自若，实则加快步伐往里走<br>生怕被击毙</p>
<p>等看到一些接机的人后，才想起小伙伴还没出来<br>等了半天以为小伙伴 GG 了时，看到了他<br>原来也是说 Conference 被 Check 了一会儿</p>
<p>Conference 真的有毒呀 😂</p>
<h2 id="市中心"><a href="#市中心" class="headerlink" title="市中心"></a>市中心</h2><p>出机场取车，去 Airbnb 放行李 🧳</p>
<p>从三番机场 ✈️ 到 Downtown 还是挺远的<br>没想到这种在帝都要堵上一万年的距离，20 分钟就到了</p>
<p>🏠 居然和 Airbnb 看到的一模一样，没有欺诈<br>只不过 House 一共两层，像是木板结构，楼上是另一家租户，跑起来会有噪音<br>后面有个花园，非常 Nice</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-00-03.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-00-04.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-00-05.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-00-06.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-00-07.jpg" alt=""></div></div></div>

<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-00-08.jpg" alt=""></div></div></div>

<h2 id="优胜美地"><a href="#优胜美地" class="headerlink" title="优胜美地"></a>优胜美地</h2><blockquote>
<p>1984 年，优胜美地被选定为世界遗产，其壮观的花岗岩峭壁、瀑布、清澈的溪流、巨型红杉林和生物多样性为国际所公认</p>
</blockquote>
<p>中途出来摸鱼入山，去 优胜美地 大概 3 小时车程，路上看到一群大风车<br>转过弯突然见到了 OS X Yosemite 的壁纸<br>之前在国内见到的都是土山 ⛰️，这种光秃秃陡峭的花岗岩还是第一次看到<br>以至于错误的认为外国的山都比中国的硬</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-00-25.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-00-10.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-00-12.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-00-13.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-00-14.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-00-20.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-00-18.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-00-19.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-00-21.jpg" alt=""></div></div></div>

<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-00-22.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-00-24.jpg" alt=""></div></div></div>

<p>真的不可思议呢</p>
<p>在回去的路上看着夕阳 🌇 发呆</p>
]]></content>
      <tags>
        <tag>Travel</tag>
        <tag>LittleMaster</tag>
        <tag>USA</tag>
        <tag>🇺🇸</tag>
      </tags>
  </entry>
  <entry>
    <title>🇺🇸-0-1</title>
    <url>/cn/USA-0-1/</url>
    <content><![CDATA[<h2 id="美帝-0-1"><a href="#美帝-0-1" class="headerlink" title="美帝-0-1"></a>美帝-0-1</h2><div id="googleMap6202" style="
            height: 450px;
            width: 100%;
            margin: 0px;
            padding: 0px
            ">
</div>
<style>.gmnoprint img {max-width: none !important;}</style>
<script defer="defer">
  window.hexoGmaps = window.hexoGmaps || { maps: {}};
  window.hexoGmaps.maps['initgoogleMap6202'] = function init() {
    var mapOptions = {
       'scrollwheel': false,
       'zoom': 12.5,
       'center': new window.google.maps.LatLng( 37.781577 , -122.456913 ),
     },
     target = document.getElementById('googleMap6202'),
     map = new window.google.maps.Map(target, mapOptions);
      
     
     
     var opts0 = {
        'position': new window.google.maps.LatLng( 37.7781302 , -122.4175138 ),
        'map': map,
        'title': 'Bill Graham Civic Auditorium',
        'zIndex' : 0,
        'icon': ''
      };

     var infowindow0 = new window.google.maps.InfoWindow({
       content: 'Bill Graham Civic Auditorium'
     });

     var marker0 = new window.google.maps.Marker(opts0);

     marker0.addListener('click', function(){
       infowindow0.open(map, marker0)
     })
     
     
     var opts1 = {
        'position': new window.google.maps.LatLng( 37.8019619 , -122.4192982 ),
        'map': map,
        'title': 'Lombard Street',
        'zIndex' : 1,
        'icon': ''
      };

     var infowindow1 = new window.google.maps.InfoWindow({
       content: 'Lombard Street'
     });

     var marker1 = new window.google.maps.Marker(opts1);

     marker1.addListener('click', function(){
       infowindow1.open(map, marker1)
     })
     
     
     var opts2 = {
        'position': new window.google.maps.LatLng( 37.8085488 , -122.41018 ),
        'map': map,
        'title': 'Fisherman&#39;s Wharf',
        'zIndex' : 2,
        'icon': ''
      };

     var infowindow2 = new window.google.maps.InfoWindow({
       content: 'Fisherman&#39;s Wharf'
     });

     var marker2 = new window.google.maps.Marker(opts2);

     marker2.addListener('click', function(){
       infowindow2.open(map, marker2)
     })
     
     
     var opts3 = {
        'position': new window.google.maps.LatLng( 37.7591086 , -122.5116423 ),
        'map': map,
        'title': 'Ocean Beach',
        'zIndex' : 3,
        'icon': ''
      };

     var infowindow3 = new window.google.maps.InfoWindow({
       content: 'Ocean Beach'
     });

     var marker3 = new window.google.maps.Marker(opts3);

     marker3.addListener('click', function(){
       infowindow3.open(map, marker3)
     })
   

  }
  function makeMaps() {
    for (var map in window.hexoGmaps.maps) {
       console.log('map #', map);
       window.hexoGmaps.maps[map]();
    }
  }
  function loadScript() {
    window.hexoGmaps.googleScriptLoaded = true;
    var script = document.createElement('script');
    script.type = 'text/javascript';
        script.src = '//maps.googleapis.com/maps/api/js?v=3.exp&callback=makeMaps&key=AIzaSyB6JxSOGlpKd-7pPtKKG_BIEOiLlaRHxMQ';
    document.body.appendChild(script);
  }
  if (!window.hexoGmaps.googleScriptLoaded) {
    loadScript();
  }
</script>

<a id="more"></a>

<h2 id="Badge"><a href="#Badge" class="headerlink" title="Badge"></a>Badge</h2><p>第二天去 Bill Graham Civic Auditorium<br>出示护照可以领 Badge</p>
<p>图上是旁边的 <a href="https://en.wikipedia.org/wiki/San_Francisco_City_Hall">三藩市市政厅</a></p>
<blockquote>
<p>旧金山市政厅是加州旧金山市和县的政府所在地。它于 1915 年在市公民中心的空地上重新开放，是 19 世纪 80 年代至 1917 年美国文艺复兴运动的一个缩影，是一座美学艺术纪念碑。该建筑的圆顶比美国国会大厦的圆顶高 42 英尺。</p>
</blockquote>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-01.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-02.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-00.jpg" alt=""></div></div></div>

<p>后面几天进入会场需要刷 Badge</p>
<p>丢了的话，嗯…自认倒霉， 不赔不管</p>
<p>同时发了一件丑丑的外套 🧥<br>不明白这么热为什么不发 T 桖而是外套</p>
<p>之后明白了三藩的奇特，太阳下晒死<br>阴影中海风一吹又瑟瑟发抖<br>所以那件丑丑的外套 🧥 发挥了重要的作用</p>
<p>晚上再次路过时，会场变成了 🏳️‍🌈</p>
<h2 id="LGBT-🏳️‍🌈"><a href="#LGBT-🏳️‍🌈" class="headerlink" title="LGBT 🏳️‍🌈"></a>LGBT 🏳️‍🌈</h2><p>很早就注意到周边挂满了小彩旗 🏳️‍🌈，刚开始只是觉得很好玩，并且思维惯性奇怪为什么不是 🇺🇸 国旗<br>从另一个州飞过来的 T 说这是 LGBT<br>并且月底会有 <a href="https://en.wikipedia.org/wiki/San_Francisco_Pride">The SF LGBT Parade and Celebration</a></p>
<blockquote>
<p>旧金山女同性恋、男同性恋、双性恋和变性人骄傲庆典（原名国际女同性恋自由日、同性恋自由日、克里斯托弗西街），通常被称为 “旧金山骄傲”，是每年 6 月底在加州旧金山举行的游行和节日，以庆祝女同性恋、男同性恋、双性恋和变性人（LGBT）及其盟友。2019 年的第 49 届年度游行包括 289 支游行队伍，官网称其为 “全美最大的 LGBT 人群和盟友聚会”。</p>
</blockquote>
<p>稍后这位 T 小姐说自己有一位女朋友<br>单身了一万年的小法师沉默良久无言以对</p>
<h2 id="九曲花街"><a href="#九曲花街" class="headerlink" title="九曲花街"></a><a href="https://en.wikipedia.org/wiki/Lombard_Street_(San_Francisco)">九曲花街</a></h2><blockquote>
<p>在伦巴底街上最为人所熟知的路段，莫过于位在俄罗斯山上的“九曲花街”。九曲花街为该街横贯海德街和理维沃斯街之间的路段。这起因于它是全美国最弯曲的一条街道，短短一段路上一共有八个急弯，只允许由海德街驶向李维沃斯街、下坡方向的单向通行，而旧金山缆车跑华街-海德街线则途经此路段的起点（也就是最高点的街口位置）。这段坡度非常陡的街道原本是直线通行的，但考虑到行车及行人安全，这路段于 1923 年便被改成目前所见的弯曲迂回情况。[2]这个设计最早是由业主卡尔·亨利提出的。[3]这个设计旨在利用长度换取空间减缓沿线的坡度大小（27%）。[4]整条九曲花街长 600 英尺（180 米），直线路段长 412.5 英尺（125.7 米），并且用砖块铺成路面增加摩擦力。起点处标示著最高限速为 5 mph（8 km/h）。</p>
</blockquote>
<p>相信看过头文字 D 的盆友们都会想到<br><a href="https://www.bilibili.com/bangumi/play/ep4643">头文字 D Third Stage</a> 里<br>拓海 vs 小柏海，Toyota AE86 vs. MR-2<br>第 55 分 55 秒的过弯方式</p>
<p>可惜上面 👆 只是动漫</p>
<p>在真实世界中他们怂的不行<br>那时还没驾照，同行的小伙伴也对自己过弯没有自信<br>所以最终他们把车 🚗 停在了路边，然后叫了辆 Uber 去渔人码头<br>并且特意嘱咐司机，要从九曲花街过</p>
<p>司机很善解人意的表示理解，并且过弯时放慢了速度</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-03.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-04.jpg" alt=""></div></div></div>

<p>阳光明媚，青翠欲滴，花簇锦攒，姹紫嫣红</p>
<p>BTW： 记得带滤(mo)镜 🕶️</p>
<h2 id="渔人码头-amp-恶魔岛"><a href="#渔人码头-amp-恶魔岛" class="headerlink" title="渔人码头 &amp; 恶魔岛"></a><a href="https://en.wikipedia.org/wiki/Fisherman%27s_Wharf,_San_Francisco">渔人码头</a> &amp; <a href="https://en.wikipedia.org/wiki/Alcatraz_Island">恶魔岛</a></h2><blockquote>
<p>旧金山渔人码头的名字和街区特色来自于 19 世纪中后期，意大利移民渔民利用淘金热带来的人口涌入，来到这座城市的早期。大部分意大利移民渔民在靠近码头的北滩地区定居，并捕捞当地的美味佳肴和丹吉士蟹。从那时起直到今天，码头仍然是旧金山渔船队的作业中心。尽管在 20 世纪 70 年代和 80 年代，该地区被重新开发为旅游景点，但仍有许多活跃的渔民和他们的船队。</p>
</blockquote>
<p>广场上有个大螃蟹 🦀️</p>
<p>旁边的杂货店充满了各种 Made in China 的小商品</p>
<p>恶魔 😈 岛</p>
<blockquote>
<p>游客可以从位于旧金山渡轮大厦和渔人码头之间的 33 号码头乘坐渡轮，不到 15 分钟就可以到达该岛。</p>
</blockquote>
<p>码头 ⛵️ 旁边有艘二战的英雄，退役的军舰和潜水艇</p>
<p>广场上有些人在弹奏音乐 🎵<br>印象很深的是有个老爷爷在那里很专注的演奏一个很欢乐的曲子，仿佛周围没有行人<br>这就是心流嘛？以至于产生了去给小费的冲动<br>此事也成为的一个久久不能释怀的遗憾</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-05.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-06.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-07.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-08.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-09.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-10.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-12.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-13.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-14.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-15.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-17.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-18.jpg" alt=""></div></div></div>

<p>天，像中毒了一样的蓝</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-16.jpg" alt=""></p>
<h2 id="Infinite-Loop"><a href="#Infinite-Loop" class="headerlink" title="Infinite Loop"></a>Infinite Loop</h2><p>之前一直以为那个太空船是 Infinite Loop<br>顾名思义嘛，一圈一圈的无限循环<br>然鹅并不是<br>实际是个园区，有个 Visitor Center</p>
<p>不知道只有这里有 纪念款 T 桖<br>选了个 Metal 的草草了事</p>
<p>至于 Park<br>还在建设中…</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-19.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-20.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-21.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-22.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-23.jpg" alt=""></div></div></div>

<h2 id="斯坦福"><a href="#斯坦福" class="headerlink" title="斯坦福"></a>斯坦福</h2><p>绕了一圈就出来了<br>感觉如果是小时候就被带过来<br>说不定高考可以多考 50 分呢</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-26.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-27.jpg" alt=""></div></div></div>

<h2 id="California-State-Route-1"><a href="#California-State-Route-1" class="headerlink" title="California State Route 1"></a>California State Route 1</h2><h2 id="加州一号公路"><a href="#加州一号公路" class="headerlink" title="加州一号公路"></a>加州一号公路</h2><p>电影中的海是多么浪漫，牵着手沿着沙滩慢慢走<br>一直生活在大陆内部<br>找到妹纸然后去看海<br>就成了一直以来的一个梦想</p>
<p>海没看到先看到了太平洋<br>然鹅加州的海滩<br>沙子十分扎脚<br>一不注意海水 🌊 就冲了上来没过了裤腿<br>吓的小法师连连后退<br>海风又咸又腥，沙滩上到处是海带的尸体<br>看到海平面也没有任何顿悟<br>反而阳光特别刺眼<br>晚上回去他和小伙伴都有了不同程度的晒伤</p>
<blockquote>
<p>身体的任何暴露部位–包括耳垂、头皮和嘴唇–都可能被灼伤。即使是被遮盖的部位也可能被灼伤，例如，如果您的衣服有宽松的编织，允许紫外线（UV）光通过。您的眼睛对阳光中的紫外线极为敏感，也可能被灼伤</p>
<p>当紫外线光子照射到皮肤上时，会破坏人体细胞中的 DNA。它通过破坏腺苷、胸腺嘧啶和鸟嘌呤这四种核苷酸之间的有序键来实现。所谓胸腺嘧啶二聚体的形成，就是当两个胸腺嘧啶核苷酸结合在一起，使整个 DNA 分子的形状失调。<br>乱了的 DNA 的细胞通常就会自杀，这个过程叫做细胞凋亡。细胞接受了太多的辐射，以至于它们进行了凋亡。</p>
</blockquote>
<p>尴尬 😅<br>体验极差<br>一点都不浪漫…<br>电影里都是骗人的</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-31.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-35.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-36.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-37.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-38.jpg" alt=""></div></div></div>

<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-34.jpg" alt=""></p>
<h2 id="Soylent-amp-iRobot"><a href="#Soylent-amp-iRobot" class="headerlink" title="Soylent &amp; iRobot"></a>Soylent &amp; iRobot</h2><p>之前 壕 反复强调 小米机器人 🤖️ 吸力不够，一定要买 iRobot<br>北美电器便宜，又正好赶上 Amazon 700 系列 打折 🈹️，3000 多块就拿下了</p>
<p>不过那时还没有视觉导航的 900 系列<br>还是随机碰撞算法，如果在家就会觉得机器人 🤖️ 超傻<br>不过平时上班回来，发现机器人还在充电桩没动过一样<br>如果不是地板干干净净了，还以为在偷懒<br>另外质量蛮好的，有次不在时把加湿器撞倒了<br>回到家发现吸了一肚子水，以为坏了，结果把水倒掉好好的</p>
<p>瓶装 Soylent 境内免运费，买了一箱当早点，防止早上懒床去不了会场</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-25.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-01-24.jpg" alt=""></div></div></div>
]]></content>
      <tags>
        <tag>Travel</tag>
        <tag>LittleMaster</tag>
        <tag>USA</tag>
        <tag>🇺🇸</tag>
      </tags>
  </entry>
  <entry>
    <title>无话可说</title>
    <url>/cn/Nothing-To-Say/</url>
    <content><![CDATA[<p>我已经很久没有写东西了。也许完全用英文写是障碍。</p>
<p>这两个月发生了太多的事情。</p>
<p>首先，我所在的公司 D 轮融资失败。</p>
<a id="more"></a>

<p>我们的 CTO 不得不将设计公寓的程序员减少了三分之一以上，将三个应用减少到一个。几乎一半的程序员都离开了。似乎一切都回到了 B 轮快乐时光。<br>但是，有些东西再也回不去了。</p>
<p>我的项目迭代到 1.6 版本就被砍掉了。所以，没有了编码的工作，之后，我去旧金山参加了 WWDC16。</p>
<p>第二，做自己喜欢的事。</p>
<p>所以，编程是我的工作，精确到 iOS 开发者后，我的间隔年。</p>
<p>刚开始工作的时候，我订阅了很多科技博客，但它们再也没有引起我的注意。同时，我对所有的事情都失去了兴趣，也不想去见任何人。</p>
<p>可能是我没有真正的兴趣爱好导致的，以前唯一的兴趣就是编程。</p>
<p>但是，两年前去了北京这个世界上最让人窒息的超级城市之后，我终于有了一点奢侈的时间来放松自己的身体和精神。</p>
<p>第三，从 SFO 回来后，我确实重新调整了一下锻炼的重要性。在发达国家，几乎每个精英都会锻炼身体。</p>
<p>当我看到到处都是蓝天，看到宽阔的太平洋，看到阳光下的绿叶，看到山上的房子被雾气笼罩。<br>我知道世界上还有一个美好的世界。<br>保持自己的热度是最重要的，其他都是次要的。</p>
]]></content>
      <tags>
        <tag>Self</tag>
      </tags>
  </entry>
  <entry>
    <title>在Mac上使用AppleScript作为自动热键</title>
    <url>/cn/Use-AppleScript-as-AutoHotkey-On-Mac/</url>
    <content><![CDATA[<p>为了做好 Soylent 1.6 的测试，我最近买了 20 多盒。<br>但是有一个问题，Safari 不支持自动填写表格，所以我必须手动输入我的信用卡的全部信息，以支付运输费和关税。所以我必须手动输入我的信用卡的全部信息来计算运输费和关税。</p>
<a id="more"></a>

<p>所有的支付步骤仅仅是号码、日期、简历、密码。</p>
<p>在一次次重复后，我崩溃了。</p>
<p>应该是自动的。</p>
<p>看在上帝的份上，当我四年前还在使用 Windows 的时候，我就想到了 AutoHotkey。</p>
<p>Mac 有 AppleScript，可以模拟键盘输入和鼠标点击。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">tell</span> <span class="built_in">application</span> <span class="string">&quot;Safari&quot;</span></span><br><span class="line">	<span class="built_in">activate</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">tell</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">tell</span> <span class="built_in">application</span> <span class="string">&quot;System Events&quot;</span></span><br><span class="line">	<span class="keyword">tell</span> process <span class="string">&quot;Safari&quot;</span></span><br><span class="line">		<span class="keyword">set</span> <span class="built_in">frontmost</span> <span class="keyword">to</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">-- you can get the screen coordinate by `cmd+shift+4` easily</span></span><br><span class="line">		click <span class="keyword">at</span> &#123;<span class="number">1420</span>, <span class="number">500</span>&#125;</span><br><span class="line">		<span class="comment">-- delay 1s which is for wait the website to load</span></span><br><span class="line">		<span class="built_in">delay</span> <span class="number">1</span></span><br><span class="line">		click <span class="keyword">at</span> &#123;<span class="number">1305</span>, <span class="number">615</span>&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">delay</span> <span class="number">10</span></span><br><span class="line">		click <span class="keyword">at</span> &#123;<span class="number">1090</span>, <span class="number">369</span>&#125;</span><br><span class="line">		<span class="comment">-- simulate press **6** on keyboard</span></span><br><span class="line">		keystroke <span class="string">&quot;6&quot;</span></span><br><span class="line">		keystroke <span class="string">&quot;6&quot;</span></span><br><span class="line">		keystroke <span class="string">&quot;0&quot;</span></span><br><span class="line">		<span class="comment">-- ...</span></span><br><span class="line">		keystroke <span class="string">&quot;6&quot;</span></span><br><span class="line">		keystroke <span class="string">&quot;4&quot;</span></span><br><span class="line">		<span class="built_in">delay</span> <span class="number">1</span></span><br><span class="line">		click <span class="keyword">at</span> &#123;<span class="number">1083</span>, <span class="number">426</span>&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">end</span> <span class="keyword">tell</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">tell</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>而且我在这个过程中发现了一个有趣的事情，那就是<strong>cvv</strong>不能被脚本点击。</p>
<p>看来银行的网站在安全方面真的做了一些工作。</p>
]]></content>
      <tags>
        <tag>Mac</tag>
        <tag>AppleScript</tag>
        <tag>AutoHotkey</tag>
      </tags>
  </entry>
  <entry>
    <title>Sync macOS ssh config with iCloud</title>
    <url>/cn/Sync-macOS-ssh-config-with-iCloud/</url>
    <content><![CDATA[<p>作为一个开发者，由于 “beta “系统的原因，我有时不得不恢复备份。</p>
<p>幸运的是，这几天大部分数据都在服务器上。不仅 Safari、照片、日历、Note、提醒事项，其他应用也使用 iCloud 存储。这是重大的进步。我只需要重装系统后从 App Store 和<code>brew shell</code>重新下载应用即可。</p>
<a id="more"></a>

<p>但 ssh、配置等的设置很烦人。而且，我可能会丢失我的私钥。</p>
<p>所以我在 iCloud Drive 文件夹里新建了一个名为 “macOS “的文件夹，并将所有不带”. “的文件都复制过来，例如：<code>.gitconfig</code> ~&gt; <code>gitconfig</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">macOS=/Users/art/Library/Mobile\ Documents/com~apple~CloudDocs/macOS</span><br><span class="line"></span><br><span class="line">ln -sf <span class="variable">$macOS</span>/gitignore .gitignore</span><br><span class="line">ln -sf <span class="variable">$macOS</span>/gitignore .gitignore_global</span><br><span class="line">ln -sf <span class="variable">$macOS</span>/gitconfig .gitconfig</span><br><span class="line"></span><br><span class="line">ln -sf <span class="variable">$macOS</span>/zshrc .zshrc</span><br><span class="line">ln -sf <span class="variable">$macOS</span>/config  .config</span><br><span class="line">ln -sf <span class="variable">$macOS</span>/ssh  .ssh</span><br><span class="line"></span><br><span class="line">mkdir -p Blog</span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init Blog</span><br><span class="line"><span class="built_in">cd</span> Blog</span><br><span class="line">npm install</span><br><span class="line">rm -rf <span class="built_in">source</span></span><br><span class="line">ln -s ~/Documents/Blog/<span class="built_in">source</span> ~/Blog/<span class="built_in">source</span></span><br><span class="line"></span><br><span class="line">brew install ruby python pandoc</span><br><span class="line"></span><br><span class="line">brew install openssl youtube-dl ffmpeg pyenv rbenv rclone autojump mp4box</span><br><span class="line"></span><br><span class="line"><span class="comment"># ruby</span></span><br><span class="line">rbenv install 2.7.0</span><br><span class="line">rbenv global 2.7.0</span><br><span class="line"></span><br><span class="line">brew cask install iterm2  sourcetree vmware-fusion flux sublime-text shadowsocksx-ng clashx wwdc spectacle losslesscut iina dropbox typora istat-menus 1password calibre imageoptim plex-media-server vscode osxfuse firefox chromium</span><br><span class="line"></span><br><span class="line"><span class="comment"># preview</span></span><br><span class="line">brew cask install qlvideo qlstephen qlcolorcode quicklook-json qlmarkdown qlprettypatch qlimagesize suspicious-package provisionql</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>任何云端驱动器（如 Dropbox）都可以做到这一点，但。<br>考虑到隐私和这封由蒂姆-库克撰写的信件<a href="http://www.apple.com/customer-letter/">给客户的信息</a></p>
<p>iCloud 是我的选择 😊</p>
]]></content>
      <tags>
        <tag>macOS</tag>
        <tag>ssh</tag>
        <tag>sync</tag>
      </tags>
  </entry>
  <entry>
    <title>中国人如何学习英语</title>
    <url>/cn/How-to-learn-English-as-a-Chinese/</url>
    <content><![CDATA[<p>我和 99%的中国学生一样，讨厌用残酷的方式记单词。小时候，我们不痛不痒地自然学习母语。</p>
<p>所以，当我在穷困潦倒的小学时，我从来没有记住一个字。</p>
<a id="more"></a>

<p>其实，事实是我记不住字。不管你信不信，不管我怎么努力，我就是记不住。每次轮到我这一排在黑板上写字，我都要仔细地左看右看，一个字一个字地抄。</p>
<p>作为当时的少年，我很好奇，为什么他们能做到？一定是方法与我的大脑不兼容。</p>
<p>幸运的是，我在一本格子书上看到了另一种方法，一个曾经的状元宣布她也不记字。她所做的就是大声重复 NCE100 多遍。</p>
<p>哼，真不错，于是我就试了一下，这个方法对我帮助很大，因为它让我在高考中得到了一个还算不错的分数，在大学里也通过了 CET6，甚至我有时候也知道自己在读什么。</p>
<p>在雅思之前，早期所有的英语考试都只是一个笑话。</p>
<p>而且还有一个盲点是我最近才意识到的，考试就是考试，应该掌握重点，尽快离开。</p>
<p>在此之前，我坚信只要自己的真实水平提高了，就能像每天做试卷一样，不需要额外的努力，就能胜任考试。</p>
<p>但事实上，这对人的素质要求非常高，远远超过了考试的要求，这是一条没有尽头的路。</p>
<p>从第一次接触英语到现在，14 年过去了，几个月前和宿管沟通后，我觉得自己只是迈出了一小步。</p>
<p>现在我知道语言更像是人类的一种本能，当宝宝长大后，我们的大脑神经元细胞会被清洗，因为根据进化心理学，我们的祖先在小时候是没有必要学习另一种语言的。</p>
<p>但我们现在是在现代社会，据我所知，只有两种方法听起来合理，更重要的是经济。</p>
<ol>
<li><a href="https://www.goodreads.com/book/show/18868451?from_search=true">把你的英语用起来</a></li>
<li>赖世雄美语音标</li>
<li>ESLPOD</li>
<li>美式口音培训</li>
<li>每年至少阅读 10 本原版书籍</li>
<li><a href="http://www.geekonomics10000.com/870">一点实用主义的学英语心得</a></li>
<li>每天学习 600 个 GRE 单词</li>
<li>按艾宾浩斯遗忘曲线重复进行。</li>
<li>强化阅读</li>
<li>过去的试卷</li>
</ol>
<p>现在你看，讽刺的是第 2 条把我踢到了原点：我要记单词!</p>
<p>但这次至少有一点是不同的，我是根据自己的自由意志选择的。</p>
]]></content>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 StoryBoard 上添加 Xib</title>
    <url>/cn/How-to-add-Xib-on-StoryBoard/</url>
    <content><![CDATA[<blockquote>
<p>在 1975 年的经典软件项目管理书籍《神话人月。Essays on Software Engineering》中，Fred Brooks 指出，无论选择哪种编程语言，一个专业的开发人员平均每天要写 10 行代码（LoC）。</p>
</blockquote>
<p>StoryBoard 有利于节省代码行，提高效率，苹果在每次 WWDC 上都会大力推荐，并不断改进。</p>
<a id="more"></a>

<p>我不明白为什么还有很多团队负责人要求他们可怜的程序员用编程的方式来写 UIView。</p>
<p>也许他们认为有些 CustomViews 的重用性很强，如果将其粘贴到 StoryBoard 中，会造成多余的副作用。</p>
<p>所以，这个解决方案的主要思路是，将 CustomViews 凝聚到 Xib 中，然后添加到 StoryBoard 中。</p>
<p>这需要几个步骤，因为苹果并不直接支持它。</p>
<ol>
<li>添加一个 IBDesignable<code>CustomView.Swift</code>和<code>CustomView.Xib</code></li>
<li>将<code>CustomView.xib-&gt;占位符-&gt;文件的所有者-&gt;自定义类</code>设置为<code>CustomView</code></li>
<li>以编程方式新建一个 CustomView 并从 CustomView.Xib 加载根视图</li>
<li>在 init 函数的<code>CustomView</code>上在水平和垂直中心添加宽度和高度相等的根视图</li>
<li>现在您可以将 View 拖到 StoryBoard，并将其类设置为<code>CustomView</code>，这可以生成快照以进行预览</li>
</ol>
<p>但是 CustomView 的子视图（如 UIButton）无法连接到 ViewController<code>@IBOutlet</code></p>
<p><code>Delegate</code> or <code>Block</code> 可以解决这个问题。</p>
<p>至于我，我建议 <code>Block</code> 方式, 因为我用过 <code>Delegate</code> 半年了，发现</p>
<ul>
<li>ViewController 会有太多 delegates</li>
<li><code>delegate = self</code> 必须写 <code>viewDidLoad</code> 而有时 <code>=nil</code> 在 <code>viewDidDisappear</code></li>
</ul>
<p><code>Block</code>的代码会更少，更简单。</p>
<p>下面是<a href="https://github.com/leihao0/DesignableView">例子</a>，可能会减少你的时间。</p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>通过镜像在Swift中进行反射</title>
    <url>/cn/Reflection-in-Swift-via-Mirror/</url>
    <content><![CDATA[<ul>
<li><p>Mirror</p>
<ul>
<li><code>value</code>: 访问原始反射值，但类型为 Any。</li>
<li><code>valueType</code>: 原始反射值的类型，相当于 value.dynamicType。</li>
</ul>
</li>
<li><p>我没有发现任何方法可以用纯 Swift 对象给<code>$0.value</code>赋值，所以<code>Class</code>继承<code>NSObject</code>为<code>KVC</code>。</p>
</li>
<li><p>我忽略了简化的可选情况。</p>
</li>
<li><p>递归生成字典或对象</p>
</li>
</ul>
<a id="more"></a>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">DynamicKVType</span> = [<span class="type">String</span>: <span class="type">Any</span>]</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">DynamicKV</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dict</span><span class="params">()</span></span> -&gt; <span class="type">DynamicKVType</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">assignment</span><span class="params">(<span class="number">_</span> with: DynamicKVType)</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">DynamicKV</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dict</span><span class="params">()</span></span> -&gt; <span class="type">DynamicKVType</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> dict = <span class="type">DynamicKVType</span>()</span><br><span class="line"></span><br><span class="line">        <span class="type">Mirror</span>(reflecting: <span class="keyword">self</span>).children.forEach &#123;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> k = $<span class="number">0</span>.label <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> v = $<span class="number">0</span>.value <span class="keyword">as</span>? <span class="type">DynamicKV</span> &#123;</span><br><span class="line">                dict[k] = v.dict()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dict[k] = $<span class="number">0</span>.value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dict</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">assignment</span><span class="params">(<span class="number">_</span> with: DynamicKVType)</span></span> &#123;</span><br><span class="line">        <span class="type">Mirror</span>(reflecting: <span class="keyword">self</span>).children.forEach &#123;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> obj = <span class="keyword">self</span> <span class="keyword">as</span>? <span class="type">NSObject</span>, <span class="keyword">let</span> dictV = with[$<span class="number">0</span>.label!], <span class="keyword">let</span> k = $<span class="number">0</span>.label <span class="keyword">else</span> &#123; <span class="built_in">fatalError</span>(<span class="string">&quot;child leak&quot;</span>) &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> dkvt = dictV <span class="keyword">as</span>? <span class="type">DynamicKVType</span>, <span class="keyword">let</span> v = $<span class="number">0</span>.value <span class="keyword">as</span>? <span class="type">DynamicKV</span> &#123;</span><br><span class="line">                v.assignment(dkvt)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                obj.setValue(dictV, forKey: k)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>: <span class="title">NSObject</span>, <span class="title">DynamicKV</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s: <span class="type">String</span> = <span class="string">&quot;a&quot;</span></span><br><span class="line">    <span class="keyword">var</span> i: <span class="type">Int</span> = -<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>: <span class="title">NSObject</span>, <span class="title">DynamicKV</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">&quot;b&quot;</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="type">A</span>()</span><br><span class="line">    <span class="keyword">var</span> array = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="type">B</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b.dict\t&quot;</span>, b.dict())</span><br><span class="line"></span><br><span class="line">b.assignment([<span class="string">&quot;s&quot;</span>: <span class="string">&quot;bbbbbbb&quot;</span>, <span class="string">&quot;a&quot;</span>: [<span class="string">&quot;s&quot;</span>: <span class="string">&quot;aaaaaaa&quot;</span>, <span class="string">&quot;i&quot;</span>: <span class="number">233</span>], <span class="string">&quot;array&quot;</span>: [-<span class="number">3</span>, -<span class="number">2</span>, -<span class="number">1</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b.assignment\t&quot;</span>, b.s, b.a.s, b.a.i, b.array)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Swift</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>UITextField And UILabel Tips</title>
    <url>/cn/UITextField-and-UILabel-Tips/</url>
    <content><![CDATA[<h2 id="UITextField-Tips"><a href="#UITextField-Tips" class="headerlink" title="UITextField Tips"></a>UITextField Tips</h2><h3 id="Add-a-top-Line-on-Keyboard"><a href="#Add-a-top-Line-on-Keyboard" class="headerlink" title="Add a top Line on Keyboard"></a>Add a top Line on Keyboard</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UITextField</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addTopLineOnKeyboard</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> line = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">2000</span>, height: <span class="number">0.5</span>))</span><br><span class="line">        line.backgroundColor = <span class="string">&quot;979797&quot;</span>.color</span><br><span class="line"></span><br><span class="line">        inputAccessoryView = line</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="Only-allowed-a-price-number-with-exactly-two-decimals"><a href="#Only-allowed-a-price-number-with-exactly-two-decimals" class="headerlink" title="Only allowed a price number with exactly two decimals"></a>Only allowed a price number with exactly two decimals</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">textField</span><span class="params">(<span class="number">_</span> textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> str = (textField.text! <span class="keyword">as</span> <span class="type">NSString</span>).replacingCharacters(<span class="keyword">in</span>: range, with: string)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> regex = <span class="string">&quot;^([1-9]\\d&#123;0,7&#125;|0)(\\.\\d&#123;0,2&#125;)?$|^$&quot;</span></span><br><span class="line">    <span class="keyword">let</span> predicte = <span class="type">NSPredicate</span>(format: <span class="string">&quot;SELF MATCHES %@&quot;</span>, regex)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  predicte.evaluate(with: str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Only-allowed-1-100-or-leave-blank"><a href="#Only-allowed-1-100-or-leave-blank" class="headerlink" title="Only allowed 1-100 or leave blank"></a>Only allowed 1-100 or leave blank</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">textField</span><span class="params">(<span class="number">_</span> textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> str = (textField.text! <span class="keyword">as</span> <span class="type">NSString</span>).replacingCharacters(<span class="keyword">in</span>: range, with: string)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1-100 or leave blank</span></span><br><span class="line">    <span class="keyword">let</span> regex = <span class="string">&quot;^[1-9]?\\d|100|[1-9]?$&quot;</span></span><br><span class="line">    <span class="keyword">let</span> predicte = <span class="type">NSPredicate</span>(format: <span class="string">&quot;SELF MATCHES %@&quot;</span>, regex)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  predicte.evaluate(with: str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="UILabel-Tips"><a href="#UILabel-Tips" class="headerlink" title="UILabel Tips"></a>UILabel Tips</h2><h3 id="Formate-cell-phone-number-to-111-1111-111"><a href="#Formate-cell-phone-number-to-111-1111-111" class="headerlink" title="Formate cell-phone number to 111 1111 111"></a>Formate cell-phone number to <code>111 1111 111</code></h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> phoneNumberFormater: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> s = <span class="keyword">self</span>.replacingOccurrences(of: <span class="string">&quot; &quot;</span>, with: <span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">let</span> <span class="built_in">count</span> = s.characters.<span class="built_in">count</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">count</span> &gt; <span class="number">7</span> &#123;</span><br><span class="line">                s.insert(<span class="string">&quot; &quot;</span>, at: s.index(s.startIndex, offsetBy: <span class="number">3</span>))</span><br><span class="line">                s.insert(<span class="string">&quot; &quot;</span>, at: s.index(s.startIndex, offsetBy: <span class="number">8</span>))</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">count</span> &gt; <span class="number">3</span> &#123;</span><br><span class="line">                s.insert(<span class="string">&quot; &quot;</span>, at: s.index(s.startIndex, offsetBy: <span class="number">3</span>))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Highlight-UILabel’s-substring-by-given-string"><a href="#Highlight-UILabel’s-substring-by-given-string" class="headerlink" title="Highlight UILabel’s substring by given string"></a>Highlight UILabel’s substring by given string</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> userInputPhoneNumber = <span class="string">&quot;123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@IBOutlet</span> <span class="keyword">private</span> <span class="keyword">weak</span> <span class="keyword">var</span> phoneLabel: <span class="type">UILabel!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> phoneNumber:  <span class="type">String</span> = <span class="string">&quot;123456789&quot;</span> &#123;</span><br><span class="line"><span class="keyword">didSet</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> atrStr = <span class="type">NSMutableAttributedString</span>(string: phoneNumber.phoneNumberFormater)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> font = <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">14</span>)</span><br><span class="line">    <span class="keyword">let</span> range = (phoneNumber.phoneNumberFormater <span class="keyword">as</span> <span class="type">NSString</span>).range(of: userInputPhoneNumber.phoneNumberFormater)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> range.location == <span class="number">0</span> &#123;</span><br><span class="line">        atrStr.addAttributes([<span class="type">NSFontAttributeName</span> :  font, <span class="type">NSForegroundColorAttributeName</span>: <span class="type">UIColor</span>.red], range: (phoneNumber.phoneNumberFormater <span class="keyword">as</span> <span class="type">NSString</span>).range(of: userInputPhoneNumber.phoneNumberFormater))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    phoneLabel.attributedText = atrStr</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>PandoraBox上的时间胶囊</title>
    <url>/cn/Time-Capsule-on-PandoraBox/</url>
    <content><![CDATA[<p>我的 “OpenWRT “是 “PandoraBox”，路由器是 “Mi mini”。<br>这些都是与官方<a href="https://wiki.openwrt.org/doc/howto/timemachine">wiki</a>的一些细微差别。</p>
<a id="more"></a>

<h2 id="軟件"><a href="#軟件" class="headerlink" title="軟件"></a>軟件</h2><p><code>System -&gt; Software -&gt; Configuration</code></p>
<p>将所有的文字调整为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dest root /</span><br><span class="line">dest ram /tmp</span><br><span class="line">lists_dir ext /var/opkg-lists</span><br><span class="line">option overlay_root /overlay</span><br><span class="line">src/gz r2_base http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/base</span><br><span class="line">src/gz r2_management http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/management</span><br><span class="line">src/gz r2_oldpackages http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/oldpackages</span><br><span class="line">src/gz r2_packages http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/packages</span><br><span class="line">src/gz r2_routing http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/routing</span><br><span class="line">src/gz r2_telephony http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/telephony</span><br><span class="line"></span><br><span class="line">src/gz r2_old_packages http://downloads.openwrt.org.cn/PandoraBox/ralink/mt7620_old/packages/</span><br><span class="line">arch all 100</span><br><span class="line">arch noarch 200</span><br><span class="line">arch ralink 300</span><br></pre></td></tr></table></figure>

<p>然后，ssh 到你的 PandoraBox</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install shadow-useradd shadow-groupadd</span><br><span class="line"><span class="built_in">cd</span> /usr/lib</span><br><span class="line">ln -s libgcrypt.so.20 libgcrypt.so.11</span><br></pre></td></tr></table></figure>

<p>到您的浏览器</p>
<p><code>System -&gt; Software -&gt; Actions -&gt; Download and install package</code></p>
<ul>
<li>netatalk</li>
<li>avahi-daemon</li>
<li>kmod-usb-storage</li>
<li>kmod-fs-hfsplus</li>
<li>block-mount</li>
</ul>
<p>不要像<a href="https://wiki.openwrt.org/doc/howto/timemachine">wiki</a>所说的那样尝试 “opkg install”，否则你会得到错误信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Configuring kmod-fs-hfsplus.</span><br><span class="line">//usr/lib/opkg/info/kmod-fs-hfsplus.postinst: .: line 3: can<span class="string">&#x27;t open &#x27;</span>/etc/functions.sh<span class="string">&#x27;</span></span><br><span class="line"><span class="string">Collected errors:</span></span><br><span class="line"><span class="string"> * pkg_run_script: package &quot;kmod-fs-hfsplus&quot; postinst script returned status 2.</span></span><br><span class="line"><span class="string"> * opkg_configure: kmod-fs-hfsplus.postinst returned 2.</span></span><br></pre></td></tr></table></figure>

<h2 id="Format-amp-Mount"><a href="#Format-amp-Mount" class="headerlink" title="Format &amp; Mount"></a>Format &amp; Mount</h2><p>将 BackUp 硬盘插入 Mi mini</p>
<p>用<code>blkid</code>找到你的 sda，这是我的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/dev/sda3: UUID=<span class="string">&quot;dab3d8b8-a87f-3bfb-9fed-f42934d5bcd6&quot;</span> LABEL=<span class="string">&quot;BackUp&quot;</span> TYPE=<span class="string">&quot;hfsplus&quot;</span> PARTLABEL=<span class="string">&quot;Basic data partition&quot;</span> PARTUUID=<span class="string">&quot;27db40be-8ebe-11e6-9e2e-60f81da8c0cd&quot;</span></span><br></pre></td></tr></table></figure>

<p>格式化为 ext4(Mi mini 挂载<code>hfsplus</code>失败，所以我尝试<code>ext4</code>作为交换)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 /dev/sda3</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd timemachine</span><br><span class="line">useradd -M -G timemachine tmuser</span><br><span class="line">passwd tmuser</span><br><span class="line"><span class="comment"># input the passwd</span></span><br><span class="line"></span><br><span class="line">mkdir /mnt/TimeMachine</span><br><span class="line">chown root:timemachine /mnt/TimeMachine</span><br><span class="line">touch /mnt/TimeMachine/USB_DISK_NOT_PRESENT</span><br><span class="line">chmod 555 /mnt/TimeMachine -R</span><br><span class="line">chmod 444 /mnt/TimeMachine/USB_DISK_NOT_PRESENT</span><br></pre></td></tr></table></figure>

<p>到浏览器</p>
<p><code>System -&gt; Mount Points -&gt; Mount Points -&gt; Add</code></p>
<p>Select the <code>UUID</code> you get by <code>blkid</code> mount to <code>/mnt/TimeMachine</code>, remember the size <code>xxx</code> MB, <code>save</code></p>
<p>You may see <code>/dev/sda3 /mnt/TimeMachine</code> in <code>Mounted file systems</code></p>
<p>然后到你的 ssh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown -R tmuser:timemachine /mnt/TimeMachine</span><br></pre></td></tr></table></figure>

<h2 id="Netatalk"><a href="#Netatalk" class="headerlink" title="Netatalk"></a>Netatalk</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/netatalk/afpd.conf</span><br></pre></td></tr></table></figure>

<p>将所有案文改为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;TimeMachine&quot;</span> -uampath /usr/lib/uams -uamlist uams_dhx2.so -nodebug -nouservol -icon -nosavepassword -mimicmodel RackMac</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/netatalk/AppleVolumes.default</span><br></pre></td></tr></table></figure>

<p>将所有文字替换为。(填上你之前得到的 xxx，是 MiB)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/mnt/TimeMachine TimeMachine volsizelimit:xxx allow:@timemachine rwlist:@timemachine cnidscheme:dbd options:searchdb,usedots,invisibledots,tm</span><br></pre></td></tr></table></figure>

<h2 id="Avahi"><a href="#Avahi" class="headerlink" title="Avahi"></a>Avahi</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/avahi/avahi-daemon.conf</span><br></pre></td></tr></table></figure>

<p>将所有案文改为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">server</span>]</span><br><span class="line"><span class="string">host-name=TimeMachine</span></span><br><span class="line"><span class="comment">#domain-name=local</span></span><br><span class="line"><span class="string">use-ipv4=yes</span></span><br><span class="line"><span class="string">use-ipv6=no</span></span><br><span class="line"><span class="string">check-response-ttl=no</span></span><br><span class="line"><span class="string">use-iff-running=no</span></span><br><span class="line"><span class="string">enable-dbus=no</span></span><br><span class="line"><span class="string">allow-interfaces=br-lan</span></span><br><span class="line"></span><br><span class="line">[<span class="string">publish</span>]</span><br><span class="line"><span class="string">publish-addresses=yes</span></span><br><span class="line"><span class="string">publish-hinfo=yes</span></span><br><span class="line"><span class="string">publish-workstation=no</span></span><br><span class="line"><span class="string">publish-domain=yes</span></span><br><span class="line"><span class="comment">#publish-dns-servers=192.168.1.1</span></span><br><span class="line"><span class="comment">#publish-resolv-conf-dns-servers=yes</span></span><br><span class="line"></span><br><span class="line">[<span class="string">reflector</span>]</span><br><span class="line"><span class="string">enable-reflector=no</span></span><br><span class="line"><span class="string">reflect-ipv=no</span></span><br><span class="line"></span><br><span class="line">[<span class="string">rlimits</span>]</span><br><span class="line"><span class="comment">#rlimit-as=</span></span><br><span class="line"><span class="string">rlimit-core=0</span></span><br><span class="line"><span class="string">rlimit-data=4194304</span></span><br><span class="line"><span class="string">rlimit-fsize=0</span></span><br><span class="line"><span class="string">rlimit-nofile=30</span></span><br><span class="line"><span class="string">rlimit-stack=4194304</span></span><br><span class="line"><span class="string">rlimit-nproc=3</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/avahi/services/afpd.service</span><br></pre></td></tr></table></figure>

<p>将所有文字替换为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">service-group</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;avahi-service.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">service-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span> <span class="attr">replace-wildcards</span>=<span class="string">&quot;yes&quot;</span>&gt;</span>Time Capsule<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>_afpovertcp._tcp<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span>&gt;</span>548<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>_device-info._tcp<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span>&gt;</span>0<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">txt-record</span>&gt;</span>model=TimeCapsule<span class="tag">&lt;/<span class="name">txt-record</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>_adisk._tcp<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">txt-record</span>&gt;</span>sys=waMA=XX:XX:XX:XX:XX:XX,adVF=0x100<span class="tag">&lt;/<span class="name">txt-record</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">txt-record</span>&gt;</span>dk1=adVF=0x83,adVN=TimeMachine<span class="tag">&lt;/<span class="name">txt-record</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service-group</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>到您的浏览器</p>
<p><code>System -&gt; Startup</code> <code>Enable</code></p>
<ul>
<li><code>afpd</code></li>
<li><code>avahi-daemon</code></li>
</ul>
<p>重新启动路由器</p>
<p>到 Mac, <code>System Preferences -&gt; Time Machine -&gt; Select Disk -&gt; Available Disks -&gt; on &quot;Time Capsule&quot;</code>,你可以看到 <code>TimeMachine</code></p>
]]></content>
      <tags>
        <tag>PandoraBox</tag>
        <tag>OpenWRT</tag>
        <tag>TimeMachine</tag>
        <tag>Capsule</tag>
      </tags>
  </entry>
  <entry>
    <title>使用UIStoryboardSegue自定义UIViewController的演示过渡</title>
    <url>/cn/Custom-UIViewController-Presentation-Transitions-with-UIStoryboardSegue/</url>
    <content><![CDATA[<p>最受欢迎的方式是 <code>UIViewControllerAnimatedTransitioning</code></p>
<a id="more"></a>

<p>为了做到这一点，你必须：</p>
<ul>
<li>新建一个子类，该子类可称为 “XXXTransitioning”，继承自 “NSObject”，并实现协议 “UIViewControllerAnimatedTransitioning “的两个功能。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">transitionDuration</span><span class="params">(using transitionContext: UIViewControllerContextTransitioning?)</span></span> -&gt; <span class="type">TimeInterval</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">animateTransition</span><span class="params">(using transitionContext: UIViewControllerContextTransitioning)</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>Then:<ol>
<li>在 “ViewController “中新建一个 “XXXTransitioning “的实例。</li>
<li>设置<code>transitioningDelegate = self</code>。</li>
<li>用 UIViewControllerTransitioningDelegate 扩展 “ViewController”，并实现。</li>
</ol>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">animationController</span><span class="params">(forPresented presented: UIViewController, presenting: UIViewController, source: UIViewController)</span></span> -&gt; <span class="type">UIViewControllerAnimatedTransitioning?</span></span><br></pre></td></tr></table></figure>

<h2 id="dismiss"><a href="#dismiss" class="headerlink" title="dismiss"></a>dismiss</h2><p>我注意到 <code>Storyboard Segue</code> 有一个 <code>Custom</code></p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/CustomUIViewControllerPresentationTransitionsWithUIStoryboardSegue.png" alt=""></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XXXModalSegue</span>: <span class="title">UIStoryboardSegue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">perform</span><span class="params">()</span></span> &#123;</span><br><span class="line">    	<span class="keyword">let</span> fromVC = source</span><br><span class="line">        <span class="keyword">let</span> toVC = destination</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> fromView = fromVC.view!</span><br><span class="line">        <span class="keyword">let</span> toView  = toVC.view!</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> (w, h) = (<span class="type">UIScreen</span>.main.bounds.width, <span class="type">UIScreen</span>.main.bounds.height)</span><br><span class="line"></span><br><span class="line">        toView.alpha = <span class="number">0</span></span><br><span class="line">        toView.frame = <span class="type">CGRect</span>(x: w/<span class="number">2</span>, y: <span class="number">0</span>, width: w, height: h)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> window = <span class="type">UIApplication</span>.shared.keyWindow</span><br><span class="line">        window?.insertSubview(toView, aboveSubview: fromView)</span><br><span class="line"></span><br><span class="line">        <span class="type">UIView</span>.animate(withDuration: <span class="number">0.4</span>, animations: &#123;</span><br><span class="line">            toView.alpha = <span class="number">1</span></span><br><span class="line">            toView.frame = toView.frame.offsetBy(dx: -w/<span class="number">2</span>, dy: <span class="number">0</span>)</span><br><span class="line">        &#125;) &#123; (b) <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">self</span>.source.present(<span class="keyword">self</span>.destination, animated: <span class="literal">false</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">            <span class="comment">// OR: self.source.dismiss(animated: false, completion: nil)</span></span><br><span class="line">        s</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就是这样，不用再编码<code>delegate</code>和<code>Extension</code>。简单又干净：)</p>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>协议和枚举中的Swift通用</title>
    <url>/cn/Swift-Generics-in-protocol-and-enum/</url>
    <content><![CDATA[<ul>
<li>协议只能作为一个通用约束，因为它有 Self 或相关的类型要求。</li>
<li>协议不允许使用通用参数，而使用关联类型。</li>
<li>不能专攻非通用型</li>
</ul>
<a id="more"></a>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">BaseReq</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Generic Type T in protocol</span></span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">T</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">obj</span><span class="params">(<span class="number">_</span> s:String)</span></span> -&gt; <span class="type">T</span></span><br><span class="line">    <span class="keyword">init</span>(completion:((<span class="number">_</span> res: <span class="type">Result</span>&lt;<span class="type">T</span>&gt;)-&gt;())?)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">BaseReq</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">launch</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> s = <span class="string">&quot;network return string&quot;</span></span><br><span class="line">        obj(s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AReq</span>: <span class="title">BaseReq</span> </span>&#123;</span><br><span class="line">    <span class="comment">// declare the Type of T</span></span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">T</span> = <span class="type">AObj</span></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>(completion:((<span class="number">_</span> res: <span class="type">Result</span>&lt;<span class="type">T</span>&gt;)-&gt;())?) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">obj</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">T</span>(s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BReq</span>: <span class="title">BaseReq</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">T</span> = <span class="type">BObj</span></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>(completion:((<span class="number">_</span> res: <span class="type">Result</span>&lt;<span class="type">T</span>&gt;)-&gt;())?) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">obj</span><span class="params">(<span class="number">_</span> s:String)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">T</span>(s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseObj</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AObj</span>: <span class="title">BaseObj</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&quot;a&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> s: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;a&quot;</span>, s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BObj</span>: <span class="title">BaseObj</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> b = <span class="string">&quot;b&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> s: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;b&quot;</span>, s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Launch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// static func launch(req: BaseReq) -&gt; BaseReq &#123;</span></span><br><span class="line">    <span class="comment">// 如果你像上面那样写，你会得到。</span></span><br><span class="line">    <span class="comment">// 错误：协议&#x27;BaseReq&#x27;只能作为通用约束使用，因为它有Self或相关的类型要求。</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">launch</span>&lt;U: BaseReq&gt;<span class="params">(req: U)</span></span> -&gt; <span class="type">U</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> s = <span class="string">&quot;network return string&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(req)</span><br><span class="line"></span><br><span class="line">        req.obj(s)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> req</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能对非通用类型进行特殊化</span></span><br><span class="line"><span class="comment">// enum Result &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Result</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> suc(<span class="type">T</span>)</span><br><span class="line">    <span class="keyword">case</span> err(<span class="type">Error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> areq = <span class="type">AReq</span> &#123; (r) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">switch</span> r &#123;</span><br><span class="line">    <span class="keyword">case</span> .suc(<span class="keyword">let</span> s):</span><br><span class="line">        <span class="comment">//S is AObj,  we can s.a</span></span><br><span class="line">        s.a</span><br><span class="line">    <span class="keyword">case</span> .err(<span class="keyword">let</span> r):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">areq.launch()</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="type">Launch</span>.launch(req: areq)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> breq = <span class="type">BReq</span> &#123; (r) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">switch</span> r &#123;</span><br><span class="line">    <span class="keyword">case</span> .suc(<span class="keyword">let</span> s):</span><br><span class="line">        <span class="comment">//S is BObj,  we can s.b</span></span><br><span class="line">        s.b</span><br><span class="line">    <span class="keyword">case</span> .err(<span class="keyword">let</span> r):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">breq.launch()</span><br><span class="line"><span class="type">Launch</span>.launch(req: breq)</span><br><span class="line">s</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Swift</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>软件加速你的学习</title>
    <url>/cn/Softwares-speed-up-your-learning/</url>
    <content><![CDATA[<p>播客和视频是一种典型的在线学习方式，但它们数量众多，而收集是人类的天性，如何提高这种速度就显得更为必要。</p>
<p>通常情况下，人们可以用高速处理母语。<br>而我呢，2 倍很舒服，3 倍可以接受，4 倍有字幕就可以了。</p>
<a id="more"></a>

<h2 id="桌上型电脑"><a href="#桌上型电脑" class="headerlink" title="桌上型电脑"></a>桌上型电脑</h2><p>几年前，笔者还在读大学的时候，曾经用过 Windows，KMPlayer 是所有类型视频播放器中最好的，因为其他播放器在更换时可能会出现声音失真的情况。后来，作者离开了公司，用<code>C++</code>重新编写了一个新的，并改名为<a href="https://potplayer.daum.net/">PotPlayer</a></p>
<p>在 macOS 上，Movist 是我的首选，它也是来自韩国的，不用说它的辉煌和简单，它提供了 4 倍的音轨而没有太多损失。<br>其他播放器如<a href="https://mpv.io/">MPV</a>，虽然提供了无速率限制(是的，你可以加速到你喜欢的任何速度)和开源，但如果你想改变默认设置，每次都要修改<code>~/.config/mpv/mpv.conf</code>。</p>
<h2 id="手机版"><a href="#手机版" class="headerlink" title="手机版"></a>手机版</h2><p>好消息是 iPhone 上的 Podcast 已经有 2 倍的功能了（奇怪的是 iTunes Podcasts 没有），很多学习类的应用也有这个有用的功能。</p>
<p>但我还没有发现任何应用提供超过 2 倍的功能。</p>
<p>According to <a href="https://developer.apple.com/reference/avfoundation/avplayer#//apple_ref/occ/instp/AVPlayer/rate"></a></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> player = <span class="type">AVAudioPlayer</span>()</span><br><span class="line">player.prepareToPlay()</span><br><span class="line">player.enableRate = <span class="literal">true</span></span><br><span class="line">player.rate = <span class="number">2.0</span></span><br><span class="line">player.play()</span><br></pre></td></tr></table></figure>

<p>如果音频是基于文件的媒体，似乎仅仅改变<code>player.rate = 3.0</code>就可以做到。这样会不会造成失真？</p>
<p>如果有一天我有时间的话，我会试试的。</p>
]]></content>
      <tags>
        <tag>Tech</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 iPhone 模拟器上信任 MitM 证书</title>
    <url>/cn/How-to-trust-MitM-Certificate-on-iPhone-Simulator/</url>
    <content><![CDATA[<p>打开 Keychain，导出 MitM 根证书为.cer（不是.p12），拖到模拟器上，然后进入<code>Settings.General.About.CertificateTrustSettings.ENABLE FULL TRUST FOR ROOT CERTIFICATES</code>，打开<code>Switch</code>就是你的 MitM。</p>
<a id="more"></a>

<p>在此之前，我拖动了.p12，它可以信任 <code>Settings.General.Profiles</code>, 但看不到 <code>Settings.General.About.Certificate Trust Settings</code>.</p>
<p>这样就浪费了很多时间，我找到了一些类似于: <a href="https://stackoverflow.com/questions/2219707/adding-a-self-signed-certificate-to-iphone-simulator">修改 TrustStore.sqlite3</a></p>
<p>这真是太可怕了。没有必要说<code>TrustStore.sqlite3</code>不再在那个路径上。</p>
<p>阅读完<a href="https://developer.apple.com/library/content/qa/qa1948/_index.html">在测试设备上安装 CA 的根证书</a> 一无所获.</p>
<p>我很高兴在几天后尝试了.cer，现在我可以通过以下方式查看特定域名的所有请求 <a href="https://itunes.apple.com/us/app/surge-web-developer-tool-and-proxy-utility/id1040100637?mt=8">Surge</a>.</p>
]]></content>
      <tags>
        <tag>Surge</tag>
        <tag>Simulator</tag>
      </tags>
  </entry>
  <entry>
    <title>为iPhone X构建应用程序</title>
    <url>/cn/Building-Apps-for-iPhone-X/</url>
    <content><![CDATA[<p>首先，观看 <a href="https://developer.apple.com/videos/play/fall2017/201/">为 iPhone X 构建应用程序</a> 以 2 倍的速度一览无余，它将加快 13/2 分钟。</p>
<ul>
<li>关键点是在 Storyboard 中打开安全区域。</li>
<li>吸引到 Superview 的 LayoutConstraint 可以超越安全区。</li>
</ul>
<a id="more"></a>

<p>我现在的 app 有 17 个 Storyboards 和 28 个 ViewController。</p>
<p>在每个 ViewController 中，之前的开发者用一个 UIView 在上面盖住系统的 navigationController 做了一些小动作，也就是视图的约束条件有<code>height == 64</code>，<code>top == superview.top</code>。</p>
<p>虽然有点恶心，但在以前的设备上，导航栏的高度一直是 64，这也是可行的。</p>
<p>但是在 iPhone X 上，它需要使用安全区域。这意味着我最好删除假的导航视图。但这意味着，如果转场方式是 “推 “的话，它就会把所有的按钮、动作、动画都移到系统的 navigationController 上。</p>
<p>说实话，要说，所有的工程做完后，比我想象的要简单得多。</p>
<p>对于 segue 种类是 “present modally “的情况，只有当设备是 iPhone X 时，假视图仍然通过改变它的高度来完成它的工作。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSubviews</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">super</span>.layoutSubviews()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> #available(iOS <span class="number">11.0</span>, *) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> top = <span class="type">UIApplication</span>.shared.keyWindow?.safeAreaInsets.top, top &gt; <span class="number">0</span> &#123;</span><br><span class="line">      viewHeight.constant = <span class="number">88</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他有用的工具</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">navigationItem.setHidesBackButton(<span class="literal">true</span>, animated: <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">navigationController?.interactivePopGestureRecognizer?.isEnabled = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.navigationController?.navigationBar.layer.zPosition = -<span class="number">1</span> <span class="comment">// put the navigationBar under the vc&#x27;view</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>在Storyboard中，将NamedColors批量替换为RGB</title>
    <url>/cn/Batch-replace-NamedColors-to-RGB-in-Storyboard/</url>
    <content><![CDATA[<p>更新 2018-04-15</p>
<p>由于 Xcode 更新到了 9.3，NamedColors 会引起错误而不是警告，壳子没有太多价值。</p>
<p>而且有一个快速的方法，在 Storyboard 中点击颜色，选择 NamedColor 后触摸<code>Hex Color #</code>说 <code>FFFFF</code>。</p>
<a id="more"></a>

<hr>
<p>NamedColors 是一个新功能，方便开发者在 Xcode 中使用。<br>但它只在 iOS 11 上可用，在 iOS 10、9 上会导致应用崩溃…</p>
<p>主要思路是。</p>
<ul>
<li>在 StoryBoard 中使用 NamedColors，避免每次都使用填充色，以利于新功能的实现。</li>
<li>构建项目时，将 StoryBoard 中所有 NamedColors 的属性替换为 RGB，以防止在旧版 iOS 上崩溃。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os, json</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> os.getcwd()</span><br><span class="line"></span><br><span class="line">colorDict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># read all colorset</span></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">&quot;./&quot;</span>):</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> dirs:</span><br><span class="line">        <span class="keyword">if</span> d.endswith(<span class="string">&quot;.colorset&quot;</span>):</span><br><span class="line">            colorK = d.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">print</span> <span class="string">&quot;found &quot;</span> + colorK</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                <span class="keyword">if</span> file == <span class="string">&quot;Contents.json&quot;</span>:</span><br><span class="line">                    f = open(os.path.join(root, d, file))</span><br><span class="line">                    jd = json.load(f)</span><br><span class="line">                    rgb = jd[<span class="string">&quot;colors&quot;</span>][<span class="number">0</span>][<span class="string">&quot;color&quot;</span>][<span class="string">&quot;components&quot;</span>]</span><br><span class="line">                    colorDict[colorK] = <span class="string">&#x27;red=&quot;&#123;&#125;&quot; green=&quot;&#123;&#125;&quot; blue=&quot;&#123;&#125;&quot; alpha=&quot;&#123;&#125;&quot; colorSpace=&quot;calibratedRGB&quot;&#x27;</span>.format(rgb[<span class="string">&quot;red&quot;</span>], rgb[<span class="string">&quot;green&quot;</span>], rgb[<span class="string">&quot;blue&quot;</span>], rgb[<span class="string">&quot;alpha&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># replacing</span></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">&quot;./&quot;</span>):</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> file.endswith((<span class="string">&quot;.storyboard&quot;</span>, <span class="string">&quot;.xib&quot;</span>)):</span><br><span class="line">            path = os.path.join(root, file)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">&quot;Replacing namedColor in &quot;</span> + path</span><br><span class="line">            f = open(path)</span><br><span class="line">            nf = f.read()</span><br><span class="line">            f.close()</span><br><span class="line"></span><br><span class="line">            nf = re.sub(<span class="string">r&quot; +&lt;namedColor name=.*\n.*\n +&lt;/namedColor&gt;\n&quot;</span>, <span class="string">&#x27;&#x27;</span>, nf)</span><br><span class="line">            nf = re.sub(<span class="string">r&quot; +&lt;capability name=\&quot;Named colors\&quot; minToolsVersion=\&quot;.*\n&quot;</span>, <span class="string">&#x27;&#x27;</span>, nf)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> colorDict.items():</span><br><span class="line">                nf = re.sub(<span class="string">r&#x27;name=&quot;&#123;&#125;&quot;&#x27;</span>.format(k), v, nf)</span><br><span class="line"></span><br><span class="line">            f = open(path, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">            f.write(nf)</span><br><span class="line">            f.close()</span><br></pre></td></tr></table></figure>

<p>Then, <code>Xcode -&gt; Project File -&gt; Build Phases -&gt; Add Build Phase -&gt; Add Run Script</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;CONFIGURATION&#125;</span>&quot;</span> = <span class="string">&quot;Release&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    python NamedColors2RGB.py</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>如果你发现有什么方法可以反转回 NamedColors，请给我留言。</p>
<p>毕竟，一旦 NamedColors 改变了，界面构建器中的所有颜色也应该改变。</p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Machine Learning by Stanford University</title>
    <url>/cn/Machine-Learning-by-Stanford-University/</url>
    <content><![CDATA[<p>这是我在课程上尝试学习机器学习的过程记录。</p>
<p>一年前就听说过人工智能，但作为一个很难接受新事物的老人，一直没有真正的去研究。<br>但我似乎会在这一代 AI🤖️ 革命中失去工作。因此，我会努力学习它。<br>不过，我年纪大了，学不了，也没有信心保证有一天能掌握。</p>
<p>😂😂😂</p>
<a id="more"></a>

<hr>
<h2 id="1-Linear-Regression-with-One-Variable"><a href="#1-Linear-Regression-with-One-Variable" class="headerlink" title="1 Linear Regression with One Variable"></a>1 Linear Regression with One Variable</h2><h2 id="2-Linear-Regression-with-Multiple-Variables"><a href="#2-Linear-Regression-with-Multiple-Variables" class="headerlink" title="2 Linear Regression with Multiple Variables"></a>2 Linear Regression with Multiple Variables</h2><h3 id="ex1"><a href="#ex1" class="headerlink" title="ex1"></a>ex1</h3><p>编码部分是我最喜欢的，我喜欢编码 😄</p>
<h4 id="ComputeCost"><a href="#ComputeCost" class="headerlink" title="ComputeCost"></a>ComputeCost</h4><p>You see, the cost function here<br>(OMG: the formula code is <code>J(\theta) = \cfrac{1}{2m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)} )^2</code> in markdown) 🤯</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.819ex" xmlns="http://www.w3.org/2000/svg" width="30.615ex" height="6.484ex" role="img" focusable="false" viewBox="0 -1620 13532 2865.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(633, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1022, 0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(1491, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2157.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(3213.6, 0)"><g data-mml-node="mrow" transform="translate(659, 760)"><g data-mml-node="mpadded"><g data-mml-node="mrow"></g></g><g data-mml-node="mstyle"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mrow" transform="translate(220, -820)"><g data-mml-node="mpadded"><g data-mml-node="mrow"></g></g><g data-mml-node="mstyle"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500, 0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g><rect width="1578" height="60" x="120" y="220"></rect></g><g data-mml-node="munderover" transform="translate(5198.2, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(411.6, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(6642.2, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(7031.2, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576, -150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><g data-mml-node="mo" transform="translate(7988.9, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(8377.9, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(9793.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(10405.2, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(11405.4, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="msup" transform="translate(12739.5, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(389, 413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="38.662ex" height="2.583ex" role="img" focusable="false" viewBox="0 -891.7 17088.6 1141.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576, -150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><g data-mml-node="mo" transform="translate(957.6, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1346.6, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1918.6, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2585.4, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(3641.2, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mi" transform="translate(469, 413) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mi" transform="translate(4658, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(5507.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(6563.5, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(469, -150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="msub" transform="translate(7436.1, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(572, -150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(8633.9, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(9634.1, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(469, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="msub" transform="translate(10506.7, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(572, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(11704.4, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(12704.6, 0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(14098.9, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(15099.1, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mi" transform="translate(469, -150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="msub" transform="translate(16042.4, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(572, -150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></p>
<p>I found it is <code>X * theta</code> in the real calculation by <code>Octave</code> instead of <code>theta' * X</code> as the formula shows.</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">J = sum(((X * theta) - y).^<span class="number">2</span>)/<span class="number">2</span>/m</span><br></pre></td></tr></table></figure>

<h4 id="GradientDescent"><a href="#GradientDescent" class="headerlink" title="GradientDescent"></a>GradientDescent</h4><p>同样，这里的梯度下降</p>
<p>repeat until convergence: {</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.819ex" xmlns="http://www.w3.org/2000/svg" width="36.031ex" height="6.484ex" role="img" focusable="false" viewBox="0 -1620 15925.6 2865.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mi" transform="translate(469, -150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(1088.1, 0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" transform="translate(278, 0)"></path></g><g data-mml-node="msub" transform="translate(2421.9, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mi" transform="translate(469, -150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(3454.4, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(4454.7, 0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mfrac" transform="translate(5094.7, 0)"><g data-mml-node="mrow" transform="translate(409, 760)"><g data-mml-node="mpadded"><g data-mml-node="mrow"></g></g><g data-mml-node="mstyle"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mrow" transform="translate(220, -820)"><g data-mml-node="mpadded"><g data-mml-node="mrow"></g></g><g data-mml-node="mstyle"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g><rect width="1078" height="60" x="120" y="220"></rect></g><g data-mml-node="munderover" transform="translate(6579.3, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(411.6, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(8023.3, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(8412.3, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576, -150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><g data-mml-node="mo" transform="translate(9370, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(9759, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(11175, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(11786.3, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(12786.5, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(14120.6, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="msubsup" transform="translate(14509.6, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mi" transform="translate(572, -293.8) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="16.16ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7142.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(939, 0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1424, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(1875, 0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(2125, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2814.8, 0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" transform="translate(278, 0)"></path></g><g data-mml-node="mn" transform="translate(4148.6, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(4815.2, 0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mi" transform="translate(6153.9, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6753.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p>}</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">theta = theta - alpha/m*(X' * ((X * theta) - y))</span><br></pre></td></tr></table></figure>

<p>我花了好几个小时才弄明白为什么要用 <code>X' * ((X * theta) - y))</code><br>因为所有的变量 X，theta ，y，每一个都是一个向量，X’ *（…）等于<code>sum()</code>部分，如公式所示。</p>
<p>我虽然通过了测试，但还是有点不明白 😵</p>
<h2 id="3-Logistic-Regression"><a href="#3-Logistic-Regression" class="headerlink" title="3 Logistic Regression"></a>3 Logistic Regression</h2><p>To Be Continued…</p>
<p><img src="https://i.imgur.com/v4JpxOp.png" alt="1 Linear Regression with One Variable"><br><img src="https://i.imgur.com/G2Yn9nA.png" alt="2 Linear Regression with Multiple Variables"></p>
]]></content>
      <tags>
        <tag>AI</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Logistic Regression</title>
    <url>/cn/Logistic-Regression/</url>
    <content><![CDATA[<h2 id="1-2-1-Warmup-exercise-sigmoid-function"><a href="#1-2-1-Warmup-exercise-sigmoid-function" class="headerlink" title="1.2.1 Warmup exercise: sigmoid function"></a>1.2.1 Warmup exercise: sigmoid function</h2><p>As the sigmoid function is defined as:</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.738ex" xmlns="http://www.w3.org/2000/svg" width="14.957ex" height="4.774ex" role="img" focusable="false" viewBox="0 -1342 6610.9 2110"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(477, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(866, 0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(1331, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(1997.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(3053.6, 0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(1528.7, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220, -686)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(722.2, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msup" transform="translate(1722.4, 0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(466, 289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(778, 0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g></g></g></g><rect width="3317.4" height="60" x="120" y="220"></rect></g></g></g></g></svg></mjx-container></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">g = <span class="number">1.</span>/(<span class="number">1</span>+<span class="built_in">exp</span>(-z))</span><br></pre></td></tr></table></figure>

<h2 id="1-2-2-Cost-function-and-gradient"><a href="#1-2-2-Cost-function-and-gradient" class="headerlink" title="1.2.2 Cost function and gradient"></a>1.2.2 Cost function and gradient</h2><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.819ex" xmlns="http://www.w3.org/2000/svg" width="57.509ex" height="6.354ex" role="img" focusable="false" viewBox="0 -1562.5 25419 2808.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(633, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1022, 0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(1491, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2157.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(3213.6, 0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(409, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220, -686)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1078" height="60" x="120" y="220"></rect></g></g><g data-mml-node="munderover" transform="translate(4698.2, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(411.6, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(6142.2, 0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(6420.2, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(7198.2, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mi" transform="translate(8532.3, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(8830.3, 0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(9315.3, 0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(9792.3, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(10181.3, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576, -150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><g data-mml-node="mo" transform="translate(11138.9, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(11527.9, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(12393.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(12782.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(13394.1, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(14394.3, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(14783.3, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(15505.6, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(16505.8, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(17839.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(18228.9, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(18526.9, 0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(19011.9, 0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(19488.9, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(19877.9, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(20600.1, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(21600.3, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576, -150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><g data-mml-node="mo" transform="translate(22557.9, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(22946.9, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(24363, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(24752, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(25141, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.218ex" xmlns="http://www.w3.org/2000/svg" width="6.529ex" height="5.521ex" role="img" focusable="false" viewBox="0 -1460 2886 2440.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mstyle"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220, 710)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566, 0)"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(1199, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1588, 0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(2057, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(754.8, -686)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="msub" transform="translate(566, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g><rect width="2646" height="60" x="120" y="220"></rect></g></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.819ex" xmlns="http://www.w3.org/2000/svg" width="26.893ex" height="6.354ex" role="img" focusable="false" viewBox="0 -1562.5 11886.8 2808.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(1055.8, 0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(409, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220, -686)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1078" height="60" x="120" y="220"></rect></g></g><g data-mml-node="munderover" transform="translate(2540.4, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(411.6, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3984.4, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(4373.4, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(576, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5331.1, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(5720.1, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7136.2, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7747.4, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(8747.6, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(10081.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="msubsup" transform="translate(10470.7, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(572, -293.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></g></svg></mjx-container></p>
<a id="more"></a>

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">J = (-y'*<span class="built_in">log</span>(sigmoid(X*theta)) - (<span class="number">1</span>-y)'*<span class="built_in">log</span>(<span class="number">1</span>-sigmoid(X*theta)))/m</span><br><span class="line">grad = (X'*(sigmoid(X*theta) - y))/m</span><br></pre></td></tr></table></figure>

<h2 id="2-3-Cost-function-and-gradient"><a href="#2-3-Cost-function-and-gradient" class="headerlink" title="2.3 Cost function and gradient"></a>2.3 Cost function and gradient</h2><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.014ex" xmlns="http://www.w3.org/2000/svg" width="70.383ex" height="6.549ex" role="img" focusable="false" viewBox="0 -1562.5 31109.3 2894.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(633, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1022, 0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(1491, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2157.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(3213.6, 0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(409, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220, -686)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1078" height="60" x="120" y="220"></rect></g></g><g data-mml-node="munderover" transform="translate(4698.2, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(411.6, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(6142.2, 0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(6420.2, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(7198.2, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mi" transform="translate(8532.3, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(8830.3, 0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(9315.3, 0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(9792.3, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(10181.3, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576, -150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><g data-mml-node="mo" transform="translate(11138.9, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(11527.9, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(12393.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(12782.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(13394.1, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(14394.3, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(14783.3, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(15505.6, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(16505.8, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(17839.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(18228.9, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(18526.9, 0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(19011.9, 0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(19488.9, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(19877.9, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(20600.1, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(21600.3, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576, -150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><g data-mml-node="mo" transform="translate(22557.9, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(22946.9, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(24363, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(24752, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(25141, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(25641.2, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mstyle" transform="translate(26641.5, 0)"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(617.5, 676)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mrow" transform="translate(220, -686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500, 0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><rect width="1578" height="60" x="120" y="220"></rect></g></g><g data-mml-node="munderover" transform="translate(28626.1, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(124.5, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(509.9, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="msubsup" transform="translate(30236.8, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(469, -247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></g></svg></mjx-container></p>
<p>$$\dfrac{\partial J(\theta )}{\partial \theta <em>{j}} = \dfrac{1}{m}\sum</em>{i=1}^{m}(h_{\theta} (x^{(i)}) - y^{(i)})x_{j}^{(i)} + \dfrac{\lambda }{m}\theta _{j}$$</p>
<p>for <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex" xmlns="http://www.w3.org/2000/svg" width="5.08ex" height="1.968ex" role="img" focusable="false" viewBox="0 -666 2245.6 870"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(689.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1745.6, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>, the <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="4.14ex" height="1.781ex" role="img" focusable="false" viewBox="0 -705 1830 787"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(778, 0)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mi" transform="translate(1361, 0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g></svg></mjx-container> part = 0</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">r1 = sum(theta(<span class="number">2</span>:<span class="keyword">end</span>).^<span class="number">2</span>)*lambda/<span class="number">2</span>/m</span><br><span class="line">J = (-y'*<span class="built_in">log</span>(sigmoid(X*theta)) - (<span class="number">1</span>-y)'*<span class="built_in">log</span>(<span class="number">1</span>-sigmoid(X*theta)))/m + r1</span><br><span class="line"></span><br><span class="line">r2 = <span class="built_in">ones</span>(<span class="built_in">size</span>(theta))</span><br><span class="line">r2(<span class="number">1</span>) = <span class="number">0</span></span><br><span class="line">grad = (X'*(sigmoid(X*theta) - y))/m + (theta.*r2)*lambda/m</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/94LgVsH.png" alt="costFunctionReg"></p>
<p>Yes, yes, I know I passed. 😄</p>
<p>But, God knows what happened? 🤔</p>
<!--more-->

<p><img src="https://i.imgur.com/OFkLk5J.png" alt="3 Logistic Regression"></p>
]]></content>
      <tags>
        <tag>AI</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Neural Networks Representation</title>
    <url>/cn/Neural-Networks-Representation/</url>
    <content><![CDATA[<h1 id="Neural-Networks-Representation"><a href="#Neural-Networks-Representation" class="headerlink" title="Neural Networks Representation"></a>Neural Networks Representation</h1><h2 id="1-3-Vectorizing-Logistic-Regression"><a href="#1-3-Vectorizing-Logistic-Regression" class="headerlink" title="1.3 Vectorizing Logistic Regression"></a>1.3 Vectorizing Logistic Regression</h2><p>All right, I already used the Vectorized approach and without any loops last exercise.</p>
<a id="more"></a>

<h2 id="1-4-One-vs-all-Classification"><a href="#1-4-One-vs-all-Classification" class="headerlink" title="1.4 One-vs-all Classification"></a>1.4 One-vs-all Classification</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">initial_theta = <span class="built_in">zeros</span>(n + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">options = optimset(<span class="string">'GradObj'</span>, <span class="string">'on'</span>, <span class="string">'MaxIter'</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:num_labels</span><br><span class="line">    [theta] = fmincg(@(t)(lrCostFunction(t, X, (y == <span class="built_in">i</span>), lambda)), initial_theta, options);</span><br><span class="line"></span><br><span class="line">all_theta(<span class="built_in">i</span>,:) = [theta];</span><br></pre></td></tr></table></figure>

<p>the key points here are:</p>
<ul>
<li><code>for</code> is needed here to loop from <code>1</code> to <code>num_labels</code></li>
<li><code>all_theta</code> should assigned with <code>(i,:)</code>, otherwise it will be a one-dimensional vector.</li>
</ul>
<h2 id="1-4-1-One-vs-all-Prediction"><a href="#1-4-1-One-vs-all-Prediction" class="headerlink" title="1.4.1 One-vs-all Prediction"></a>1.4.1 One-vs-all Prediction</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A = sigmoid(X * all_theta');</span><br><span class="line">[m, p] = <span class="built_in">max</span>(A, [], <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>the <code>max</code> function will return a two-dimensional vector, <code>m</code> is the value, and <code>p</code> is the max index in that row.</p>
<h2 id="2-Neural-Networks"><a href="#2-Neural-Networks" class="headerlink" title="2 Neural Networks"></a>2 Neural Networks</h2><p>Finally, I touched the Neural Networks with so many classes after. 😳</p>
<p>The <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="5.391ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 2382.7 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(469, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(969, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1413.7, 0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(1882.7, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container> are trained to predict.</p>
<p>Before this, I wondering what is the process of prediction with a trained model. Is it the same with the training process?</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a0x = <span class="built_in">ones</span>(m, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">A1 = [a0x, X];</span><br><span class="line">A2 = [a0x, sigmoid(A1 * Theta1')];</span><br><span class="line">A3 = sigmoid(A2 * Theta2');</span><br><span class="line"></span><br><span class="line">[v, p] =  <span class="built_in">max</span>(A3, [], <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/ailb9HX.png" alt=""></p>
<p>Amazing ha! 🤩</p>
<p>First I forgot to <code>sigmoid</code> the hidden layer and output layer. The Accuracy shows</p>
<blockquote>
<p>Training Set Accuracy: 69.62</p>
</blockquote>
<p>And it will get the same accuracy if the output layer has no <code>sigmoid</code> . It also happened in the previous <strong>One-vs-all Prediction</strong>.</p>
<p>Therefore I still have the question. 🧐</p>
<p>It’s time to keep on the training part. 💪</p>
<p><img src="https://i.imgur.com/arYwzJt.png" alt=""></p>
]]></content>
      <tags>
        <tag>AI</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Neural Networks Learning</title>
    <url>/cn/Neural-Networks-Learning/</url>
    <content><![CDATA[<p>First, I have to say, and it’s the most laborious exercise I had ever made when I began this course.</p>
<h2 id="1-3-Feedforward-and-cost-function"><a href="#1-3-Feedforward-and-cost-function" class="headerlink" title="1.3 Feedforward and cost function"></a>1.3 Feedforward and cost function</h2><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="40.461ex" height="4.613ex" role="img" focusable="false" viewBox="0 -1342 17883.8 2039"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(633, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1022, 0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(1491, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2157.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(3213.6, 0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(409, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220, -686)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1078" height="60" x="120" y="220"></rect></g></g><g data-mml-node="munderover" transform="translate(4698.2, 0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1056, 477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(1056, -285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="munderover" transform="translate(7118.5, 0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1056, 477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(1056, -285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1299, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(9496.6, 0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(9774.6, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msubsup" transform="translate(10552.6, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(490, -317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mi" transform="translate(11886.7, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(12184.7, 0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(12669.7, 0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(13146.7, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(13535.7, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(13924.7, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576, -150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><g data-mml-node="mo" transform="translate(14882.3, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(15271.3, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="msub" transform="translate(16687.4, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(389, -150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(17494.8, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.735ex" xmlns="http://www.w3.org/2000/svg" width="29.41ex" height="3.135ex" role="img" focusable="false" viewBox="0 -1060.7 12999.1 1385.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(778, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1167, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1889.2, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msubsup" transform="translate(2889.4, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(490, -317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4223.5, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(4612.5, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(4910.5, 0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(5395.5, 0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(5872.5, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(6261.5, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6983.7, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(7984, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(8373, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576, -150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><g data-mml-node="mo" transform="translate(9330.6, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(9719.6, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(11135.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="msub" transform="translate(11524.7, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(389, -150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(12332.1, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(12721.1, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></p>
<a id="more"></a>

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a1 = [<span class="built_in">ones</span>(m, <span class="number">1</span>), X];</span><br><span class="line">z2 = a1*Theta1';</span><br><span class="line">a2 = [<span class="built_in">ones</span>(m, <span class="number">1</span>), sigmoid(z2)];</span><br><span class="line">z3 = a2*Theta2';</span><br><span class="line">a3 = sigmoid(z3);</span><br><span class="line"></span><br><span class="line">I = <span class="built_in">eye</span>(num_labels);</span><br><span class="line">Y = I(y, :);</span><br><span class="line"></span><br><span class="line">J = sum(sum((-Y.*<span class="built_in">log</span>(a3) - (<span class="number">1</span>-Y).*<span class="built_in">log</span>(<span class="number">1</span>-a3) ) / m));</span><br></pre></td></tr></table></figure>

<p>For now, I still confused about <code>I(y, :)</code>, how can it make y(5000:1) to Y(5000:10) with the match index in each row?</p>
<h2 id="1-4-Regularized-cost-function"><a href="#1-4-Regularized-cost-function" class="headerlink" title="1.4 Regularized cost function"></a>1.4 Regularized cost function</h2><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="40.461ex" height="4.613ex" role="img" focusable="false" viewBox="0 -1342 17883.8 2039"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(633, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1022, 0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(1491, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2157.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(3213.6, 0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(409, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220, -686)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1078" height="60" x="120" y="220"></rect></g></g><g data-mml-node="munderover" transform="translate(4698.2, 0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1056, 477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(1056, -285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="munderover" transform="translate(7118.5, 0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1056, 477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(1056, -285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1299, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(9496.6, 0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(9774.6, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msubsup" transform="translate(10552.6, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(490, -317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mi" transform="translate(11886.7, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(12184.7, 0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(12669.7, 0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(13146.7, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(13535.7, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(13924.7, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576, -150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><g data-mml-node="mo" transform="translate(14882.3, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(15271.3, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="msub" transform="translate(16687.4, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(389, -150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(17494.8, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.735ex" xmlns="http://www.w3.org/2000/svg" width="29.41ex" height="3.135ex" role="img" focusable="false" viewBox="0 -1060.7 12999.1 1385.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(778, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1167, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1889.2, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msubsup" transform="translate(2889.4, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(490, -317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4223.5, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(4612.5, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(4910.5, 0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(5395.5, 0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(5872.5, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(6261.5, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6983.7, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(7984, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(8373, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576, -150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><g data-mml-node="mo" transform="translate(9330.6, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(9719.6, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(11135.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="msub" transform="translate(11524.7, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(389, -150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(12332.1, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(12721.1, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.014ex" xmlns="http://www.w3.org/2000/svg" width="20.004ex" height="6.925ex" role="img" focusable="false" viewBox="0 -1728.7 8841.9 3060.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mstyle" transform="translate(778, 0)"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(617.5, 676)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mrow" transform="translate(220, -686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500, 0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><rect width="1578" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mo" transform="translate(2596, 0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="munderover" transform="translate(2874, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(124.5, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(368.4, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500, 0)"></path></g></g></g><g data-mml-node="munderover" transform="translate(4484.7, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(86, -1107.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1299, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(191.7, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500, 0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000, 0)"></path></g></g></g><g data-mml-node="mo" transform="translate(5928.7, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(6317.7, 0)"><g data-mml-node="mi"><path data-c="398" d="M56 340Q56 423 86 494T164 610T270 680T388 705Q521 705 621 601T722 341Q722 260 693 191T617 75T510 4T388 -22T267 3T160 74T85 189T56 340ZM610 339Q610 428 590 495T535 598T463 651T384 668Q332 668 289 638T221 566Q168 485 168 339Q168 274 176 235Q189 158 228 105T324 28Q356 16 388 16Q415 16 442 24T501 54T555 111T594 205T610 339ZM223 263V422H263V388H514V422H554V263H514V297H263V263H223Z"></path></g><g data-mml-node="TeXAtom" transform="translate(778, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(778, -317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(690, 0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="msup" transform="translate(8049.3, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(389, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.014ex" xmlns="http://www.w3.org/2000/svg" width="16.268ex" height="6.908ex" role="img" focusable="false" viewBox="0 -1720.9 7190.6 3053.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="munderover" transform="translate(944.7, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(124.5, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(368.4, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500, 0)"></path></g></g></g><g data-mml-node="munderover" transform="translate(2555.3, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(86, -1107.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1299, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(368.4, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500, 0)"></path></g></g></g><g data-mml-node="mo" transform="translate(3999.3, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(4388.3, 0)"><g data-mml-node="mi"><path data-c="398" d="M56 340Q56 423 86 494T164 610T270 680T388 705Q521 705 621 601T722 341Q722 260 693 191T617 75T510 4T388 -22T267 3T160 74T85 189T56 340ZM610 339Q610 428 590 495T535 598T463 651T384 668Q332 668 289 638T221 566Q168 485 168 339Q168 274 176 235Q189 158 228 105T324 28Q356 16 388 16Q415 16 442 24T501 54T555 111T594 205T610 339ZM223 263V422H263V388H514V422H554V263H514V297H263V263H223Z"></path></g><g data-mml-node="TeXAtom" transform="translate(778, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(889, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(778, -317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(690, 0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="msup" transform="translate(6120, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(389, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(6912.6, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">r = lambda/<span class="number">2</span>/m * (sum(sum(Theta1(:,<span class="number">2</span>:<span class="keyword">end</span>).^<span class="number">2</span>)) + sum(sum(Theta2(:,<span class="number">2</span>:<span class="keyword">end</span>).^<span class="number">2</span>)));</span><br><span class="line">J = J + r;</span><br></pre></td></tr></table></figure>

<h2 id="2-1-Sigmoid-gradient"><a href="#2-1-Sigmoid-gradient" class="headerlink" title="2.1 Sigmoid gradient"></a>2.1 Sigmoid gradient</h2><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="31.034ex" height="4.676ex" role="img" focusable="false" viewBox="0 -1370 13717 2067"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(477, 413) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(721.5, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1110.5, 0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(1575.5, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2242.2, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(3298, 0)"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(452.5, 676)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mrow" transform="translate(220, -686)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520, 0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g></g><rect width="1185" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mi" transform="translate(4723, 0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(5200, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5589, 0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(6054, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6720.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(7776.6, 0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(8253.6, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(8642.6, 0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(9107.6, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(9496.6, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(9885.6, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(10607.8, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(11608, 0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(12085, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(12474, 0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(12939, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(13328, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">g = sigmoid(z).*(<span class="number">1</span>-sigmoid(z));</span><br></pre></td></tr></table></figure>

<h2 id="2-3-Backpropagation"><a href="#2-3-Backpropagation" class="headerlink" title="2.3 Backpropagation"></a>2.3 Backpropagation</h2><p>$$\delta <em>{k}^{(3)} = (a</em>{k}^{(3)} - y_{k})$$</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="23.754ex" height="2.7ex" role="img" focusable="false" viewBox="0 -943.3 10499.1 1193.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="TeXAtom" transform="translate(444, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1125.3, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2181.1, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(2570.1, 0)"><g data-mml-node="mi"><path data-c="398" d="M56 340Q56 423 86 494T164 610T270 680T388 705Q521 705 621 601T722 341Q722 260 693 191T617 75T510 4T388 -22T267 3T160 74T85 189T56 340ZM610 339Q610 428 590 495T535 598T463 651T384 668Q332 668 289 638T221 566Q168 485 168 339Q168 274 176 235Q189 158 228 105T324 28Q356 16 388 16Q415 16 442 24T501 54T555 111T594 205T610 339ZM223 263V422H263V388H514V422H554V263H514V297H263V263H223Z"></path></g><g data-mml-node="TeXAtom" transform="translate(778, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(889, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="msup" transform="translate(4301.8, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(389, 413) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="msup" transform="translate(5238.6, 0)"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="TeXAtom" transform="translate(444, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389, 0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(889, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(6636.3, 0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(7080.9, 0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="msup" transform="translate(7580.9, 0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(477, 413) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(8302.4, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(8691.4, 0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="TeXAtom" transform="translate(465, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(889, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(10110.1, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="24.135ex" height="2.7ex" role="img" focusable="false" viewBox="0 -943.3 10667.9 1193.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="TeXAtom" transform="translate(833, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(687, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1921.6, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2977.4, 0)"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="TeXAtom" transform="translate(833, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(687, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4843.5, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msup" transform="translate(5843.7, 0)"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="TeXAtom" transform="translate(444, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(687, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1465, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1965, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(8002.2, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(8391.2, 0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(529, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(687, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="msup" transform="translate(9731.1, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(389, 413) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></g></svg></mjx-container></p>
<p>$$\dfrac{\partial }{\partial \Theta <em>{ij}^{(l)}}J(\Theta ) = D</em>{ij}^{(l)} = \dfrac{1}{m}\Delta _{ij}^{(l)}$$</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">d3 = a3-Y;</span><br><span class="line">d2 = d3*Theta2.*[<span class="built_in">ones</span>(m, <span class="number">1</span>), sigmoidGradient(z2)];</span><br><span class="line"></span><br><span class="line">D1 = d2(:,<span class="number">2</span>:<span class="keyword">end</span>)'*a1;</span><br><span class="line">D2 = d3'*a2;</span><br><span class="line"></span><br><span class="line">Theta1_grad = Theta1_grad + D1/m;</span><br><span class="line">Theta2_grad = Theta2_grad + D2/m;</span><br></pre></td></tr></table></figure>

<h2 id="2-5-Regularized-Neural-Networks"><a href="#2-5-Regularized-Neural-Networks" class="headerlink" title="2.5 Regularized Neural Networks"></a>2.5 Regularized Neural Networks</h2><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.3ex" xmlns="http://www.w3.org/2000/svg" width="10.823ex" height="6.447ex" role="img" focusable="false" viewBox="0 -1391 4783.8 2849.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mstyle"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(1014.4, 676)"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mrow" transform="translate(220, -1020.7)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="msubsup" transform="translate(566, 0)"><g data-mml-node="mi"><path data-c="398" d="M56 340Q56 423 86 494T164 610T270 680T388 705Q521 705 621 601T722 341Q722 260 693 191T617 75T510 4T388 -22T267 3T160 74T85 189T56 340ZM610 339Q610 428 590 495T535 598T463 651T384 668Q332 668 289 638T221 566Q168 485 168 339Q168 274 176 235Q189 158 228 105T324 28Q356 16 388 16Q415 16 442 24T501 54T555 111T594 205T610 339ZM223 263V422H263V388H514V422H554V263H514V297H263V263H223Z"></path></g><g data-mml-node="TeXAtom" transform="translate(778, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(687, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(778, -293.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g><rect width="2354.8" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mi" transform="translate(2594.8, 0)"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(3227.8, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3616.8, 0)"><path data-c="398" d="M56 340Q56 423 86 494T164 610T270 680T388 705Q521 705 621 601T722 341Q722 260 693 191T617 75T510 4T388 -22T267 3T160 74T85 189T56 340ZM610 339Q610 428 590 495T535 598T463 651T384 668Q332 668 289 638T221 566Q168 485 168 339Q168 274 176 235Q189 158 228 105T324 28Q356 16 388 16Q415 16 442 24T501 54T555 111T594 205T610 339ZM223 263V422H263V388H514V422H554V263H514V297H263V263H223Z"></path></g><g data-mml-node="mo" transform="translate(4394.8, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="26.519ex" height="4.613ex" role="img" focusable="false" viewBox="0 -1342 11721.6 2039"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msubsup" transform="translate(1055.8, 0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="TeXAtom" transform="translate(828, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(687, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(828, -293.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2972.4, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(4028.2, 0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(409, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220, -686)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1078" height="60" x="120" y="220"></rect></g></g><g data-mml-node="msubsup" transform="translate(5346.2, 0)"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="TeXAtom" transform="translate(833, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(687, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(833, -293.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mstyle" transform="translate(6990, 0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(7990, 0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(8540, 0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(9025, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(9476, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(10165.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(11221.6, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.3ex" xmlns="http://www.w3.org/2000/svg" width="10.823ex" height="6.447ex" role="img" focusable="false" viewBox="0 -1391 4783.8 2849.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mstyle"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(1014.4, 676)"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mrow" transform="translate(220, -1020.7)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="msubsup" transform="translate(566, 0)"><g data-mml-node="mi"><path data-c="398" d="M56 340Q56 423 86 494T164 610T270 680T388 705Q521 705 621 601T722 341Q722 260 693 191T617 75T510 4T388 -22T267 3T160 74T85 189T56 340ZM610 339Q610 428 590 495T535 598T463 651T384 668Q332 668 289 638T221 566Q168 485 168 339Q168 274 176 235Q189 158 228 105T324 28Q356 16 388 16Q415 16 442 24T501 54T555 111T594 205T610 339ZM223 263V422H263V388H514V422H554V263H514V297H263V263H223Z"></path></g><g data-mml-node="TeXAtom" transform="translate(778, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(687, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(778, -293.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g><rect width="2354.8" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mi" transform="translate(2594.8, 0)"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(3227.8, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3616.8, 0)"><path data-c="398" d="M56 340Q56 423 86 494T164 610T270 680T388 705Q521 705 621 601T722 341Q722 260 693 191T617 75T510 4T388 -22T267 3T160 74T85 189T56 340ZM610 339Q610 428 590 495T535 598T463 651T384 668Q332 668 289 638T221 566Q168 485 168 339Q168 274 176 235Q189 158 228 105T324 28Q356 16 388 16Q415 16 442 24T501 54T555 111T594 205T610 339ZM223 263V422H263V388H514V422H554V263H514V297H263V263H223Z"></path></g><g data-mml-node="mo" transform="translate(4394.8, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="35.862ex" height="4.676ex" role="img" focusable="false" viewBox="0 -1370 15850.9 2067"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msubsup" transform="translate(1055.8, 0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="TeXAtom" transform="translate(828, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(687, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(828, -293.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2972.4, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(4028.2, 0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(409, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220, -686)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1078" height="60" x="120" y="220"></rect></g></g><g data-mml-node="msubsup" transform="translate(5346.2, 0)"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="TeXAtom" transform="translate(833, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(687, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(833, -293.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7212.2, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mstyle" transform="translate(8212.5, 0)"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(367.5, 676)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mi" transform="translate(220, -686)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1078" height="60" x="120" y="220"></rect></g></g><g data-mml-node="msubsup" transform="translate(9530.5, 0)"><g data-mml-node="mi"><path data-c="398" d="M56 340Q56 423 86 494T164 610T270 680T388 705Q521 705 621 601T722 341Q722 260 693 191T617 75T510 4T388 -22T267 3T160 74T85 189T56 340ZM610 339Q610 428 590 495T535 598T463 651T384 668Q332 668 289 638T221 566Q168 485 168 339Q168 274 176 235Q189 158 228 105T324 28Q356 16 388 16Q415 16 442 24T501 54T555 111T594 205T610 339ZM223 263V422H263V388H514V422H554V263H514V297H263V263H223Z"></path></g><g data-mml-node="TeXAtom" transform="translate(778, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(687, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(778, -293.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mstyle" transform="translate(11119.3, 0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(12119.3, 0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(12669.3, 0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(13154.3, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(13605.3, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(14295.1, 0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(15350.9, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Theta1_grad(:,<span class="number">2</span>:<span class="keyword">end</span>) = Theta1_grad(:,<span class="number">2</span>:<span class="keyword">end</span>) + lambda/m*Theta1(:,<span class="number">2</span>:<span class="keyword">end</span>);</span><br><span class="line">Theta2_grad(:,<span class="number">2</span>:<span class="keyword">end</span>) = Theta2_grad(:,<span class="number">2</span>:<span class="keyword">end</span>) + lambda/m*Theta2(:,<span class="number">2</span>:<span class="keyword">end</span>);</span><br></pre></td></tr></table></figure>

<h2 id="The-hidden-layer"><a href="#The-hidden-layer" class="headerlink" title="The hidden layer"></a>The hidden layer</h2><p><img src="https://i.imgur.com/LqYfS7h.png" alt=""></p>
<!--more-->

<p><img src="https://i.imgur.com/c1wo2Cy.png" alt=""></p>
]]></content>
      <tags>
        <tag>AI</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Advice for Applying Machine Learning</title>
    <url>/cn/Advice-for-Applying-Machine-Learning/</url>
    <content><![CDATA[<h2 id="1-2-Regularized-linear-regression-cost-function"><a href="#1-2-Regularized-linear-regression-cost-function" class="headerlink" title="1.2 Regularized linear regression cost function"></a>1.2 Regularized linear regression cost function</h2><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.014ex" xmlns="http://www.w3.org/2000/svg" width="49.903ex" height="6.972ex" role="img" focusable="false" viewBox="0 -1749.5 22057 3081.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(633, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1022, 0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(1491, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2157.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(3213.6, 0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(659, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220, -686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500, 0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><rect width="1578" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mrow" transform="translate(5031.6, 0)"><g data-mml-node="mo"><path data-c="28" d="M758 -1237T758 -1240T752 -1249H736Q718 -1249 717 -1248Q711 -1245 672 -1199Q237 -706 237 251T672 1700Q697 1730 716 1749Q718 1750 735 1750H752Q758 1744 758 1741Q758 1737 740 1713T689 1644T619 1537T540 1380T463 1176Q348 802 348 251Q348 -242 441 -599T744 -1218Q758 -1237 758 -1240Z"></path></g><g data-mml-node="munderover" transform="translate(792, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(411.6, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2236, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(2625, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(576, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3582.6, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(3971.6, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5387.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5998.9, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(6999.2, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="msup" transform="translate(8333.2, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(389, 413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(9125.8, 0)"><path data-c="29" d="M33 1741Q33 1750 51 1750H60H65Q73 1750 81 1743T119 1700Q554 1207 554 251Q554 -707 119 -1199Q76 -1250 66 -1250Q65 -1250 62 -1250T56 -1249Q55 -1249 53 -1249T49 -1250Q33 -1250 33 -1239Q33 -1236 50 -1214T98 -1150T163 -1052T238 -910T311 -727Q443 -335 443 251Q443 402 436 532T405 831T339 1142T224 1438T50 1716Q33 1737 33 1741Z"></path></g></g><g data-mml-node="mo" transform="translate(15171.6, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mstyle" transform="translate(16171.8, 0)"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(617.5, 676)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mrow" transform="translate(220, -686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500, 0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><rect width="1578" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mrow" transform="translate(17989.8, 0)"><g data-mml-node="mo"><path data-c="28" d="M758 -1237T758 -1240T752 -1249H736Q718 -1249 717 -1248Q711 -1245 672 -1199Q237 -706 237 251T672 1700Q697 1730 716 1749Q718 1750 735 1750H752Q758 1744 758 1741Q758 1737 740 1713T689 1644T619 1537T540 1380T463 1176Q348 802 348 251Q348 -242 441 -599T744 -1218Q758 -1237 758 -1240Z"></path></g><g data-mml-node="munderover" transform="translate(792, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(124.5, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(509.9, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="msubsup" transform="translate(2402.7, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(469, -247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3275.2, 0)"><path data-c="29" d="M33 1741Q33 1750 51 1750H60H65Q73 1750 81 1743T119 1700Q554 1207 554 251Q554 -707 119 -1199Q76 -1250 66 -1250Q65 -1250 62 -1250T56 -1249Q55 -1249 53 -1249T49 -1250Q33 -1250 33 -1239Q33 -1236 50 -1214T98 -1150T163 -1052T238 -910T311 -727Q443 -335 443 251Q443 402 436 532T405 831T339 1142T224 1438T50 1716Q33 1737 33 1741Z"></path></g></g></g></g></svg></mjx-container></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">J = <span class="number">1</span>/(<span class="number">2</span>*m)*sum( (X*theta - y).^<span class="number">2</span> ) + lambda/(<span class="number">2</span>*m)*sum(theta(<span class="number">2</span>:<span class="keyword">end</span>).^<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="1-3-Regularized-linear-regression-gradient"><a href="#1-3-Regularized-linear-regression-gradient" class="headerlink" title="1.3 Regularized linear regression gradient"></a>1.3 Regularized linear regression gradient</h2><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.819ex" xmlns="http://www.w3.org/2000/svg" width="40.137ex" height="6.354ex" role="img" focusable="false" viewBox="0 -1562.5 17740.8 2808.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mstyle"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220, 710)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566, 0)"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(1199, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1588, 0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(2057, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(723.7, -686)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="msub" transform="translate(566, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g><rect width="2646" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mo" transform="translate(3163.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(4219.6, 0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(409, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220, -686)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1078" height="60" x="120" y="220"></rect></g></g><g data-mml-node="munderover" transform="translate(5704.2, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(411.6, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7148.2, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(7537.2, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(576, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g><g data-mml-node="mo" transform="translate(8494.9, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(8883.9, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(10299.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(10911.2, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(11911.4, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(13245.5, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="msubsup" transform="translate(13634.5, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(572, -293.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mo" transform="translate(15050.5, 0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"></path></g><g data-mml-node="mi" transform="translate(15495.2, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(16185, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(17240.8, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.827ex" xmlns="http://www.w3.org/2000/svg" width="51.302ex" height="6.785ex" role="img" focusable="false" viewBox="0 -1749.5 22675.5 2999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mstyle"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220, 710)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566, 0)"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(1199, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1588, 0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(2057, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(754.8, -686)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="msub" transform="translate(566, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g><rect width="2646" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mo" transform="translate(3163.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(4219.6, 0)"><g data-mml-node="mo"><path data-c="28" d="M758 -1237T758 -1240T752 -1249H736Q718 -1249 717 -1248Q711 -1245 672 -1199Q237 -706 237 251T672 1700Q697 1730 716 1749Q718 1750 735 1750H752Q758 1744 758 1741Q758 1737 740 1713T689 1644T619 1537T540 1380T463 1176Q348 802 348 251Q348 -242 441 -599T744 -1218Q758 -1237 758 -1240Z"></path></g><g data-mml-node="mstyle" transform="translate(792, 0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(409, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220, -686)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1078" height="60" x="120" y="220"></rect></g></g><g data-mml-node="munderover" transform="translate(2276.7, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(411.6, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3720.7, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(4109.7, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(576, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5067.3, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(5456.3, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(6872.4, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7483.6, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(8483.8, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(9817.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="msubsup" transform="translate(10206.9, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(572, -293.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mo" transform="translate(11623, 0)"><path data-c="29" d="M33 1741Q33 1750 51 1750H60H65Q73 1750 81 1743T119 1700Q554 1207 554 251Q554 -707 119 -1199Q76 -1250 66 -1250Q65 -1250 62 -1250T56 -1249Q55 -1249 53 -1249T49 -1250Q33 -1250 33 -1239Q33 -1236 50 -1214T98 -1150T163 -1052T238 -910T311 -727Q443 -335 443 251Q443 402 436 532T405 831T339 1142T224 1438T50 1716Q33 1737 33 1741Z"></path></g></g><g data-mml-node="mo" transform="translate(16856.8, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mstyle" transform="translate(17857, 0)"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(367.5, 676)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mi" transform="translate(220, -686)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1078" height="60" x="120" y="220"></rect></g></g><g data-mml-node="msub" transform="translate(19175, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mo" transform="translate(19985.3, 0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"></path></g><g data-mml-node="mi" transform="translate(20430, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(21119.8, 0)"><path data-c="2A7E" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM674 172Q692 172 694 154Q694 142 687 137Q685 135 395 -2L107 -138H101Q83 -136 83 -118Q83 -106 96 -100Q100 -98 380 35T665 170T674 172Z"></path></g><g data-mml-node="mn" transform="translate(22175.5, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">r = theta; r(<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">grad = <span class="number">1</span>/m*(X'*(X*theta-y)) + lambda/m*r;</span><br></pre></td></tr></table></figure>

<h2 id="2-1-Learning-curves"><a href="#2-1-Learning-curves" class="headerlink" title="2.1 Learning curves"></a>2.1 Learning curves</h2><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.827ex" xmlns="http://www.w3.org/2000/svg" width="36.47ex" height="6.785ex" role="img" focusable="false" viewBox="0 -1749.5 16119.8 2999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="TeXAtom" transform="translate(555, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(361, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(812, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1341, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1686, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2221.4, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2610.4, 0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(3079.4, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3746.2, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(4802, 0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(659, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220, -686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500, 0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><rect width="1578" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mrow" transform="translate(6620, 0)"><g data-mml-node="mo"><path data-c="5B" d="M269 -1249V1750H577V1677H342V-1176H577V-1249H269Z"></path></g><g data-mml-node="munderover" transform="translate(583, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(411.6, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2027, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(2416, 0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(576, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3373.6, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(3762.6, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5178.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5789.9, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(6790.2, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="msup" transform="translate(8124.2, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(389, 413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(8916.8, 0)"><path data-c="5D" d="M5 1677V1750H313V-1249H5V-1176H240V1677H5Z"></path></g></g></g></g></svg></mjx-container></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:m</span><br><span class="line">    xi = X(<span class="number">1</span>:<span class="built_in">i</span>,:); yi = y(<span class="number">1</span>:<span class="built_in">i</span>);</span><br><span class="line"></span><br><span class="line">    theta = trainLinearReg(xi, yi, lambda);</span><br><span class="line">    error_train(<span class="built_in">i</span>) = linearRegCostFunction(xi, yi, theta, <span class="number">0</span>)</span><br><span class="line">    error_val(<span class="built_in">i</span>) = linearRegCostFunction(Xval, yval, theta, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h2 id="3-Polynomial-regression"><a href="#3-Polynomial-regression" class="headerlink" title="3 Polynomial regression"></a>3 Polynomial regression</h2><p>$$ h_{\theta }(x) = \theta _{0} + \theta _{1}<em>(waterLevel) + \theta _{2}</em>(waterLevel)^{2} + … + \theta _{p}*(waterLevel)^{p} $$</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">X_poly = X.^[<span class="number">1</span>:<span class="number">1</span>:p];</span><br></pre></td></tr></table></figure>

<h2 id="3-3-Selecting-λ-using-a-cross-validation-set"><a href="#3-3-Selecting-λ-using-a-cross-validation-set" class="headerlink" title="3.3 Selecting λ using a cross validation set"></a>3.3 Selecting λ using a cross validation set</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(lambda_vec)</span><br><span class="line">    lambda = lambda_vec(<span class="built_in">i</span>);</span><br><span class="line"></span><br><span class="line">    theta = trainLinearReg(X, y, lambda);</span><br><span class="line">    error_train(<span class="built_in">i</span>) = linearRegCostFunction(X, y, theta, <span class="number">0</span>)</span><br><span class="line">    error_val(<span class="built_in">i</span>) = linearRegCostFunction(Xval, yval, theta, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/yyXPMcV.png" alt=""></p>
]]></content>
      <tags>
        <tag>AI</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Support Vector Machines</title>
    <url>/cn/Support-Vector-Machines/</url>
    <content><![CDATA[<p>I heard SVM many times before and got to see what it is now. 😄</p>
<h2 id="1-2-1-Gaussian-Kernel"><a href="#1-2-1-Gaussian-Kernel" class="headerlink" title="1.2.1 Gaussian Kernel"></a>1.2.1 Gaussian Kernel</h2><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.268ex" xmlns="http://www.w3.org/2000/svg" width="72.794ex" height="7.668ex" role="img" focusable="false" viewBox="0 -1944.7 32174.8 3389.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="TeXAtom" transform="translate(849, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(477, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1006, 0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1578, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(2047, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(2516, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2861, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(3390, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3720.4, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(4109.4, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5525.4, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(5970.1, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(801, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7433.6, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8100.3, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(9156.1, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(9622.1, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(10194.1, 0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mrow" transform="translate(10697.1, 0)"><g data-mml-node="mo"><path data-c="239B" d="M837 1154Q843 1148 843 1145Q843 1141 818 1106T753 1002T667 841T574 604T494 299Q417 -84 417 -609Q417 -641 416 -647T411 -654Q409 -655 366 -655Q299 -655 297 -654Q292 -652 292 -643T291 -583Q293 -400 304 -242T347 110T432 470T574 813T785 1136Q787 1139 790 1142T794 1147T796 1150T799 1152T802 1153T807 1154T813 1154H819H837Z" transform="translate(0, 790.7)"></path><path data-c="239D" d="M843 -635Q843 -638 837 -644H820Q801 -644 800 -643Q792 -635 785 -626Q684 -503 605 -363T473 -75T385 216T330 518T302 809T291 1093Q291 1144 291 1153T296 1164Q298 1165 366 1165Q409 1165 411 1164Q415 1163 416 1157T417 1119Q417 529 517 109T833 -617Q843 -631 843 -635Z" transform="translate(0, -800.7)"></path></g><g data-mml-node="mo" transform="translate(875, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mstyle" transform="translate(1653, 0)"><g data-mml-node="mfrac"><g data-mml-node="msup" transform="translate(220, 853.3)"><g data-mml-node="mrow"><g data-mml-node="mo"><svg width="278" height="1286.7" y="-393.3" x="27.5" viewBox="0 -159.4 278 1286.7"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" transform="scale(1, 1.932)"></path></svg></g><g data-mml-node="msup" transform="translate(333, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1971.3, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(2971.5, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(801, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4435, 0)"><svg width="278" height="1286.7" y="-393.3" x="27.5" viewBox="0 -159.4 278 1286.7"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" transform="scale(1, 1.932)"></path></svg></g></g><g data-mml-node="mn" transform="translate(4768, 620.4) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mrow" transform="translate(2068.5, -719.9)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msup" transform="translate(500, 0)"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="TeXAtom" transform="translate(571, 289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g><rect width="5371.5" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mo" transform="translate(7264.5, 0)"><path data-c="239E" d="M31 1143Q31 1154 49 1154H59Q72 1154 75 1152T89 1136Q190 1013 269 873T401 585T489 294T544 -8T572 -299T583 -583Q583 -634 583 -643T577 -654Q575 -655 508 -655Q465 -655 463 -654Q459 -653 458 -647T457 -609Q457 -58 371 340T100 1037Q87 1059 61 1098T31 1143Z" transform="translate(0, 790.7)"></path><path data-c="23A0" d="M56 -644H50Q31 -644 31 -635Q31 -632 37 -622Q69 -579 100 -527Q286 -228 371 170T457 1119Q457 1161 462 1164Q464 1165 520 1165Q575 1165 577 1164Q582 1162 582 1153T583 1093Q581 910 570 752T527 400T442 40T300 -303T89 -626Q78 -640 75 -642T61 -644H56Z" transform="translate(0, -800.7)"></path></g></g><g data-mml-node="mo" transform="translate(19114.4, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(20170.2, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(20636.2, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(21208.2, 0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mrow" transform="translate(21711.2, 0)"><g data-mml-node="mo"><path data-c="28" d="M758 -1237T758 -1240T752 -1249H736Q718 -1249 717 -1248Q711 -1245 672 -1199Q237 -706 237 251T672 1700Q697 1730 716 1749Q718 1750 735 1750H752Q758 1744 758 1741Q758 1737 740 1713T689 1644T619 1537T540 1380T463 1176Q348 802 348 251Q348 -242 441 -599T744 -1218Q758 -1237 758 -1240Z"></path></g><g data-mml-node="mo" transform="translate(792, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mstyle" transform="translate(1570, 0)"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220, 803.3)"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1056, 477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(1056, -285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1299, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2378.1, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(2767.1, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mi" transform="translate(572, -317.1) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(4405.4, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msubsup" transform="translate(5405.6, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(801, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mi" transform="translate(572, -317.1) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="msup" transform="translate(6869.1, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(389, 363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mrow" transform="translate(3313.5, -719.9)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msup" transform="translate(500, 0)"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="TeXAtom" transform="translate(571, 289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g><rect width="7861.6" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mo" transform="translate(9671.6, 0)"><path data-c="29" d="M33 1741Q33 1750 51 1750H60H65Q73 1750 81 1743T119 1700Q554 1207 554 251Q554 -707 119 -1199Q76 -1250 66 -1250Q65 -1250 62 -1250T56 -1249Q55 -1249 53 -1249T49 -1250Q33 -1250 33 -1239Q33 -1236 50 -1214T98 -1150T163 -1052T238 -910T311 -727Q443 -335 443 251Q443 402 436 532T405 831T339 1142T224 1438T50 1716Q33 1737 33 1741Z"></path></g></g></g></g></svg></mjx-container></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">sim = <span class="built_in">exp</span>(-sum((x2-x1).^<span class="number">2</span>)./(<span class="number">2</span>*sigma.^<span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="1-2-3-Example-Dataset-3"><a href="#1-2-3-Example-Dataset-3" class="headerlink" title="1.2.3 Example Dataset 3"></a>1.2.3 Example Dataset 3</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">l = [<span class="number">0.01</span>, <span class="number">0.03</span>, <span class="number">0.1</span>, <span class="number">0.3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">30</span>];</span><br><span class="line">mix = <span class="built_in">realmax</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c = l</span><br><span class="line">    <span class="keyword">for</span> s = l</span><br><span class="line">        model= svmTrain(X, y, c, @(x1, x2) gaussianKernel(x1, x2, s));</span><br><span class="line"></span><br><span class="line">        p = svmPredict(model, Xval);</span><br><span class="line">        m = <span class="built_in">mean</span>(double(p ~= yval));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> m &lt; mix</span><br><span class="line">            C = c;sigma = s;mix = m;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>I wrote the Gaussian Kernel function in a way that it can be pass sigma as a vector and get a sim vector, therefore <code>g = gaussianKernel(x1, x2, s)</code> is a vector and can skip <code>for s = l</code> which is a redundant compute in <code>for c = l</code> loop. Then if the <code>svmTrain</code> can be computed as a vector, the <code>for c = l</code> can also be skip.</p>
<p>But it can’t. 😢</p>
<p>Is it has any connections with functional programming?</p>
<h2 id="2-1-1-Vocabulary-List"><a href="#2-1-1-Vocabulary-List" class="headerlink" title="2.1.1 Vocabulary List"></a>2.1.1 Vocabulary List</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">i</span> = <span class="built_in">find</span>(strcmp(vocabList, str));</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">i</span></span><br><span class="line">    word_indices = [word_indices; <span class="built_in">i</span>];</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h2 id="2-2-Extracting-Features-from-Emails"><a href="#2-2-Extracting-Features-from-Emails" class="headerlink" title="2.2 Extracting Features from Emails"></a>2.2 Extracting Features from Emails</h2><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.469ex" xmlns="http://www.w3.org/2000/svg" width="25.684ex" height="4.07ex" role="img" focusable="false" viewBox="0 -1149.5 11352.4 1799"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(1905.6, 0)"><g data-mml-node="mo"><path data-c="5B" d="M224 -649V1150H455V1099H275V-598H455V-649H224Z"></path></g><g data-mml-node="mtable" transform="translate(472, 0)"><g data-mml-node="mtr" transform="translate(0, -275)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mtext" transform="translate(500, 0)"><path data-c="A0" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(750, 0)"><g data-mml-node="mo"><path data-c="22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z"></path></g></g><g data-mml-node="mtext" transform="translate(1028, 0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(1278, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mtext" transform="translate(1778, 0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(2028, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mtext" transform="translate(2528, 0)"><path data-c="A0" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2778, 0)"><g data-mml-node="mo"><path data-c="22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z"></path></g></g><g data-mml-node="mtext" transform="translate(3056, 0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(3306, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mtext" transform="translate(3806, 0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(4056, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mtext" transform="translate(4556, 0)"><path data-c="A0" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4806, 0)"><g data-mml-node="mo"><path data-c="22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z"></path></g></g><g data-mml-node="mtext" transform="translate(5084, 0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(5334, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mtext" transform="translate(5834, 0)"><path data-c="A0" d=""></path></g></g></g></g><g data-mml-node="mo" transform="translate(6556, 0)"><path data-c="5D" d="M16 1099V1150H247V-649H16V-598H196V1099H16Z"></path></g></g><g data-mml-node="mo" transform="translate(9211.3, 0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="msup" transform="translate(10156.1, 0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="211D" d="M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z"></path></g></g><g data-mml-node="mi" transform="translate(722, 413) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = word_indices</span><br><span class="line">    x(<span class="built_in">i</span>) = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/rBji3uP.png" alt=""></p>
]]></content>
      <tags>
        <tag>AI</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Unsupervised Learning</title>
    <url>/cn/Unsupervised-Learning/</url>
    <content><![CDATA[<h2 id="1-1-1-Finding-closest-centroids"><a href="#1-1-1-Finding-closest-centroids" class="headerlink" title="1.1.1 Finding closest centroids"></a>1.1.1 Finding closest centroids</h2><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.469ex" xmlns="http://www.w3.org/2000/svg" width="25.825ex" height="4.07ex" role="img" focusable="false" viewBox="0 -1149.5 11414.7 1799"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="TeXAtom" transform="translate(433, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1554.9, 0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" transform="translate(278, 0)"></path></g><g data-mml-node="mi" transform="translate(2888.6, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(3300.6, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3745.3, 0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4623.3, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4968.3, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mrow" transform="translate(5568.3, 0)"><g data-mml-node="mo"><path data-c="28" d="M180 96T180 250T205 541T266 770T353 944T444 1069T527 1150H555Q561 1144 561 1141Q561 1137 545 1120T504 1072T447 995T386 878T330 721T288 513T272 251Q272 133 280 56Q293 -87 326 -209T399 -405T475 -531T536 -609T561 -640Q561 -643 555 -649H527Q483 -612 443 -568T353 -443T266 -270T205 -41Z"></path></g><g data-mml-node="msup" transform="translate(597, 0)"><g data-mml-node="mrow"><g data-mml-node="mo"><svg width="278" height="1386.7" y="-443.3" x="27.5" viewBox="0 -171.8 278 1386.7"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" transform="scale(1, 2.082)"></path></svg></g><g data-mml-node="msup" transform="translate(333, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1971.3, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(2971.5, 0)"><g data-mml-node="mi"><path data-c="1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></g><g data-mml-node="mi" transform="translate(603, -150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(3915.9, 0)"><svg width="278" height="1386.7" y="-443.3" x="27.5" viewBox="0 -171.8 278 1386.7"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" transform="scale(1, 2.082)"></path></svg></g></g><g data-mml-node="mn" transform="translate(4248.9, 670.4) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(5249.4, 0)"><path data-c="29" d="M35 1138Q35 1150 51 1150H56H69Q113 1113 153 1069T243 944T330 771T391 541T416 250T391 -40T330 -270T243 -443T152 -568T69 -649H56Q43 -649 39 -647T35 -637Q65 -607 110 -548Q283 -316 316 56Q324 133 324 251Q324 368 316 445Q278 877 48 1123Q36 1137 35 1138Z"></path></g></g></g></g></svg></mjx-container></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">v = [];</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:K</span><br><span class="line">    v = [v, sum((X - centroids(<span class="built_in">j</span>,:)).^<span class="number">2</span>, <span class="number">2</span>)];</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">[v, idx] = <span class="built_in">min</span>(v, [], <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>The <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex" xmlns="http://www.w3.org/2000/svg" width="1.258ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 556 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(278, 0)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g></g></g></svg></mjx-container> symbol means <a href="https://en.wikipedia.org/wiki/Norm_(mathematics)">Norm</a> not Absolute value the first time as I thought. 😂</p>
<a id="more"></a>

<h2 id="1-1-2-Computing-centroid-means"><a href="#1-1-2-Computing-centroid-means" class="headerlink" title="1.1.2 Computing centroid means"></a>1.1.2 Computing centroid means</h2><p>$$\mu <em>k := \dfrac{1}{\left | C_k \right |}\sum</em>{i\in  C_k}^{ }x^{(i)}$$</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:K</span><br><span class="line">    <span class="built_in">j</span> = (idx == <span class="built_in">i</span>);</span><br><span class="line">    v = X(<span class="built_in">j</span>, :);</span><br><span class="line">    n = <span class="built_in">size</span>(v, <span class="number">1</span>);</span><br><span class="line">    centroids(<span class="built_in">i</span>, :) = sum(v)/n;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/UEBpwso.gif" alt=""></p>
<h2 id="2-2-Implementing-PCA"><a href="#2-2-Implementing-PCA" class="headerlink" title="2.2 Implementing PCA"></a>2.2 Implementing PCA</h2><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="14.476ex" height="4.613ex" role="img" focusable="false" viewBox="0 -1342 6398.6 2039"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="mo" transform="translate(1721.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(2777.6, 0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(409, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220, -686)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1078" height="60" x="120" y="220"></rect></g></g><g data-mml-node="msup" transform="translate(4095.6, 0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(903.2, 413) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mi" transform="translate(5546.6, 0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">sigma = X'*X/m;</span><br><span class="line">[U, S, V] = svd(sigma);</span><br></pre></td></tr></table></figure>

<h2 id="2-3-1-Projecting-the-data-onto-the-principal-components"><a href="#2-3-1-Projecting-the-data-onto-the-principal-components" class="headerlink" title="2.3.1 Projecting the data onto the principal components"></a>2.3.1 Projecting the data onto the principal components</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Z = X * U;</span><br><span class="line">Z = Z(:,<span class="number">1</span>:K);</span><br></pre></td></tr></table></figure>

<h2 id="2-3-2-Reconstructing-an-approximation-of-the-data"><a href="#2-3-2-Reconstructing-an-approximation-of-the-data" class="headerlink" title="2.3.2 Reconstructing an approximation of the data"></a>2.3.2 Reconstructing an approximation of the data</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">X_rec = Z * U(:,<span class="number">1</span>:K)';</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/TjyYT8G.gif" alt=""></p>
<p><img src="https://i.imgur.com/duSTjdI.png" alt=""></p>
]]></content>
      <tags>
        <tag>AI</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Anomaly Detection &amp; Recommender Systems</title>
    <url>/cn/Anomaly-Detection-Recommender-Systems/</url>
    <content><![CDATA[<h2 id="Anomaly-Detection"><a href="#Anomaly-Detection" class="headerlink" title="Anomaly Detection"></a>Anomaly Detection</h2><div style="width: 400px">
<img src="https://i.imgur.com/slIPtvp.gif">
</div>

<h3 id="1-1-Gaussian-distribution"><a href="#1-1-Gaussian-distribution" class="headerlink" title="1.1 Gaussian distribution"></a>1.1 Gaussian distribution</h3><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.308ex" xmlns="http://www.w3.org/2000/svg" width="27.169ex" height="5.385ex" role="img" focusable="false" viewBox="0 -1360.3 12008.8 2380.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(503, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(892, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1464, 0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"></path></g><g data-mml-node="mi" transform="translate(1908.7, 0)"><path data-c="1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></g><g data-mml-node="mo" transform="translate(2511.7, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(2956.3, 0)"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="mn" transform="translate(571, 413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(3930.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4597.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(5653.4, 0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(1418.8, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msqrt" transform="translate(220, -962)"><g transform="translate(853, 0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500, 0)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="msup" transform="translate(1070, 0)"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="mn" transform="translate(571, 289) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(0, 142)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="2044.6" height="60" x="853" y="882"></rect></g><rect width="3097.6" height="60" x="120" y="220"></rect></g></g><g data-mml-node="msup" transform="translate(8991, 0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(466, 480.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(778, 0)"><g data-mml-node="mrow" transform="translate(220, 516.8) scale(0.707)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(961, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1739, 0)"><path data-c="1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></g><g data-mml-node="msup" transform="translate(2342, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(389, 363)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mrow" transform="translate(806.9, -515.3) scale(0.707)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msup" transform="translate(500, 0)"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="mn" transform="translate(571, 289)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><rect width="2520" height="60" x="120" y="220"></rect></g></g></g></g></g></svg></mjx-container></p>
<a id="more"></a>

<h3 id="1-2-Estimating-parameters-for-a-Gaussian"><a href="#1-2-Estimating-parameters-for-a-Gaussian" class="headerlink" title="1.2 Estimating parameters for a Gaussian"></a>1.2 Estimating parameters for a Gaussian</h3><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.014ex" xmlns="http://www.w3.org/2000/svg" width="15.36ex" height="6.549ex" role="img" focusable="false" viewBox="0 -1562.5 6789.3 2894.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></g><g data-mml-node="mi" transform="translate(603, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1174.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(2230.5, 0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(409, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220, -686)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1078" height="60" x="120" y="220"></rect></g></g><g data-mml-node="munderover" transform="translate(3715.2, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(124.5, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(411.6, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="msubsup" transform="translate(5325.8, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(801, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(572, -293.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.014ex" xmlns="http://www.w3.org/2000/svg" width="22.627ex" height="6.549ex" role="img" focusable="false" viewBox="0 -1562.5 10001.2 2894.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="TeXAtom" transform="translate(571, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(571, -247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1252.3, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(2308.1, 0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(409, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220, -686)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1078" height="60" x="120" y="220"></rect></g></g><g data-mml-node="munderover" transform="translate(3792.8, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(124.5, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(411.6, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5236.8, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(5625.8, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(801, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(572, -293.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7311.5, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(8311.7, 0)"><g data-mml-node="mi"><path data-c="1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></g><g data-mml-node="mi" transform="translate(603, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="msup" transform="translate(9208.6, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(389, 413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">mu = sum(X)/m;</span><br><span class="line">sigma2 = sum((X-mu).^<span class="number">2</span>)/m;</span><br></pre></td></tr></table></figure>

<p>I thought something was wrong in these equations as the region with the highest probability did not show as the pdf tour with a red oval.</p>
<p>After debugging for a while, I found the center of Gaussian distribution contours color is yellow, which is nearly invisible on a none Retina screen. 😂😂😂</p>
<h3 id="1-3-Selecting-the-threshold-ε"><a href="#1-3-Selecting-the-threshold-ε" class="headerlink" title="1.3 Selecting the threshold, ε"></a>1.3 Selecting the threshold, ε</h3><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.991ex" xmlns="http://www.w3.org/2000/svg" width="18.027ex" height="5.027ex" role="img" focusable="false" viewBox="0 -1342 7968 2222"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mn" transform="translate(643, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1324.3, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(2380.1, 0)"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220, 676)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(722.2, 0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(1222.4, 0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(1725.4, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2176.4, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2642.4, 0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mo" transform="translate(3297.7, 0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(3797.9, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4248.9, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(4714.9, 0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><g data-mml-node="mrow" transform="translate(581.2, -686)"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(954, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1420, 0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mo" transform="translate(2075.2, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3075.4, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3526.4, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(3992.4, 0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><rect width="5347.9" height="60" x="120" y="220"></rect></g></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.016ex" xmlns="http://www.w3.org/2000/svg" width="15.308ex" height="4.962ex" role="img" focusable="false" viewBox="0 -1302 6766 2193"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(954, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1420, 0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mo" transform="translate(2130.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(3186.6, 0)"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(1357.7, 676)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(361, 0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g><g data-mml-node="mrow" transform="translate(220, -686)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(361, 0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(1086.2, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2086.4, 0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(2636.4, 0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g><rect width="3339.4" height="60" x="120" y="220"></rect></g></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.016ex" xmlns="http://www.w3.org/2000/svg" width="14.389ex" height="4.962ex" role="img" focusable="false" viewBox="0 -1302 6360 2193"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(917, 0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mo" transform="translate(1627.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(2683.6, 0)"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(1406.2, 676)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(361, 0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g><g data-mml-node="mrow" transform="translate(220, -686)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(361, 0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(1086.2, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2086.4, 0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(2636.4, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><rect width="3436.4" height="60" x="120" y="220"></rect></g></g></g></g></svg></mjx-container></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">p = (pval &lt; epsilon);</span><br><span class="line">tp = sum((p == <span class="number">1</span>) &amp; (yval == <span class="number">1</span>));</span><br><span class="line">fp = sum((p == <span class="number">1</span>) &amp; (yval == <span class="number">0</span>));</span><br><span class="line">fn = sum((p == <span class="number">0</span>) &amp; (yval == <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">prec = tp/(tp+fp);</span><br><span class="line">rec = tp/(tp+fn);</span><br><span class="line"></span><br><span class="line">F1 = <span class="number">2</span>*prec*rec/(prec+rec);</span><br></pre></td></tr></table></figure>

<h2 id="Recommender-Systems"><a href="#Recommender-Systems" class="headerlink" title="Recommender Systems"></a>Recommender Systems</h2><h3 id="2-1-Movie-ratings-dataset"><a href="#2-1-Movie-ratings-dataset" class="headerlink" title="2.1 Movie ratings dataset"></a>2.1 Movie ratings dataset</h3><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.469ex" xmlns="http://www.w3.org/2000/svg" width="96.292ex" height="4.07ex" role="img" focusable="false" viewBox="0 -1149.5 42561.3 1799"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1129.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(2185.6, 0)"><g data-mml-node="mo"><path data-c="5B" d="M224 -649V1150H455V1099H275V-598H455V-649H224Z"></path></g><g data-mml-node="mtable" transform="translate(472, 0)"><g data-mml-node="mtr" transform="translate(0, -275)"><g data-mml-node="mtd"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(778, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1167, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="msup" transform="translate(2692.7, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(389, 363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mo" transform="translate(3851.7, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mtext" transform="translate(4851.9, 0)"><path data-c="A0" d=""></path></g><g data-mml-node="mo" transform="translate(5324.2, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(6324.4, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(6713.4, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(889, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="msup" transform="translate(8239.1, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(389, 363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mo" transform="translate(9398.1, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mtext" transform="translate(10398.3, 0)"><path data-c="A0" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(10648.3, 0)"><g data-mml-node="mo"><path data-c="22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z"></path></g></g><g data-mml-node="mtext" transform="translate(10926.3, 0)"><path data-c="A0" d=""></path></g><g data-mml-node="mo" transform="translate(11398.5, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(12398.7, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(12787.7, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389, 0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1659.8, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="msup" transform="translate(14858.5, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(389, 363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mo" transform="translate(16017.5, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mtext" transform="translate(17017.7, 0)"><path data-c="A0" d=""></path></g></g></g></g><g data-mml-node="mo" transform="translate(17739.7, 0)"><path data-c="5D" d="M16 1099V1150H247V-649H16V-598H196V1099H16Z"></path></g></g><g data-mml-node="mo" transform="translate(20397.3, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(20842, 0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(21546, 0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(22122, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(22588, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(22949, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(23755.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(24811.5, 0)"><g data-mml-node="mo"><path data-c="5B" d="M224 -649V1150H455V1099H275V-598H455V-649H224Z"></path></g><g data-mml-node="mtable" transform="translate(472, 0)"><g data-mml-node="mtr" transform="translate(0, -275)"><g data-mml-node="mtd"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(778, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1167, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, 363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="msup" transform="translate(2589.7, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(389, 363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mo" transform="translate(3748.7, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mtext" transform="translate(4748.9, 0)"><path data-c="A0" d=""></path></g><g data-mml-node="mo" transform="translate(5221.2, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(6221.4, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(6610.4, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, 363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(889, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="msup" transform="translate(8033.1, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(389, 363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mo" transform="translate(9192.1, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mtext" transform="translate(10192.3, 0)"><path data-c="A0" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(10442.3, 0)"><g data-mml-node="mo"><path data-c="22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z"></path></g></g><g data-mml-node="mtext" transform="translate(10720.3, 0)"><path data-c="A0" d=""></path></g><g data-mml-node="mo" transform="translate(11192.5, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(12192.7, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(12581.7, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, 363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389, 0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1443.5, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="msup" transform="translate(14396.5, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(389, 363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mo" transform="translate(15555.5, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mtext" transform="translate(16555.7, 0)"><path data-c="A0" d=""></path></g></g></g></g><g data-mml-node="mo" transform="translate(17277.7, 0)"><path data-c="5D" d="M16 1099V1150H247V-649H16V-598H196V1099H16Z"></path></g></g></g></g></svg></mjx-container></p>
<h3 id="2-2-1-Collaborative-filtering-cost-function"><a href="#2-2-1-Collaborative-filtering-cost-function" class="headerlink" title="2.2.1 Collaborative filtering cost function"></a>2.2.1 Collaborative filtering cost function</h3><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.222ex" xmlns="http://www.w3.org/2000/svg" width="61.104ex" height="6.258ex" role="img" focusable="false" viewBox="0 -1342 27007.9 2766.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(633, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1022, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2547.7, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(2992.3, 0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="msup" transform="translate(4331, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389, 0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1659.8, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(6401.8, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(6846.4, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(8269.1, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(8713.8, 0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="msup" transform="translate(10052.4, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389, 0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1443.5, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(11867.2, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(12534, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(13589.8, 0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220, -686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="700" height="60" x="120" y="220"></rect></g></g><g data-mml-node="munderover" transform="translate(14696.4, 0)"><g data-mml-node="mo" transform="translate(1269.6, 0)"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(0, -1147.3) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1012, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(1424, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(1813, 0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(2091, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2542, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2931, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3276, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3554, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(3966, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4355, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(5133, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(1991.6, 1150) scale(0.707)" data-mjx-texclass="ORD"></g></g><g data-mml-node="mo" transform="translate(18679.5, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(19068.5, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(19457.5, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(801, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="msup" transform="translate(20818, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(389, 413) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="msup" transform="translate(21754.8, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(23393.1, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(24393.3, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1012, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(1424, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="msup" transform="translate(26215.3, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(389, 413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">tmp = X*Theta' .* R - Y;</span><br><span class="line">J = sum(sum(tmp.^<span class="number">2</span>))/<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-2-Collaborative-filtering-gradient"><a href="#2-2-2-Collaborative-filtering-gradient" class="headerlink" title="2.2.2 Collaborative filtering gradient"></a>2.2.2 Collaborative filtering gradient</h3><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.222ex" xmlns="http://www.w3.org/2000/svg" width="36.275ex" height="6.369ex" role="img" focusable="false" viewBox="0 -1391 16033.3 2815.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mstyle"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(611.5, 676)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566, 0)"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g></g><g data-mml-node="mrow" transform="translate(220, -1020.7)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="msubsup" transform="translate(566, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(572, -317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g><rect width="2182.1" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mo" transform="translate(2699.9, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munderover" transform="translate(3755.6, 0)"><g data-mml-node="mo" transform="translate(774.2, 0)"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(0, -1147.3) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412, 0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(690, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1141, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1530, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1875, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2153, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2565, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2954, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3732, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(1496.2, 1150) scale(0.707)" data-mjx-texclass="ORD"></g></g><g data-mml-node="mo" transform="translate(6748.1, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(7137.1, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(7526.1, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(801, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="msup" transform="translate(8886.6, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(389, 413) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="msup" transform="translate(9823.4, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(11461.7, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(12461.9, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1012, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(1424, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(14283.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="msubsup" transform="translate(14672.9, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(801, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(469, -317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.222ex" xmlns="http://www.w3.org/2000/svg" width="36.4ex" height="6.369ex" role="img" focusable="false" viewBox="0 -1391 16089 2815.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mstyle"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(635.2, 676)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566, 0)"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g></g><g data-mml-node="mrow" transform="translate(220, -1020.7)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="msubsup" transform="translate(566, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(801, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(572, -317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g><rect width="2229.5" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mo" transform="translate(2747.2, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munderover" transform="translate(3803, 0)"><g data-mml-node="mo" transform="translate(750.5, 0)"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(0, -1147.3) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345, 0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(623, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1074, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1463, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1808, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2086, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2498, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2887, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3665, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(1472.5, 1150) scale(0.707)" data-mjx-texclass="ORD"></g></g><g data-mml-node="mo" transform="translate(6748.1, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(7137.1, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(7526.1, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(801, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="msup" transform="translate(8886.6, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(389, 413) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="msup" transform="translate(9823.4, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(11461.7, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(12461.9, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1012, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(1424, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(14283.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="msubsup" transform="translate(14672.9, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(572, -317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></g></svg></mjx-container></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">X_grad = tmp*Theta;</span><br><span class="line">Theta_grad = tmp'*X;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-3-Regularized-cost-function"><a href="#2-2-3-Regularized-cost-function" class="headerlink" title="2.2.3 Regularized cost function"></a>2.2.3 Regularized cost function</h3><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.222ex" xmlns="http://www.w3.org/2000/svg" width="61.104ex" height="6.258ex" role="img" focusable="false" viewBox="0 -1342 27007.9 2766.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(633, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1022, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2547.7, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(2992.3, 0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="msup" transform="translate(4331, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389, 0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1659.8, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(6401.8, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(6846.4, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(8269.1, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(8713.8, 0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="msup" transform="translate(10052.4, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389, 0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1443.5, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(11867.2, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(12534, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mstyle" transform="translate(13589.8, 0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220, -686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="700" height="60" x="120" y="220"></rect></g></g><g data-mml-node="munderover" transform="translate(14696.4, 0)"><g data-mml-node="mo" transform="translate(1269.6, 0)"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(0, -1147.3) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1012, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(1424, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(1813, 0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(2091, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2542, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2931, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3276, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3554, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(3966, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4355, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(5133, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(1991.6, 1150) scale(0.707)" data-mjx-texclass="ORD"></g></g><g data-mml-node="mo" transform="translate(18679.5, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(19068.5, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(19457.5, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(801, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="msup" transform="translate(20818, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(389, 413) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="msup" transform="translate(21754.8, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(23393.1, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(24393.3, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1012, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(1424, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="msup" transform="translate(26215.3, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(389, 413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.014ex" xmlns="http://www.w3.org/2000/svg" width="20.698ex" height="6.972ex" role="img" focusable="false" viewBox="0 -1749.5 9148.3 3081.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mrow" transform="translate(778, 0)"><g data-mml-node="mo"><path data-c="28" d="M758 -1237T758 -1240T752 -1249H736Q718 -1249 717 -1248Q711 -1245 672 -1199Q237 -706 237 251T672 1700Q697 1730 716 1749Q718 1750 735 1750H752Q758 1744 758 1741Q758 1737 740 1713T689 1644T619 1537T540 1380T463 1176Q348 802 348 251Q348 -242 441 -599T744 -1218Q758 -1237 758 -1240Z"></path></g><g data-mml-node="mstyle" transform="translate(792, 0)"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(220, 676)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mn" transform="translate(261.5, -686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="783" height="60" x="120" y="220"></rect></g></g><g data-mml-node="munderover" transform="translate(1981.7, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(124.5, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(349.2, 1172.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g><g data-mml-node="munderover" transform="translate(3592.3, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(86, -1107.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1299, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(509.9, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5036.3, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(5425.3, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(801, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(469, -317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="msup" transform="translate(6785.8, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(389, 413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(7578.3, 0)"><path data-c="29" d="M33 1741Q33 1750 51 1750H60H65Q73 1750 81 1743T119 1700Q554 1207 554 251Q554 -707 119 -1199Q76 -1250 66 -1250Q65 -1250 62 -1250T56 -1249Q55 -1249 53 -1249T49 -1250Q33 -1250 33 -1239Q33 -1236 50 -1214T98 -1150T163 -1052T238 -910T311 -727Q443 -335 443 251Q443 402 436 532T405 831T339 1142T224 1438T50 1716Q33 1737 33 1741Z"></path></g></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.864ex" xmlns="http://www.w3.org/2000/svg" width="20.823ex" height="6.822ex" role="img" focusable="false" viewBox="0 -1749.5 9204 3015.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mrow" transform="translate(778, 0)"><g data-mml-node="mo"><path data-c="28" d="M758 -1237T758 -1240T752 -1249H736Q718 -1249 717 -1248Q711 -1245 672 -1199Q237 -706 237 251T672 1700Q697 1730 716 1749Q718 1750 735 1750H752Q758 1744 758 1741Q758 1737 740 1713T689 1644T619 1537T540 1380T463 1176Q348 802 348 251Q348 -242 441 -599T744 -1218Q758 -1237 758 -1240Z"></path></g><g data-mml-node="mstyle" transform="translate(792, 0)"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(220, 676)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mn" transform="translate(261.5, -686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="783" height="60" x="120" y="220"></rect></g></g><g data-mml-node="munderover" transform="translate(1981.7, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(272.7, 1172.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g><g data-mml-node="munderover" transform="translate(3592.3, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(86, -1107.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1299, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(509.9, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5036.3, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(5425.3, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(572, -317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="msup" transform="translate(6841.4, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(389, 413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(7634, 0)"><path data-c="29" d="M33 1741Q33 1750 51 1750H60H65Q73 1750 81 1743T119 1700Q554 1207 554 251Q554 -707 119 -1199Q76 -1250 66 -1250Q65 -1250 62 -1250T56 -1249Q55 -1249 53 -1249T49 -1250Q33 -1250 33 -1239Q33 -1236 50 -1214T98 -1150T163 -1052T238 -910T311 -727Q443 -335 443 251Q443 402 436 532T405 831T339 1142T224 1438T50 1716Q33 1737 33 1741Z"></path></g></g></g></g></svg></mjx-container></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">J = J + lambda/<span class="number">2</span>*(sum(sum(Theta.^<span class="number">2</span>))) + lambda/<span class="number">2</span>*(sum(sum(X.^<span class="number">2</span>)));</span><br></pre></td></tr></table></figure>

<h3 id="2-2-4-Regularized-gradient"><a href="#2-2-4-Regularized-gradient" class="headerlink" title="2.2.4 Regularized gradient"></a>2.2.4 Regularized gradient</h3><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -3.044ex" xmlns="http://www.w3.org/2000/svg" width="7.976ex" height="6.191ex" role="img" focusable="false" viewBox="0 -1391 3525.2 2736.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mstyle"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(635.2, 676)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566, 0)"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g></g><g data-mml-node="mrow" transform="translate(220, -1020.7)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="msubsup" transform="translate(566, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(801, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(572, -317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g><rect width="2229.5" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mo" transform="translate(2747.2, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.046ex" xmlns="http://www.w3.org/2000/svg" width="30.173ex" height="3.445ex" role="img" focusable="false" viewBox="0 -1060.7 13336.3 1522.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1056, 477.1) scale(0.707)" data-mjx-texclass="ORD"></g><g data-mml-node="TeXAtom" transform="translate(1056, -285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412, 0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(690, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1141, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1530, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1875, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2153, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2565, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2954, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3732, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4098.5, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(4487.5, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(4876.5, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, 363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(801, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="msup" transform="translate(6236.9, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(389, 363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="msup" transform="translate(7173.7, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(8812, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(9812.3, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1012, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(1424, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(11634.2, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="msubsup" transform="translate(12023.2, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(469, -317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.735ex" xmlns="http://www.w3.org/2000/svg" width="6.39ex" height="3.135ex" role="img" focusable="false" viewBox="0 -1060.7 2824.5 1385.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(778, 0)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="msubsup" transform="translate(1361, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(801, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(572, -317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -3.044ex" xmlns="http://www.w3.org/2000/svg" width="7.743ex" height="6.191ex" role="img" focusable="false" viewBox="0 -1391 3422.2 2736.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mstyle"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(583.7, 676)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566, 0)"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g></g><g data-mml-node="mrow" transform="translate(220, -1020.7)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="msubsup" transform="translate(566, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(801, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(469, -317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g><rect width="2126.5" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mo" transform="translate(2644.2, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.046ex" xmlns="http://www.w3.org/2000/svg" width="30.299ex" height="3.445ex" role="img" focusable="false" viewBox="0 -1060.7 13392 1522.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1056, 477.1) scale(0.707)" data-mjx-texclass="ORD"></g><g data-mml-node="TeXAtom" transform="translate(1056, -285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345, 0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(623, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1074, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1463, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1808, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2086, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2498, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2887, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3665, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4051.1, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(4440.1, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(4829.1, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, 363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(801, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="msup" transform="translate(6189.6, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(389, 363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="msup" transform="translate(7126.4, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(8764.7, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(9764.9, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1012, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(1424, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(11586.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="msubsup" transform="translate(11975.9, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(572, -317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></g></svg></mjx-container> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.735ex" xmlns="http://www.w3.org/2000/svg" width="6.157ex" height="3.135ex" role="img" focusable="false" viewBox="0 -1060.7 2721.5 1385.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(778, 0)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="msubsup" transform="translate(1361, 0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(801, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(469, -317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></g></svg></mjx-container></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">X_grad = X_grad + lambda*X;</span><br><span class="line">Theta_grad = Theta_grad + lambda*Theta;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/yRhMwb9.png" alt=""></p>
]]></content>
      <tags>
        <tag>AI</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>编程作业：Scrooge Coin</title>
    <url>/cn/Programming-Assignment-Scrooge-Coin/</url>
    <content><![CDATA[<p>这是我做过的最糟糕的任务。</p>
<p><code>TxHandler.java</code>无法构建和运行，一切都要猜测。由于我对<code>JAVA</code>不熟悉，提交后遇到了上百万的语法错误。</p>
<p>我必须:</p>
<ul>
<li>手动导入软件包</li>
<li>每行后加”;”。</li>
<li><code>if</code>之后的<code>()</code>。</li>
<li>声明变量类型</li>
</ul>
<p>这就是为什么我讨厌 JAVA 的原因 😡😡😡</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UTXOPool utxoPool;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a public ledger whose current UTXOPool (collection of unspent transaction outputs) is</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> utxoPool&#125;. This should make a copy of utxoPool by using the UTXOPool(UTXOPool uPool)</span></span><br><span class="line"><span class="comment">     * constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TxHandler</span><span class="params">(UTXOPool utxoPool)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.utxoPool = <span class="keyword">new</span> UTXOPool(utxoPool);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true if:</span></span><br><span class="line"><span class="comment">     * (1) all outputs claimed by &#123;<span class="doctag">@code</span> tx&#125; are in the current UTXO pool,</span></span><br><span class="line"><span class="comment">     * (2) the signatures on each input of &#123;<span class="doctag">@code</span> tx&#125; are valid,</span></span><br><span class="line"><span class="comment">     * (3) no UTXO is claimed multiple times by &#123;<span class="doctag">@code</span> tx&#125;,</span></span><br><span class="line"><span class="comment">     * (4) all of &#123;<span class="doctag">@code</span> tx&#125;s output values are non-negative, and</span></span><br><span class="line"><span class="comment">     * (5) the sum of &#123;<span class="doctag">@code</span> tx&#125;s input values is greater than or equal to the sum of its output</span></span><br><span class="line"><span class="comment">     *     values; and false otherwise.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidTx</span><span class="params">(Transaction tx)</span> </span>&#123;</span><br><span class="line">        UTXOPool utxoSet = <span class="keyword">new</span> UTXOPool();</span><br><span class="line">        <span class="keyword">double</span> pSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tx.numInputs(); i++) &#123;</span><br><span class="line">            Transaction.Input in = tx.getInput(i);</span><br><span class="line">            UTXO u = <span class="keyword">new</span> UTXO(in.prevTxHash, in.outputIndex);</span><br><span class="line">            Transaction.Output out = utxoPool.getTxOutput(u);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((!utxoPool.contains(u)) || (!Crypto.verifySignature(out.address, tx.getRawDataToSign(i), in.signature)) || (utxoSet.contains(u))) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            utxoSet.addUTXO(u, out);</span><br><span class="line">            pSum += out.value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Transaction.Output out : tx.getOutputs()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (out.value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum += out.value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pSum &lt; sum) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handles each epoch by receiving an unordered array of proposed transactions, checking each</span></span><br><span class="line"><span class="comment">     * transaction for correctness, returning a mutually valid array of accepted transactions, and</span></span><br><span class="line"><span class="comment">     * updating the current UTXO pool as appropriate.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Transaction[] handleTxs(Transaction[] possibleTxs) &#123;</span><br><span class="line">        Set&lt;Transaction&gt; vTxs = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Transaction tx : possibleTxs) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isValidTx(tx)) &#123;</span><br><span class="line">                vTxs.add(tx);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (Transaction.Input in : tx.getInputs()) &#123;</span><br><span class="line">                    UTXO u = <span class="keyword">new</span> UTXO(in.prevTxHash, in.outputIndex);</span><br><span class="line">                    utxoPool.removeUTXO(u);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tx.numOutputs(); i++) &#123;</span><br><span class="line">                    Transaction.Output out = tx.getOutput(i);</span><br><span class="line">                    UTXO u = <span class="keyword">new</span> UTXO(tx.getHash(), i);</span><br><span class="line">                    utxoPool.addUTXO(u, out);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Transaction[] vTxArr = <span class="keyword">new</span> Transaction[vTxs.size()];</span><br><span class="line">        <span class="keyword">return</span> vTxs.toArray(vTxArr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>BlockChain</tag>
      </tags>
  </entry>
  <entry>
    <title>🇯🇵-2-0</title>
    <url>/cn/Japan-2-0/</url>
    <content><![CDATA[<h1 id="日本-2-0"><a href="#日本-2-0" class="headerlink" title="日本-2-0"></a>日本-2-0</h1><p>🇯🇵</p>
<p>序</p>
<p>小法師的大姊姊突然說去要去箱根</p>
<p>所以跳過了一些（很多）章節，先寫這個</p>
<p>至於為什麼變成了繁體<br>因為大姊姊是台灣人呀<br>雖然她能看懂簡體字啦</p>
<a id="more"></a>

<hr>
<p>事情发生在 8102 年 3🈷️</p>
<p>彼時小法師已經在前前公司整整服役了 3.5 年，之後要去水果公司掃地 🧹，加之生日 🎂 又在入坑同一天<br>就打算在此之前給自己一場類似於畢業 🎓 旅行的跑路</p>
<p>畢竟換工作麻煩異常，作為下等人肯定會被各種羞辱<br>所以打算提前做好心裡和肉體上的雙重準備</p>
<p>那時的小法師還年輕，還在超想出去玩的階段，放鬆的辦法就是世界那麼大我想去看看<br>所以看著世界地圖感覺哪裡都想去</p>
<p>但由於是 Solo，駕照剛拿到不久，還沒過實習期不敢開車<br>歐美自然沒法考慮，只能選城市景觀<br>看看好不容易辦下來的 3 年往返簽證，所以又双叒只能去 🇯🇵 啦</p>
<hr>
<p>鑒於上次小法師在城崎(Kinosaki)發現虛假的溫泉是鍋爐水，而真的溫泉 ♨️ 可以治病後，就念念不忘想去 🇯🇵 在泡一次</p>
<p>所以這是的路線是一路向北</p>
<p>箱根 - 鐮倉江之島 - 橫濱 - 東京</p>
<div id="googleMap5964" style="
            height: 450px;
            width: 100%;
            margin: 0px;
            padding: 0px
            ">
</div>
<style>.gmnoprint img {max-width: none !important;}</style>
<script defer="defer">
  window.hexoGmaps = window.hexoGmaps || { maps: {}};
  window.hexoGmaps.maps['initgoogleMap5964'] = function init() {
    var mapOptions = {
       'scrollwheel': false,
       'zoom': 9.3,
       'center': new window.google.maps.LatLng( 35.460 , 139.233 ),
     },
     target = document.getElementById('googleMap5964'),
     map = new window.google.maps.Map(target, mapOptions);
      
     
     
     var opts0 = {
        'position': new window.google.maps.LatLng( 35.2719403 , 138.9279284 ),
        'map': map,
        'title': 'Hakone 箱根町',
        'zIndex' : 0,
        'icon': ''
      };

     var infowindow0 = new window.google.maps.InfoWindow({
       content: 'Hakone 箱根町'
     });

     var marker0 = new window.google.maps.Marker(opts0);

     marker0.addListener('click', function(){
       infowindow0.open(map, marker0)
     })
     
     
     var opts1 = {
        'position': new window.google.maps.LatLng( 35.3338798 , 139.4707656 ),
        'map': map,
        'title': 'Kamakura 鎌倉市',
        'zIndex' : 1,
        'icon': ''
      };

     var infowindow1 = new window.google.maps.InfoWindow({
       content: 'Kamakura 鎌倉市'
     });

     var marker1 = new window.google.maps.Marker(opts1);

     marker1.addListener('click', function(){
       infowindow1.open(map, marker1)
     })
     
     
     var opts2 = {
        'position': new window.google.maps.LatLng( 35.3011464 , 139.4766161 ),
        'map': map,
        'title': 'Enoshima 江の島',
        'zIndex' : 2,
        'icon': ''
      };

     var infowindow2 = new window.google.maps.InfoWindow({
       content: 'Enoshima 江の島'
     });

     var marker2 = new window.google.maps.Marker(opts2);

     marker2.addListener('click', function(){
       infowindow2.open(map, marker2)
     })
     
     
     var opts3 = {
        'position': new window.google.maps.LatLng( 35.4526928 , 139.5250756 ),
        'map': map,
        'title': 'Yokohama 横浜市',
        'zIndex' : 3,
        'icon': ''
      };

     var infowindow3 = new window.google.maps.InfoWindow({
       content: 'Yokohama 横浜市'
     });

     var marker3 = new window.google.maps.Marker(opts3);

     marker3.addListener('click', function(){
       infowindow3.open(map, marker3)
     })
     
     
     var opts4 = {
        'position': new window.google.maps.LatLng( 35.6681625 , 139.6007859 ),
        'map': map,
        'title': 'Tokyo 東京',
        'zIndex' : 4,
        'icon': ''
      };

     var infowindow4 = new window.google.maps.InfoWindow({
       content: 'Tokyo 東京'
     });

     var marker4 = new window.google.maps.Marker(opts4);

     marker4.addListener('click', function(){
       infowindow4.open(map, marker4)
     })
   

  }
  function makeMaps() {
    for (var map in window.hexoGmaps.maps) {
       console.log('map #', map);
       window.hexoGmaps.maps[map]();
    }
  }
  function loadScript() {
    window.hexoGmaps.googleScriptLoaded = true;
    var script = document.createElement('script');
    script.type = 'text/javascript';
        script.src = '//maps.googleapis.com/maps/api/js?v=3.exp&callback=makeMaps&key=AIzaSyB6JxSOGlpKd-7pPtKKG_BIEOiLlaRHxMQ';
    document.body.appendChild(script);
  }
  if (!window.hexoGmaps.googleScriptLoaded) {
    loadScript();
  }
</script>

<p>雖然東京已經去過了，但因為第一次是跟在別人後面，小法師記憶力又差，加之特別短只有 6 天，已經沒什麼印象了<br>所以和預料的一模一樣，再次到東京時，除了認識晴空樹，其他地方像是沒去過一樣</p>
<hr>
<h2 id="小田急"><a href="#小田急" class="headerlink" title="小田急"></a>小田急</h2><p>這次是日航，在成田(Narita)機場降落 🛬️<br>本來小法師是計畫去新宿轉小田急浪漫特快（據說並不浪漫）直接到箱根<br>畢竟到達才 4 點，小田急末班 6 點，就算從成田去新宿也完全來得及<br>然餓日本 🇯🇵 時間早一個小時，出了機場時間同步後小法師就傻眼了</p>
<p>驚慌失措中，前面那位熱心的老大爺在語言不通的情況下，幫買了 成田特快，在 品川(Shinagawa) 轉 新幹線(Shinkansen)🚄 的票 🎫</p>
<p>搭上酷似鐵膽火車俠的光明號，一路非常平穩，非常舒適的，在 Map 上看到定位飛快的往前跳<br>到了 小田園(Odawara)太陽已經下山了，沒有公交車，只能坐登山小火車</p>
<p>出站後一連迷茫不知道往哪走，迎面走來很多人，只看到一位漂亮的小姊姊，趕緊上去問小火車在哪<br>小姊姊溫柔的指路後，小法師走了好遠回頭還看到小姊姊點頭示意他找到了正確的車廂</p>
<p>上山後，漸漸下雨，溫度驟降，小法師發現座位變熱了，而且有暖氣吹上來<br>真的好人性化呀</p>
<p>到了小涌谷(Kowakidani)後，西瓜 🍉 卡餘額不足無法出站<br>周圍一個人沒有，就在小法師想翻過去會不會被抓時<br>不知從哪冒出來一個 Officer，給了他一張紙，開了地鐵門，然後就消失了</p>
<p>出站看到一座小山，反覆的查閱地圖後，還是不敢相信隱藏在陰影中那條垂直階梯是地圖上顯示的那條路</p>
<p>還好登上階梯後到了正常的國道<br>只有 1.3km 的上坡了</p>
<p>小法師舉著傘拖著行李，孤單的在路上走著<br>路過一個很大的 7-11<br>還是一個人都沒有</p>
<p>…</p>
<h2 id="天悠"><a href="#天悠" class="headerlink" title="天悠"></a>天悠</h2><p>看到雨夜中出現了天悠兩個大字時，小法師已經沒啥力氣了</p>
<p>蠻以為以為可以開心的泡溫泉了<br>然餓半天找不到酒店入口<br>只好長途電話賓館</p>
<p>那時候小法師英文還很差，加上對方的日式英語，完全聽不懂在說什麼，只能自己吧啦吧啦的說了一通</p>
<p>然後被告知原地不要動，會派車來接<br>等了一會兒，沒有任何動靜，只好繼續沿著山路往上走<br>其間有輛車從山上下來，經歷了一路無人，小法師第一個念頭是，山上竟然有車？！</p>
<p>給讓了下路，繼續往上走</p>
<p>又走了一會兒，小法師突然開了竅，不會是剛剛那輛車吧</p>
<p>連忙往回走</p>
<p>回到剛剛那個公交站，發現車果然停在那裡<br>和司機出示了 Booking Detail 後，就把小法師接上去了</p>
<p>其間問司機叔叔有沒有直接去小田園站的 Shuttle<br>答案是太遠了沒有<br>電話聽不懂怎麼找到這個站的<br>這附近就那麼幾個公交站，根據名字找到的</p>
<p>最讓小法師吐血是這車按剛剛回來的路線原路返回，往前只多走了 500m，一個 U turn 就到了酒店門口…</p>
<p>不是小法師瞎，真的是天太黑又下雨看不見路啊</p>
<p>所以各位如果從成田機場去箱根，那麼千萬千萬千萬不要錯過小田急</p>
]]></content>
      <tags>
        <tag>Travel</tag>
        <tag>LittleMaster</tag>
        <tag>Japan</tag>
        <tag>🇯🇵</tag>
      </tags>
  </entry>
  <entry>
    <title>🇯🇵-2-1-0</title>
    <url>/cn/Japan-2-1-0/</url>
    <content><![CDATA[<h1 id="箱根-0"><a href="#箱根-0" class="headerlink" title="箱根 0"></a>箱根 0</h1><p>就選這個酒店吧，我去過幾次，已經算箱根很不錯的了<br>小法師的壕朋友說到</p>
<p>看了下價格，小法師不禁問到</p>
<p>‘我自己一個人去，住那麼好的酒店幹什麼呢’<br>因為好的酒店會蓋在溫泉 ♨️ 泉眼上，次一點的需要引水，溫度沒保障</p>
<p>‘一個人去，為什麼要住那麼好的酒店’<br>這個酒店可以選陽台上有溫泉的 ♨️ 房間，不用去男湯女湯，非常 privacy</p>
<p>‘我是自己去哎’<br>連續工作了這麼久，去放鬆下啊，就當畢業旅行 🎓 ✈️ 嘛</p>
<p>然後小法師禁不住誘惑，訂下了箱根小涌園天悠<br>聽名字就很悠然自得呢</p>
<a id="more"></a>

<hr>
<h2 id="天悠"><a href="#天悠" class="headerlink" title="天悠"></a>天悠</h2><p>小法師被 shuttle 拉到在酒店後，因為下雨，行李已經濕了<br>接待員小姊姊拿出了一條嶄新的毛巾給擦行李 🧳，並幫著送到了房間</p>
<p>小法師心裡感覺是沒必要的，加上爬了很久的山路，已經沒力氣了說話了，只能感嘆服務真好</p>
<p>和壕說的一樣，溫泉在陽台上<br>旁邊有個小按鈕，按一下散發著硫磺味道的溫泉就冒出來啦<br>去販賣機買了很多功能飲料以防脫水，然後就開始煮肉</p>
<p>陽台外飄著小雨，起了霧，山風吹著窗簾嘩嘩作響</p>
<p>小法師待在溫泉裡看著升騰的熱氣直到深夜，聽著外面的風聲雨聲，感覺一切都值了</p>
<hr>
<p>第二天醒來霧還沒有散去</p>
<video width="720" autoplay loop muted="true" >
<source type="video/mp4" src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21000.mp4">
</video>

<p>小法師很害羞，不喜歡見人<br>本來打算在陽台上躺屍兩天</p>
<p>然餓抱著去看一眼的心態，去了頂樓的男湯<br>瞬間就驚呆了</p>
<p>雖然 iPhone X 📱 防水<br>雖然池子裡只有一個人，看到小法師來，還走掉了</p>
<p>但這種坦誠相待的場所，只能盜官方圖了</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21020.jpg" alt=""></p>
<p>哇很有坡縣濱海灣金沙的無邊泳池的感覺耶<br>只不過泳池換成了溫泉</p>
<p>然後小法師眺望遠處的群山，以為隔壁是女湯<br>下樓發現女湯其實樓下，另外每天男女會調換下<br>不知是不是 ☯️ 有陰陽調和的講究</p>
<p>所以應該就沒法像頂樓這樣，而只可以在屋子裡看群山了</p>
<p>那好沒意思，小法師打算第二天不出房間了</p>
<p>然餓事實是<br>五樓是個小池塘，漂著落葉 🍂<br>旁邊十多米的小山有瀑布流下來<br>這瀑布就是熱氣騰騰的溫泉啦</p>
<p>無奈官方也沒給圖<br>算是一個大驚喜吧</p>
<p>早餐也超讚<br>可以自己選日式或西式<br>對著窗戶，外面是竹林</p>
<hr>
<h2 id="小王子"><a href="#小王子" class="headerlink" title="小王子"></a>小王子</h2><p>畢竟再煮就熟了<br>小法師只好出來逛了逛</p>
<p>驚奇的發現旁邊有座小王子的廟(博物館)</p>
<p>PS：話說小法師的初戀超喜歡小王子</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21000.jpg" alt=""></p>
<p>早在 3102 年 1 月小法師就拜讀過小王子<br>這個系列的時間線也發生在後面<br>所以取名多多少少受到了一些啟發</p>
<h3 id="小王子飛機"><a href="#小王子飛機" class="headerlink" title="小王子飛機"></a>小王子飛機</h3><p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21001.jpg" alt=""></p>
<h3 id="小王子玫瑰"><a href="#小王子玫瑰" class="headerlink" title="小王子玫瑰"></a>小王子玫瑰</h3><blockquote>
<p>我那朵玫瑰，別人以為她和你們一樣，但她單獨一朵就勝過你們全部。因為她是我澆灌的。因為她是我放在花罩中的。因為她是我用屏風保護起來的。因為她身上的毛毛蟲是我除掉的。因為我傾聽過她的哀怨，她的吹噓，有時甚至是她的沉默。因為她是我的玫瑰。</p>
</blockquote>
<blockquote>
<p>如果你愛著一朵盛開在浩瀚星海裡的花，那麼，當你抬頭仰望繁星時，便會感到心滿意足</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21002.jpg" alt=""></p>
<hr>
<p>然餓初戀在魔法學院讓小法師苦苦等待三年<br>然後終於在一起然後一週就把他甩掉了<br>所以小法師恨屋及烏對小王子並沒什麼好感<br>完全不明白為什麼在全球範圍受到這等推崇</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21003.jpg" alt=""></p>
<p>轉了一圈就出來去水晶博物館了</p>
<h2 id="箱根ガラスの森美術館"><a href="#箱根ガラスの森美術館" class="headerlink" title="箱根ガラスの森美術館"></a>箱根ガラスの森美術館</h2><p>據說是應該這樣的：</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21021.jpg" alt=""></p>
<p>小法師看到的是這樣的：</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21022.jpg" alt=""></p>
<p>只有這裏像是童話<br><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21004.jpg" alt=""></p>
<h2 id="強羅公園"><a href="#強羅公園" class="headerlink" title="強羅公園"></a>強羅公園</h2><p>據說是應該這樣的：</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21003.jpeg" alt=""></p>
<p>小法師興沖沖的跑過去看到的是：</p>
<p>關門大吉的茶室<br>光禿禿的苔庭<br>一點都不浪漫的玫瑰園 🌹🌹🌹</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21011.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21023.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21009.jpg" alt=""></div></div></div>

<p>所以最近小法師一直纏著大姊姊讓她教如何 P 成宣傳手冊裡那樣的圖<br>🐶🐶🐶</p>
<hr>
<p>即便如此，小法師還是看到了青苔竹林參天大樹白雲</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21008.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21006.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21010.jpg" alt=""></div></div></div>

<p>同樣的景色在先秦的古人筆下是這樣的</p>
<blockquote>
<p>白華菅兮，白茅束兮。之子之遠，俾我獨兮！<br>英英白雲，露彼菅茅。天步艱難，之子不猶！<br>——《小雅·白華》</p>
</blockquote>
<hr>
<p>季節來的不對，有得必有失嘛</p>
<p>還是回去煮肉好了<br>小法師安慰自己到</p>
<p>然後被一位德國 🇩🇪 的妹紙強行安利了一款飲料 🥤</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21005.jpg" alt=""></p>
<p>那就多買了一罐帶回去做禮物 🎁 好了</p>
]]></content>
      <tags>
        <tag>Travel</tag>
        <tag>LittleMaster</tag>
        <tag>Japan</tag>
        <tag>🇯🇵</tag>
      </tags>
  </entry>
  <entry>
    <title>🇯🇵-2-1-1</title>
    <url>/cn/Japan-2-1-1/</url>
    <content><![CDATA[<h1 id="箱根-1"><a href="#箱根-1" class="headerlink" title="箱根 1"></a>箱根 1</h1><h2 id="ポーラ美術館"><a href="#ポーラ美術館" class="headerlink" title="ポーラ美術館"></a>ポーラ美術館</h2><p>Pola Museum of Art</p>
<p>小法師看到一個好東西</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21100.jpg" alt=""></p>
<p>連忙拍下來發給爸爸媽媽 👨👩 問要不要買兩套<br>萬一以後得了帕金森吃飯就不會怕摔</p>
<a id="more"></a>

<h2 id="公交"><a href="#公交" class="headerlink" title="公交"></a>公交</h2><p>一直好用的 Google Map 到了箱根就很爛了</p>
<p>這裏的公交 🚌 非常迷<br>之前在大點的城市還沒碰到什麼問題</p>
<p>然餓先不說日本是左行，地圖很容易看反<br>最吐血的是公交站牌並沒標出起點站-終點站<br>這樣山道上沒什麼車，就很難判斷方向<br>路人也少，碰到的也不怎麼會英語</p>
<p>每次快走到公交站，看到車已經來了就不知該不該追<br>並且每次都要詢問司機是否做對了車</p>
<h2 id="大涌谷"><a href="#大涌谷" class="headerlink" title="大涌谷"></a>大涌谷</h2><p>Ōwakudani</p>
<p>在強羅做纜車 🚠</p>
<p>突然間看到了富士山 🗻</p>
<p>雖然在纜車裡，但那優雅的弧度還是讓人驚嘆</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21101.jpg" alt=""></p>
<p>由於兩個月前剛在 Coursera 刷完 Andrew Ng 大神的機器學習<br>翻了翻以前的 <a href="https://leihao0.github.io/Logistic-Regression/">筆記 📒</a><br>回想出高斯分佈方程</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.308ex" xmlns="http://www.w3.org/2000/svg" width="22.665ex" height="6.402ex" role="img" focusable="false" viewBox="0 -1809.5 10017.9 2829.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(477, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(866, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1438, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2104.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(3160.6, 0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(1217, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220, -915)"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="msqrt" transform="translate(571, 0)"><g transform="translate(853, 0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500, 0)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g></g><g data-mml-node="mo" transform="translate(0, 95)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="1070" height="60" x="853" y="835"></rect></g></g><rect width="2694" height="60" x="120" y="220"></rect></g><g data-mml-node="TeXAtom" transform="translate(2934, 1069.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(778, 0)"><g data-mml-node="mn" transform="translate(220, 394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220, -345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1571.6, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mfrac" transform="translate(1960.6, 0)"><g data-mml-node="mrow" transform="translate(220, 516.8) scale(0.707)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(961, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1739, 0)"><path data-c="1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></g><g data-mml-node="mo" transform="translate(2342, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mi" transform="translate(983.7, -345) scale(0.707)"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><rect width="2131.1" height="60" x="120" y="220"></rect></g><g data-mml-node="msup" transform="translate(4331.7, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(389, 363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></g><g data-mml-node="mtext" transform="translate(9767.9, 0)"><path data-c="A0" d=""></path></g></g></g></svg></mjx-container></p>
<p>由於富士山 🗻 並非二次元，所以不能直接用，需要對公式做一下變形，並且可以刪除 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex" xmlns="http://www.w3.org/2000/svg" width="1.364ex" height="1.489ex" role="img" focusable="false" viewBox="0 -442 603 658"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.308ex" xmlns="http://www.w3.org/2000/svg" width="36.091ex" height="6.521ex" role="img" focusable="false" viewBox="0 -1862.2 15952.3 2882.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(742.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(1798.6, 0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(967, 676)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500, 0)"></path></g><g data-mml-node="mrow" transform="translate(220, -915)"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="msqrt" transform="translate(571, 0)"><g transform="translate(853, 0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500, 0)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g></g><g data-mml-node="mo" transform="translate(0, 95)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="1070" height="60" x="853" y="835"></rect></g></g><rect width="2694" height="60" x="120" y="220"></rect></g><g data-mml-node="TeXAtom" transform="translate(2934, 1069.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(778, 0)"><g data-mml-node="msup" transform="translate(330.3, 394) scale(0.707)"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(759, 363)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mrow" transform="translate(220, -515.3) scale(0.707)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msup" transform="translate(500, 0)"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(571, 289)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g><rect width="1346.2" height="60" x="120" y="220"></rect></g></g></g><g data-mml-node="mo" transform="translate(6454.3, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(6899, 0)"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="mo" transform="translate(7747.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(8803.5, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(9303.5, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(9748.2, 0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(10785, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msqrt" transform="translate(11840.8, 0)"><g transform="translate(1020, 0)"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(572, 289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1197.8, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msup" transform="translate(2198, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(0, 142.7)"><path data-c="221A" d="M263 249Q264 249 315 130T417 -108T470 -228L725 302Q981 837 982 839Q989 850 1001 850Q1008 850 1013 844T1020 832V826L741 243Q645 43 540 -176Q479 -303 469 -324T453 -348Q449 -350 436 -350L424 -349L315 -96Q206 156 205 156L171 130Q138 104 137 104L111 130L263 249Z"></path></g><rect width="3091.6" height="60" x="1020" y="932.7"></rect></g></g></g></svg></mjx-container></p>
<video width="720" autoplay="" loop="" muted="true">
<source type="video/mp4" src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21100.mp4">
</video>

<p>當然高度和坡度都不對<br>可以用線形回歸試出來，自然不想人肉調，<br>當然 🗻 頂上是凹下去的，需要疊加一個微笑曲線</p>
<p>…</p>
<p>就在這時纜車 🚠 過了最高點</p>
<p>山風一下子猛吹過來， 🚠 開始劇烈搖晃<br>下面的 ⛰ 山竟然還冒煙<br>雖然很高，但還是能聞到刺鼻的硫磺味</p>
<video width="720" autoplay="" loop="" muted="true">
<source type="video/mp4" src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21101.mp4">
</video>

<p>怪不得這裏有溫泉 ♨️ 呢</p>
<p>下了車，有個比人還大的雞蛋 🥚<br>後面能看到富士山 🗻，貌似還是剛剛那朵雲</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan-2113.jpg" alt=""></p>
<p>那位德國 🇩🇪 的妹紙跟小法師說一定要去買雞蛋吃 🥚</p>
<p>小法師不明所以，難道外國的雞蛋 🥚 比大陸的園嘛</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan-2112.jpg" alt=""></p>
<p>好吧這裏的雞蛋竟然是黑色的 🌚🌚🌚</p>
<p>一下子吃了五個，並沒有感覺什麼異樣</p>
<p>其間有個歐美妹紙問小法師怎麼敲開蛋殼<br>無奈不知道磕怎麼說<br>就指了指門</p>
<p>妹紙驚訝到<br>‘Against the door???’</p>
<p>喔原來用 Against 啊</p>
<h2 id="箱根芦ノ湖-成川美術館"><a href="#箱根芦ノ湖-成川美術館" class="headerlink" title="箱根芦ノ湖 成川美術館"></a>箱根芦ノ湖 成川美術館</h2><p>然後 🚠 下來後，從 桃源台港 上船，箱根海賊船 在 芦ノ湖 轉了一圈，在 元箱根港 下船</p>
<p>記得上船前一定要買頭等艙，不然上船了再買很可能沒票而沒法補票了<br>在外面會被山風吹亂髮型</p>
<p>不過因為之前在大阪做過類似的，所以沒啥太多新鮮感<br>倒是在美術館看到一個雕刻</p>
<p>這麼細微 入木三分<br>材質竟然是象牙</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21102.jpg" alt=""></p>
<p>這個就更神奇了<br>下面是個花唉<br>所以這是萬<strong>花</strong>筒名字但由來嘛？</p>
<video width="720" autoplay="" loop="" muted="true">
<source type="video/mp4" src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21102.mp4">
</video>

<p>好漂亮好安靜的雪景</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21103.jpg" alt=""></p>
<p>然後在美術館的咖啡店 ☕️ 店<br>看著富士山 🗻 發呆到閉館</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan21104.jpg" alt=""></p>
<hr>
<p>通常來說，遊記只提到美好的一面<br>彷彿這些人沒有行李不帶裝備空降到景點的一樣</p>
<p>小法師也不例外<br>因為行李可以在溫泉 ♨️ 酒店托運<br>只用添下地址，行李 🧳 就會自動過去</p>
<p>聽起來太美好以至於搭乘小火車北上時<br>一度懷疑到了藤沢駅 (Fujisawa Station)<br>行李 🧳 會永遠的留在箱根</p>
]]></content>
      <tags>
        <tag>Travel</tag>
        <tag>LittleMaster</tag>
        <tag>Japan</tag>
        <tag>🇯🇵</tag>
      </tags>
  </entry>
  <entry>
    <title>🇯🇵-2-2-0</title>
    <url>/cn/Japan-2-2-0/</url>
    <content><![CDATA[<h1 id="藤沢"><a href="#藤沢" class="headerlink" title="藤沢"></a>藤沢</h1><p>還好行李沒丟</p>
<p>本來打算住在鎌倉<br>無奈訂行程時，Booking 上已經沒有賓館了<br>就住在了附近的 藤沢</p>
<p>事實上離 鎌倉 非常近<br>買江ノ島電鉄一日券，40 分鐘就可以到達<br>中途還可以下車在江之島轉一轉</p>
<p>事實證明住藤沢不虧<br>因為到了湘南 Wing International 後，拿到了個特殊的門禁</p>
<div style="width: 300px">
<img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan22000.jpg" />
</div>

<a id="more"></a>

<p>招待員 還有 電梯都是上個世紀的風格</p>
<p>感覺很奇妙呢</p>
<h2 id="淺羽屋本店"><a href="#淺羽屋本店" class="headerlink" title="淺羽屋本店"></a>淺羽屋本店</h2><p>由於體能不足，小法師每天出門時已經接近中午<br>所以下車後看到旁邊有家鰻魚飯<br>加之之前在東京吃過一次鰻魚飯<br>還有聽新聞說日本鰻魚要被吃光<br>就進去看了看</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan22002.jpg" alt=""></p>
<p>沒想到是個百年老店<br>回想那時還是清朝呢</p>
<h2 id="鶴岡八幡宮"><a href="#鶴岡八幡宮" class="headerlink" title="鶴岡八幡宮"></a>鶴岡八幡宮</h2><p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan22001.jpg" alt=""></p>
<p>裡面有很多佛像</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan22004.jpg" alt=""></p>
<p>然後？開開心心一家人 👪？？？</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan22005.jpg" alt=""></p>
<p>后面的庭院</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan22006.jpg" alt=""><br><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan22007.jpg" alt=""><br><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan22008.jpg" alt=""></p>
<h2 id="鎌倉大佛"><a href="#鎌倉大佛" class="headerlink" title="鎌倉大佛"></a>鎌倉大佛</h2><p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan22009.jpg" alt=""></p>
<p>那时小法師还在中二的年纪<br>看到威嚴的大佛<br>什麼 大焚般若 大悲金輪 天音寺 一股腦全冒出來了</p>
<p>然餓估計慧根未開，並沒有聽到遠處飄來的天籟之音</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan22010.jpg" alt=""></p>
<p>繞道大佛後面就幻滅了<br>這是什麼？彷彿高達的尾翼接口</p>
<p>就當準備轉一圈就走時，突然發現右側有個小門，寫著<strong>入口</strong>倆字</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan22011.jpg" alt=""></p>
<p>呃好吧這佛像竟然能進去</p>
<p>然後剛剛看到的尾翼從裡面看發現是窗戶，而且可以爬上去向外看 ╮(￣ ▽ ￣””)╭</p>
<h2 id="鎌倉高校"><a href="#鎌倉高校" class="headerlink" title="鎌倉高校"></a>鎌倉高校</h2><p>搭乘江ノ島電鉄</p>
<video width="720" autoplay loop muted="true" >
<source type="video/mp4" src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan22000.mp4">
</video>

<p>去鎌倉高校前</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan22012.jpg" alt=""></p>
<p>好吧暴露年紀了<br>小法師小時候並沒有看過灌籃高手<br>所以完全不知那些站在鐵軌 🛤️ 上剛 🚃 正面的是什麼情況</p>
<p>聽說很燃，類似於 我的英雄學院？<br>因為沒有什麼共鳴，遠遠的拍了張照就去前面的海灘曬太陽徒步去江之島了</p>
]]></content>
      <tags>
        <tag>Travel</tag>
        <tag>LittleMaster</tag>
        <tag>Japan</tag>
        <tag>🇯🇵</tag>
      </tags>
  </entry>
  <entry>
    <title>🇯🇵-2-2-1</title>
    <url>/cn/Japan-2-2-1/</url>
    <content><![CDATA[<h1 id="江之島"><a href="#江之島" class="headerlink" title="江之島"></a>江之島</h1><h2 id="江の島岩屋"><a href="#江の島岩屋" class="headerlink" title="江の島岩屋"></a>江の島岩屋</h2><p>Enoshima Iwaya Cave</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan-2210.jpg" alt=""></p>
<a id="more"></a>

<p>左邊 👈 的梯子塌掉了<br>因為 颱風 🌀 還是 地震</p>
<h2 id="稚児ヶ淵（ちごがふち）"><a href="#稚児ヶ淵（ちごがふち）" class="headerlink" title="稚児ヶ淵（ちごがふち）"></a>稚児ヶ淵（ちごがふち）</h2><video width="720" autoplay loop muted="true" >
<source type="video/mp4" src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan-2210.mp4">
</video>

<p>不過外面也很美啦<br>而且岩石上有非常多的小水窪<br>每個都是海水一波波的 🌊 衝上來形成的</p>
<p>仔細看裡面有五顏六色的水草，各種小魚<br>還能看到光合作用冒出小泡泡<br>一片欣欣向榮的景象</p>
<p>一個個都是了不起的小世界呢</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan-2211.jpg" alt=""></p>
<p>自然的也有很多乾涸的坑窪<br>畢竟總有潮落的時候<br>海水散去，留下一片死寂</p>
<p>小法師不由得想到<br>這些生物竟自由的意義在哪裡呢<br>畢竟天地不仁, 以万物为刍狗<br>白駒過隙<br>如果它們知道最終的到來的死亡與個體的努力並無任何相關<br>還會繼續這麼拼命嘛</p>
<h2 id="龍恋の鐘"><a href="#龍恋の鐘" class="headerlink" title="龍恋の鐘"></a>龍恋の鐘</h2><p>Ryuren Bell of Love</p>
<p>不知不覺爬到了山頂</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan-2212.jpg" alt=""></p>
<p>龍恋の鐘 + 來自路人們的愛情鎖<br>可以讓單身狗掉血附加一萬點 MP</p>
<p>小法師還沈浸在剛剛的生死輪迴中無法自拔<br>覺得這些人相戀過分手過生活過<br>又怎麼樣呢，然後呢</p>
<p>既然都這麼難過了，只好借酒消愁</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan-2213.jpg" alt=""></p>
<p>講道理這個超好喝<br>又是藍瓶，可以恢復 MP</p>
<h2 id="燭之塔"><a href="#燭之塔" class="headerlink" title="燭之塔"></a>燭之塔</h2><p>Enoshima Sea Candle</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan-2214.jpg" alt=""><br>哇竟然有 應! or 雕 ？<br>刺客信條哇<br>腦補 按下 <code>Shift + E + W</code> 進行信仰之躍</p>
<p>實際小法師恐高，站在觀景台上，風一吹腳都在抖</p>
<p>看下時間快到日落 🌄 了<br>還記得第一次是在 🇮🇹 的天使堡</p>
<video width="720" autoplay loop muted="true" >
<source type="video/mp4" src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan-2211.mp4">
</video>

<p>這次也很漂亮呢</p>
<p>不過為啥都是看的黃昏 🌆 日落而還沒見過日出呢<br>莫非因為懶？？？</p>
<p>又見富士山 🗻</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan-2216.jpg" alt=""></p>
<p>彷彿水墨畫呢</p>
<p>雖然沒有信仰之躍，但走下來還是可以的<br>沒人像小法師這麼想不開，都是坐中間那個電梯直上直下<br>所以雖然恐高，還是有足夠的時間可以慢慢走下來</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan-2217.jpg" alt=""></p>
<h2 id="弁天橋"><a href="#弁天橋" class="headerlink" title="弁天橋"></a>弁天橋</h2><p>走過去試了下<br>名字而已<br>並不會被動升天</p>
]]></content>
      <tags>
        <tag>Travel</tag>
        <tag>LittleMaster</tag>
        <tag>Japan</tag>
        <tag>🇯🇵</tag>
      </tags>
  </entry>
  <entry>
    <title>🇯🇵-2-3-0</title>
    <url>/cn/Japan-2-3-0/</url>
    <content><![CDATA[<h1 id="Yokohama-横浜市"><a href="#Yokohama-横浜市" class="headerlink" title="Yokohama 横浜市"></a>Yokohama 横浜市</h1><p>一瞬間小法師以為自己回到帝都了呢</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23000.jpg" alt=""></p>
<a id="more"></a>

<p>因為當時已在帝都艱難的生存了 3.5 年<br>所以對中華街沒有任何興趣<br>嗯，即使是日本的也沒興趣</p>
<p>萬萬沒想到<br>飛了這麼遠還能看到北京飯店<br>直接忽略去 Check in 午休</p>
<p>由於 Monterey 就在海邊<br>不知睡了多久，被遠遠的汽笛聲叫醒<br>拉開窗簾看了下<br>感覺加個濾鏡就是博物館看到的油畫了</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23001.jpg" alt=""></p>
<p>因為被汽笛叫醒的感覺非常棒<br>就出來在海邊走了走</p>
<p>岸邊有一些可愛的小鴨子漂在水面上<br>準備 📷 時，小 🦆 竟然一頭扎進水裡捕魚 🐟 去了<br>呃，原來 🦆 可以潛水 🤿 啊</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23003.jpg" alt=""></p>
<p>日本的海很乾淨，沒有什麼腥味呢</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23002.jpg" alt=""></p>
<h2 id="氷川丸"><a href="#氷川丸" class="headerlink" title="氷川丸"></a>氷川丸</h2><p>NYK Hikawamaru<br>日本郵船氷川丸</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23004.jpg" alt=""></p>
<p>原來這船能上去參觀<br>最早是郵輪，後來參與了二戰<br>退役後就回到了故鄉</p>
<p>這是之前的汽笛聲？<br><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23009.jpg" alt=""></p>
<p>今後就沒女廁所了<br>還好小法師是男的</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23007.jpg" alt=""></p>
<p>頭等艙有多個大窗戶可以吃飯可以讀書甚至可以洗澡 🛀<br><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23008.jpg" alt=""></p>
<p>三等艙像是小法師 233 魔法學院的宿舍只能擠擠睡<br><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23010.jpg" alt=""></p>
<p>唉 昭和 16 年就已經差距這麼大了麼</p>
<h2 id="象の鼻防波堤"><a href="#象の鼻防波堤" class="headerlink" title="象の鼻防波堤"></a>象の鼻防波堤</h2><p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23005.jpg" alt=""></p>
<h2 id="大さん橋ホール"><a href="#大さん橋ホール" class="headerlink" title="大さん橋ホール"></a>大さん橋ホール</h2><p>自從在羽田機場的樓頂看過飛機起降後<br>就知道 🇯🇵 多數大型建築樓頂必然可以觀光</p>
<p>但這裏只是個碼頭哎<br>愣是做出了劇院的感覺也是厲害</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23006.jpg" alt=""></p>
<hr>
<p>冰川丸附近可以買橫濱觀光船票<br>在海上 1 - 2 小時，船上提供晚餐，不會餓肚子</p>
<p>飲料 🥤 後面是個蠟燭 🕯️，燭光隨著船 🚢 搖曳</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23000.gif" alt=""></p>
<p>看起來浪漫的不行<br>確實別的桌子都是成雙成對的<br>只有小法師這裏是煢煢孑立形影相弔一個人</p>
<p>唉，要是有妹紙就好了</p>
]]></content>
      <tags>
        <tag>Travel</tag>
        <tag>LittleMaster</tag>
        <tag>Japan</tag>
        <tag>🇯🇵</tag>
      </tags>
  </entry>
  <entry>
    <title>🇯🇵-2-3-1</title>
    <url>/cn/Japan-2-3-1/</url>
    <content><![CDATA[<h2 id="原鉄道模型博物館"><a href="#原鉄道模型博物館" class="headerlink" title="原鉄道模型博物館"></a>原鉄道模型博物館</h2><p>Hara Model Railway Museum</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23100.jpg" alt=""></p>
<a id="more"></a>

<p>突然看到一個超大的樓<br>雖然小法師並不像 sheldon 那樣癡迷<br>但看到裡面各式各樣的小火車還是很好玩</p>
<p>比如就看到了之前上山的箱根號<br><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23101.jpg" alt=""></p>
<p>酷似上學時回家的綠批小火車<br>當然這個是電車 🚃 啦<br><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23102.jpg" alt=""></p>
<p>南海忍者号？<br><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23103.jpg" alt=""></p>
<p>酷似哈利波特的那種<br><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23104.jpg" alt=""></p>
<p>還有在天上的<br><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23105.jpg" alt=""></p>
<p>後面真的震驚了<br>整整一個超大的屋子<br>有 假山 隧道 城市 鄉村 中央車站</p>
<video width="720" autoplay loop muted="true" >
<source type="video/mp4" src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23100.mp4">
</video>

<p>剛開始看到後面的天線以為是高壓電纜<br>後來發現有輛纜車 🚠 緩緩從假山 ⛰️ 上下來</p>
<video width="720" autoplay loop muted="true" >
<source type="video/mp4" src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23102.mp4">
</video>

<p>要是有小朋友的話還可以去當調度員<br>控制鐵軌 🛤️ 走向</p>
<p>再後面還有整個橫濱的模型<br>摩天輪 🎡 上有時間，大約 3 分鐘是一天<br>6 點發車，到晚上 10 點地鐵 🚇 準時停運，超越 996，233</p>
<video width="720" autoplay loop muted="true" >
<source type="video/mp4" src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23101.mp4">
</video>

<p>只能說，真的碉堡了<br>如果是男孩子的話超級推薦</p>
<h2 id="三菱みなとみらい技術館"><a href="#三菱みなとみらい技術館" class="headerlink" title="三菱みなとみらい技術館"></a>三菱みなとみらい技術館</h2><p>Mitsubishi Minatomirai Industrial Museum</p>
<p>大自然之力<br>分分鐘把你壓扁</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23107.jpg" alt=""></p>
<p>喔，那時就有 ANA 了嘛<br><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23108.jpg" alt=""><br><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23109.jpg" alt=""></p>
<p>大艦</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23110.jpg" alt=""></p>
<p>箱根丸 鎌倉丸<br>莫非每個有名的城市都有一艘艦船？<br><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23116.jpg" alt=""><br><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23117.jpg" alt=""></p>
<p>又想起了 🇮🇹 那個吃掉半個停車場的巨型郵輪 🚢<br><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23118.jpg" alt=""></p>
<h2 id="横浜ランドマークタワー"><a href="#横浜ランドマークタワー" class="headerlink" title="横浜ランドマークタワー"></a>横浜ランドマークタワー</h2><p>Yokohama Landmark Tower</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23106.jpg" alt=""></p>
<p>裡面有曾經世界上最快的電梯<br>不過 2004 年被大姊姊所在的 Taipei 101 超過啦<br>這個四十秒就能到頂，最高速 750 m/min<br>其實非常平穩，只是有些耳朵疼</p>
<h2 id="スカイガーデン"><a href="#スカイガーデン" class="headerlink" title="スカイガーデン"></a>スカイガーデン</h2><p>SKY GARDEN</p>
<p>上面有 360 觀景台<br>摩天輪 🎡 也變得很小了呢</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23111.jpg" alt=""></p>
<p>最最讓人開心的是樓頂的點心和樓下的沒有太多差價<br>還根據建築的高度提供了一個碩大無比的冰淇淋 🍦</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23113.jpg" alt=""></p>
<p>心安理得的坐下去邊吃變看日落（怎麼又是日落 🌄）</p>
<p>核爆現場<br>太陽 🌞 砸到了富士山 🗻<br><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23112.jpg" alt=""><br>好吧這應該只是正常的衍射現象？</p>
<p>由於冰淇淋實在太大<br>一直吃到了天黑<br>真的沒有故意賴著不走看夜景</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23114.jpg" alt=""><br><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23115.jpg" alt=""></p>
<hr>
<p>真不愧是 21 世紀未來港<br>要知道這裏 90 年代就開始建設了<br>93 年 Landmark Tower 已經在那裡了</p>
<p>無論是海邊碼頭 ⛵️ 的汽笛聲<br>還是乾淨的海域<br>還有現代化的城市<br>都讓小法師覺得這裏超讚超讚超讚</p>
<p>可惜行程只有兩天<br>看著絢爛的摩天輪，準備準備回東京了</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Japan23100.gif" alt=""></p>
]]></content>
      <tags>
        <tag>Travel</tag>
        <tag>LittleMaster</tag>
        <tag>Japan</tag>
        <tag>🇯🇵</tag>
      </tags>
  </entry>
  <entry>
    <title>🇯🇵-2-4-0</title>
    <url>/cn/Japan-2-4-0/</url>
    <content><![CDATA[<h1 id="东京"><a href="#东京" class="headerlink" title="东京"></a>东京</h1><div id="googleMap3130" style="
            height: 450px;
            width: 100%;
            margin: 0px;
            padding: 0px
            ">
</div>
<style>.gmnoprint img {max-width: none !important;}</style>
<script defer="defer">
  window.hexoGmaps = window.hexoGmaps || { maps: {}};
  window.hexoGmaps.maps['initgoogleMap3130'] = function init() {
    var mapOptions = {
       'scrollwheel': false,
       'zoom': 11,
       'center': new window.google.maps.LatLng( 35.710 , 139.808 ),
     },
     target = document.getElementById('googleMap3130'),
     map = new window.google.maps.Map(target, mapOptions);
      
     
     
     var opts0 = {
        'position': new window.google.maps.LatLng( 35.7100627 , 139.8085117 ),
        'map': map,
        'title': 'Tokyo Skytree',
        'zIndex' : 0,
        'icon': ''
      };

     var infowindow0 = new window.google.maps.InfoWindow({
       content: 'Tokyo Skytree'
     });

     var marker0 = new window.google.maps.Marker(opts0);

     marker0.addListener('click', function(){
       infowindow0.open(map, marker0)
     })
     
     
     var opts1 = {
        'position': new window.google.maps.LatLng( 35.6267108 , 139.8828892 ),
        'map': map,
        'title': 'Tokyo DisneySea',
        'zIndex' : 1,
        'icon': ''
      };

     var infowindow1 = new window.google.maps.InfoWindow({
       content: 'Tokyo DisneySea'
     });

     var marker1 = new window.google.maps.Marker(opts1);

     marker1.addListener('click', function(){
       infowindow1.open(map, marker1)
     })
     
     
     var opts2 = {
        'position': new window.google.maps.LatLng( 35.6398972 , 139.859985 ),
        'map': map,
        'title': 'Tokyo Sea Life Park',
        'zIndex' : 2,
        'icon': ''
      };

     var infowindow2 = new window.google.maps.InfoWindow({
       content: 'Tokyo Sea Life Park'
     });

     var marker2 = new window.google.maps.Marker(opts2);

     marker2.addListener('click', function(){
       infowindow2.open(map, marker2)
     })
     
     
     var opts3 = {
        'position': new window.google.maps.LatLng( 35.6193359 , 139.7742108 ),
        'map': map,
        'title': 'National Museum of Emerging Science and Innovation',
        'zIndex' : 3,
        'icon': ''
      };

     var infowindow3 = new window.google.maps.InfoWindow({
       content: 'National Museum of Emerging Science and Innovation'
     });

     var marker3 = new window.google.maps.Marker(opts3);

     marker3.addListener('click', function(){
       infowindow3.open(map, marker3)
     })
   

  }
  function makeMaps() {
    for (var map in window.hexoGmaps.maps) {
       console.log('map #', map);
       window.hexoGmaps.maps[map]();
    }
  }
  function loadScript() {
    window.hexoGmaps.googleScriptLoaded = true;
    var script = document.createElement('script');
    script.type = 'text/javascript';
        script.src = '//maps.googleapis.com/maps/api/js?v=3.exp&callback=makeMaps&key=AIzaSyB6JxSOGlpKd-7pPtKKG_BIEOiLlaRHxMQ';
    document.body.appendChild(script);
  }
  if (!window.hexoGmaps.googleScriptLoaded) {
    loadScript();
  }
</script>

<h2 id="东京晴空塔"><a href="#东京晴空塔" class="headerlink" title="东京晴空塔"></a>东京晴空塔</h2><p>到东京时已经中午了<br>这次住在了旁边的 Richmond Hotel，房间也是一如既往的 小 + 精致<br>马路对面就是 晴空树<br>宾馆特供餐厅居然是在北京时常去的 Sizzler 时时乐</p>
<a id="more"></a>

<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-00.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-01.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-02.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-03.jpg" alt=""></div></div></div>

<p>上次来的时候，特意上去看了下，当时还有 进击的巨人 主题，可惜当时还不认识 兵长</p>
<p>也因为时间短，竟然没发现下面是个巨大无比的 mall</p>
<p>睡完午觉醒来已经傍晚 🌆 了，去 mall 里逛了下</p>
<p>发现在做 Harry Potter 的主题</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-04.jpg" alt=""></p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-05.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-06.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-07.jpg" alt=""></div></div></div>

<p>还有好多 宠物小精灵<br>因为只看过 宠物小精灵 特别篇，所以只认识第一代的小精灵们<br>杰尼龟，胖丁，妙蛙蝌蚪，高斯，小火龙，快龙，皮卡丘，卡比兽 什么的</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-08.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-09.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-10.jpg" alt=""></div></div></div>

<p>话说最后那个是什么动漫？Love Live! Sunshine？ 还是什么？</p>
<h2 id="东京迪士尼海洋"><a href="#东京迪士尼海洋" class="headerlink" title="东京迪士尼海洋"></a>东京迪士尼海洋</h2><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-11.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-12.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-13.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-14.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-15.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-16.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-17.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-18.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-19.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-20.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-21.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-22.jpg" alt=""></div></div></div>

<p>🇯🇵 说是全球唯一的 迪士尼海洋主题公园<br>所以就没有去旁边的迪士尼公园</p>
<p>泰坦尼克，火山 🌋，神庙 🛕</p>
<p>不过当时下着雨<br>虽然工作人员还是热情的营造气氛<br>但是顶不住阴嗖嗖的天气<br>心里拔凉拔凉的</p>
<p>再加上没有快速票<br>爆米花 🍿️ 排队都要一个小时<br>其他的项目比如碰碰船俩小时</p>
<p>匆匆转了一圈<br>就出来了</p>
<p>体验极差<br>远远远远远远没有上次在大阪的 Universal Studio 好玩</p>
<p>本来以为 迪士尼可以玩一天<br>结果 10 点就出来了<br>太尴尬，只能随便走看</p>
<h2 id="东京海洋生物公园"><a href="#东京海洋生物公园" class="headerlink" title="东京海洋生物公园"></a>东京海洋生物公园</h2><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-23.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-24.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-25.jpg" alt=""></div></div></div>

<p>远远看以为是天文台<br>大脸，你是在笑吗 😂<br>还有小小企鹅</p>
<h2 id="国家新兴科学与创新博物馆"><a href="#国家新兴科学与创新博物馆" class="headerlink" title="国家新兴科学与创新博物馆"></a>国家新兴科学与创新博物馆</h2><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-26.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-27.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-28.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-29.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-30.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-31.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-32.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-33.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-34.jpg" alt=""></div></div></div>

<p>开局蓝屏，AI 恐怖谷，胎儿</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-36.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-37.jpg" alt=""></div></div></div>

<p>出来发现旁边有个船 🚢<br>仔细看原来是个建筑，船的科学馆<br>可惜已经关门了</p>
<p>后面那个建筑中间的球球是天文馆</p>
<h2 id="御台场自由女神像复制品"><a href="#御台场自由女神像复制品" class="headerlink" title="御台场自由女神像复制品"></a>御台场自由女神像复制品</h2><p>继续瞎逛<br>远远看见 👀 ，等下，那是自由女神像 🗽 ？？？<br>后面那个是金门大桥？？？</p>
<p>走进看了下，还真是…<br>脑子 🧠 里立即闪过 金闪闪的那句 <strong>faker</strong></p>
<p><a href="https://en.wikipedia.org/wiki/Replicas_of_the_Statue_of_Liberty">自由女神像的复制品</a></p>
<blockquote>
<p>为了纪念“日本法国年”，1998 年 4 月至 1999 年 5 月，来自 Cygnes 岛的法国自由女神像来到东京御台场。[3]由于其受欢迎程度，2000 年在同一地方竖立了法国自由女神像的复制品。同样在日本，一个小的自由女神像在日本大阪的 Amerika-mura（美国村）购物区中。另一个复制品是在青森县三泽市南部下田镇附近的奥入濑[71]中，美国有 8000 人的美国空军基地。宫城县石卷市的自由女神像的复制品，受到 2011 年东北地震和海啸的破坏。[72]富山县大矢部市也有一个复制品。[73]</p>
</blockquote>
<p>原来如此</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-38.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-40.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-39.jpg" alt=""></div></div></div>

<h2 id="高达"><a href="#高达" class="headerlink" title="高达"></a>高达</h2><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-42.jpg" alt=""></div></div></div>

<p>Wow</p>
<p>还记得看 高达 Seed 还是在高中时借同学 👨‍🎓 的 光碟 💽 在家偷偷看<br>前几年还出了重制版，不过也没看过了，毕竟<br>我的青春结束了</p>
<p>现在想来剧情什么的已经记不清了<br>只记得基拉的自由高达<br>单机突破大气层<br>削了很多人棍<br>然后就飞走了</p>
<p>不过优衣库前面的这个<br>看光晕和角<br>这个应该是 独角兽 🦄️<br>还好后面看过 UC 剧场版，拉普拉斯的亡灵什么的，不然又不认识了</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-43.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-44.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-41.jpg" alt=""></div></div></div>

<p>旁边的小店有买手办</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-45.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-240-46.jpg" alt=""></div></div></div>
]]></content>
      <tags>
        <tag>Travel</tag>
        <tag>LittleMaster</tag>
        <tag>Japan</tag>
        <tag>🇯🇵</tag>
      </tags>
  </entry>
  <entry>
    <title>🇯🇵-2-4-1</title>
    <url>/cn/Japan-2-4-1/</url>
    <content><![CDATA[<h1 id="东京"><a href="#东京" class="headerlink" title="东京"></a>东京</h1><div id="googleMap8064" style="
            height: 450px;
            width: 100%;
            margin: 0px;
            padding: 0px
            ">
</div>
<style>.gmnoprint img {max-width: none !important;}</style>
<script defer="defer">
  window.hexoGmaps = window.hexoGmaps || { maps: {}};
  window.hexoGmaps.maps['initgoogleMap8064'] = function init() {
    var mapOptions = {
       'scrollwheel': false,
       'zoom': 13,
       'center': new window.google.maps.LatLng( 35.705 , 139.774 ),
     },
     target = document.getElementById('googleMap8064'),
     map = new window.google.maps.Map(target, mapOptions);
      
     
     
     var opts0 = {
        'position': new window.google.maps.LatLng( 35.6853037 , 139.756059 ),
        'map': map,
        'title': 'Ninomaru Garden',
        'zIndex' : 0,
        'icon': ''
      };

     var infowindow0 = new window.google.maps.InfoWindow({
       content: 'Ninomaru Garden'
     });

     var marker0 = new window.google.maps.Marker(opts0);

     marker0.addListener('click', function(){
       infowindow0.open(map, marker0)
     })
     
     
     var opts1 = {
        'position': new window.google.maps.LatLng( 35.6943813 , 139.7517535 ),
        'map': map,
        'title': 'Science Museum',
        'zIndex' : 1,
        'icon': ''
      };

     var infowindow1 = new window.google.maps.InfoWindow({
       content: 'Science Museum'
     });

     var marker1 = new window.google.maps.Marker(opts1);

     marker1.addListener('click', function(){
       infowindow1.open(map, marker1)
     })
     
     
     var opts2 = {
        'position': new window.google.maps.LatLng( 35.7166529 , 139.7691198 ),
        'map': map,
        'title': 'Ueno Zoo',
        'zIndex' : 2,
        'icon': ''
      };

     var infowindow2 = new window.google.maps.InfoWindow({
       content: 'Ueno Zoo'
     });

     var marker2 = new window.google.maps.Marker(opts2);

     marker2.addListener('click', function(){
       infowindow2.open(map, marker2)
     })
     
     
     var opts3 = {
        'position': new window.google.maps.LatLng( 35.7096274 , 139.7982875 ),
        'map': map,
        'title': 'Azumabashi',
        'zIndex' : 3,
        'icon': ''
      };

     var infowindow3 = new window.google.maps.InfoWindow({
       content: 'Azumabashi'
     });

     var marker3 = new window.google.maps.Marker(opts3);

     marker3.addListener('click', function(){
       infowindow3.open(map, marker3)
     })
   

  }
  function makeMaps() {
    for (var map in window.hexoGmaps.maps) {
       console.log('map #', map);
       window.hexoGmaps.maps[map]();
    }
  }
  function loadScript() {
    window.hexoGmaps.googleScriptLoaded = true;
    var script = document.createElement('script');
    script.type = 'text/javascript';
        script.src = '//maps.googleapis.com/maps/api/js?v=3.exp&callback=makeMaps&key=AIzaSyB6JxSOGlpKd-7pPtKKG_BIEOiLlaRHxMQ';
    document.body.appendChild(script);
  }
  if (!window.hexoGmaps.googleScriptLoaded) {
    loadScript();
  }
</script>

<a id="more"></a>

<h2 id="皇居"><a href="#皇居" class="headerlink" title="皇居"></a>皇居</h2><p>事实上 皇居是进不去的，只能看后花园</p>
<p>江戸城 二の丸庭園</p>
<p>现在还是三月下旬，所以只有部分樱花 🌸 盛开了<br>中间还混杂着橘子 🍊 …</p>
<p>小桥流水人家<br>中间有小亭子卖水和零食，纪念品</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-00.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-06.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-01.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-02.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-03.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-04.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-09.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-11.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-12.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-13.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-14.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-18.jpg" alt=""></div></div></div>

<h2 id="東京国立近代美術館"><a href="#東京国立近代美術館" class="headerlink" title="東京国立近代美術館"></a>東京国立近代美術館</h2><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-20.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-21.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-22.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-23.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-24.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-25.jpg" alt=""></div></div></div>

<h2 id="科学技術館"><a href="#科学技術館" class="headerlink" title="科学技術館"></a>科学技術館</h2><p>早年的自行车 🚴，像是耍杂技一样<br>好大的钻石 💎<br>新干线 🚄 车轮<br>假装多维空间<br>一点都不晕的转盘</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-26.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-27.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-29.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-30.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-31.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-32.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-33.jpg" alt=""></div></div></div>

<p>晚上 🌃 回去路过 Mall 看到很多招财猫 🐱<br>开公司的小伙伴很想让带一个回去</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-34.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-35.jpg" alt=""></div></div></div>

<p>回到酒店发现了晴空塔形状的瓶装水<br>买了一支  pencil<br>还有季节特供的樱花 🌸 味的可乐 😂<br>比股神喜欢的 🍒 味 的正常很多</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-36.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-66.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-37.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-38.jpg" alt=""></div></div></div>

<h2 id="国立科学博物館"><a href="#国立科学博物館" class="headerlink" title="国立科学博物館"></a>国立科学博物館</h2><p>看到了很多小时候看 十万个为什么 的恐龙 🦕 化石<br>其中我最喜欢的三种</p>
<h3 id="霸王龙-🦖"><a href="#霸王龙-🦖" class="headerlink" title="霸王龙 🦖"></a>霸王龙 🦖</h3><blockquote>
<p>君王暴龙（学名：Tyrannosaurus rex），又名霸王龙，是暴龙属（Tyrannosaurus）目前仅有的一个有效物种，属于暴龙科的巨型兽脚类恐龙，名字的拉丁文含义是“蜥蜴中的暴君”。其身长估计可达 13 米[1]，臀部高度约 4 米[2]，体重平均约 9 公吨。… 其咬合力将近 6 公吨、相当于一只大象的重量[3]</p>
</blockquote>
<h3 id="三角龙"><a href="#三角龙" class="headerlink" title="三角龙"></a>三角龙</h3><blockquote>
<p>三角龙属（属名：Triceratops）通称三角龙、三觭龙，是鸟臀目角龙下目角龙科的一属，是种食植性恐龙。三角龙大小中等，四足，全长大约有 7 到 10 米…是所有恐龙最晚出现的恐龙种类之一，也是最大、最后的角龙科恐龙，占据<strong>非鸟形恐龙</strong>在地球上的最后时期（晚期白垩纪）中的绝大部分陆地生态系</p>
</blockquote>
<h3 id="剑龙"><a href="#剑龙" class="headerlink" title="剑龙"></a>剑龙</h3><blockquote>
<p>剑龙是最常出现在经常出现在书籍、漫、电视或者电影当中的恐龙之一，是非常著名的植食恐龙代表；不过剑龙和暴龙、三角龙并不生活在同一时代（剑龙在侏罗纪，三角龙和暴龙在白垩纪），剑龙的主要敌人是异特龙、蛮龙和食蜥王龙</p>
</blockquote>
<h3 id="三叶虫"><a href="#三叶虫" class="headerlink" title="三叶虫"></a>三叶虫</h3><blockquote>
<p>最早出现于寒武纪，在古生代早期达到顶峰，此后逐渐减少至灭绝。最晚的三叶虫（砑头虫目）于二亿五千万年前二叠纪结束时的生物集群灭绝中消失</p>
</blockquote>
<p>还有 鲸鱼 🐳<br>大象 🐘 家族演化史</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-39.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-40.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-41.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-42.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-43.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-44.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-45.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-46.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-47.jpg" alt=""></div></div></div>

<h3 id="人类馆"><a href="#人类馆" class="headerlink" title="人类馆"></a>人类馆</h3><p>在这个时间长河中，感觉到人类进化的不易<br>课本里的 lucky 的复制品就在眼前，只有一米左右<br>住在骨头搭的房子里<br>等到旧人类已经比我高了</p>
<blockquote>
<p>今天，所有的人类都同属单一的群体：智人智人亚种（Homo sapiens sapiens），并没有物种区隔。然而，根据“源出非洲”模型，这并不是人属的第一个物种：人属的第一个物种“能人”，在至少距今两百万年演变出来，能人生活在非洲不同区域的时间相对较短，“直立人”在超过距今 180 万年前演变出来，到了距今 150 万年前就已散布到旧世界各地</p>
</blockquote>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-50.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-52.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-51.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-48.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-49.jpg" alt=""></div></div></div>

<h3 id="红巨星"><a href="#红巨星" class="headerlink" title="红巨星"></a>红巨星</h3><p>结合刚刚的巨大钻石 💎 ，就会涉及到一个是否应该买钻戒的问题<br>总所周知</p>
<blockquote>
<p>碳有三种已知的同素异形体：金刚石、石墨和富勒烯。在热力学上，金刚石的稳定性低于石墨，<strong>可自发转变为石墨</strong>，但常温常压下这一转变的速度很慢，可以忽略不计，因此钻石 💎 得以稳定存在。自然界形成的金刚石一般形成于地球内部高温高压的环境，后来被火山喷发等地质构造运动带到地表，因此许多金刚石发现在火山附近。现代工业可在高温高压下生产金刚石，称为合成金刚石</p>
</blockquote>
<p>所以钻戒除了晃瞎别人眼睛的炫耀 🦚 功能，并没有别的用处<br>更别提放在太阳 🌞 的放大镜 🔍 会蒸发掉</p>
<p>而重金属如 金 铂</p>
<blockquote>
<p>金的原子序数在宇宙中天然存在的元素中是较高的。据信这种重元素是在两颗中子星碰撞时的超新星核合成中产生，[4]在太阳系形成前的尘埃中就已存在。由于地球形成之初还处于熔化状态，早期地球的金几乎都已沉入地核。因此，现在地球上地壳和地幔的金多是拜后来后期重轰炸期（约 40 亿年前）的小行星撞击事件所赐<br>金在有历史记载以前就是一种广受欢迎的贵金属，用于货币、保值物、珠宝和艺术品。以前国内和国际通常实行以金为基础的金本位货币制度，但 1930 年代时金币已停止流通。70 年代，随着布雷顿森林协定的结束，世界范围内的金本位制终于让位给法定货币制度。不过因其稀有，易于熔炼、加工和铸币，色泽独特，抗腐蚀，不易和其他物质反应等特点，金的价值并不下降。</p>
</blockquote>
<p>高下立见</p>
<p>当然不差钱还是买 💎 吧<br>当然前提是有个要结婚 🎎 的女朋友</p>
<h3 id="引力波"><a href="#引力波" class="headerlink" title="引力波"></a>引力波</h3><blockquote>
<p>引力波探测器（英语：Gravitational-wave observatory）是引力波天文学中用于探测引力波的装置。引力波是加速中的质量在时空中所产生的涟漪。阿尔伯特·爱因斯坦在 1916 年首次提出引力波的概念。[1]通过探测引力波，可以对广义相对论进行实验验证。常用的探测器有棒状探测器和激光干涉仪等，这些探测器的主要运作原理是测量引力波通过时对两个相隔遥远位置之间距离的影响。1960 年代起，多个引力波探测器陆续被建造与启用，并在探测器灵敏度上有不断的进步</p>
</blockquote>
<p>以及各种动物模型<br>馆外面有个巨大的蓝鲸</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-53.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-54.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-56.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-57.jpg" alt=""></div></div></div>

<h2 id="上野動物園"><a href="#上野動物園" class="headerlink" title="上野動物園"></a>上野動物園</h2><p>之前去动物园每次老虎馆不是在整修就是快到闭馆了<br>终于见到老虎 🐯 了<br>戴头巾的大猩猩<br>不小心对视了下，看到眼神<br>瞬间脊背发凉，想到了人猿星球</p>
<p>食蚁兽 还是？<br>原来我在去澳洲前以及见过袋鼠 🦘 了</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-58.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-61.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-62.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-59.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-60.jpg" alt=""></div></div></div>

<p>看到了闭馆，然后回去<br>路过 吾妻桥<br>看到上次在晴空塔上看到的 那个黄色的一点 ☁️ 或 🍦？</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-64.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-65.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-67.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-68.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-241-69.jpg" alt=""></div></div></div>

<h2 id="返程"><a href="#返程" class="headerlink" title="返程"></a>返程</h2><p>第二天 checkout 后下楼直接坐 成田机场线 回机场<br>取票时小姐姐问是否一个人<br>莫名其妙为啥这里还有对单身汪 🐶 的伤害</p>
<p>然后小姐姐高兴的告知：<br>我们给您升级了商务舱<br>欢迎以后继续搭乘 JAL 日航</p>
<p>原来航空公司回随机的抽取一些客户进行升舱</p>
<p>Lucky</p>
<p>然鹅这个升舱只局限于飞机的商务舱<br>不像之前自费的 ANA 全日空<br>可以进入带沐浴间的头等舱休息室</p>
<hr>
<p>当然商务舱还是一如既往的舒服<br>在飞机睡了一觉<br>就结束了这次 10 天的 🇯🇵 之旅</p>
]]></content>
      <tags>
        <tag>Travel</tag>
        <tag>LittleMaster</tag>
        <tag>Japan</tag>
        <tag>🇯🇵</tag>
      </tags>
  </entry>
  <entry>
    <title>How to schedule iMessages on Mac</title>
    <url>/cn/How-to-schedule-iMessages-on-Mac/</url>
    <content><![CDATA[<p>首先在 Mac 上打开<code>终端</code>，然后按以下步骤复制并粘贴以下命令行：</p>
<h2 id="Send-iMessage-by-Shell"><a href="#Send-iMessage-by-Shell" class="headerlink" title="Send iMessage by Shell"></a>Send iMessage by <code>Shell</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">file=<span class="string">&quot;<span class="variable">$HOME</span>/Documents/sendiMessage.sh&quot;</span></span><br><span class="line">str=<span class="string">&#x27;tell application &quot;Messages&quot; to send &quot;TEXT&quot; to buddy &quot;NAME&quot;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#!/bin/zsh \nosascript -e &#x27;<span class="variable">$str</span>&#x27;&quot;</span> &gt; <span class="variable">$file</span></span><br><span class="line">open <span class="variable">$file</span></span><br></pre></td></tr></table></figure>

<p>您会看到一个由默认文本编辑应用程序打开的文件，该文件显示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/bin/zsh</span></span><br><span class="line">osascript -e <span class="string">&#x27;tell application &quot;Messages&quot; to send &quot;TEXT&quot; to buddy &quot;NAME&quot;&#x27;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>请注意，您应该在<code>通讯录</code>应用中将<code>TEXT</code>替换为要发送的文本，并将<code>NAME</code>替换为名称。<br>不要忘记<strong>保存</strong>文件。</p>
<h2 id="Crontab-on-mac"><a href="#Crontab-on-mac" class="headerlink" title="Crontab on mac"></a><code>Crontab</code> on mac</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo touch /etc/crontab</span><br></pre></td></tr></table></figure>

<p>您应该在上面运行此行，因为<code>com.vix.cron</code>将检查<code>/etc/crontab</code>在 macOS 上是否存在。<br>输入 Mac 的密码。</p>
<h2 id="Schedule-the-shell-with-Crontab"><a href="#Schedule-the-shell-with-Crontab" class="headerlink" title="Schedule the shell with Crontab"></a>Schedule the shell with <code>Crontab</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">00 10 25 3 * zsh ~/Documents/sendiMessage.sh</span><br></pre></td></tr></table></figure>

<p>As the <a href="http://www.adminschoice.com/crontab-quick-reference">Crontab – Quick Reference</a> shows:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00    10    *   *    *        command to be executed</span><br><span class="line">-     -     -   -    -</span><br><span class="line">|     |     |   |    |</span><br><span class="line">|     |     |   |    +----- day of week (0 - 6) (Sunday&#x3D;0)</span><br><span class="line">|     |     |   +------- month (1 - 12)</span><br><span class="line">|     |     +--------- day of        month (1 - 31)</span><br><span class="line">|     +----------- hour (0 - 23)</span><br><span class="line">+------------- min (0 - 59)</span><br></pre></td></tr></table></figure>

<p>此外壳意味着您的 Mac 将在 3 月 25 日 10:00 发送 iMessage。</p>
<p>然后将其修改为您的理想时间。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>

<p>在接下来的步骤中，您正在使用<code>vim</code>，我认为这是最难的部分。</p>
<ol>
<li>按<code>i</code>，您将在<code>Terminal</code>的左下角看到<code>--INSERT--</code>。</li>
<li>Paste <code>00 10 25 3 * zsh ~/Documents/sendiMessage.sh</code></li>
<li>按 <code>shift + :</code> 然后输入 <code>wq</code> , <code>enter</code></li>
</ol>
<h2 id="Check-Crontab"><a href="#Check-Crontab" class="headerlink" title="Check Crontab"></a>Check <code>Crontab</code></h2><p><code>crontab -l</code></p>
<p>你可以看到 <code>00 10 25 3 * zsh ~/Documents/sendiMessage.sh</code> 如果一切正确。</p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Struct Codable Alamofire Generics</title>
    <url>/cn/Struct-Codable-Alamofire-Generics/</url>
    <content><![CDATA[<p>我半年前写了<a href="https://leihao0.github.io/Swift-Generics-in-protocol-and-enum/">协议和枚举中的 Swift 泛型</a>，以解决网络响应问题数据转换为泛型类型。</p>
<p>在 Swift 4 之后，<a href="https://developer.apple.com/documentation/foundation/jsonserialization">JSONSerialization</a>方法有点过时了</p>
<p>在更新进度时，我找到了一种更好的方法</p>
<a id="more"></a>

<h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><ul>
<li><a href="https://app.quicktype.io">Quicktype</a></li>
<li><a href="https://github.com/Alamofire/Alamofire">Alamofire</a></li>
</ul>
<p>Assume we have a Json structure:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;List&quot;</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  <span class="attr">&quot;C&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After you paste it to Quicktype with select <strong>Alamofire extensions</strong>, you can get:</p>
<!--more-->

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> Alamofire</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> id: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> list: [<span class="type">Int</span>]? <span class="comment">// optional, in case some date has no list</span></span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">c</span>: <span class="type">C</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">CodingKeys</span>: <span class="title">String</span>, <span class="title">CodingKey</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> id</span><br><span class="line">        <span class="keyword">case</span> list = <span class="string">&quot;List&quot;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">c</span> = <span class="string">&quot;C&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> id: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - Alamofire response handlers</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">DataRequest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">decodableResponseSerializer</span>&lt;T: Decodable&gt;<span class="params">()</span></span> -&gt; <span class="type">DataResponseSerializer</span>&lt;<span class="type">T</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">DataResponseSerializer</span> &#123; <span class="number">_</span>, response, data, error <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">guard</span> error == <span class="literal">nil</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> .failure(error!) &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> data = data <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> .failure(<span class="type">AFError</span>.responseSerializationFailed(reason: .inputDataNil))</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="type">Result</span> &#123; <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode(<span class="type">T</span>.<span class="keyword">self</span>, from: data) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@discardableResult</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">responseDecodable</span>&lt;T: Decodable&gt;<span class="params">(queue: DispatchQueue? = <span class="literal">nil</span>, completionHandler: @escaping <span class="params">(DataResponse&lt;T&gt;)</span></span></span> -&gt; <span class="type">Void</span>) -&gt; <span class="type">Self</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> response(queue: queue, responseSerializer: decodableResponseSerializer(), completionHandler: completionHandler)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@discardableResult</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">responseA</span><span class="params">(queue: DispatchQueue? = <span class="literal">nil</span>, completionHandler: @escaping <span class="params">(DataResponse&lt;A&gt;)</span></span></span> -&gt; <span class="type">Void</span>) -&gt; <span class="type">Self</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> responseDecodable(queue: queue, completionHandler: completionHandler)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请注意，<code>func responseA</code>是静态类型，仅适用于响应您粘贴的 JSON 的空间 API。因此，我们需要所有 API 的泛型类型。</p>
<p>因此我们可以删除<code>func responseA</code>并定义一个协议<code>MYRequest</code>，如下所示：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">MYRequest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> router: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> api: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">T</span>: <span class="type">Decodable</span> <span class="comment">// generics type</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MYRequest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> api: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">&quot;v1&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> domain: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;https://domain.com&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// T is used in DataResponse&lt;T&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">request</span><span class="params">(completionHandler: @escaping <span class="params">(DataResponse&lt;T&gt;)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> url = <span class="string">&quot;\(domain)/\(api)/\(router)&quot;</span></span><br><span class="line">        <span class="type">Alamofire</span>.request(url).responseDecodable(completionHandler: completionHandler)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，我们可以根据需要实现不同的 Requset：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ARequset</span>: <span class="title">MYRequest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> router = <span class="string">&quot;a&quot;</span></span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">T</span> = <span class="type">A</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BRequset</span>: <span class="title">MYRequest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> router = <span class="string">&quot;b&quot;</span></span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">T</span> = <span class="type">B</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外，我们可以定义另一个具有相同协议的协议 <code>var api: String &#123; get &#125;</code> 在 <code>MYRequest</code> 如果我们有一个新的 <code>CRequset</code> 和 API 升级到 v2</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">V2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> api: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">V2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> api: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">&quot;v2&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C</span>: <span class="title">Request</span>, <span class="title">V2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> router = <span class="string">&quot;c&quot;</span></span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">T</span> = <span class="type">C</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，ViewController 中的请求将如下所示：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">ARequset</span>().request &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] response <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> a = response.result.value &#123; <span class="comment">// a is A, not Any</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">BRequset</span>().request &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] response <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> b = response.result.value &#123; <span class="comment">// b is B, not Any</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Swift</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>How to build tesseract 4 beta on macOS</title>
    <url>/cn/How-to-build-tesseract-4-beta-on-macOS/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew info tesseract</span><br><span class="line"></span><br><span class="line">tesseract: stable 3.05.01 (bottled), HEAD</span><br><span class="line">OCR (Optical Character Recognition) engine</span><br></pre></td></tr></table></figure>

<p>识别<code>简体中文</code>的结果有点可怕。<br>我注意到它在 4.0.0+之后添加了一个基于 LSTM 的新神经网络系统<br>但是它需要从 macOS 上的源代码构建。<br>值得庆幸的是，该手册在其 README.md 上已作了详细说明</p>
<a id="more"></a>

<h2 id="Install-dependencies"><a href="#Install-dependencies" class="headerlink" title="Install dependencies"></a>Install dependencies</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install automake autoconf autoconf-archive libtool</span><br><span class="line">brew install pkgconfig</span><br><span class="line">brew install icu4c</span><br><span class="line">brew install leptonica</span><br><span class="line">brew install gcc</span><br></pre></td></tr></table></figure>

<h2 id="Compile"><a href="#Compile" class="headerlink" title="Compile"></a>Compile</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/tesseract-ocr/tesseract/</span><br><span class="line"><span class="built_in">cd</span> tesseract</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure CC=gcc CXX=g++ CPPFLAGS=-I/usr/<span class="built_in">local</span>/opt/icu4c/include LDFLAGS=-L/usr/<span class="built_in">local</span>/opt/icu4c/lib</span><br><span class="line">make -j</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>Their best trained <a href="https://github.com/tesseract-ocr/tessdata_best">modes</a>, download the language <code>chi_sim.traineddata</code> and put it under <code>tesseract/4.0.0.1/tessdata/</code></p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tesseract image.png image -l chi_sim</span><br><span class="line">cat image.txt</span><br></pre></td></tr></table></figure>

<p>好的，在<code>歌曲字体</code>字体下仍然很糟糕。我需要自己使用新模型进行培训。</p>
<hr>
<p>最后，我忽略了<code>tesseract</code>，我发现将<code>图像</code>拖到<code>OneNote</code>中，而<code>Ctrl +单击</code>-&gt;<code>从图片复制文本</code>将获得更高的准确性。 😓</p>
]]></content>
      <tags>
        <tag>AI</tag>
        <tag>LSTM</tag>
      </tags>
  </entry>
  <entry>
    <title>与罗摩相会</title>
    <url>/cn/Rendezvous-with-Rama/</url>
    <content><![CDATA[<div style="width: 300px">
<img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Rendezvous%20with%20Rama.jpg" />
</div>

<p>仰慕基地系列已久，这是第一部完整看完的克拉克小说</p>
<a id="more"></a>

<h3 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h3><p>先说翻译</p>
<p>大概两年前，我就有原版坚决不看译文了<br>没读过，较早的另一个版本 与拉玛相会，所以没发对比<br>就这一版来说，并没有想象中的违和感<br>就名字来说 拉玛 肯定是不对的，因为原文里有：</p>
<blockquote>
<p>now they were working through the Gindu pantheon. And so 31/439 was christened Rama.</p>
</blockquote>
<h3 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h3><p>而且这个封面很喜欢<br>刚拿到书时以为是引力透镜之类的东西，完全被误导了，没想到就是 Rama</p>
<h3 id="科技"><a href="#科技" class="headerlink" title="科技"></a>科技</h3><p>就整体而言，唯一觉得不太对劲的是星际飞船上，对于做杂活的是黑猩猩<br>从目前科技水平来看，做这些事情的应该更像是星际穿越里的机器人（你看 Rama 文明也是酱紫做的）<br>书里描述的人类的生理机能，相对现在而言并没什么提高<br>很难想象这是移动范围远至冥王星（书里冥王星还算行星而不是矮行星）时，人类还是现在这样子</p>
<p>要知道我去欧洲做 11 小时的飞机都感觉自己要死啦，做这种星际旅行，运到地方还不已经是一具尸体了</p>
<p>所以如果人类不像《生命 3.0》里描述的那样迭代升级的话<br>相较于人而言，nier automata 里的 人形机器人 更适合星际旅行</p>
<p>其他就都很赞了<br>比如虽然最后 Rama 的智能生命也没露脸，但推断应该和人类类似<br>直到现在科学主流观点也是，碳基生命，因为：</p>
<ol>
<li>大分子需要 碳 硅 做链接者</li>
<li>硅要活跃起来需要极高温度</li>
<li>整个宇宙 碳 是 硅的 10 倍</li>
</ol>
<p>然后 Rama 里打杂的就是机器人了，功能特定，弱人工智能，不需要有意识</p>
<h3 id="Rama-人"><a href="#Rama-人" class="headerlink" title="Rama 人"></a>Rama 人</h3><p>书里只在 琉璃神社（抱歉我看到玻璃就打成了琉璃，神庙打成了神社 ⛩️） 那一章 描述了 水晶里的 生物，为什么猜测这就是 Rama 高阶智慧生物呢</p>
<p>因为如果你在宇宙里看到一部 📱，肯定不会认为这是自然形成的，必然是某种智慧生命造出来的</p>
<h3 id="来自水星的核弹"><a href="#来自水星的核弹" class="headerlink" title="来自水星的核弹"></a>来自水星的核弹</h3><p>看到时其实还是听担心 Rama 被摧毁的<br>但对我来说，水星人也没有错，他们的发言也 make sense</p>
<p>如果我们暂停在这里，把它当作思想实验<br>最终结局 Rama 是真的占领了近太阳轨道，本来有这个机会保存人类文明，结果因为一个人的伪善导致人类文明消失，这个引爆核弹的人就不是英雄而是罪人</p>
<blockquote>
<p>生存是文明的第一需要</p>
</blockquote>
<p>另外对于刚走出太阳系的人类来说，和当年走出非洲的情况并没有什么区别，再次面临险恶的环境，怎么能用地球上近代文明的方式对待太空呢</p>
<blockquote>
<p>do not go gentle into that good night</p>
</blockquote>
<p>不过从后面 Rama 里太阳只有 500 万公里，撑开保护罩，汲取能量，违反牛顿第三定律的走位 来看，这颗核弹有无不重要，反而凸显了其实还是人类这个物种级别的斗争</p>
<h3 id="文明"><a href="#文明" class="headerlink" title="文明"></a>文明</h3><p>人类进化导致对于不常见的跨越日常级别的大小是没什么概念的</p>
<p>书里描述来看，长 50 千米，直径 20 千米，所以周长是 62.8 千米，这样看来整个内壁面积是 3,140 公里，什么概念呢</p>
<ul>
<li>我国领土的万分之三</li>
<li>北京六环 2,267 km²</li>
<li>上海 6,340 km²</li>
<li>深圳 2,050 km²</li>
<li>香港 2,754 km²</li>
</ul>
<p>自己感受下</p>
<p>想想这些城市现在的人口，所以这样的面积完全可以承载一个类人类文明所需要的人口基数<br>更不说 Rama 中间低重力，现在城市摩天大楼也就几百米，Rama 可是 10 公里，差了两个量级，所以实际容纳率<br>不能算表面积而应该算体积<br>而且，Rama 应该只是其中的一艘，毕竟</p>
<blockquote>
<p>Rama is the seventh avatar of the god Vishnu</p>
</blockquote>
<blockquote>
<p>The list of avatars in the Dashavatara varies by region: Matsya, Kurma, Varaha, Narasimha, Vamana, Parashurama, Rama, Krishna, Balarama and Kalki</p>
</blockquote>
]]></content>
      <tags>
        <tag>Books</tag>
      </tags>
  </entry>
  <entry>
    <title>如何将视频转换为文本</title>
    <url>/cn/How-to-convert-video-to-text/</url>
    <content><![CDATA[<p>如果音频是普通话，我发现 XFyun FlySpeechRecognizer 在这件事上做得很好，它甚至可以识别混合语言音频中的一些简单英语单词。</p>
<p>不需要从一开始就训练机器学习模型来做这样的事情。</p>
<a id="more"></a>

<p>XFyun API 有一些限制，大小应小于等于 2MB，音频长度小于等于 60s。</p>
<p>Usage <code>./test.sh test.mp4</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/zsh</span></span><br><span class="line">filename=$(<span class="built_in">echo</span> <span class="variable">$1</span> | cut -d. -f1)</span><br><span class="line"><span class="built_in">type</span>=$(<span class="built_in">echo</span> <span class="variable">$1</span> | cut -d. -f2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print $filename.$type</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># split video &lt;= 2MB</span></span><br><span class="line">mp4box -splits 2000 <span class="variable">$filename</span>.<span class="variable">$type</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># echo video → audio pcm</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="variable">$filename</span>\_*.<span class="variable">$type</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;ffmpeg <span class="variable">$name</span> to pcm&quot;</span></span><br><span class="line">  ffmpeg -y  -i <span class="variable">$name</span> -acodec pcm_s16le -f s16le -ac 1 -ar 16000 <span class="variable">$name</span>.pcm</span><br><span class="line">  rm <span class="variable">$name</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># audio to text</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="variable">$filename</span>\_*.pcm; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;xfyun.py <span class="variable">$name</span>&quot;</span></span><br><span class="line">  python3 xfyun.py <span class="variable">$name</span></span><br><span class="line">  rm <span class="variable">$name</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>现在我们可以使用 XFyun 识别音频。</p>
<p>这是他们的文件 <a href="https://doc.xfyun.cn/rest_api/%E8%AF%AD%E9%9F%B3%E5%90%AC%E5%86%99.html">XFyun IFlySpeechRecognizer</a>, 但无法执行其示例代码，因此我进行了一些修复。</p>
<p><code>xfyun.py</code> with <code>Python3</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    f = open(argv[<span class="number">1</span>], <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    file_content = f.read()</span><br><span class="line">    base64_audio = base64.b64encode(file_content)</span><br><span class="line">    body = urllib.parse.urlencode(&#123;<span class="string">&#x27;audio&#x27;</span>: base64_audio&#125;).encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    url = <span class="string">&#x27;http://api.xfyun.cn/v1/service/v1/iat&#x27;</span></span><br><span class="line">    api_key = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    x_appid = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    param = &#123;<span class="string">&quot;engine_type&quot;</span>: <span class="string">&quot;sms16k&quot;</span>, <span class="string">&quot;aue&quot;</span>: <span class="string">&quot;raw&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    param_str = json.dumps(param)</span><br><span class="line">    param_utf8 = param_str.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>).encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    param_b64 = base64.b64encode(param_utf8)</span><br><span class="line">    param_b64str = param_b64.decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    x_time = str(int(time.time()))</span><br><span class="line">    checksum = (api_key + x_time + param_b64str).encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    x_checksum = hashlib.md5(checksum).hexdigest()</span><br><span class="line">    x_header = &#123;<span class="string">&#x27;X-Appid&#x27;</span>: x_appid,</span><br><span class="line">                <span class="string">&#x27;X-CurTime&#x27;</span>: x_time,</span><br><span class="line">                <span class="string">&#x27;X-Param&#x27;</span>: param_b64str,</span><br><span class="line">                <span class="string">&#x27;X-CheckSum&#x27;</span>: x_checksum&#125;</span><br><span class="line"></span><br><span class="line">    req = urllib.request.Request(url, data=body, headers=x_header)</span><br><span class="line">    response = urllib.request.urlopen(req)</span><br><span class="line">    result = response.read().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    data = json.loads(result)[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    <span class="keyword">print</span> (data)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>更多如何将视频转换为文本</title>
    <url>/cn/More-how-to-convert-video-to-text/</url>
    <content><![CDATA[<p>我尝试了 XFyun，但是它不适合可识别的结果，因此我正在寻找另一个识别器来进行一些测试。</p>
<ul>
<li><a href="https://ai.qq.com/product/aaiasr.shtml">QQ</a></li>
<li><a href="https://ai.baidu.com/docs#/ASR-Online-Python-SDK/top">Baidu</a></li>
<li><a href="https://cloud.google.com/speech-to-text/">Google</a></li>
</ul>
<p>好消息是它们都支持早先转换的<code>PCM</code>类型，因此我需要对 shell 进行一些更改。当您想比较来自不同识别器的结果时，只需运行：</p>
<p><code>test.sh xfyun.py|baidu.py|qq.py test.mp4|.m4a</code></p>
<a id="more"></a>

<p>老实说，用人眼一看，Google 的结果看起来更好。</p>
<p><code>test.sh</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/zsh</span></span><br><span class="line"></span><br><span class="line">py=$<span class="number">1</span></span><br><span class="line"></span><br><span class="line">filename=$(echo $<span class="number">2</span> | cut -d. -f1)</span><br><span class="line">type=$(echo $<span class="number">2</span> | cut -d. -f2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># print $filename.$type</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># split video &lt;= 1MB</span></span><br><span class="line">mp4box -splits <span class="number">2000</span> $filename.$type</span><br><span class="line"></span><br><span class="line"><span class="comment"># echo video → audio pcm</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> $filename\_*.$type; do</span><br><span class="line">  <span class="keyword">print</span> <span class="string">&quot;ffmpeg $name to pcm&quot;</span></span><br><span class="line">  ffmpeg -y  -i $name -acodec pcm_s16le -f s16le -ac <span class="number">1</span> -ar <span class="number">16000</span> $name.pcm</span><br><span class="line">  rm $name</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="comment"># audio to text</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> $filename\_*.pcm; do</span><br><span class="line">  <span class="keyword">print</span> <span class="string">&quot;$py $name&quot;</span></span><br><span class="line">  python3 $py $name</span><br><span class="line">  <span class="comment"># rm $name</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<!--more-->

<h2 id="id-key-py"><a href="#id-key-py" class="headerlink" title="id_key.py"></a>id_key.py</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&quot;xfyun&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;key&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;baidu&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;key&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;secret&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;qq&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;key&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="google"><a href="#google" class="headerlink" title="google"></a>google</h2><p>他们在线上提交了文件，所以我跳过写了 *.py 😝</p>
<h2 id="baidu-py"><a href="#baidu-py" class="headerlink" title="baidu.py"></a>baidu.py</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipSpeech</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> id_key</span><br><span class="line">app_id = id_key.dic[<span class="string">&#x27;baidu&#x27;</span>][<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">app_key = id_key.dic[<span class="string">&#x27;baidu&#x27;</span>][<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">secret = id_key.dic[<span class="string">&#x27;baidu&#x27;</span>][<span class="string">&#x27;secret&#x27;</span>]</span><br><span class="line"></span><br><span class="line">client = AipSpeech(app_id, app_key, secret)</span><br><span class="line"></span><br><span class="line">print(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_content</span>(<span class="params">filePath</span>):</span></span><br><span class="line">    <span class="keyword">with</span> open(filePath, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="keyword">return</span> fp.read()</span><br><span class="line"></span><br><span class="line">res=client.asr(get_file_content(sys.argv[<span class="number">1</span>]), <span class="string">&#x27;pcm&#x27;</span>, <span class="number">16000</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;dev_pid&#x27;</span>: <span class="number">1537</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<h2 id="qq-py"><a href="#qq-py" class="headerlink" title="qq.py"></a>qq.py</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time, random, base64, json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> id_key</span><br><span class="line">app_id = id_key.dic[<span class="string">&#x27;qq&#x27;</span>][<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">app_key = id_key.dic[<span class="string">&#x27;qq&#x27;</span>][<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line"></span><br><span class="line">api_url=<span class="string">&#x27;https://api.ai.qq.com/fcgi-bin/aai/aai_asr&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">string</span>):</span></span><br><span class="line">    md = hashlib.md5()</span><br><span class="line">    md.update(string)</span><br><span class="line">    md5 = md.hexdigest().upper()</span><br><span class="line">    <span class="keyword">return</span> md5</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signify</span>(<span class="params">args, app_key</span>):</span></span><br><span class="line">    query_str = urlencode(args)</span><br><span class="line">    query_str = query_str + <span class="string">&#x27;&amp;app_key=&#x27;</span> + app_key</span><br><span class="line">    signiture = md5(query_str.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> signiture</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">urlencode</span>(<span class="params">args</span>):</span></span><br><span class="line">    tuples = [(k, args[k]) <span class="keyword">for</span> k <span class="keyword">in</span> sorted(args.keys()) <span class="keyword">if</span> args[k]]</span><br><span class="line">    query_str = urllib.parse.urlencode(tuples)</span><br><span class="line">    <span class="keyword">return</span> query_str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">http_post</span>(<span class="params">api_url, args</span>):</span></span><br><span class="line">    resp = requests.post(url=api_url, data=args)</span><br><span class="line">    resp = json.loads(resp.text)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseASR</span>(<span class="params">object</span>):</span></span><br><span class="line">    ext2idx = &#123;<span class="string">&#x27;pcm&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;wav&#x27;</span>: <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;amr&#x27;</span>: <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;slk&#x27;</span>: <span class="string">&#x27;4&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, api_url, app_id, app_key</span>):</span></span><br><span class="line">        self.api_url = api_url</span><br><span class="line">        self.app_id = app_id</span><br><span class="line">        self.app_key = app_key</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stt</span>(<span class="params">self, audio_file, ext, rate</span>):</span></span><br><span class="line">        <span class="keyword">raise</span> Exceptin(<span class="string">&quot;Unimplemented!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicASR</span>(<span class="params">BaseASR</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Online ASR from Tencent</span></span><br><span class="line"><span class="string">    https://ai.qq.com/doc/aaiasr.shtml</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        super(BasicASR, self).__init__(api_url, app_id, app_key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stt</span>(<span class="params">self, audio_file, ext=<span class="string">&#x27;pcm&#x27;</span>, rate=<span class="number">16000</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> ext == <span class="string">&#x27;pcm&#x27;</span>:</span><br><span class="line">            <span class="comment"># wf = wave.open(audio_file)</span></span><br><span class="line">            <span class="comment"># nf = wf.getnframes()</span></span><br><span class="line">            <span class="comment"># audio_data = wf.readframes(nf)</span></span><br><span class="line">            f = open(audio_file, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">            audio_data = f.read()</span><br><span class="line">            f.close()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;Unsupport audio file format!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        args = &#123;</span><br><span class="line">            <span class="string">&#x27;app_id&#x27;</span>: self.app_id,</span><br><span class="line">            <span class="string">&#x27;time_stamp&#x27;</span>: str(int(time.time())),</span><br><span class="line">            <span class="string">&#x27;nonce_str&#x27;</span>: <span class="string">&#x27;%.x&#x27;</span> % random.randint(<span class="number">1048576</span>, <span class="number">104857600</span>),</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: self.ext2idx[ext],</span><br><span class="line">            <span class="string">&#x27;rate&#x27;</span>: str(rate),</span><br><span class="line">            <span class="string">&#x27;speech&#x27;</span>: base64.b64encode(audio_data),</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        signiture = signify(args, self.app_key)</span><br><span class="line">        args[<span class="string">&#x27;sign&#x27;</span>] = signiture</span><br><span class="line">        resp = http_post(self.api_url, args)</span><br><span class="line">        print(resp)</span><br><span class="line">        text = resp[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;text&#x27;</span>].encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># if DE<span class="doctag">BUG:</span></span></span><br><span class="line">        <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">asr_engine = BasicASR()</span><br><span class="line">text = asr_engine.stt(sys.argv[<span class="number">1</span>])</span><br><span class="line">print(text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="xfyun-py"><a href="#xfyun-py" class="headerlink" title="xfyun.py"></a>xfyun.py</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> id_key</span><br><span class="line">app_id = id_key.dic[<span class="string">&#x27;xfyun&#x27;</span>][<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">api_key = id_key.dic[<span class="string">&#x27;xfyun&#x27;</span>][<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://api.xfyun.cn/v1/service/v1/iat&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    f = open(argv[<span class="number">1</span>], <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    file_content = f.read()</span><br><span class="line">    base64_audio = base64.b64encode(file_content)</span><br><span class="line">    body = urllib.parse.urlencode(&#123;<span class="string">&#x27;audio&#x27;</span>: base64_audio&#125;).encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    param = &#123;<span class="string">&quot;engine_type&quot;</span>: <span class="string">&quot;sms16k&quot;</span>, <span class="string">&quot;aue&quot;</span>: <span class="string">&quot;raw&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    param_str = json.dumps(param)</span><br><span class="line">    param_utf8 = param_str.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>).encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    param_b64 = base64.b64encode(param_utf8)</span><br><span class="line">    param_b64str = param_b64.decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    x_time = str(int(time.time()))</span><br><span class="line">    checksum = (api_key + x_time + param_b64str).encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    x_checksum = hashlib.md5(checksum).hexdigest()</span><br><span class="line">    x_header = &#123;<span class="string">&#x27;X-Appid&#x27;</span>: app_id,</span><br><span class="line">                <span class="string">&#x27;X-CurTime&#x27;</span>: x_time,</span><br><span class="line">                <span class="string">&#x27;X-Param&#x27;</span>: param_b64str,</span><br><span class="line">                <span class="string">&#x27;X-CheckSum&#x27;</span>: x_checksum&#125;</span><br><span class="line"></span><br><span class="line">    req = urllib.request.Request(url, data=body, headers=x_header)</span><br><span class="line">    response = urllib.request.urlopen(req)</span><br><span class="line">    result = response.read().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    dic = json.loads(result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> dic[<span class="string">&#x27;data&#x27;</span>] != <span class="string">&quot;&quot;</span>:</span><br><span class="line">        print(dic[<span class="string">&#x27;data&#x27;</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(result)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(sys.argv)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>如何从 Toutube 同时下载视频并批量嵌入其字幕</title>
    <url>/cn/How-to-download-videos-concurrently-from-youtube-and-batch-embed-their-subtitles/</url>
    <content><![CDATA[<p>我要做的全部事情就是下载一些课程，这些课程在 youtube 上对我有很大帮助，并在视频中嵌入 Zh-Hans 字幕，然后将其提交到不支持外部字幕的中文网站。</p>
<p>这个东西可以帮助那些英语说得不好并且无法访问 youtube 的中国学生。</p>
<a id="more"></a>

<h2 id="Youtube-dl-config"><a href="#Youtube-dl-config" class="headerlink" title="Youtube-dl config"></a>Youtube-dl config</h2><p>文件路径是 <code>~/.config/youtube-dl/config</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--o <span class="string">&#x27;%(playlist_index)02ds - %(title)s.%(ext)s&#x27;</span></span><br><span class="line">--no-mtime</span><br><span class="line">--proxy socks5://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line">--ignore-errors</span><br><span class="line"></span><br><span class="line">-f bestvideo[height&lt;=?1080]+bestaudio/best</span><br><span class="line"></span><br><span class="line">--merge-output-format <span class="string">&#x27;mkv&#x27;</span></span><br><span class="line"></span><br><span class="line">--write-auto-sub --sub-lang <span class="string">&#x27;zh-Hans&#x27;</span></span><br><span class="line"></span><br><span class="line">--convert-subs <span class="string">&#x27;ass&#x27;</span></span><br><span class="line"></span><br><span class="line">--embed-subs</span><br></pre></td></tr></table></figure>

<h2 id="同时下载"><a href="#同时下载" class="headerlink" title="同时下载"></a>同时下载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">playlist=<span class="string">&#x27;https://www.youtube.com/playlist?list=...&#x27;</span></span><br><span class="line">num=70</span><br><span class="line">i=1</span><br><span class="line"><span class="keyword">while</span> ((<span class="variable">$i</span> &lt;= <span class="variable">$num</span>))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    end=$(( i+<span class="number">1</span> ))</span><br><span class="line">    youtube-dl --playlist-start <span class="variable">$i</span> --playlist-end <span class="variable">$end</span> <span class="variable">$playlist</span> &gt; <span class="string">&quot;log-<span class="variable">$i</span>-<span class="variable">$end</span>.txt&quot;</span>  2&gt;&amp;1  &amp;</span><br><span class="line">    i=$((<span class="variable">$end</span>+<span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="批量翻译文件名"><a href="#批量翻译文件名" class="headerlink" title="批量翻译文件名"></a>批量翻译文件名</h2><p>下载列表中的所有视频后，用</p>
<p><code>ls | grep mkv | sed &quot;s/\.mkv//&quot;</code></p>
<p>然后复制并粘贴到 Google 以获取翻译后的文本，然后将其保存到 <code>zh.txt</code></p>
<h2 id="批量嵌入字幕"><a href="#批量嵌入字幕" class="headerlink" title="批量嵌入字幕"></a>批量嵌入字幕</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmp=<span class="string">&quot;tmp.mkv&quot;</span></span><br><span class="line">mkdir -p embedSub</span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> *.mkv; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">read</span> -r zh &lt;&amp;3</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$f</span>\n<span class="variable">$zh</span>&quot;</span></span><br><span class="line">  <span class="comment"># ass=&quot;$( echo $f | sed &#x27;s/\.mkv//&#x27;).zh-Hans.ass&quot;</span></span><br><span class="line">  cp <span class="variable">$f</span> <span class="variable">$tmp</span></span><br><span class="line">  ffmpeg -nostats -loglevel 24 -n -i <span class="variable">$tmp</span> -vf subtitles=<span class="variable">$tmp</span> <span class="string">&quot;embedSub/<span class="variable">$zh</span>.mkv&quot;</span>;</span><br><span class="line"><span class="keyword">done</span> 3&lt;zh.txt</span><br><span class="line"></span><br><span class="line">rm <span class="variable">$tmp</span></span><br></pre></td></tr></table></figure>

<p>在 Intel Core i7 上，我通常花了一整夜的时间来录制 20 个视频，而一个小时的视频需要 20 分钟才能嵌入其字幕。</p>
]]></content>
      <tags>
        <tag>youtube</tag>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>带有 Staxrip 的 CUDA GPU 加速了 h264 / h265 / HEVC 视频编码</title>
    <url>/cn/CUDA-GPU-Accelerated-h264-h265-HEVC-Video-Encoding-with-Staxrip/</url>
    <content><![CDATA[<p>游戏改变了我的生活。</p>
<p>我去过很多年的城市，这些城市曾经有过刺客信条系列的旅行，其中有“睡狗 2”，“ GTA”等等。<br>当我真正进入现实世界时，它会产生很大的影响。因此，每次回去时，总是想在游戏中体验一次。</p>
<a id="more"></a>

<p>但是，随着年龄越来越大 👴，我玩游戏的时间也越来越少 👱。</p>
<p>我在演奏 📹 时正在录制 🎮，这可能是个好主意。</p>
<h2 id="ShadowPlay"><a href="#ShadowPlay" class="headerlink" title="ShadowPlay"></a>ShadowPlay</h2><p>由于我有技嘉 Geforce GTX 1080 可以训练深度学习模型，所以我唯一需要的就是 Nvidia ShadowPlay，它非常适合录制游戏。</p>
<p>但是最小比特率是 10Mbps，我想将其降低到 6kbps 以下，因此涉及压缩 🗜️。</p>
<h2 id="Staxrip"><a href="#Staxrip" class="headerlink" title="Staxrip"></a>Staxrip</h2><p>我以前总是使用 FFmpeg，但是每次听到 Macbook 的声音时，都会感到慌张，通常花一整夜时间来转换批处理视频。</p>
<p>幸运的是，这次我看到了 Cuda 徽标，这提醒了 GPU 的加速。</p>
<p>然后我发现了<a href="https://github.com/stax76/staxrip">staxrip</a>，真是不可思议。</p>
<ol>
<li>单击 <strong>x264</strong>，选择 <strong>NVIDIA H.265</strong>（我在我的 1080 上测试，它的速度与 NVIDIA H.264 相似，我曾经认为 264 应该比 265 快得多），然后它可以使用 GPU 加速。</li>
<li>单击<code>编码器选项</code>，将模式更改为 <code>VBR</code>，然后出现“视频比特率”。</li>
</ol>
<p>CPU 40％，GPU 35％时可以达到 250 帧/秒。</p>
]]></content>
      <tags>
        <tag>CUDA GPU</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native &amp; Flutter</title>
    <url>/cn/React-Native-Flutter/</url>
    <content><![CDATA[<p>已经有很多利弊。</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th>Pros</th>
<th>Cons</th>
</tr>
</thead>
<tbody><tr>
<td align="left">React Native</td>
<td>Hot Reloading<br />Online Hot Fixing <br />Front-End friendly<br />Cross platform<br />Fix once<br /></td>
<td>JavaScript<br />Native UI knowledge on both platform<br />Debugging<br /></td>
</tr>
<tr>
<td align="left">Flutter</td>
<td>Flutter Engine<br />Cross platform<br />Same UX &amp; UI<br /></td>
<td>Learn Dart<br />Unstable (1.0 released)<br />Ugly Code Style <br />iOS 13?<br />Debugging<br /></td>
</tr>
<tr>
<td align="left">Native</td>
<td>iOS Part<br />Much easier<br />AutoLayout, Storyboard<br />Swift, write less and do more<br />SpriteKit, UIDynamic</td>
<td>Three developers(fontend, iOS, android) triple budgets</td>
</tr>
</tbody></table>
<a id="more"></a>

<p>作为一个愉快地遵循  步骤的 iOS 开发人员，当我涉足 iOS 开发人员之初，便使用了 Swift，Storyboard 和 AutoLayout。</p>
<p>我认为这就是为什么大多数本机开发人员甚至都不愿意学习 React Native 的原因。</p>
<p>两年前，我建立了 Mattermost 并在以前的公司中进行了一些更改以取代 Slack，这是我接触的第一个 React Native 项目。</p>
<p>不幸的是，丢失代码非常容易，而且每次我想更改某些内容时，我都必须搜索整个项目，没有 Storyboard 让我知道谁告诉谁。</p>
<p>我和我以前的同事聊天，后者是高级前端。他帮助我启动了更新服务器，该服务器也是用 Node.js 编写的。我离开时将这个项目移交给他。</p>
<p>据他介绍，这是因为他不知道如何编写本机代码，就像 React React 类似于 React.js 一样，为什么不使用它同时尝试 iOS 和 Android。然后我问他是否知道如何快速发展，他会喜欢哪种技术。您可以猜出答案 😄。</p>
<p>因为从我的角度来看，有时即使在快速代码中也难以实现功能，这绝对是另一项技术要实现的漫长的路要走。</p>
<p>然后，这几天有机会进行一个演示，其中包含嵌套的磁铁滚动视图，按钮和导航。我不再使用本机代码，而是走出舒适区，尝试使用 React Native 和 Flutter。</p>
<ul>
<li>Views<ul>
<li>ListView, ScrollView, Labels, Texts, TextFields</li>
</ul>
</li>
<li>Actions<ul>
<li>Drag, Click, Scroll</li>
<li>Callback Block or Delegate on view events</li>
</ul>
</li>
</ul>
<p>因此，如果您精通其中任何一种，剩下的就是 Google 如何在该框架中实现它或阅读其手册。</p>
<h2 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h2><p>React Native 令人印象深刻的是 <strong>state</strong></p>
<p>它可以通过 Swift 中的变量的<code>didSet</code>来实现，还有很多框架可以做到，例如 RxSwift，PromiseKit</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> state: <span class="type">Any</span> &#123;</span><br><span class="line">    <span class="keyword">didSet</span> &#123;</span><br><span class="line">        updateViews()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h2><p>我曾经很好奇某些应用程序 UX 非常像由本机开发的，但以某种方式感到怪异。现在我知道它在颤抖。</p>
<ul>
<li>这是我第一次编写一次并获得两个应用程序（使用 Android 设置 React Native 时遇到了很多麻烦）</li>
<li>0.9 在热装上有错误</li>
<li>在 Visual Studio Code 上的开发相当不错，这让我回想起 Golang 的过去</li>
<li>丑陋的代码风格（他们对此很认真吗？这是一个官方示例）</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroAnimation</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    timeDilation = <span class="number">5.0</span>; <span class="comment">// 1.0 means normal animation speed.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&#x27;Basic Hero Animation&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: PhotoHero(</span><br><span class="line">          photo: <span class="string">&#x27;images/flippers-alpha.png&#x27;</span>,</span><br><span class="line">          width: <span class="number">300.0</span>,</span><br><span class="line">          onTap: () &#123;</span><br><span class="line">            Navigator.of(context).push(MaterialPageRoute&lt;<span class="keyword">void</span>&gt;(</span><br><span class="line">              builder: (BuildContext context) &#123;</span><br><span class="line">                <span class="keyword">return</span> Scaffold(</span><br><span class="line">                  appBar: AppBar(</span><br><span class="line">                    title: <span class="keyword">const</span> Text(<span class="string">&#x27;Flippers Page&#x27;</span>),</span><br><span class="line">                  ),</span><br><span class="line">                  body: Container(</span><br><span class="line">                    <span class="comment">// The blue background emphasizes that it&#x27;s a new route.</span></span><br><span class="line">                    color: Colors.lightBlueAccent,</span><br><span class="line">                    padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">                    alignment: Alignment.topLeft,</span><br><span class="line">                    child: PhotoHero(</span><br><span class="line">                      photo: <span class="string">&#x27;images/flippers-alpha.png&#x27;</span>,</span><br><span class="line">                      width: <span class="number">100.0</span>,</span><br><span class="line">                      onTap: () &#123;</span><br><span class="line">                        Navigator.of(context).pop();</span><br><span class="line">                      &#125;,</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                );</span><br><span class="line">              &#125;</span><br><span class="line">            ));</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>无论如何，我真的给它留下了深刻的印象，它跳过了<code>本机组件</code>，并编写了自己的 2D 渲染引擎。比 React Native 天才得多。</p>
<p>因此，就我个人而言，我认为 Flutter 比 React Native 更具潜力。以及有许多公司回滚到本地。</p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>React Native</tag>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>SKEmitterNode in SpriteKit Scene sks</title>
    <url>/cn/SKEmitterNode-in-SpriteKit-Scene-sks/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/33lUmpg.gif" alt=""><br>iOS 上的粒子需要 SpriteKit。</p>
<a id="more"></a>

<ol>
<li>在项目中添加文件 MyScene.sks</li>
<li>将 SpriteKit 视图拖到情节提要中</li>
<li>将两个发射器拖到 <code>MyScene.sks</code> 中</li>
<li>设置发射器属性</li>
<li>在每个发射器上拖动要添加的动作</li>
</ol>
<p>我以前的理解是。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> node = <span class="type">SKEmitterNode</span>(fileNamed: <span class="string">&quot;Fire&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> scene = <span class="type">SKScene</span>(fileNamed: <span class="string">&quot;MyScene&quot;</span>)</span><br><span class="line">scene?.addChild(node)</span><br><span class="line"><span class="comment">// SKAction(...</span></span><br></pre></td></tr></table></figure>

<p>对我来说，令人惊讶的是 SpriteKit 可以像使用 Storyboard 一样具有类似的开发经验。</p>
<p>当我看到 Paul Hegarty ctrl 拖动按钮在他的班级进行编码时，我投降到 iOS Dev 的主要原因是 Storyboard。</p>
<p>棒极了！</p>
<p>另外，我看到了很多我以前通过代码设置的 UIDynamic 东西。</p>
<p>很高兴进行此简短的探索。</p>
<p><img src="https://i.imgur.com/LYmt4PZ.png" alt=""></p>
<p><img src="https://i.imgur.com/eL15HjC.png" alt=""></p>
<p><img src="https://i.imgur.com/PHiz4VU.png" alt=""></p>
<p><img src="https://i.imgur.com/qtYdAsH.png" alt=""></p>
]]></content>
      <tags>
        <tag>Xcode</tag>
        <tag>SpriteKit</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift 4 Snippets</title>
    <url>/cn/Swift-4-Snippets/</url>
    <content><![CDATA[<h3 id="ClassName-FileRW-VideoPlayer-VideoPicker-ExcelFilePicker-FileCrypto-dateFormatter-Notification-GradientView-ShowAlertController-LoadingView-AddAnchorConstraints"><a href="#ClassName-FileRW-VideoPlayer-VideoPicker-ExcelFilePicker-FileCrypto-dateFormatter-Notification-GradientView-ShowAlertController-LoadingView-AddAnchorConstraints" class="headerlink" title="ClassName, FileRW, VideoPlayer, VideoPicker, ExcelFilePicker, FileCrypto, dateFormatter, Notification, GradientView, ShowAlertController, LoadingView, AddAnchorConstraints"></a>ClassName, FileRW, VideoPlayer, VideoPicker, ExcelFilePicker, FileCrypto, dateFormatter, Notification, GradientView, ShowAlertController, LoadingView, AddAnchorConstraints</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSObjectProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> className: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">String</span>(describing: <span class="type">Self</span>.<span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">FileRW</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">readFile</span><span class="params">(<span class="number">_</span> url: URL?)</span></span> -&gt; <span class="type">Data?</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">saveFile</span><span class="params">(<span class="number">_</span> data: Data, name: String, ext: String)</span></span> -&gt; <span class="type">URL?</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">FileRW</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">readFile</span><span class="params">(<span class="number">_</span> url: URL?)</span></span> -&gt; <span class="type">Data?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url = url <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">try</span> <span class="type">Data</span>(contentsOf: url)</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;read encryted data err&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">saveFile</span><span class="params">(<span class="number">_</span> data: Data, name: String, ext: String)</span></span> -&gt; <span class="type">URL?</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tempDirectoryURL = <span class="type">NSURL</span>.fileURL(withPath: <span class="type">NSTemporaryDirectory</span>(), isDirectory: <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> targetURL = tempDirectoryURL.appendingPathComponent(<span class="string">&quot;\(name).\(ext)&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> data.write(to: targetURL)</span><br><span class="line">            <span class="keyword">return</span> targetURL</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">VideoPlayer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">playVideo</span><span class="params">(url: URL, view: UIView? = <span class="literal">nil</span>, playerViewController: AVPlayerViewController? = <span class="literal">nil</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> player = <span class="type">AVPlayer</span>(url: url)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> view = view &#123;</span><br><span class="line">            <span class="comment">//            let playerLayer = AVPlayerLayer(player: player)</span></span><br><span class="line">            <span class="comment">//            playerLayer.frame = view.bounds</span></span><br><span class="line">            <span class="comment">//            view.layer.addSublayer(playerLayer)</span></span><br><span class="line">            <span class="comment">//            player.play()</span></span><br><span class="line">			<span class="comment">// OR</span></span><br><span class="line">            <span class="keyword">let</span> avpvc = <span class="type">AVPlayerViewController</span>()</span><br><span class="line">            addChild(avpvc)</span><br><span class="line">            view.addOverlay(avpvc.view)</span><br><span class="line">            <span class="comment">//            avpvc.view.frame = view.bounds</span></span><br><span class="line">            <span class="comment">//            view.addSubview(avpvc.view)</span></span><br><span class="line">            avpvc.didMove(toParent: <span class="keyword">self</span>)</span><br><span class="line">            avpvc.player = player</span><br><span class="line">            avpvc.player?.play()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> avpvc = playerViewController &#123;</span><br><span class="line">            avpvc.player = player</span><br><span class="line">            avpvc.player?.play()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> avpvc = <span class="type">AVPlayerViewController</span>()</span><br><span class="line">            avpvc.player = player</span><br><span class="line">            <span class="keyword">self</span>.present(avpvc, animated: <span class="literal">true</span>) &#123;</span><br><span class="line">                avpvc.player?.play()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">VideoPicker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> imagePickerController: <span class="type">UIImagePickerController</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">openVideoPicker</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">generateThumbnail</span><span class="params">(<span class="number">_</span> url: URL?)</span></span> -&gt; <span class="type">UIImage?</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">VideoPicker</span> <span class="title">where</span> <span class="title">Self</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">openVideoPicker</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> delegate = <span class="keyword">self</span> <span class="keyword">as</span>? <span class="type">UINavigationControllerDelegate</span> &amp; <span class="type">UIImagePickerControllerDelegate</span> &#123;</span><br><span class="line">            imagePickerController.delegate = delegate</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        imagePickerController.navigationBar.tintColor = systemPinkColor</span><br><span class="line">        imagePickerController.videoQuality = .type640x480</span><br><span class="line">        imagePickerController.sourceType = .savedPhotosAlbum</span><br><span class="line">        imagePickerController.mediaTypes = [<span class="string">&quot;public.movie&quot;</span>]</span><br><span class="line">        imagePickerController.modalPresentationStyle = .overCurrentContext</span><br><span class="line">        show(imagePickerController, sender: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">generateThumbnail</span><span class="params">(<span class="number">_</span> url: URL?)</span></span> -&gt; <span class="type">UIImage?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url = url <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> asset = <span class="type">AVURLAsset</span>(url: url, options: <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">let</span> imgGenerator = <span class="type">AVAssetImageGenerator</span>(asset: asset)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> cgImage = <span class="keyword">try</span>? imgGenerator.copyCGImage(at: <span class="type">CMTime</span>(seconds: <span class="number">2</span>, preferredTimescale: <span class="number">60</span>) , actualTime: <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">UIImage</span>(cgImage: cgImage)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">FilePicker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">selectExcelFile</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">FilePicker</span> <span class="title">where</span> <span class="title">Self</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> excelDocumentTypes: [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;com.microsoft.Excel.xls&quot;</span>, <span class="string">&quot;org.openxmlformats.spreadsheetml.sheet&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">selectExcelFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> dpvc = <span class="type">UIDocumentPickerViewController</span> (documentTypes: excelDocumentTypes, <span class="keyword">in</span>: .<span class="keyword">import</span>)</span><br><span class="line">        dpvc.view.tintColor = systemPinkColor</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> delegate = <span class="keyword">self</span> <span class="keyword">as</span>? <span class="type">UIDocumentPickerDelegate</span> &#123;</span><br><span class="line">            dpvc.delegate = delegate</span><br><span class="line">        &#125;</span><br><span class="line">        present(dpvc, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">selectedUrl</span><span class="params">(<span class="number">_</span> urls: [URL])</span></span> -&gt; <span class="type">URL?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url = urls.first, <span class="keyword">let</span> vals = <span class="keyword">try</span>? url.resourceValues(forKeys: [.typeIdentifierKey]), <span class="keyword">let</span> id = vals.typeIdentifier,</span><br><span class="line">            excelDocumentTypes.<span class="built_in">contains</span>(id)</span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> url</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">FileCrypto</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">encrypt</span><span class="params">(<span class="number">_</span> data: Data, pw: String)</span></span> -&gt; <span class="type">Data</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">decrypt</span><span class="params">(<span class="number">_</span> data: Data, pw: String)</span></span> -&gt; <span class="type">Data?</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> pw = <span class="string">&quot;xxxx-xxxx-xxxx&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">FileCrypto</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">encrypt</span><span class="params">(<span class="number">_</span> data: Data, pw: String)</span></span> -&gt; <span class="type">Data</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">RNCryptor</span>.encrypt(data: data, withPassword: pw)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">decrypt</span><span class="params">(<span class="number">_</span> data: Data, pw: String)</span></span> -&gt; <span class="type">Data?</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">try</span> <span class="type">RNCryptor</span>.decrypt(data: data, withPassword: pw)</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TimeInterval</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> yyyymmdd: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> date = <span class="type">Date</span>(timeIntervalSince1970: <span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">let</span> dateFormatter = <span class="type">DateFormatter</span>()</span><br><span class="line">        <span class="comment">//        dateFormatter.timeStyle = DateFormatter.Style.medium //Set time style</span></span><br><span class="line">        dateFormatter.dateStyle = <span class="type">DateFormatter</span>.<span class="type">Style</span>.medium <span class="comment">//Set date style</span></span><br><span class="line">        <span class="keyword">let</span> localDate = dateFormatter.string(from: date)</span><br><span class="line">        <span class="keyword">return</span> localDate</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data)</span></span> &#123;</span><br><span class="line"><span class="comment">//        self.enableRemoteNotificationFeatures()</span></span><br><span class="line"><span class="comment">//        self.forwardTokenToServer(token: deviceToken)</span></span><br><span class="line">    <span class="keyword">let</span> token = deviceToken.<span class="built_in">map</span> &#123; <span class="type">String</span>(format: <span class="string">&quot;%02.2hhx&quot;</span>, $<span class="number">0</span>) &#125;.joined()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;deviceToken: &quot;</span>, token)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">registerForPushNotifications</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="type">UNUserNotificationCenter</span>.current().requestAuthorization(options: [.alert, .sound, .badge]) &#123;</span><br><span class="line">        (granted, error) <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Permission granted: \(granted)&quot;</span>)</span><br><span class="line">        <span class="comment">// 1. Check if permission granted</span></span><br><span class="line">        <span class="keyword">guard</span> granted <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="comment">// 2. Attempt registration for remote notifications on the main thread</span></span><br><span class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">            <span class="type">UIApplication</span>.shared.registerForRemoteNotifications()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> CoreGraphics</span><br><span class="line"></span><br><span class="line"><span class="meta">@IBDesignable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GradientView</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IBInspectable</span> <span class="keyword">var</span> fromColor: <span class="type">UIColor</span> = .clear</span><br><span class="line">    <span class="meta">@IBInspectable</span> <span class="keyword">var</span> toColor: <span class="type">UIColor</span> = .clear &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            gradientOfView(colours: [fromColor, toColor])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSubviews</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.layoutSubviews()</span><br><span class="line"></span><br><span class="line">        gradientOfView(colours: [fromColor, toColor])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> grad = <span class="type">CAGradientLayer</span>()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">gradientOfView</span><span class="params">(colours: [UIColor])</span></span> &#123;</span><br><span class="line">        grad.removeFromSuperlayer()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> cgColours = [<span class="type">CGColor</span>]()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> colour <span class="keyword">in</span> colours &#123;</span><br><span class="line">            cgColours.append(colour.cgColor)</span><br><span class="line">        &#125;</span><br><span class="line">        grad.frame = bounds</span><br><span class="line">        grad.colors = cgColours</span><br><span class="line">        layer.addSublayer(grad)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">ShowAlertController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">ShowAlertController</span> <span class="title">where</span> <span class="title">Self</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">alert</span><span class="params">(<span class="number">_</span> title: String? = <span class="literal">nil</span>, <span class="number">_</span> message: String? = <span class="literal">nil</span>, sender: UIBarButtonItem? = <span class="literal">nil</span>, buttons: [ <span class="params">(title:String, handler: <span class="params">(<span class="params">()</span></span></span></span></span> -&gt; <span class="type">Void</span>)? )]? = <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> alertC = <span class="type">UIAlertController</span>(title: title, message: message, preferredStyle: .alert)</span><br><span class="line">        buttons?.forEach &#123; button <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">let</span> style = (button.handler == <span class="literal">nil</span> ? <span class="type">UIAlertAction</span>.<span class="type">Style</span>.cancel : .<span class="keyword">default</span>)</span><br><span class="line">            alertC.addAction(<span class="type">UIAlertAction</span>(title: button.title, style: style) &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">                button.handler?()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> popoverController = alertC.popoverPresentationController &#123;</span><br><span class="line">            popoverController.barButtonItem = sender</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.present(alertC, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">toast</span><span class="params">(<span class="number">_</span> message: String, delay: Double = <span class="number">1</span>, sender: UIBarButtonItem? = <span class="literal">nil</span>, completion: <span class="params">(<span class="params">()</span></span></span></span> -&gt; <span class="type">Void</span>)?) &#123;</span><br><span class="line">        <span class="keyword">let</span> alertC = <span class="type">UIAlertController</span>(title: <span class="literal">nil</span>, message: message, preferredStyle: .alert)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> popoverController = alertC.popoverPresentationController &#123;</span><br><span class="line">            popoverController.barButtonItem = sender</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.present(alertC, animated: <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">        <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: <span class="type">DispatchTime</span>.now() + delay) &#123;</span><br><span class="line">            alertC.dismiss(animated: <span class="literal">true</span>, completion: completion)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">LoadingView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> progressView: <span class="type">UIProgressView</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> coverView: <span class="type">UIView</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">LoadingView</span> <span class="title">where</span> <span class="title">Self</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">startLoading</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> v = coverView</span><br><span class="line"></span><br><span class="line">        v.backgroundColor = .white</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> pv = progressView</span><br><span class="line">        pv.progress = <span class="number">0</span></span><br><span class="line">        v.addConstraints(pv, l: <span class="number">0</span>, r: <span class="number">0</span>, t: navigationController?.navigationBar.bounds.height ?? <span class="number">0</span>, h: <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> aiv = <span class="type">UIActivityIndicatorView</span>(style: .gray)</span><br><span class="line">        aiv.startAnimating()</span><br><span class="line">        v.addConstraints(aiv, cx: <span class="number">0</span>, cy: <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        view.addOverlay(v)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">stopLoading</span><span class="params">()</span></span> &#123;</span><br><span class="line">        coverView.removeFromSuperview()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">addOverlay</span><span class="params">(<span class="number">_</span> subView: UIView)</span></span> &#123;</span><br><span class="line">        addConstraints(subView, l: <span class="number">0</span>, r: <span class="number">0</span>, t: <span class="number">0</span>, b: <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">addConstraints</span><span class="params">(<span class="number">_</span> subView: UIView, l:CGFloat? = <span class="literal">nil</span>, r: CGFloat? = <span class="literal">nil</span>, t: CGFloat? = <span class="literal">nil</span>, b:CGFloat? = <span class="literal">nil</span>, h: CGFloat? = <span class="literal">nil</span>, w: CGFloat? = <span class="literal">nil</span>, cx: CGFloat? = <span class="literal">nil</span>, cy: CGFloat? = <span class="literal">nil</span>)</span></span> &#123;</span><br><span class="line">        addSubview(subView)</span><br><span class="line">        subView.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line"><span class="comment">//        let margins = layoutMarginsGuide</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> l = l &#123;</span><br><span class="line">            subView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: l).isActive = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> r = r &#123;</span><br><span class="line">            subView.trailingAnchor.constraint(equalTo: trailingAnchor, constant: r).isActive = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> t = t &#123;</span><br><span class="line">            subView.topAnchor.constraint(equalTo: topAnchor, constant: t).isActive = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> b = b &#123;</span><br><span class="line">            subView.bottomAnchor.constraint(equalTo: bottomAnchor, constant: b).isActive = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> h = h &#123;</span><br><span class="line">            subView.heightAnchor.constraint(equalToConstant: h).isActive = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> w = w &#123;</span><br><span class="line">            subView.widthAnchor.constraint(equalToConstant: w).isActive = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> cx = cx &#123;</span><br><span class="line">            subView.centerXAnchor.constraint(equalTo: centerXAnchor, constant: cx).isActive = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> cy = cy &#123;</span><br><span class="line">            subView.centerYAnchor.constraint(equalTo: centerYAnchor, constant: cy).isActive = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Swift</tag>
        <tag>Autolayout</tag>
      </tags>
  </entry>
  <entry>
    <title>Audio File to Text via SFSpeechRecognizer</title>
    <url>/cn/Audio-File-to-Text-via-SFSpeechRecognizer/</url>
    <content><![CDATA[<p>就像调用 API 一样，它比我想象的要容易得多（实际上是） 😄😄😄</p>
<h3 id="import-Speech"><a href="#import-Speech" class="headerlink" title="import Speech"></a><a href="https://developer.apple.com/documentation/speech/sfspeechrecognizer">import Speech</a></h3><h3 id="Info-plist"><a href="#Info-plist" class="headerlink" title="Info.plist"></a>Info.plist</h3><ul>
<li>Privacy - Microphone Usage Description</li>
<li>Privacy - Speech Recognition Usage Description</li>
</ul>
<h3 id="Authorization"><a href="#Authorization" class="headerlink" title="Authorization"></a>Authorization</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">SFSpeechRecognizer</span>.requestAuthorization &#123; authStatus <span class="keyword">in</span></span><br><span class="line">    <span class="type">OperationQueue</span>.main.addOperation &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">switch</span> authStatus &#123;</span><br><span class="line">        <span class="keyword">case</span> .notDetermined, .denied, .restricted:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;.notDetermined, .denied, .restricted&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> .authorized:</span><br><span class="line">            <span class="keyword">self</span>?.startRecognizeFile()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="SelectAudio"><a href="#SelectAudio" class="headerlink" title="SelectAudio"></a>SelectAudio</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protocol ShareText &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">extension ShareText where Self: UIViewController &#123;</span><br><span class="line">    func shareText(_ title: String, text: String) &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; set up activity view controller</span><br><span class="line">        let textToShare &#x3D; [text]</span><br><span class="line">        let activityViewController &#x3D; UIActivityViewController(activityItems: textToShare, applicationActivities: nil)</span><br><span class="line">        activityViewController.popoverPresentationController?.sourceView &#x3D; self.view &#x2F;&#x2F; so that iPads won&#39;t crash</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; exclude some activity types from the list (optional)</span><br><span class="line">        activityViewController.excludedActivityTypes &#x3D; [ UIActivity.ActivityType.airDrop, .message, .copyToPasteboard ]</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; present the view controller</span><br><span class="line">        self.present(activityViewController, animated: true, completion: nil)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SeletctAudio</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SeletctAudio</span> <span class="title">where</span> <span class="title">Self</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">selectAudio</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> types: [<span class="type">String</span>] = [<span class="string">&quot;public.movie&quot;</span>, <span class="string">&quot;public.audio&quot;</span>]</span><br><span class="line">        <span class="keyword">let</span> documentPicker = <span class="type">UIDocumentPickerViewController</span>(documentTypes: types, <span class="keyword">in</span>: .<span class="keyword">import</span>)</span><br><span class="line">        documentPicker.delegate = <span class="keyword">self</span> <span class="keyword">as</span>? <span class="type">UIDocumentPickerDelegate</span></span><br><span class="line">        documentPicker.modalPresentationStyle = .formSheet</span><br><span class="line">        <span class="keyword">self</span>.present(documentPicker, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RecognizeFile"><a href="#RecognizeFile" class="headerlink" title="RecognizeFile"></a>RecognizeFile</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">RecognizeFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">RecognizeFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">recognizeFile</span><span class="params">(<span class="number">_</span> url: URL, completion: @escaping <span class="params">(Bool, Bool, String)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">self</span>.divide(url) &#123; urls <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">let</span> s = <span class="type">DispatchSemaphore</span>(value: <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">                urls.enumerated().forEach &#123; i, url <span class="keyword">in</span></span><br><span class="line">                    <span class="type">DispatchQueue</span>.global().async &#123;</span><br><span class="line">                        <span class="number">_</span> = s.wait(timeout: <span class="type">DispatchTime</span>.distantFuture)</span><br><span class="line">                        <span class="built_in">print</span>(url)</span><br><span class="line">                        <span class="keyword">self</span>.recognizeUrl(url) &#123; b, str <span class="keyword">in</span></span><br><span class="line">                            completion(b, urls.last == url, str)</span><br><span class="line">                            <span class="keyword">if</span> b &#123;</span><br><span class="line">                                <span class="built_in">print</span>(str)</span><br><span class="line">                                s.signal()</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">recognizeUrl</span><span class="params">(<span class="number">_</span> url: URL, completion: @escaping <span class="params">(Bool, String)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> myRecognizer = <span class="type">SFSpeechRecognizer</span>(locale: <span class="type">Locale</span>(identifier: <span class="string">&quot;zh_CN&quot;</span>)) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// A recognizer is not supported for the current locale</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> !myRecognizer.isAvailable &#123;</span><br><span class="line">            <span class="comment">// The recognizer is not available right now</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> request = <span class="type">SFSpeechURLRecognitionRequest</span>(url: url)</span><br><span class="line">        <span class="comment">//        request.shouldReportPartialResults = true</span></span><br><span class="line">        myRecognizer.recognitionTask(with: request) &#123; (result, error) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> result = result <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Recognition failed, so check error for details and handle it</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;err: &quot;</span>, error.debugDescription)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Print the SpeechTester that has been recognized so far</span></span><br><span class="line">            <span class="comment">//            if result.isFinal &#123;</span></span><br><span class="line">            <span class="keyword">let</span> str = result.bestTranscription.formattedString</span><br><span class="line">            <span class="type">OperationQueue</span>.main.addOperation &#123;</span><br><span class="line">                completion(result.isFinal, str)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//            &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(<span class="number">_</span> url: URL, completion: @escaping <span class="params">([URL])</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> asset = <span class="type">AVURLAsset</span>(url: url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> n = <span class="type">Int</span>(<span class="type">CMTimeGetSeconds</span>(asset.duration) / <span class="number">60</span>)</span><br><span class="line">        <span class="keyword">var</span> urls = <span class="type">Array</span>(repeating: <span class="type">URL</span>(string: <span class="string">&quot;&quot;</span>), <span class="built_in">count</span>: n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> group = <span class="type">DispatchGroup</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...n &#123;</span><br><span class="line">            group.enter()</span><br><span class="line">            exportAsset(asset, start: i) &#123; url <span class="keyword">in</span></span><br><span class="line">                urls[i] = url</span><br><span class="line">                group.leave()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        group.notify(queue: .main) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;divide complete&quot;</span>)</span><br><span class="line">            completion(urls.<span class="built_in">compactMap</span>(&#123;$<span class="number">0</span>&#125;))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">exportAsset</span><span class="params">(<span class="number">_</span> asset: AVAsset, start: Int, completion: @escaping <span class="params">(URL?)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\(#function)&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> documentsDirectory = <span class="type">FileManager</span>.<span class="keyword">default</span>.urls(<span class="keyword">for</span>: .documentDirectory, <span class="keyword">in</span>: .userDomainMask)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">let</span> tmpFolder = documentsDirectory.appendingPathComponent(<span class="string">&quot;tmp/&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>? <span class="type">FileManager</span>.<span class="keyword">default</span>.createDirectory(at: tmpFolder, withIntermediateDirectories: <span class="literal">true</span>, attributes: <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">let</span> trimmedSoundFileURL = documentsDirectory.appendingPathComponent(<span class="string">&quot;tmp/\(start).m4a&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;saving to \(trimmedSoundFileURL.absoluteString)&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="type">FileManager</span>.<span class="keyword">default</span>.fileExists(atPath: trimmedSoundFileURL.path) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;sound exists, removing \(trimmedSoundFileURL.absoluteString)&quot;</span>)</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">try</span> trimmedSoundFileURL.checkResourceIsReachable() &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;is reachable&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> <span class="type">FileManager</span>.<span class="keyword">default</span>.removeItem(atPath: trimmedSoundFileURL.path)</span><br><span class="line">            &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;could not remove \(trimmedSoundFileURL)&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(error.localizedDescription)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;creating export session for \(asset)&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> exporter = <span class="type">AVAssetExportSession</span>(asset: asset, presetName: <span class="type">AVAssetExportPresetAppleM4A</span>) &#123;</span><br><span class="line">            exporter.outputFileType = <span class="type">AVFileType</span>.m4a</span><br><span class="line">            exporter.outputURL = trimmedSoundFileURL</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> duration = <span class="type">CMTimeGetSeconds</span>(asset.duration)</span><br><span class="line">            <span class="keyword">if</span> duration &lt; <span class="number">5.0</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;sound is not long enough&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// e.g. the first 5 seconds</span></span><br><span class="line">            <span class="keyword">let</span> startTime = <span class="type">CMTime</span>(seconds: <span class="type">Double</span>(start*<span class="number">60</span>), preferredTimescale: <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">let</span> stopTime = <span class="type">CMTime</span>(seconds: <span class="type">Double</span>(start+<span class="number">1</span>)*<span class="number">60</span>, preferredTimescale: <span class="number">1</span>)</span><br><span class="line">            exporter.timeRange = <span class="type">CMTimeRangeFromTimeToTime</span>(start: startTime, end: stopTime)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// do it</span></span><br><span class="line">            exporter.exportAsynchronously(completionHandler: &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;export complete \(exporter.status)&quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">switch</span> exporter.status &#123;</span><br><span class="line">                <span class="keyword">case</span>  .failed, .cancelled:</span><br><span class="line">                    completion(<span class="literal">nil</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;export \(String(describing: exporter.error))&quot;</span>)</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    completion(trimmedSoundFileURL)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;export complete&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            completion(<span class="literal">nil</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;cannot create AVAssetExportSession for asset \(asset)&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>SFSpeechRecognizer</tag>
      </tags>
  </entry>
  <entry>
    <title>反馈</title>
    <url>/cn/Feedback/</url>
    <content><![CDATA[<p>我们在一万年前的 第 24 节 <a href="https://leihao0.github.io/Feedback/">高阶圣堂法师</a> 中提到过如何进阶</p>
<p>其实除了魔法的提升以外， Senior 还有一项神奇的技能</p>
<p>——反馈</p>
<p>此法先予以对方肯定（pengsha）<br>然后委婉指出有待加强的地方（quedian)<br>最终达到把对方的法力值清零的效果</p>
<a id="more"></a>

<hr>
<p>纵观小法师几个较 Senior 的盆友们<br>也是拖拖拖拖拖拖拖拖拖拖拖拖拖拖拖拖拖拖拖到死线 来临<br>才会施展此法</p>
<p>这么看来，反馈确实属于一项高阶技能</p>
<p>可惜我们的小法师处于并且长期处于 Junior 阶段</p>
<p>再加上如下两项原因：</p>
<ol>
<li>垃圾口语</li>
<li>社交恐惧</li>
</ol>
<p>反馈便成了小法师无法逾越的障碍</p>
<hr>
<p>某天下午小法师正在发愁死线疯狂的摄入咖啡<br>在咖啡因的作用下，突发奇想<br>虽然自己比较弱<br>但也不代表完全无法召唤神龙</p>
<p>比如 炼丹术（shenduxuexi) 里的 RNN 就非常适合现在的情况</p>
<h2 id="炼丹"><a href="#炼丹" class="headerlink" title="炼丹"></a>炼丹</h2><p>说到炼丹，最早还挺神秘兮兮的<br>只有少部分法师了解其中的奥秘</p>
<p>小法师在不明真相的情况下<br>刷掉了 Andrew Ng 在 Coursera 的 ML 课程并且买了证书 📄 以示清白<br>虽然早就忘光了，但还是多多少少有些概念</p>
<p>并且如今已经 9012 年了<br>已经简化到只要无脑准备材料就可以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir feedback</span><br><span class="line">cd feedback</span><br><span class="line">mkdir -p datasets weights outputs</span><br></pre></td></tr></table></figure>

<p>小法师先搜了下，发现了 <a href="https://status.net/articles/performance-review-phrases-examples/">phrases examples</a></p>
<p>就无脑把内容 Copy 到 <code>datasets/data.txt</code> 里</p>
<p>然后过滤出 正反馈 和 负反馈</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> datasets</span><br><span class="line"></span><br><span class="line">cat data.txt | grep ✓ | sed <span class="string">&#x27;s/✓ //&#x27;</span> &gt; 👍.txt</span><br><span class="line">cat data.txt | grep ✗ | sed <span class="string">&#x27;s/✗ //&#x27;</span> &gt; 👎.txt</span><br></pre></td></tr></table></figure>

<p>材料准备好后，就可以搭丹炉了</p>
<p>小法师找了下，感觉 <a href="https://github.com/minimaxir/textgenrnn">textgenrnn</a> 不错，简单易懂</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">pip3 install -I textgenrnn tensorflow</span><br></pre></td></tr></table></figure>

<p>设置好炼丹步骤</p>
<p>开炼</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python3 training.py</span></span><br><span class="line">from textgenrnn import textgenrnn</span><br><span class="line"></span><br><span class="line">textgen = textgenrnn()</span><br><span class="line"></span><br><span class="line">textgen.train_from_file(<span class="string">&#x27;datasets/👍.txt&#x27;</span>, num_epochs=1)</span><br><span class="line">textgen.save(<span class="string">&#x27;weights/👍.hdf5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">textgen.train_from_file(<span class="string">&#x27;datasets/👎.txt&#x27;</span>, num_epochs=1)</span><br><span class="line">textgen.save(<span class="string">&#x27;weights/👎.hdf5&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>然后小法师的 MBP 的 CPU 疯转，迸出了欢乐的花火 🎆</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Instructions for updating:</span><br><span class="line">Use tf.where in 2.0, which has the same broadcast rule as np.where</span><br><span class="line">Epoch 1&#x2F;1</span><br><span class="line">328&#x2F;559 [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;.............] - ETA: 36s - loss: 1.2788</span><br></pre></td></tr></table></figure>

<p>载入练好的 🥚 看看</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python3 testing.py</span></span><br><span class="line"><span class="keyword">from</span> textgenrnn <span class="keyword">import</span> textgenrnn</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;👍&#x27;</span>)</span><br><span class="line">textgenrnn(<span class="string">&#x27;weights/👍.hdf5&#x27;</span>).generate_samples(prefix=<span class="string">&quot;He&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;👎&#x27;</span>)</span><br><span class="line">textgenrnn(<span class="string">&#x27;weights/👎.hdf5&#x27;</span>).generate_samples(prefix=<span class="string">&quot;He&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>emmmmmmmmmmmm</p>
<p>然鹅 结果十分辣眼睛 💔💔💔</p>
<p><img src="https://i.imgur.com/RT2msrl.gif" alt=""></p>
<hr>
<p>计划不通</p>
<p>没有继续实验<br>但增加 epochs 或 layers 或许会有提高</p>
<p>Repo: <a href="https://github.com/leihao0/feedback">Feedback</a></p>
<p>但：</p>
<blockquote>
<p>肯定是数据量不够</p>
</blockquote>
<p>小法师斩钉截铁的说到</p>
<p>😠😠😠</p>
]]></content>
      <tags>
        <tag>LittleMaster</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Grab 内推</title>
    <url>/cn/Grab-refer-a-candidate/</url>
    <content><![CDATA[<p>已经入职一段时间了，说下感受吧</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>正常上下班（没有 996 或 007，北京 Office 也没有）</li>
<li>每月可以 Remote 一两天（看组）</li>
<li>多文化（哪国人都有啦）</li>
<li>中英文环境（华人蛮多的）</li>
<li>全球 Office （一年后可以内部 Transfer）</li>
<li>18 天年假，3 天探亲假</li>
<li>其他的我忘了</li>
</ul>
<p>整体来说中规中矩偏上的一家公司吧</p>
<a id="more"></a>

<h2 id="招聘"><a href="#招聘" class="headerlink" title="招聘"></a>招聘</h2><p>最近 Food Team 在疯狂扩招，HC 很多<br>不知道其他岗位，Engineer 的话</p>
<ul>
<li>准备下口语</li>
<li>刷刷算法</li>
<li>梳理下做过的 Project</li>
<li>态度好一点</li>
</ul>
<p>进来的概率蛮大的</p>
<p>大陆护照直接去坡县需要 EP<br>公司会帮办，大概要一两个月<br>所以不用担心，放心面试就好</p>
<p>如果感觉坡县陋死了热死了不想去的可以看看北京的<br>在海淀区科学院南路这边</p>
<p>如果持有非大陆护照，也可以看看 美帝 的，在西雅图</p>
<p>所有职位都在这里 👇：<br><a href="https://grab.careers/">https://grab.careers/</a><br>搜一下自己感兴趣的 团队 和 国家<br>邮件 📧CV（记得发英文的额）给楼主</p>
<h2 id="内推"><a href="#内推" class="headerlink" title="内推"></a>内推</h2><p>需要在内部系统填一个详细的表格<br>并不是点个转发扔给 HR 就完事了<br>所以邮件 📧 我时，希望格式如下：</p>
<p>邮件名称:</p>
<blockquote>
<p>V2-Grab-Position-Location<br>如: V2-Grab-Backend Engineer-Singapore</p>
</blockquote>
<p>邮件内容:</p>
<blockquote>
<p>Country:<br>Given Name:<br>Family Name:</p>
</blockquote>
<blockquote>
<p>Country Phone Code: （中国的是 86 啦）<br>Phone Number:<br>Email:</p>
</blockquote>
<blockquote>
<p>Jobs Title:</p>
</blockquote>
<p>选填：</p>
<blockquote>
<p>Comments( 你为啥推荐他呀？｜他的优势是？)</p>
</blockquote>
<blockquote>
<p>LinkedIn URL:<br>Twitter User Name:<br>Facebook URL:<br>Google+ URL:</p>
</blockquote>
<blockquote>
<p>City:<br>Postal Code:</p>
</blockquote>
<blockquote>
<p>附件 📎 CV</p>
</blockquote>
<hr>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>发送到：<br>leihao.sg {AT} gmail {dot} com</p>
<hr>
<p>楼主知道你们有很多想问的<br>并且奇怪为什么不留公司邮箱</p>
<p>所以可以参考下楼主的 Blog<br>至少别把楼主当骗子</p>
<p>另外楼主只是个底层扫地 🧹 的，不是 HR<br>所以无法回答各种花式问题<br>还请见谅</p>
<p>问题可以留着等 CV 过了问 HR，或面试官<br>他们比楼主专业</p>
<p>最后的最后<br>如果通过啦入职啦转正啦，邮件我个感谢 🙏 就好</p>
<p>总之楼主有社交恐惧症<br>不要来找我 233</p>
]]></content>
      <tags>
        <tag>refer</tag>
      </tags>
  </entry>
  <entry>
    <title>优步预订动画</title>
    <url>/cn/Uber-Booking-Animation/</url>
    <content><![CDATA[<p>今年 6 月，我在圣何塞加入 WWDC，那是我在使用 Uber 在库比蒂诺图书馆与朋友见面时看到的等待动画。</p>
<p>动画令人敬畏！</p>
<p>我很好奇他们是如何做到的，所以我做了一些探索。</p>
<h2 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h2><video width="360" autoplay loop muted="true" >
<source type="video/mp4" src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/UberBookingAnimation.mp4">
</video>

<p>好吧，折线动画仍然不够流畅。有谁有更好的主意吗？</p>
<a id="more"></a>

<h2 id="一步步"><a href="#一步步" class="headerlink" title="一步步"></a>一步步</h2><h3 id="旋转地图"><a href="#旋转地图" class="headerlink" title="旋转地图"></a>旋转地图</h3><p>由于以下两个原因，我选择 Map 作为要演示的默认地图：</p>
<ul>
<li>WWDC19 之后，Simulator 在 MapKit 包括的所有 Apple 框架下的 Meta，Core 层之上构建，Metal 利用底层 Mac 系统的 GPU</li>
<li>Google Map 需要开发人员密钥才能访问，这意味着从 GitHub 分叉存储库后，您无法直接在模拟器上运行它</li>
</ul>
<p> 可以通过嵌入在<code>UIView.animate</code>块中来调整地图交易</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">UIView</span>.animate(withDuration: <span class="number">1</span>, delay: <span class="number">0</span>, options: .curveEaseInOut, animations: &#123;  [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">self</span>?.mapView.setCamera(<span class="type">MKMapCamera</span>(lookingAtCenter: center, fromDistance: fromDistance, pitch: pitch, heading: <span class="number">0</span>), animated: <span class="literal">true</span>)</span><br><span class="line">&#125;) &#123; b <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">self</span>.pinAnimation()</span><br><span class="line">    <span class="type">UIView</span>.animate(withDuration: <span class="number">180</span>, delay: <span class="number">0</span>, options: [.curveLinear, .autoreverse], animations: &#123;  [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">self</span>?.mapView.setCamera(<span class="type">MKMapCamera</span>(lookingAtCenter: center, fromDistance: fromDistance, pitch: pitch, heading: heading), animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;, completion: <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Google Map 必须使用 <code>CATransaction</code></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">CATransaction</span>.begin()</span><br><span class="line"><span class="type">CATransaction</span>.setValue(<span class="type">NSNumber</span>(float: <span class="number">1.0</span>), forKey: kCATransactionAnimationDuration)</span><br><span class="line"><span class="comment">// change the camera, set the zoom, whatever.</span></span><br><span class="line"><span class="type">CATransaction</span>.commit()</span><br></pre></td></tr></table></figure>

<h3 id="固定动画"><a href="#固定动画" class="headerlink" title="固定动画"></a>固定动画</h3><p>我们需要两个<code>CAShapeLayer</code>来制作动画，一个用于圆圈，另一个用于图钉。<br>请注意，圆达到最大值后会消失，并且销钉具有 <code>easyIn</code> 曲线。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//   Pin Animation</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MainViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setUpLayers</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        circleLayer.lineWidth = <span class="number">1.5</span></span><br><span class="line">        circleLayer.strokeColor = <span class="type">UIColor</span>.white.cgColor</span><br><span class="line">        circleLayer.fillColor = <span class="type">UIColor</span>.clear.cgColor</span><br><span class="line">        circleLayer.path = <span class="type">UIBezierPath</span>(ovalIn: circleView.bounds).cgPath</span><br><span class="line"></span><br><span class="line">        circleLayer.shadowColor = <span class="type">UIColor</span>.white.cgColor</span><br><span class="line"></span><br><span class="line">        pinLayer.fillColor = <span class="type">UIColor</span>.white.cgColor</span><br><span class="line">        pinLayer.path = <span class="type">UIBezierPath</span>(roundedRect: pinView.bounds, cornerRadius: <span class="number">1</span>).cgPath</span><br><span class="line">        pinLayer.opacity = <span class="number">0.9</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pinAnimation</span><span class="params">()</span></span> &#123;</span><br><span class="line">        setUpLayers()</span><br><span class="line"></span><br><span class="line">        circleView.layer.addSublayer(circleLayer)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.circleView.transform = <span class="type">CGAffineTransform</span>(scaleX: <span class="number">0.01</span>, y: <span class="number">0.01</span>)</span><br><span class="line">        <span class="keyword">self</span>.circleView.alpha = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="type">UIView</span>.animate(withDuration: <span class="number">2</span>, delay: <span class="number">0</span>, options: [.<span class="keyword">repeat</span>], animations: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">self</span>?.circleView.transform = <span class="type">CGAffineTransform</span>(scaleX: <span class="number">1</span>, y: <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">self</span>?.circleView.alpha = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        &#125;, completion: <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        pinView.layer.addSublayer(pinLayer)</span><br><span class="line">        <span class="type">UIView</span>.animate(withDuration: <span class="number">1</span>, delay: <span class="number">0</span>, options: [.curveEaseIn, .<span class="keyword">repeat</span>, .autoreverse], animations: &#123;  [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">self</span>?.pinView.transform = <span class="type">CGAffineTransform</span>(translationX: <span class="number">0</span>, y: -<span class="number">4</span>)</span><br><span class="line">            <span class="keyword">self</span>?.pinView.transform = <span class="type">CGAffineTransform</span>(scaleX: <span class="number">0.5</span>, y: <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;, completion: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在地图上绘制折线"><a href="#在地图上绘制折线" class="headerlink" title="在地图上绘制折线"></a>在地图上绘制折线</h3><p> 地图使用<code>MKMapViewDelegate</code>处理绘图。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">mapView</span><span class="params">(<span class="number">_</span> mapView: MKMapView, rendererFor overlay: MKOverlay)</span></span> -&gt; <span class="type">MKOverlayRenderer</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> overlay = overlay <span class="keyword">as</span>? <span class="type">MKPolyline</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> polyline = <span class="type">MKPolylineRenderer</span>(overlay: overlay)</span><br><span class="line">        polyline.strokeColor = .white</span><br><span class="line">        polyline.lineWidth = <span class="number">1.5</span></span><br><span class="line">        <span class="keyword">return</span> polyline</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="type">MKOverlayRenderer</span>(overlay: overlay)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是添加折线的方法</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> currentSegment = <span class="type">MKPolyline</span>(coordinates: subCoordinates, <span class="built_in">count</span>: subCoordinates.<span class="built_in">count</span>)</span><br><span class="line"><span class="keyword">self</span>.mapView.addOverlay(currentSegment)</span><br></pre></td></tr></table></figure>

<h3 id="动画折线"><a href="#动画折线" class="headerlink" title="动画折线"></a>动画折线</h3><p>那是棘手的部分。</p>
<p>当我们看到 Uber 的动画足够接近时，折线会随着地图旋转，从而在地图上绘制。</p>
<p>我要做的是继续在地图上添加和删除折线，以假装它是动画。<br>同样，当出现在图钉的开头和结尾处时，该行具有标题和尾部。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">animate</span><span class="params">(route: [CLLocationCoordinate2D], duration: TimeInterval, completion: <span class="params">(<span class="params">()</span></span></span></span> -&gt; <span class="type">Void</span>)? = <span class="literal">nil</span>) &#123;</span><br><span class="line">    <span class="keyword">guard</span> route.<span class="built_in">count</span> &gt; <span class="number">0</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> currentStep = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> delta = <span class="number">25</span>, opt = <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">let</span> totalSteps = route.<span class="built_in">count</span> + delta</span><br><span class="line">    <span class="keyword">let</span> stepDrawDur = duration / <span class="type">TimeInterval</span>(totalSteps) * opt</span><br><span class="line">    <span class="keyword">var</span> prePolyline: <span class="type">MKPolyline?</span></span><br><span class="line"></span><br><span class="line">    drawingTimer = <span class="type">Timer</span>.scheduledTimer(withTimeInterval: stepDrawDur, repeats: <span class="literal">true</span>) &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] timer <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">defer</span> &#123; completion?() &#125;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> <span class="keyword">self</span> = <span class="keyword">self</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            timer.invalidate()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> previous = prePolyline &#123;</span><br><span class="line">            <span class="keyword">self</span>.mapView.removeOverlay(previous)</span><br><span class="line">            prePolyline = <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> currentStep &gt; totalSteps &#123;</span><br><span class="line">            timer.invalidate()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> start = currentStep-delta &lt; <span class="number">0</span> ? <span class="number">0</span> : currentStep-delta</span><br><span class="line">        <span class="keyword">let</span> end = currentStep &gt; route.<span class="built_in">count</span> ? route.<span class="built_in">count</span> : currentStep</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> subCoordinates = <span class="type">Array</span>(route[start..&lt;end])</span><br><span class="line">        <span class="keyword">let</span> currentSegment = <span class="type">MKPolyline</span>(coordinates: subCoordinates, <span class="built_in">count</span>: subCoordinates.<span class="built_in">count</span>)</span><br><span class="line">        <span class="keyword">self</span>.mapView.addOverlay(currentSegment)</span><br><span class="line"></span><br><span class="line">        prePolyline = currentSegment</span><br><span class="line">        currentStep += <span class="type">Int</span>(opt)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里是 <a href="https://github.com/leihao0/UberBookingAnimation">repository</a>, 如果您有更好的主意，请告诉我 :)</p>
<h4 id="更新资料"><a href="#更新资料" class="headerlink" title="更新资料"></a>更新资料</h4><p>好吧，由于屏幕刷新率为 60 fps，因此它应该使总步数/持续时间 ≈ 60</p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>MapKit</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用 Telegram 自动回复和发送味精</title>
    <url>/cn/How-to-auto-reply-send-msg-with-telegram/</url>
    <content><![CDATA[<p>作为男人，有很多原因必须在 59 秒内回复，否则，会发生一些不好的事情。</p>
<p>幸运的是，Telegram 提供了一个 API。</p>
<ol>
<li>在<a href="https://my.telegram.org/">此处</a>中获取您的开发者令牌，而不是机器人令牌</li>
<li>用安装 telethon <code>pip3</code></li>
<li>RTFM 使 py 起作用</li>
</ol>
<a id="more"></a>

<h2 id="Telethon"><a href="#Telethon" class="headerlink" title="Telethon"></a>Telethon</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install -U telethon --user</span><br></pre></td></tr></table></figure>

<p>在 Catalina 上，<code>import telethon</code>导入后将立即中止，而没有任何其他有用的日志，这使我整个下午都无法解决该问题</p>
<ul>
<li>我试图用 <code>pyenv</code> 切换 python 版本，不起作用</li>
<li>在 Ubuntu 上运行它，正常工作</li>
<li>终于在这里找到, <a href="https://stackoverflow.com/questions/58272830/python-crashing-on-macos-10-15-beta-19a582a-with-usr-lib-libcrypto-dylib">Python 在 macOS 10.15 上崩溃</a>, <code>OpenSSL</code> 失踪</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/Cellar/openssl/1.0.2t/lib</span><br><span class="line">sudo cp libssl.1.0.0.dylib libcrypto.1.0.0.dylib /usr/<span class="built_in">local</span>/lib/</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/lib</span><br><span class="line">mv libssl.dylib libssl_bak.dylib</span><br><span class="line">mv libcrypto.dylib libcrypto_bak.dylib</span><br><span class="line">sudo ln -s libssl.1.0.0.dylib libssl.dylib</span><br><span class="line">sudo ln -s libcrypto.1.0.0.dylib libcrypto.dylib</span><br></pre></td></tr></table></figure>

<h2 id="Auto-Reply"><a href="#Auto-Reply" class="headerlink" title="Auto Reply"></a>Auto Reply</h2><p><code>replyHer.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> telethon <span class="keyword">import</span> TelegramClient, events</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use your own values from my.telegram.org</span></span><br><span class="line">api_id = <span class="number">123456</span></span><br><span class="line">api_hash = <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">phone = <span class="string">&#x27;123456789&#x27;</span></span><br><span class="line"></span><br><span class="line">client = TelegramClient(<span class="string">&#x27;session&#x27;</span>, api_id, api_hash)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">greetings = [<span class="string">&#x27;ok&#x27;</span>, <span class="string">&#x27;cool&#x27;</span>, <span class="string">&#x27;😂&#x27;</span>, <span class="string">&#x27;em&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@client.on(events.NewMessage)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">handle_new_message</span>(<span class="params">event</span>):</span></span><br><span class="line"></span><br><span class="line">    from_user = <span class="keyword">await</span> event.client.get_entity(event.from_id)</span><br><span class="line">    <span class="keyword">if</span> from_user.phone == phone:</span><br><span class="line">        print(time.asctime(), <span class="string">&#x27;-&#x27;</span>, event.message)</span><br><span class="line">        <span class="comment"># tested on a real girl, she figured it out at the second reply</span></span><br><span class="line">        <span class="comment"># so randomly choose to reply within 5 - 59 seconds</span></span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(random.randrange(<span class="number">5</span>, <span class="number">59</span>))</span><br><span class="line">        <span class="keyword">if</span> random.choice([<span class="literal">True</span>, <span class="literal">False</span>]):</span><br><span class="line">            i, s = random.randrange(<span class="number">2</span>, <span class="number">5</span>), random.choice(greetings)</span><br><span class="line">            <span class="comment"># typing 2 - 5 seconds</span></span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> client.action(phone, <span class="string">&#x27;typing&#x27;</span>):</span><br><span class="line">                <span class="keyword">await</span> asyncio.sleep(i)</span><br><span class="line">                <span class="keyword">await</span> client.send_message(phone, s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(time.asctime(), <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;Auto-replying...&#x27;</span>)</span><br><span class="line">client.start()</span><br><span class="line">client.run_until_disconnected()</span><br><span class="line">print(time.asctime(), <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;Stopped!&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="预定讯息"><a href="#预定讯息" class="headerlink" title="预定讯息"></a>预定讯息</h2><p><code>spamHer.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> telethon <span class="keyword">import</span> TelegramClient, events</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">api_id = <span class="number">123456</span></span><br><span class="line">api_hash = <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">phone = <span class="string">&#x27;123456789&#x27;</span></span><br><span class="line"></span><br><span class="line">client = TelegramClient(<span class="string">&#x27;session&#x27;</span>, api_id, api_hash)</span><br><span class="line">greetings = [<span class="string">&#x27;Yo!&#x27;</span>, <span class="string">&#x27;Hi&#x27;</span>, <span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;How have you been?&#x27;</span>, <span class="string">&#x27;How are you?&#x27;</span>, <span class="string">&#x27;What\&#x27;s up today?&#x27;</span>, <span class="string">&#x27;How are you doing?&#x27;</span>, <span class="string">&#x27;How\’s it going?&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">asking</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">await</span> client.send_message(phone, s)</span><br><span class="line"></span><br><span class="line">hour = <span class="number">60</span>*<span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">await</span> asking(random.choice(annoyingStrings))</span><br><span class="line">        i = random.randrange(<span class="number">12</span>*hour, <span class="number">24</span>*hour)</span><br><span class="line">        time.sleep(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> client:</span><br><span class="line">    client.loop.run_until_complete(main())</span><br></pre></td></tr></table></figure>

<hr>
<p>无论如何，列表模板的功能不足以使对话持续超过 1 分钟</p>
<p><code>Her.msg -&gt; telethon -&gt; AI bot</code><br><code>Her &lt;- telethon &lt;- bot.msg</code></p>
<p>可能是一个很好的解决方案 🌚🌚🌚</p>
]]></content>
      <tags>
        <tag>Tech</tag>
        <tag>Auto</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习课程 2</title>
    <url>/cn/Deep-Learning-Course-2/</url>
    <content><![CDATA[<h2 id="Improving-Deep-Neural-Networks-Hyperparameter-tuning-Regularization-and-Optimization"><a href="#Improving-Deep-Neural-Networks-Hyperparameter-tuning-Regularization-and-Optimization" class="headerlink" title="Improving Deep Neural Networks: Hyperparameter tuning, Regularization and Optimization"></a>Improving Deep Neural Networks: Hyperparameter tuning, Regularization and Optimization</h2><h2 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h2><h2 id="Week-2"><a href="#Week-2" class="headerlink" title="Week 2"></a>Week 2</h2><h3 id="1-Gradient-Descent"><a href="#1-Gradient-Descent" class="headerlink" title="1 - Gradient Descent"></a>1 - Gradient Descent</h3><p><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 30.301ex"><svg style="vertical-align: -0.784ex; min-width: 30.301ex" xmlns="http://www.w3.org/2000/svg" width="100%" height="2.7ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0) scale(0.0181) translate(0, -846.7)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(2078, 0) translate(-2078, 0)"><g transform="translate(0 846.7) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="4618.6 -846.7 1 1193.3"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0, -96.7)"><g data-mml-node="mtd"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2034.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(3090.6, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5069.9, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(6070.1, 0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mtext" transform="translate(6710.1, 0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(6960.1, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="msup" transform="translate(7480.1, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="1278 -846.7 1 1193.3"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn-1" transform="translate(0, -96.7)"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(389, 0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(889, 0)"></path></g></g></g></svg></g></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 25.725ex"><svg style="vertical-align: -0.784ex; min-width: 25.725ex" xmlns="http://www.w3.org/2000/svg" width="100%" height="2.7ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0) scale(0.0181) translate(0, -846.7)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(2078, 0) translate(-2078, 0)"><g transform="translate(0 846.7) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="3607.3 -846.7 1 1193.3"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0, -96.7)"><g data-mml-node="mtd"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="TeXAtom" transform="translate(429, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1360.6, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2416.4, 0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="TeXAtom" transform="translate(429, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3721.5, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(4721.7, 0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mtext" transform="translate(5361.7, 0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(5611.7, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="msup" transform="translate(6131.7, 0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="TeXAtom" transform="translate(429, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="1278 -846.7 1 1193.3"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn-2" transform="translate(0, -96.7)"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(389, 0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(889, 0)"></path></g></g></g></svg></g></g></g></g></svg></mjx-container></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = str(l+<span class="number">1</span>)</span><br><span class="line">parameters[<span class="string">"W"</span>+i] = parameters[<span class="string">"W"</span>+i] - learning_rate * grads[<span class="string">'dW'</span>+i]</span><br><span class="line">parameters[<span class="string">"b"</span>+i] = parameters[<span class="string">"b"</span>+i] - learning_rate * grads[<span class="string">'db'</span>+i]</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-Mini-Batch-Gradient-descent"><a href="#2-Mini-Batch-Gradient-descent" class="headerlink" title="2 - Mini-Batch Gradient descent"></a>2 - Mini-Batch Gradient descent</h3><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="17.124ex" height="4.106ex" role="img" focusable="false" viewBox="0 -1118 7569 1815"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mfrac" transform="translate(444, 0)"><g data-mml-node="mi" transform="translate(2901.5, 676)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mrow" transform="translate(220, -686)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1223, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1823, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2168, 0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(2597, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(3126, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(3487, 0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(3920, 0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(4496, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(4965, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5310, 0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mi" transform="translate(5775, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g><rect width="6441" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(7125, 0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="38.762ex" height="4.106ex" role="img" focusable="false" viewBox="0 -1118 17132.9 1815"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1100.2, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2100.4, 0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2978.4, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3323.4, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3923.4, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4268.4, 0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(4697.4, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(5226.4, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(5587.4, 0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(6020.4, 0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(6596.4, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(7065.4, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(7410.4, 0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mi" transform="translate(7875.4, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(8563.7, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(9563.9, 0)"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mfrac" transform="translate(10007.9, 0)"><g data-mml-node="mi" transform="translate(2901.5, 676)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mrow" transform="translate(220, -686)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1223, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1823, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2168, 0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(2597, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(3126, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(3487, 0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(3920, 0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(4496, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(4965, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5310, 0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mi" transform="translate(5775, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g><rect width="6441" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(16688.9, 0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g></g></g></svg></mjx-container></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mini_batch_X = shuffled_X[:, k * mini_batch_size: (k+<span class="number">1</span>) * mini_batch_size]</span><br><span class="line">mini_batch_Y = shuffled_Y[:, k * mini_batch_size: (k+<span class="number">1</span>) * mini_batch_size]</span><br><span class="line"><span class="comment">#  ...</span></span><br><span class="line">mini_batch_X = shuffled_X[:, mini_batch_size * num_complete_minibatches]</span><br><span class="line">mini_batch_Y = shuffled_Y[:, mini_batch_size * num_complete_minibatches]</span><br></pre></td></tr></table></figure>

<h3 id="3-Momentum"><a href="#3-Momentum" class="headerlink" title="3 - Momentum"></a>3 - Momentum</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = str(l+<span class="number">1</span>)</span><br><span class="line">v[<span class="string">"dW"</span>+i] = np.zeros_like(parameters[<span class="string">'W'</span>+i])</span><br><span class="line">v[<span class="string">"db"</span>+i] = np.zeros_like(parameters[<span class="string">'b'</span>+i])</span><br></pre></td></tr></table></figure>

<p><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 58.296ex"><svg style="vertical-align: -0.784ex; min-width: 58.296ex" xmlns="http://www.w3.org/2000/svg" width="100%" height="2.7ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0) scale(0.0181) translate(0, -846.7)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(2078, 0) translate(-2078, 0)"><g transform="translate(0 846.7) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="10805.5 -846.7 1 1193.3"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0, -96.7)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="TeXAtom" transform="translate(485, -225.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="msup" transform="translate(520, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(2422.9, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3478.7, 0)"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="msub" transform="translate(4044.7, 0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="TeXAtom" transform="translate(485, -225.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="msup" transform="translate(520, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(6412, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(7412.3, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(7801.3, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8523.5, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(9523.7, 0)"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mo" transform="translate(10089.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(10478.7, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="msup" transform="translate(10998.7, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g><g data-mml-node="msup" transform="translate(12755.8, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g><g data-mml-node="mo" transform="translate(14790.6, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(15846.4, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g><g data-mml-node="mo" transform="translate(17825.7, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(18825.9, 0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="msub" transform="translate(19465.9, 0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="TeXAtom" transform="translate(485, -225.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="msup" transform="translate(520, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="1278 -846.7 1 1193.3"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn-3" transform="translate(0, -96.7)"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(389, 0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(889, 0)"></path></g></g></g></svg></g></g></g></g></svg></mjx-container><br>$$</p>
<p>v\*{db^{[l]}} = \beta v\*{db^{[l]}} + (1 - \beta) db^{[l]}<br>b^{[l]} = b^{[l]} - \alpha v\_{db^{[l]}}<br>\tag{4}<span>$</span>$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = str(l+<span class="number">1</span>)</span><br><span class="line">v[<span class="string">"dW"</span>+i] = beta * v[<span class="string">"dW"</span>+i] + (<span class="number">1</span> - beta) * grads[<span class="string">'dW'</span>+i]</span><br><span class="line">v[<span class="string">"db"</span>+i] = beta * v[<span class="string">"db"</span>+i] + (<span class="number">1</span> - beta) * grads[<span class="string">'db'</span>+i]</span><br><span class="line"><span class="comment"># update parameters</span></span><br><span class="line">parameters[<span class="string">"W"</span>+i] = parameters[<span class="string">"W"</span>+i] - learning_rate * v[<span class="string">"dW"</span>+i]</span><br><span class="line">parameters[<span class="string">"b"</span>+i] = parameters[<span class="string">"b"</span>+i] - learning_rate * v[<span class="string">"db"</span>+i]</span><br></pre></td></tr></table></figure>

<h3 id="4-Adam"><a href="#4-Adam" class="headerlink" title="4 - Adam"></a>4 - Adam</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = str(l+<span class="number">1</span>)</span><br><span class="line">v[<span class="string">"dW"</span>+i] = np.zeros_like(parameters[<span class="string">"W"</span>+i])</span><br><span class="line">v[<span class="string">"db"</span>+i] = np.zeros_like(parameters[<span class="string">"b"</span>+i])</span><br><span class="line">s[<span class="string">"dW"</span>+i] = np.zeros_like(parameters[<span class="string">"W"</span>+i])</span><br><span class="line">s[<span class="string">"db"</span>+i] = np.zeros_like(parameters[<span class="string">"b"</span>+i])</span><br></pre></td></tr></table></figure>

<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.813ex" xmlns="http://www.w3.org/2000/svg" width="30.121ex" height="4.96ex" role="img" focusable="false" viewBox="0 -1391 13313.5 2192.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="TeXAtom" transform="translate(485, -225.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(2055.2, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(3111, 0)"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mn" transform="translate(566, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="msub" transform="translate(4080.5, 0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="TeXAtom" transform="translate(485, -225.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(6080.2, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(7080.4, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(7469.4, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8191.6, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(9191.9, 0)"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mn" transform="translate(566, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(10161.4, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mfrac" transform="translate(10550.4, 0)"><g data-mml-node="mrow" transform="translate(782, 676)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566, 0)"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g></g><g data-mml-node="mrow" transform="translate(220, -779.3)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="msup" transform="translate(566, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g><rect width="2523.1" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p>
<p>$$v^{corrected}<em>{dW^{[l]}} = \frac{v</em>{dW^{[l]}}}{1 - (\beta_1)^t}$$</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.813ex" xmlns="http://www.w3.org/2000/svg" width="34.386ex" height="4.96ex" role="img" focusable="false" viewBox="0 -1391 15198.4 2192.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, -225.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="msup" transform="translate(520, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(2406.9, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(3462.7, 0)"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mn" transform="translate(566, -150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="msub" transform="translate(4432.2, 0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, -225.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="msup" transform="translate(520, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(6783.6, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(7783.8, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(8172.8, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8895, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(9895.3, 0)"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mn" transform="translate(566, -150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(10864.8, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(11253.8, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mfrac" transform="translate(11642.8, 0)"><g data-mml-node="mrow" transform="translate(679, 676)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(566, 0)"><g data-mml-node="mi"><path data-c="4A" d="M148 78Q148 16 189 -17T286 -50Q319 -50 348 -33T396 10T426 59T444 101L471 204Q498 306 521 372Q575 532 649 605L659 614H591Q517 613 494 607Q433 591 400 550T360 477Q353 454 325 437T275 419Q256 419 260 435Q280 523 376 597T583 681Q603 683 713 683H830Q839 674 839 671Q839 654 810 634T754 614Q735 614 721 601Q688 571 654 495T600 351T561 209T541 132Q507 29 412 -45T213 -119Q141 -119 94 -77T47 33Q47 55 50 69T58 90T71 103Q105 131 135 131Q152 131 152 120Q152 119 151 114T149 99T148 78Z"></path></g></g></g><g data-mml-node="mrow" transform="translate(220, -779.3)"><g data-mml-node="mi"><path data-c="2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="msup" transform="translate(566, 0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1103.2, 289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g><rect width="2523.1" height="60" x="120" y="220"></rect></g><g data-mml-node="msup" transform="translate(14405.9, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(389, 413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></p>
<p>$$s^{corrected}<em>{dW^{[l]}} = \frac{s</em>{dW^{[l]}}}{1 - (\beta_2)^t}$$</p>
<p>$$W^{[l]} = W^{[l]} - \alpha \frac{v^{corrected}<em>{dW^{[l]}}}{\sqrt{s^{corrected}</em>{dW^{[l]}}} + \varepsilon}$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = str(l+<span class="number">1</span>)</span><br><span class="line">v[<span class="string">"dW"</span>+i] = beta1 * v[<span class="string">"dW"</span>+i] + (<span class="number">1</span> - beta1) * grads[<span class="string">'dW'</span>+i]</span><br><span class="line">v[<span class="string">"db"</span>+i] = beta1 * v[<span class="string">"db"</span>+i] + (<span class="number">1</span> - beta1) * grads[<span class="string">'db'</span>+i]</span><br><span class="line"></span><br><span class="line">v_corrected[<span class="string">"dW"</span>+i] = v[<span class="string">"dW"</span>+i] / (<span class="number">1</span> - beta1**t)</span><br><span class="line">v_corrected[<span class="string">"db"</span>+i] = v[<span class="string">"db"</span>+i] / (<span class="number">1</span> - beta1**t)</span><br><span class="line"></span><br><span class="line">s[<span class="string">"dW"</span>+i] = beta2 * s[<span class="string">"dW"</span>+i] + (<span class="number">1</span> - beta2) * (grads[<span class="string">'dW'</span>+i])**<span class="number">2</span></span><br><span class="line">s[<span class="string">"db"</span>+i] = beta2 * s[<span class="string">"db"</span>+i] + (<span class="number">1</span> - beta2) * (grads[<span class="string">'db'</span>+i])**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">s_corrected[<span class="string">"dW"</span>+i] = s[<span class="string">"dW"</span>+i] / (<span class="number">1</span> - beta2**t)</span><br><span class="line">s_corrected[<span class="string">"db"</span>+i] = s[<span class="string">"db"</span>+i] / (<span class="number">1</span> - beta2**t)</span><br><span class="line"></span><br><span class="line">parameters[<span class="string">"W"</span>+i] = parameters[<span class="string">"W"</span>+i] - learning_rate * (v_corrected[<span class="string">"dW"</span>+i] / (np.sqrt(s_corrected[<span class="string">"dW"</span>+i]) + epsilon))</span><br><span class="line">parameters[<span class="string">"b"</span>+i] = parameters[<span class="string">"b"</span>+i] - learning_rate * (v_corrected[<span class="string">"db"</span>+i] / (np.sqrt(s_corrected[<span class="string">"db"</span>+i]) + epsilon))</span><br></pre></td></tr></table></figure>

<h2 id="Week-3"><a href="#Week-3" class="headerlink" title="Week 3"></a>Week 3</h2><h3 id="1-1-Linear-function"><a href="#1-1-Linear-function" class="headerlink" title="1.1 - Linear function"></a>1.1 - Linear function</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = np.random.randn(<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">W = np.random.randn(<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line">b = np.random.randn(<span class="number">4</span>,<span class="number">1</span>)</span><br><span class="line">Y = tf.add(tf.matmul(W, X), b)</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">result = sess.run(Y)</span><br></pre></td></tr></table></figure>

<h3 id="1-2-Computing-the-sigmoid"><a href="#1-2-Computing-the-sigmoid" class="headerlink" title="1.2 - Computing the sigmoid"></a>1.2 - Computing the sigmoid</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = tf.placeholder(tf.float32, name = <span class="string">"x"</span>)</span><br><span class="line">sigmoid = tf.sigmoid(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    result = sess.run(sigmoid, feed_dict = {x: z})</span><br></pre></td></tr></table></figure>

<h3 id="1-3-Computing-the-Cost"><a href="#1-3-Computing-the-Cost" class="headerlink" title="1.3 - Computing the Cost"></a>1.3 - Computing the Cost</h3><p><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 55.479ex"><svg style="vertical-align: -2.611ex; min-width: 55.479ex" xmlns="http://www.w3.org/2000/svg" width="100%" height="6.354ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0) scale(0.0181) translate(0, -1654.2)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(2078, 0) translate(-2078, 0)"><g transform="translate(0 1654.2) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="10182.9 -1654.2 1 2808.5"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0, 91.7)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(910.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1966.6, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(2744.6, 0)"><g data-mml-node="mn" transform="translate(409, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220, -686)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1078" height="60" x="120" y="220"></rect></g><g data-mml-node="munderover" transform="translate(4229.2, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(411.6, 1150) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mstyle" transform="translate(5673.2, 0) scale(1.2)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mstyle" transform="translate(389, 0) scale(0.708)"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1500.7, 0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278, 0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778, 0)"></path></g><g data-mml-node="mo" transform="translate(2778.7, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="msup" transform="translate(2945.4, 0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(529, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(278, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(778, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1056, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1445, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1790, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5287.4, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(6287.6, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(6676.6, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(7398.9, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(8399.1, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(490, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(9733.2, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(10288.8, 0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278, 0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778, 0)"></path></g><g data-mml-node="mo" transform="translate(11566.8, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(11566.8, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(11955.8, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(12678.1, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(13678.3, 0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(529, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(278, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(778, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1056, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1445, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1790, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(15798.1, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mstyle" transform="translate(16187.1, 0) scale(1.412)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mstyle" transform="translate(389, 0) scale(0.708)"></g></g></g></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="1278 -1654.2 1 2808.5"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn-2" transform="translate(0, 91.7)"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(389, 0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(889, 0)"></path></g></g></g></svg></g></g></g></g></svg></mjx-container></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">z = tf.placeholder(tf.float32, name=<span class="string">'z'</span>)</span><br><span class="line">y = tf.placeholder(tf.float32, name=<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line">cost = tf.nn.sigmoid_cross_entropy_with_logits(logits = z,  labels = y)</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">cost = sess.run(cost, feed_dict = {z: logits, y: labels})</span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure>

<h3 id="1-4-Using-One-Hot-encodings"><a href="#1-4-Using-One-Hot-encodings" class="headerlink" title="1.4 - Using One Hot encodings"></a>1.4 - Using One Hot encodings</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C = tf.constant(C)</span><br><span class="line">one_hot_matrix = tf.one_hot(labels, C, axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">one_hot = sess.run(one_hot_matrix)</span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure>

<h3 id="1-5-Initialize-with-zeros-and-ones"><a href="#1-5-Initialize-with-zeros-and-ones" class="headerlink" title="1.5 - Initialize with zeros and ones"></a>1.5 - Initialize with zeros and ones</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ones = tf.ones(shape)</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">ones = sess.run(ones)</span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure>

<h3 id="2-1-Create-placeholders"><a href="#2-1-Create-placeholders" class="headerlink" title="2.1 - Create placeholders"></a>2.1 - Create placeholders</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = tf.placeholder(tf.float32, [n_x, <span class="literal">None</span>])</span><br><span class="line">Y = tf.placeholder(tf.float32, [n_y, <span class="literal">None</span>])</span><br></pre></td></tr></table></figure>

<h3 id="2-2-Initializing-the-parameters"><a href="#2-2-Initializing-the-parameters" class="headerlink" title="2.2 - Initializing the parameters"></a>2.2 - Initializing the parameters</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">W1 = tf.get_variable(<span class="string">"W1"</span>, [<span class="number">25</span>,<span class="number">12288</span>], initializer = tf.contrib.layers.xavier_initializer(seed = <span class="number">1</span>))</span><br><span class="line">b1 = tf.get_variable(<span class="string">"b1"</span>, [<span class="number">25</span>,<span class="number">1</span>], initializer = tf.zeros_initializer())</span><br><span class="line">W2 = tf.get_variable(<span class="string">"W2"</span>, [<span class="number">12</span>,<span class="number">25</span>], initializer = tf.contrib.layers.xavier_initializer(seed = <span class="number">1</span>))</span><br><span class="line">b2 = tf.get_variable(<span class="string">"b2"</span>, [<span class="number">12</span>,<span class="number">1</span>], initializer = tf.zeros_initializer())</span><br><span class="line">W3 = tf.get_variable(<span class="string">"W3"</span>, [<span class="number">6</span>,<span class="number">12</span>], initializer = tf.contrib.layers.xavier_initializer(seed = <span class="number">1</span>))</span><br><span class="line">b3 = tf.get_variable(<span class="string">"b3"</span>, [<span class="number">6</span>,<span class="number">1</span>], initializer = tf.zeros_initializer())</span><br></pre></td></tr></table></figure>

<h3 id="2-3-Forward-propagation-in-tensorflow"><a href="#2-3-Forward-propagation-in-tensorflow" class="headerlink" title="2.3 - Forward propagation in tensorflow"></a>2.3 - Forward propagation in tensorflow</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Z1 = tf.matmul(W1, X) + b1</span><br><span class="line">A1 = tf.nn.relu(Z1)</span><br><span class="line">Z2 = tf.matmul(W2, A1) + b2</span><br><span class="line">A2 = tf.nn.relu(Z2)</span><br><span class="line">Z3 = tf.matmul(W3, A2) + b3</span><br></pre></td></tr></table></figure>

<h3 id="2-4-Compute-cost"><a href="#2-4-Compute-cost" class="headerlink" title="2.4 Compute cost"></a>2.4 Compute cost</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = logits, labels = labels))</span><br></pre></td></tr></table></figure>

<h3 id="2-5-Backward-propagation-amp-parameter-updates"><a href="#2-5-Backward-propagation-amp-parameter-updates" class="headerlink" title="2.5 - Backward propagation & parameter updates"></a>2.5 - Backward propagation &amp; parameter updates</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X, Y = create_placeholders(n_x, n_y)</span><br><span class="line">parameters = initialize_parameters()</span><br><span class="line">Z3 = forward_propagation(X, parameters)</span><br><span class="line">cost = compute_cost(Z3, Y)</span><br><span class="line">optimizer = tf.train.AdamOptimizer(learning_rate = learning_rate).minimize(cost)</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">_ , minibatch_cost = sess.run([optimizer, cost], feed_dict={X: minibatch_X, Y: minibatch_Y})</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习课程 4</title>
    <url>/cn/Deep-Learning-Course-4/</url>
    <content><![CDATA[<h2 id="Week-1-Convolutional-Neural-Networks"><a href="#Week-1-Convolutional-Neural-Networks" class="headerlink" title="Week 1 - Convolutional Neural Networks"></a>Week 1 - Convolutional Neural Networks</h2><h2 id="Step-by-Step"><a href="#Step-by-Step" class="headerlink" title="Step by Step"></a>Step by Step</h2><h3 id="3-1-Zero-Padding"><a href="#3-1-Zero-Padding" class="headerlink" title="3.1 - Zero-Padding"></a>3.1 - Zero-Padding</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">X_pad = np.pad(X, ((<span class="number">0</span>, <span class="number">0</span>), (pad, pad), (pad, pad), (<span class="number">0</span>,<span class="number">0</span>)), mode=<span class="string">'constant'</span>, constant_values = (<span class="number">0</span>,<span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<h3 id="3-2-Single-step-of-convolution"><a href="#3-2-Single-step-of-convolution" class="headerlink" title="3.2 - Single step of convolution"></a>3.2 - Single step of convolution</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">s = a_slice_prev * W</span><br><span class="line">Z = np.sum(s)</span><br><span class="line">Z = Z + np.sum(b)</span><br></pre></td></tr></table></figure>

<h3 id="3-3-Convolutional-Neural-Networks-Forward-pass"><a href="#3-3-Convolutional-Neural-Networks-Forward-pass" class="headerlink" title="3.3 - Convolutional Neural Networks - Forward pass"></a>3.3 - Convolutional Neural Networks - Forward pass</h3><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="32.029ex" height="5.011ex" role="img" focusable="false" viewBox="0 -1518.1 14156.7 2215.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g><g data-mml-node="mo" transform="translate(1555.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2611.5, 0)"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mfrac" transform="translate(3055.5, 0)"><g data-mml-node="mrow" transform="translate(220, 813.1)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(600, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="TeXAtom" transform="translate(831, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(954, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1420, 0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(2447.7, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3447.9, 0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(4220.1, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(5220.3, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(5942.6, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(6942.8, 0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(7445.8, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(7974.8, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g><g data-mml-node="mrow" transform="translate(3161.4, -686)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1281, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1626, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(2146, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g><rect width="8694.8" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(11990.3, 0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g><g data-mml-node="mo" transform="translate(12656.5, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(13656.7, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="32.465ex" height="5.011ex" role="img" focusable="false" viewBox="0 -1518.1 14349.7 2215.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g></g><g data-mml-node="mo" transform="translate(1668.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2724.6, 0)"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mfrac" transform="translate(3168.6, 0)"><g data-mml-node="mrow" transform="translate(220, 813.1)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(600, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(944, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(954, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1420, 0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(2527.6, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3527.8, 0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(4300, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(5300.3, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(6022.5, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(7022.7, 0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(7525.7, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(8054.7, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g><g data-mml-node="mrow" transform="translate(3201.3, -686)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1281, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1626, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(2146, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g><rect width="8774.7" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(12183.3, 0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g><g data-mml-node="mo" transform="translate(12849.5, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(13849.7, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="45.029ex" height="1.97ex" role="img" focusable="false" viewBox="0 -705 19903 870.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g><g data-mml-node="mo" transform="translate(1465.2, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mtext" transform="translate(2521, 0)"><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(556, 0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1112, 0)"></path><path data-c="62" d="M307 -11Q234 -11 168 55L158 37Q156 34 153 28T147 17T143 10L138 1L118 0H98V298Q98 599 97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V543Q179 391 180 391L183 394Q186 397 192 401T207 411T228 421T254 431T286 439T323 442Q401 442 461 379T522 216Q522 115 458 52T307 -11ZM182 98Q182 97 187 90T196 79T206 67T218 55T233 44T250 35T271 29T295 26Q330 26 363 46T412 113Q424 148 424 212Q424 287 412 323Q385 405 300 405Q270 405 239 390T188 347L182 339V98Z" transform="translate(1945, 0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(2501, 0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(2945, 0)"></path><path data-c="20" d="" transform="translate(3337, 0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(3587, 0)"></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(4087, 0)"></path><path data-c="20" d="" transform="translate(4393, 0)"></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(4643, 0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(4949, 0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(5227, 0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(5505, 0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(5894, 0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(6338, 0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(6730, 0)"></path><path data-c="20" d="" transform="translate(7124, 0)"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(7374, 0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(7930, 0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(8324, 0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(8768, 0)"></path><path data-c="20" d="" transform="translate(9324, 0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(9574, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(9852, 0)"></path><path data-c="20" d="" transform="translate(10408, 0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(10658, 0)"></path><path data-c="68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(11047, 0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(11603, 0)"></path><path data-c="20" d="" transform="translate(12047, 0)"></path><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(12297, 0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(12741, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(13241, 0)"></path><path data-c="76" d="M338 431Q344 429 422 429Q479 429 503 431H508V385H497Q439 381 423 345Q421 341 356 172T288 -2Q283 -11 263 -11Q244 -11 239 -2Q99 359 98 364Q93 378 82 381T43 385H19V431H25L33 430Q41 430 53 430T79 430T104 429T122 428Q217 428 232 431H240V385H226Q187 384 184 370Q184 366 235 234L286 102L377 341V349Q377 363 367 372T349 383T335 385H331V431H338Z" transform="translate(13797, 0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(14325, 0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(14825, 0)"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(15103, 0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(15659, 0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(16048, 0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(16326, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(16826, 0)"></path></g></g></g></svg></mjx-container></p>
<a id="more"></a>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">(m, n_H_prev, n_W_prev, n_C_prev) = A_prev.shape</span><br><span class="line">(f, f, n_C_prev, n_C) = W.shape</span><br><span class="line"></span><br><span class="line">stride = hparameters[<span class="string">"stride"</span>]</span><br><span class="line">pad = hparameters[<span class="string">"pad"</span>]</span><br><span class="line"></span><br><span class="line">n_H = int((n_H_prev - f + <span class="number">2</span> * pad) / stride) + <span class="number">1</span></span><br><span class="line">n_W = int((n_W_prev - f + <span class="number">2</span> * pad) / stride) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">Z = np.zeros((m, n_H, n_W, n_C))</span><br><span class="line"></span><br><span class="line">A_prev_pad = zero_pad(A_prev, pad)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">    a_prev_pad = A_prev_pad[i]</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> range(n_H):</span><br><span class="line">        vert_start = h * stride</span><br><span class="line">        vert_end = vert_start + f</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> range(n_W):</span><br><span class="line">            horiz_start = w * stride</span><br><span class="line">            horiz_end = horiz_start + f</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(n_C):</span><br><span class="line">                a_slice_prev = a_prev_pad[vert_start:vert_end, horiz_start:horiz_end, :]</span><br><span class="line"></span><br><span class="line">                weights = W[:, :, :, c]</span><br><span class="line">                biases = b[:, :, :, c]</span><br><span class="line">                Z[i, h, w, c] =  conv_single_step(a_slice_prev, weights, biases)</span><br></pre></td></tr></table></figure>

<h3 id="4-1-Forward-Pooling"><a href="#4-1-Forward-Pooling" class="headerlink" title="4.1 - Forward Pooling"></a>4.1 - Forward Pooling</h3><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="21.855ex" height="5.011ex" role="img" focusable="false" viewBox="0 -1518.1 9659.8 2215.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g><g data-mml-node="mo" transform="translate(1555.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2611.5, 0)"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mfrac" transform="translate(3055.5, 0)"><g data-mml-node="mrow" transform="translate(220, 813.1)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(600, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="TeXAtom" transform="translate(831, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(954, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1420, 0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(2447.7, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3447.9, 0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g></g><g data-mml-node="mrow" transform="translate(913, -686)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1281, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1626, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(2146, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g><rect width="4197.9" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(7493.4, 0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g><g data-mml-node="mo" transform="translate(8159.6, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(9159.8, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="22.292ex" height="5.011ex" role="img" focusable="false" viewBox="0 -1518.1 9852.9 2215.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g></g><g data-mml-node="mo" transform="translate(1668.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2724.6, 0)"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mfrac" transform="translate(3168.6, 0)"><g data-mml-node="mrow" transform="translate(220, 813.1)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(600, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(944, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(954, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1420, 0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(2527.6, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3527.8, 0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g></g><g data-mml-node="mrow" transform="translate(952.9, -686)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1281, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1626, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(2146, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g><rect width="4277.8" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(7686.4, 0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g><g data-mml-node="mo" transform="translate(8352.6, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(9352.9, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.799ex" xmlns="http://www.w3.org/2000/svg" width="10.553ex" height="2.118ex" role="img" focusable="false" viewBox="0 -583 4664.4 936.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g><g data-mml-node="mo" transform="translate(1465.2, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2521, 0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(600, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(715, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(954, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1420, 0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></g></g></g></g></svg></mjx-container></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> range(n_H):</span><br><span class="line">        vert_start = h * stride</span><br><span class="line">        vert_end = vert_start + f</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> range(n_W):</span><br><span class="line">            horiz_start = w * stride</span><br><span class="line">            horiz_end = horiz_start + f</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range (n_C):</span><br><span class="line">                a_prev_slice = A_prev[i, vert_start:vert_end, horiz_start:horiz_end, c]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> mode == <span class="string">"max"</span>:</span><br><span class="line">                    A[i, h, w, c] = np.max(a_prev_slice)</span><br><span class="line">                <span class="keyword">elif</span> mode == <span class="string">"average"</span>:</span><br><span class="line">                    A[i, h, w, c] = np.mean(a_prev_slice)</span><br></pre></td></tr></table></figure>

<h3 id="5-2-Pooling-layer-backward-pass"><a href="#5-2-Pooling-layer-backward-pass" class="headerlink" title="5.2 Pooling layer - backward pass"></a>5.2 Pooling layer - backward pass</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">mask = np.max(x) == x</span><br></pre></td></tr></table></figure>

<h3 id="5-2-2-Average-pooling-backward-pass"><a href="#5-2-2-Average-pooling-backward-pass" class="headerlink" title="5.2.2 - Average pooling - backward pass"></a>5.2.2 - Average pooling - backward pass</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">(n_H, n_W) = shape</span><br><span class="line">average = dz / (n_H * n_W)</span><br><span class="line">a = np.ones(shape) * average</span><br></pre></td></tr></table></figure>

<h3 id="5-2-3-Putting-it-together-Pooling-backward"><a href="#5-2-3-Putting-it-together-Pooling-backward" class="headerlink" title="5.2.3 Putting it together: Pooling backward"></a>5.2.3 Putting it together: Pooling backward</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">(A_prev, hparameters) = cache</span><br><span class="line"></span><br><span class="line">stride = hparameters[<span class="string">"stride"</span>]</span><br><span class="line">f = hparameters[<span class="string">"f"</span>]</span><br><span class="line"></span><br><span class="line">m, n_H_prev, n_W_prev, n_C_prev = A_prev.shape</span><br><span class="line">m, n_H, n_W, n_C = dA.shape</span><br><span class="line"></span><br><span class="line">dA_prev = np.zeros(A_prev.shape)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line"></span><br><span class="line">    a_prev = A_prev[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> range(n_H):</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> range(n_W):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(n_C):</span><br><span class="line"></span><br><span class="line">                vert_start = h * stride</span><br><span class="line">                vert_end = vert_start + f</span><br><span class="line">                horiz_start = w * stride</span><br><span class="line">                horiz_end = horiz_start + f</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> mode == <span class="string">"max"</span>:</span><br><span class="line">                    a_prev_slice = a_prev[vert_start:vert_end, horiz_start:horiz_end, c]</span><br><span class="line">                    mask = create_mask_from_window(a_prev_slice)</span><br><span class="line"></span><br><span class="line">                    dA_prev[i, vert_start: vert_end, horiz_start: horiz_end, c] += (dA[i, h, w, c] * mask)</span><br><span class="line">                <span class="keyword">elif</span> mode == <span class="string">"average"</span>:</span><br><span class="line">                    da = dA[i, h, w, c]</span><br><span class="line">                    shape = (f, f)</span><br><span class="line">                    dA_prev[i, vert_start: vert_end, horiz_start: horiz_end, c] += distribute_value(da, shape)</span><br></pre></td></tr></table></figure>

<h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><h3 id="1-1-Create-placeholders"><a href="#1-1-Create-placeholders" class="headerlink" title="1.1 - Create placeholders"></a>1.1 - Create placeholders</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">X = tf.placeholder(tf.float32, shape=[<span class="literal">None</span>, n_H0, n_W0, n_C0])</span><br><span class="line">Y =  tf.placeholder(tf.float32, shape=[<span class="literal">None</span>, n_y])</span><br></pre></td></tr></table></figure>

<h3 id="1-2-Initialize-parameters"><a href="#1-2-Initialize-parameters" class="headerlink" title="1.2 - Initialize parameters"></a>1.2 - Initialize parameters</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">W1 = tf.get_variable(<span class="string">"W1"</span>, [<span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">8</span>], initializer = tf.contrib.layers.xavier_initializer(seed = <span class="number">0</span>))</span><br><span class="line">W2 = tf.get_variable(<span class="string">"W2"</span>, [<span class="number">2</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">16</span>], initializer = tf.contrib.layers.xavier_initializer(seed = <span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<h3 id="1-3-Forward-propagation"><a href="#1-3-Forward-propagation" class="headerlink" title="1.3 - Forward propagation"></a>1.3 - Forward propagation</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">Z1 = tf.nn.conv2d(X, W1, strides = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], padding = <span class="string">'SAME'</span>)</span><br><span class="line">A1 = tf.nn.relu(Z1)</span><br><span class="line">P1 = tf.nn.max_pool(A1, ksize = [<span class="number">1</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">1</span>], strides = [<span class="number">1</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">1</span>], padding = <span class="string">'SAME'</span>)</span><br><span class="line">Z2 = tf.nn.conv2d(P1, W2, strides = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], padding = <span class="string">'SAME'</span>)</span><br><span class="line">A2 = tf.nn.relu(Z2)</span><br><span class="line">P2 = tf.nn.max_pool(A2, ksize = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">1</span>], strides = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">1</span>], padding = <span class="string">'SAME'</span>)</span><br><span class="line">F = tf.contrib.layers.flatten(P2)</span><br><span class="line">Z3 = tf.contrib.layers.fully_connected(F, <span class="number">6</span>, activation_fn=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<h3 id="1-4-Compute-cost"><a href="#1-4-Compute-cost" class="headerlink" title="1.4 - Compute cost"></a>1.4 - Compute cost</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = Z3, labels = Y))</span><br></pre></td></tr></table></figure>

<h3 id="1-5-Model"><a href="#1-5-Model" class="headerlink" title="1.5 Model"></a>1.5 Model</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">X, Y = create_placeholders(n_H0, n_W0, n_C0, n_y)</span><br><span class="line">parameters = initialize_parameters()</span><br><span class="line">Z3 = forward_propagation(X, parameters)</span><br><span class="line">cost = compute_cost(Z3, Y)</span><br><span class="line">optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost)</span><br><span class="line"><span class="comment">### ...</span></span><br><span class="line">    _ , temp_cost = sess.run([optimizer, cost], feed_dict={X: minibatch_X, Y: minibatch_Y})</span><br></pre></td></tr></table></figure>

<h2 id="Week-2-Residual-Networks"><a href="#Week-2-Residual-Networks" class="headerlink" title="Week 2 - Residual Networks"></a>Week 2 - Residual Networks</h2><h3 id="2-1-The-identity-block"><a href="#2-1-The-identity-block" class="headerlink" title="2.1 - The identity block"></a>2.1 - The identity block</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">X = Conv2D(filters = F2, kernel_size = (f, f), strides = (<span class="number">1</span>,<span class="number">1</span>), padding = <span class="string">'same'</span>, name = conv_name_base + <span class="string">'2b'</span>, kernel_initializer = glorot_uniform(seed=<span class="number">0</span>))(X)</span><br><span class="line">X = BatchNormalization(axis = <span class="number">3</span>, name = bn_name_base + <span class="string">'2b'</span>)(X)</span><br><span class="line">X = Activation(<span class="string">'relu'</span>)(X)</span><br><span class="line"></span><br><span class="line">X = Conv2D(filters = F3, kernel_size = (<span class="number">1</span>, <span class="number">1</span>), strides = (<span class="number">1</span>,<span class="number">1</span>), padding = <span class="string">'valid'</span>, name = conv_name_base + <span class="string">'2c'</span>, kernel_initializer = glorot_uniform(seed=<span class="number">0</span>))(X)</span><br><span class="line">X = BatchNormalization(axis = <span class="number">3</span>, name = bn_name_base + <span class="string">'2c'</span>)(X)</span><br><span class="line"></span><br><span class="line">X = layers.Add()([X, X_shortcut])</span><br><span class="line">X = Activation(<span class="string">'relu'</span>)(X)</span><br></pre></td></tr></table></figure>

<h3 id="2-2-The-convolutional-block"><a href="#2-2-The-convolutional-block" class="headerlink" title="2.2 - The convolutional block"></a>2.2 - The convolutional block</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">X = Conv2D(F2, (f, f), strides = (<span class="number">1</span>,<span class="number">1</span>), padding = <span class="string">'same'</span>, name = conv_name_base + <span class="string">'2b'</span>, kernel_initializer = glorot_uniform(seed=<span class="number">0</span>))(X)</span><br><span class="line">X = BatchNormalization(axis = <span class="number">3</span>, name = bn_name_base + <span class="string">'2b'</span>)(X)</span><br><span class="line">X = Activation(<span class="string">'relu'</span>)(X)</span><br><span class="line"></span><br><span class="line">X = Conv2D(F3, (<span class="number">1</span>, <span class="number">1</span>), strides = (<span class="number">1</span>,<span class="number">1</span>), name = conv_name_base + <span class="string">'2c'</span>, kernel_initializer = glorot_uniform(seed=<span class="number">0</span>))(X)</span><br><span class="line">X = BatchNormalization(axis = <span class="number">3</span>, name = bn_name_base + <span class="string">'2c'</span>)(X)</span><br><span class="line"></span><br><span class="line">X_shortcut = Conv2D(F3, (<span class="number">1</span>, <span class="number">1</span>), strides = (s,s), name = conv_name_base + <span class="string">'1'</span>, kernel_initializer = glorot_uniform(seed=<span class="number">0</span>))(X_shortcut)</span><br><span class="line">X_shortcut = BatchNormalization(axis = <span class="number">3</span>, name = bn_name_base + <span class="string">'1'</span>)(X_shortcut)</span><br><span class="line"></span><br><span class="line">X = layers.Add()([X, X_shortcut])</span><br><span class="line">X = Activation(<span class="string">'relu'</span>)(X)</span><br></pre></td></tr></table></figure>

<h3 id="3-Building-your-first-ResNet-model-50-layers"><a href="#3-Building-your-first-ResNet-model-50-layers" class="headerlink" title="3 - Building your first ResNet model (50 layers)"></a>3 - Building your first ResNet model (50 layers)</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">X = convolutional_block(X, f = <span class="number">3</span>, filters = [<span class="number">128</span>, <span class="number">128</span>, <span class="number">512</span>], stage = <span class="number">3</span>, block=<span class="string">'a'</span>, s = <span class="number">2</span>)</span><br><span class="line">X = identity_block(X, <span class="number">3</span>, [<span class="number">128</span>, <span class="number">128</span>, <span class="number">512</span>], stage=<span class="number">3</span>, block=<span class="string">'b'</span>)</span><br><span class="line">X = identity_block(X, <span class="number">3</span>, [<span class="number">128</span>, <span class="number">128</span>, <span class="number">512</span>], stage=<span class="number">3</span>, block=<span class="string">'c'</span>)</span><br><span class="line">X = identity_block(X, <span class="number">3</span>, [<span class="number">128</span>, <span class="number">128</span>, <span class="number">512</span>], stage=<span class="number">3</span>, block=<span class="string">'d'</span>)</span><br><span class="line"></span><br><span class="line">X = convolutional_block(X, f = <span class="number">3</span>, filters = [<span class="number">256</span>, <span class="number">256</span>, <span class="number">1024</span>], stage = <span class="number">4</span>, block=<span class="string">'a'</span>, s = <span class="number">2</span>)</span><br><span class="line">X = identity_block(X, <span class="number">3</span>, [<span class="number">256</span>, <span class="number">256</span>, <span class="number">1024</span>], stage=<span class="number">4</span>, block=<span class="string">'b'</span>)</span><br><span class="line">X = identity_block(X, <span class="number">3</span>, [<span class="number">256</span>, <span class="number">256</span>, <span class="number">1024</span>], stage=<span class="number">4</span>, block=<span class="string">'c'</span>)</span><br><span class="line">X = identity_block(X, <span class="number">3</span>, [<span class="number">256</span>, <span class="number">256</span>, <span class="number">1024</span>], stage=<span class="number">4</span>, block=<span class="string">'d'</span>)</span><br><span class="line">X = identity_block(X, <span class="number">3</span>, [<span class="number">256</span>, <span class="number">256</span>, <span class="number">1024</span>], stage=<span class="number">4</span>, block=<span class="string">'e'</span>)</span><br><span class="line">X = identity_block(X, <span class="number">3</span>, [<span class="number">256</span>, <span class="number">256</span>, <span class="number">1024</span>], stage=<span class="number">4</span>, block=<span class="string">'f'</span>)</span><br><span class="line"></span><br><span class="line">X = convolutional_block(X, f = <span class="number">3</span>, filters = [<span class="number">512</span>, <span class="number">512</span>, <span class="number">2048</span>], stage = <span class="number">5</span>, block=<span class="string">'a'</span>, s = <span class="number">2</span>)</span><br><span class="line">X = identity_block(X, <span class="number">3</span>, [<span class="number">512</span>, <span class="number">512</span>, <span class="number">2048</span>], stage=<span class="number">5</span>, block=<span class="string">'b'</span>)</span><br><span class="line">X = identity_block(X, <span class="number">3</span>, [<span class="number">512</span>, <span class="number">512</span>, <span class="number">2048</span>], stage=<span class="number">5</span>, block=<span class="string">'c'</span>)</span><br><span class="line"></span><br><span class="line">X = AveragePooling2D((<span class="number">2</span>,<span class="number">2</span>), name=<span class="string">'avg_pool'</span>)(X)</span><br></pre></td></tr></table></figure>

<h2 id="Week-3-Autonomous-driving-Car-detection"><a href="#Week-3-Autonomous-driving-Car-detection" class="headerlink" title="Week 3 - Autonomous driving - Car detection"></a>Week 3 - Autonomous driving - Car detection</h2><h3 id="2-1-Model-details"><a href="#2-1-Model-details" class="headerlink" title="2.1 - Model details"></a>2.1 - Model details</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">box_scores = np.multiply(box_confidence, box_class_probs)</span><br><span class="line"></span><br><span class="line">box_classes = K.argmax(box_scores, axis=<span class="number">-1</span>)</span><br><span class="line">box_class_scores = K.max(box_scores, axis=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">filtering_mask = K.greater_equal(box_class_scores, threshold)</span><br><span class="line"></span><br><span class="line">scores = tf.boolean_mask(box_class_scores, filtering_mask)</span><br><span class="line">boxes = tf.boolean_mask(boxes, filtering_mask)</span><br><span class="line">classes = tf.boolean_mask(box_classes, filtering_mask)</span><br></pre></td></tr></table></figure>

<h3 id="2-3-Non-max-suppression"><a href="#2-3-Non-max-suppression" class="headerlink" title="2.3 - Non-max suppression"></a>2.3 - Non-max suppression</h3><h4 id="iou"><a href="#iou" class="headerlink" title="iou"></a>iou</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">xi1 = max(box1_x1, box2_x1)</span><br><span class="line">yi1 = max(box1_y1, box2_y1)</span><br><span class="line">xi2 = min(box1_x2, box2_x2)</span><br><span class="line">yi2 = min(box1_y2, box2_y2)</span><br><span class="line">inter_width = xi2 - xi1</span><br><span class="line">inter_height = yi2 - yi1</span><br><span class="line">inter_area = max(inter_width, <span class="number">0</span>) * max(inter_height, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">box1_area = (box1_y2 - box1_y1) * (box1_x2 - box1_x1)</span><br><span class="line">box2_area = (box2_y2 - box2_y1) * (box2_x2 - box2_x1)</span><br><span class="line">union_area = (box1_area + box2_area) - inter_area</span><br><span class="line"></span><br><span class="line">iou = inter_area / union_area</span><br></pre></td></tr></table></figure>

<h4 id="yolo-non-max-suppression"><a href="#yolo-non-max-suppression" class="headerlink" title="yolo_non_max_suppression"></a>yolo_non_max_suppression</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">nms_indices = tf.image.non_max_suppression(boxes, scores, max_boxes_tensor, iou_threshold=iou_threshold)</span><br><span class="line"></span><br><span class="line">scores = K.gather(scores, nms_indices)</span><br><span class="line">boxes = K.gather(boxes, nms_indices)</span><br><span class="line">classes = K.gather(classes, nms_indices)</span><br></pre></td></tr></table></figure>

<h3 id="2-4-Wrapping-up-the-filtering"><a href="#2-4-Wrapping-up-the-filtering" class="headerlink" title="2.4 Wrapping up the filtering"></a>2.4 Wrapping up the filtering</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">box_confidence, box_xy, box_wh, box_class_probs = yolo_outputs</span><br><span class="line"></span><br><span class="line">boxes = yolo_boxes_to_corners(box_xy, box_wh)</span><br><span class="line"></span><br><span class="line">scores, boxes, classes = yolo_filter_boxes(box_confidence, boxes, box_class_probs, threshold = score_threshold)</span><br><span class="line"></span><br><span class="line">boxes = scale_boxes(boxes, image_shape)</span><br><span class="line"></span><br><span class="line">scores, boxes, classes = yolo_non_max_suppression(scores, boxes, classes, max_boxes = max_boxes, iou_threshold = iou_threshold)</span><br></pre></td></tr></table></figure>

<h3 id="3-5-Run-the-graph-on-an-image"><a href="#3-5-Run-the-graph-on-an-image" class="headerlink" title="3.5 - Run the graph on an image"></a>3.5 - Run the graph on an image</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">out_scores, out_boxes, out_classes = sess.run([scores, boxes, classes], feed_dict={yolo_model.input: image_data, K.learning_phase(): <span class="number">0</span>})</span><br></pre></td></tr></table></figure>

<h2 id="Week-4"><a href="#Week-4" class="headerlink" title="Week 4"></a>Week 4</h2><h3 id="Deep-Learning-amp-Art-Neural-Style-Transfer"><a href="#Deep-Learning-amp-Art-Neural-Style-Transfer" class="headerlink" title="Deep Learning & Art: Neural Style Transfer"></a>Deep Learning &amp; Art: Neural Style Transfer</h3><h4 id="3-1-Computing-the-content-cost"><a href="#3-1-Computing-the-content-cost" class="headerlink" title="3.1 - Computing the content cost"></a>3.1 - Computing the content cost</h4><p><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 64.612ex"><svg style="vertical-align: -2.328ex; min-width: 64.612ex" xmlns="http://www.w3.org/2000/svg" width="100%" height="5.786ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0) scale(0.0181) translate(0, -1528.8)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(2078, 0) translate(-2078, 0)"><g transform="translate(0 1528.8) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="12201.3 -1528.8 1 2557.5"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0, 186.8)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="TeXAtom" transform="translate(555, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(433, 0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(918, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1518, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1879, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2345, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2945, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2942.7, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3331.7, 0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(4091.7, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4536.4, 0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(5322.4, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5989.1, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(7044.9, 0)"><g data-mml-node="mn" transform="translate(3981.8, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220, -686)"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(722.2, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msub" transform="translate(1722.4, 0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g><g data-mml-node="mo" transform="translate(3222.6, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msub" transform="translate(4222.8, 0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g></g><g data-mml-node="mo" transform="translate(5836.1, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msub" transform="translate(6836.3, 0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g></g><rect width="8223.7" height="60" x="120" y="220"></rect></g><g data-mml-node="munder" transform="translate(15675.3, 0)"><g data-mml-node="mo" transform="translate(764, 0)"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(0, -1107.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mtext"><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(500, 0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(778, 0)"></path><path data-c="20" d="" transform="translate(1056, 0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(1306, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1750, 0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(2306, 0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(2695, 0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(3087, 0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(3365, 0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(3809, 0)"></path></g></g></g><g data-mml-node="mo" transform="translate(18647.2, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(19036.2, 0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(529, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1149, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(20925, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(21925.2, 0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(529, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1175, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="msup" transform="translate(23610.1, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(389, 413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="1278 -1528.8 1 2557.5"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn-1" transform="translate(0, 186.8)"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(389, 0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(889, 0)"></path></g></g></g></svg></g></g></g></g></svg></mjx-container></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a_C_unrolled = tf.transpose(a_C)</span><br><span class="line">a_G_unrolled = tf.transpose(a_G)</span><br><span class="line"></span><br><span class="line">J_content = (<span class="number">1</span>/ (<span class="number">4</span>* n_H * n_W * n_C)) * tf.reduce_sum(tf.pow((a_G_unrolled - a_C_unrolled), <span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<h4 id="3-2-1-Style-matrix"><a href="#3-2-1-Style-matrix" class="headerlink" title="3.2.1 - Style matrix"></a>3.2.1 - Style matrix</h4><p>$$\mathbf{G}<em>{gram} = \mathbf{A}</em>{unrolled} \mathbf{A}_{unrolled}^T$$</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">GA = tf.matmul(A, tf.transpose(A))</span><br></pre></td></tr></table></figure>

<h4 id="3-2-2-Style-cost"><a href="#3-2-2-Style-cost" class="headerlink" title="3.2.2 - Style cost"></a>3.2.2 - Style cost</h4><p>$$J_{style}^{[l]}(S,G) = \frac{1}{4 \times {n_C}^2 \times (n_H \times n_W)^2} \sum <em>{i=1}^{n_C}\sum</em>{j=1}^{n_C}(G^{(S)}<em>{(gram)i,j} - G^{(G)}</em>{(gram)i,j})^2\tag{2} $$</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">m, n_H, n_W, n_C = a_G.get_shape().as_list()</span><br><span class="line"></span><br><span class="line">a_S = tf.transpose(tf.reshape(a_S, [n_H*n_W, n_C]))</span><br><span class="line">a_G = tf.transpose(tf.reshape(a_G, [n_H*n_W, n_C]))</span><br><span class="line"></span><br><span class="line">GS = gram_matrix(a_S)</span><br><span class="line">GG = gram_matrix(a_G)</span><br><span class="line"></span><br><span class="line">J_style_layer = <span class="number">1.</span>/(<span class="number">4</span> * n_C**<span class="number">2</span> * (n_H*n_W)**<span class="number">2</span>) * tf.reduce_sum(tf.pow((GS - GG), <span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<h4 id="3-2-3-Style-Weights"><a href="#3-2-3-Style-Weights" class="headerlink" title="3.2.3 Style Weights"></a>3.2.3 Style Weights</h4><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.667ex" xmlns="http://www.w3.org/2000/svg" width="37.11ex" height="2.364ex" role="img" focusable="false" viewBox="0 -750 16402.6 1045"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(633, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1022, 0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1808, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2474.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3530.6, 0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="msub" transform="translate(4170.6, 0)"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="TeXAtom" transform="translate(555, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(433, 0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(918, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1518, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1879, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2345, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2945, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7113.3, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7502.3, 0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(8262.3, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(8706.9, 0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(9492.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(10104.1, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(11104.4, 0)"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="msub" transform="translate(11670.4, 0)"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="TeXAtom" transform="translate(555, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830, 0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1320, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1618, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g><g data-mml-node="mo" transform="translate(13749, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(14138, 0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(14783, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(15227.6, 0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(16013.6, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">J = alpha * J_content + beta * J_style</span><br></pre></td></tr></table></figure>

<h3 id="Face-Recognition"><a href="#Face-Recognition" class="headerlink" title="Face Recognition"></a>Face Recognition</h3><h4 id="1-2-The-Triplet-Loss"><a href="#1-2-The-Triplet-Loss" class="headerlink" title="1.2 - The Triplet Loss"></a>1.2 - The Triplet Loss</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pos_dist = tf.reduce_sum(tf.square(tf.subtract(anchor, positive)), axis=<span class="literal">None</span>)</span><br><span class="line">neg_dist = tf.reduce_sum(tf.square(tf.subtract(anchor, negative)), axis=<span class="literal">None</span>)</span><br><span class="line">basic_loss = tf.add(tf.subtract(pos_dist, neg_dist), alpha)</span><br><span class="line"></span><br><span class="line">loss = tf.reduce_sum(tf.maximum(basic_loss, <span class="number">0</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习课程 5</title>
    <url>/cn/Deep-Learning-Course-5/</url>
    <content><![CDATA[<p>哇，我在截止日期之前完成了它们。</p>
<p>😃😃😃</p>
<p><a href="https://www.coursera.org/account/accomplishments/specialization/8BQ77WBNDVQH">Deep Learning Specialization Certificate</a></p>
<h2 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h2><h3 id="Building-a-recurrent-neural-network-step-by-step"><a href="#Building-a-recurrent-neural-network-step-by-step" class="headerlink" title="Building a recurrent neural network - step by step"></a>Building a recurrent neural network - step by step</h3><h3 id="1-1-RNN-cell"><a href="#1-1-RNN-cell" class="headerlink" title="1.1 - RNN cell"></a>1.1 - RNN cell</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a_next = np.tanh(np.matmul(Waa, a_prev) + np.matmul(Wax, xt) + ba)</span><br><span class="line"></span><br><span class="line">yt_pred = softmax(np.matmul(Wya, a_next) + by)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="1-2-RNN-forward-pass"><a href="#1-2-RNN-forward-pass" class="headerlink" title="1.2 - RNN forward pass"></a>1.2 - RNN forward pass</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">xt = x[:,:,t]</span><br><span class="line">a_next, yt_pred, cache = rnn_cell_forward(xt, a_next, parameters)</span><br><span class="line"></span><br><span class="line">a[:,:,t] = a_next</span><br><span class="line"></span><br><span class="line">y_pred[:,:,t] = yt_pred</span><br><span class="line"></span><br><span class="line">caches.append(cache)</span><br></pre></td></tr></table></figure>

<h3 id="2-Long-Short-Term-Memory-LSTM-network"><a href="#2-Long-Short-Term-Memory-LSTM-network" class="headerlink" title="2 - Long Short-Term Memory (LSTM) network"></a>2 - Long Short-Term Memory (LSTM) network</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">concat = np.concatenate((a_prev, xt), axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">ft = sigmoid(np.matmul(Wf, concat) + bf)        <span class="comment"># forget gate</span></span><br><span class="line">it = sigmoid(np.matmul(Wi, concat) + bi)        <span class="comment"># update gate</span></span><br><span class="line">cct = np.tanh(np.matmul(Wc, concat) + bc)       <span class="comment"># candidate value</span></span><br><span class="line">c_next = ft*c_prev + it*cct    <span class="comment"># cell state</span></span><br><span class="line">ot = sigmoid(np.matmul(Wo, concat) + bo)        <span class="comment"># output gate</span></span><br><span class="line">a_next = ot * np.tanh(c_next)    <span class="comment"># hidden state</span></span><br><span class="line"></span><br><span class="line">yt_pred = softmax(np.matmul(Wy, a_next) + by)</span><br></pre></td></tr></table></figure>

<h3 id="2-2-Forward-pass-for-LSTM"><a href="#2-2-Forward-pass-for-LSTM" class="headerlink" title="2.2 - Forward pass for LSTM"></a>2.2 - Forward pass for LSTM</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">Wy = parameters[<span class="string">'Wy'</span>]</span><br><span class="line">n_x, m, T_x = x.shape</span><br><span class="line">n_y, n_a = parameters[<span class="string">'Wy'</span>].shape</span><br><span class="line"></span><br><span class="line">a = np.zeros((n_a, m, T_x))</span><br><span class="line">c = np.zeros((n_a, m, T_x))</span><br><span class="line">y = np.zeros((n_y, m, T_x))</span><br><span class="line"></span><br><span class="line">a_next = a0</span><br><span class="line">c_next = c[:,:,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(T_x):</span><br><span class="line">    xt = x[:,:,t]</span><br><span class="line">    a_next, c_next, yt, cache = lstm_cell_forward(xt, a_next, c_next, parameters)</span><br><span class="line">    a[:,:,t] = a_next</span><br><span class="line">    c[:,:,t]  = c_next</span><br><span class="line">    y[:,:,t] = yt</span><br><span class="line">    caches.append(cache)</span><br></pre></td></tr></table></figure>

<p>…</p>
<p>Too much code and didn’t have time to record them as I have got the Certificate.</p>
]]></content>
      <tags>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Arrays 101</title>
    <url>/cn/LeetCode-Arrays-101/</url>
    <content><![CDATA[<h2 id="Max-Consecutive-Ones"><a href="#Max-Consecutive-Ones" class="headerlink" title="Max Consecutive Ones"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Max-Consecutive-Ones">Max Consecutive Ones</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums.<span class="built_in">split</span>(separator: <span class="number">0</span>).<span class="built_in">map</span> &#123;$<span class="number">0</span>.<span class="built_in">count</span>&#125;.<span class="built_in">max</span>() ?? <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="Find-Numbers-with-Even-Number-of-Digits"><a href="#Find-Numbers-with-Even-Number-of-Digits" class="headerlink" title="Find Numbers with Even Number of Digits"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Find-Numbers-with-Even-Number-of-Digits">Find Numbers with Even Number of Digits</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findNumbers</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums.<span class="built_in">filter</span>(&#123;<span class="type">String</span>($<span class="number">0</span>).<span class="built_in">count</span> &amp; <span class="number">1</span> == <span class="number">0</span> &#125;).<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Squares-of-a-Sorted-Array"><a href="#Squares-of-a-Sorted-Array" class="headerlink" title="Squares of a Sorted Array"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Squares-of-a-Sorted-Array">Squares of a Sorted Array</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sortedSquares</span><span class="params">(<span class="number">_</span> A: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>, ans = <span class="type">A</span></span><br><span class="line">        <span class="keyword">while</span> j &lt; <span class="type">A</span>.<span class="built_in">count</span>, <span class="type">A</span>[j] &lt; <span class="number">0</span> &#123;</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        i = j - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span>, j &lt; <span class="type">A</span>.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> (ai, aj) = (<span class="type">A</span>[i]*<span class="type">A</span>[i], <span class="type">A</span>[j]*<span class="type">A</span>[j])</span><br><span class="line">            ai &lt; aj ? (ans[k] = ai, i -= <span class="number">1</span>) : (ans[k] = aj, j += <span class="number">1</span>)</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">0</span> &#123;</span><br><span class="line">            ans[k...] = <span class="type">A</span>[...i].reversed().<span class="built_in">map</span> &#123;$<span class="number">0</span>*$<span class="number">0</span>&#125;.suffix(from: <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> j &lt; <span class="type">A</span>.<span class="built_in">count</span> &#123;</span><br><span class="line">            ans[k...] = <span class="type">A</span>[k...].<span class="built_in">map</span> &#123; $<span class="number">0</span>*$<span class="number">0</span> &#125;.suffix(from: <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Duplicate-Zeros"><a href="#Duplicate-Zeros" class="headerlink" title="Duplicate Zeros"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Duplicate-Zeros">Duplicate Zeros</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">duplicateZeros</span><span class="params">(<span class="number">_</span> arr: <span class="keyword">inout</span> [Int])</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> na = <span class="type">Array</span>(repeating: <span class="number">0</span>, <span class="built_in">count</span>: arr.<span class="built_in">count</span>), i = <span class="number">0</span>, j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> j &lt; na.<span class="built_in">count</span> &#123;</span><br><span class="line">            na[j] = arr[i]</span><br><span class="line">            <span class="keyword">if</span> arr[i] == <span class="number">0</span>, j &lt; na.<span class="built_in">count</span>-<span class="number">1</span> &#123; j += <span class="number">1</span>; na[j] = <span class="number">0</span> &#125;</span><br><span class="line">            i += <span class="number">1</span>; j += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        arr = na</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Merge-Sorted-Array"><a href="#Merge-Sorted-Array" class="headerlink" title="Merge Sorted Array"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Merge-Sorted-Array">Merge Sorted Array</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(<span class="number">_</span> nums1: <span class="keyword">inout</span> [Int], <span class="number">_</span> m: Int, <span class="number">_</span> nums2: [Int], <span class="number">_</span> n: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> nums0 = nums1[..&lt;m]</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; nums0.<span class="built_in">count</span>, j &lt; nums2.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> nums0[i] &lt; nums2[j] &#123;</span><br><span class="line">                nums1[k] = nums0[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums1[k] = nums2[j]</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> i &lt; nums0.<span class="built_in">count</span> &#123;</span><br><span class="line">            nums1[k] = nums0[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> j &lt; nums2.<span class="built_in">count</span> &#123;</span><br><span class="line">            nums1[k] = nums2[j]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Remove-Element"><a href="#Remove-Element" class="headerlink" title="Remove Element"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Remove-Element">Remove Element</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(<span class="number">_</span> nums: <span class="keyword">inout</span> [Int], <span class="number">_</span> val: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = nums.<span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] == val &#123;</span><br><span class="line">                <span class="keyword">while</span> nums[j] == val &#123; j -= <span class="number">1</span> &#125;</span><br><span class="line">                nums.swapAt(i, j)</span><br><span class="line">            &#125;</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Remove-Duplicates-from-Sorted-Array"><a href="#Remove-Duplicates-from-Sorted-Array" class="headerlink" title="Remove Duplicates from Sorted Array"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Remove-Duplicates-from-Sorted-Array">Remove Duplicates from Sorted Array</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(<span class="number">_</span> nums: <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] != nums[j] &#123;</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.isEmpty ? <span class="number">0</span> : i+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Check-If-N-and-Its-Double-Exist"><a href="#Check-If-N-and-Its-Double-Exist" class="headerlink" title="Check If N and Its Double Exist"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Check-If-N-and-Its-Double-Exist">Check If N and Its Double Exist</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">checkIfExist</span><span class="params">(<span class="number">_</span> arr: [Int])</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> dict = <span class="type">Dictionary</span>&lt;<span class="type">Int</span>, <span class="type">Int</span>&gt;()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> arr &#123;</span><br><span class="line">            dict[i] = (dict[i] ?? <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> arr &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> v = dict[i*<span class="number">2</span>], v &gt;= ((i==<span class="number">0</span>) ? <span class="number">2</span> : <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Valid-Mountain-Array"><a href="#Valid-Mountain-Array" class="headerlink" title="Valid Mountain Array"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Valid-Mountain-Array">Valid Mountain Array</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">validMountainArray</span><span class="params">(<span class="number">_</span> A: [Int])</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="type">A</span>.<span class="built_in">count</span>-<span class="number">1</span>, <span class="type">A</span>[i] &lt; <span class="type">A</span>[i+<span class="number">1</span>] &#123; i += <span class="number">1</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> || i == <span class="type">A</span>.<span class="built_in">count</span>-<span class="number">1</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="type">A</span>.<span class="built_in">count</span>-<span class="number">1</span>, <span class="type">A</span>[i] &gt; <span class="type">A</span>[i+<span class="number">1</span>] &#123; i += <span class="number">1</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> i == <span class="type">A</span>.<span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Replace-Elements-with-Greatest-Element-on-Right-Side"><a href="#Replace-Elements-with-Greatest-Element-on-Right-Side" class="headerlink" title="Replace Elements with Greatest Element on Right Side"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Replace-Elements-with-Greatest-Element-on-Right-Side">Replace Elements with Greatest Element on Right Side</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">replaceElements</span><span class="params">(<span class="number">_</span> arr: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> i = arr.<span class="built_in">count</span>-<span class="number">1</span>, rMax = -<span class="number">1</span>, newArr = arr</span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> &#123;</span><br><span class="line">            newArr[i] = rMax</span><br><span class="line">            rMax = <span class="built_in">max</span>(rMax, arr[i])</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newArr</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Remove-Duplicates-from-Sorted-Array-1"><a href="#Remove-Duplicates-from-Sorted-Array-1" class="headerlink" title="Remove Duplicates from Sorted Array"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Remove-Duplicates-from-Sorted-Array">Remove Duplicates from Sorted Array</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(<span class="number">_</span> nums: <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] != nums[j] &#123;</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.isEmpty ? <span class="number">0</span> : i+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Move-Zeroes"><a href="#Move-Zeroes" class="headerlink" title="Move Zeroes"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Move-Zeroes">Move Zeroes</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">moveZeroes</span><span class="params">(<span class="number">_</span> nums: <span class="keyword">inout</span> [Int])</span></span> &#123;</span><br><span class="line">        nums = <span class="type">Array</span>(nums.<span class="built_in">split</span>(separator: <span class="number">0</span>).joined()) + <span class="type">Array</span>(nums.<span class="built_in">filter</span>(&#123;$<span class="number">0</span> == <span class="number">0</span>&#125;))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Sort-Array-By-Parity"><a href="#Sort-Array-By-Parity" class="headerlink" title="Sort Array By Parity"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Sort-Array-By-Parity">Sort Array By Parity</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sortArrayByParity</span><span class="params">(<span class="number">_</span> A: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> even = [<span class="type">Int</span>](), odd = even</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="type">A</span> &#123;</span><br><span class="line">            i &amp; <span class="number">1</span> == <span class="number">0</span> ? (even.append(i)) : (odd.append(i))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> even + odd</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Squares-of-a-Sorted-Array-1"><a href="#Squares-of-a-Sorted-Array-1" class="headerlink" title="Squares of a Sorted Array"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Squares-of-a-Sorted-Array">Squares of a Sorted Array</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sortedSquares</span><span class="params">(<span class="number">_</span> A: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>, ans = <span class="type">A</span></span><br><span class="line">        <span class="keyword">while</span> j &lt; <span class="type">A</span>.<span class="built_in">count</span>, <span class="type">A</span>[j] &lt; <span class="number">0</span> &#123;</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        i = j - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span>, j &lt; <span class="type">A</span>.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> (ai, aj) = (<span class="type">A</span>[i]*<span class="type">A</span>[i], <span class="type">A</span>[j]*<span class="type">A</span>[j])</span><br><span class="line">            ai &lt; aj ? (ans[k] = ai, i -= <span class="number">1</span>) : (ans[k] = aj, j += <span class="number">1</span>)</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">0</span> &#123;</span><br><span class="line">            ans[k...] = <span class="type">A</span>[...i].reversed().<span class="built_in">map</span> &#123;$<span class="number">0</span>*$<span class="number">0</span>&#125;.suffix(from: <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> j &lt; <span class="type">A</span>.<span class="built_in">count</span> &#123;</span><br><span class="line">            ans[k...] = <span class="type">A</span>[k...].<span class="built_in">map</span> &#123; $<span class="number">0</span>*$<span class="number">0</span> &#125;.suffix(from: <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Height-Checker"><a href="#Height-Checker" class="headerlink" title="Height Checker"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Height-Checker">Height Checker</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">heightChecker</span><span class="params">(<span class="number">_</span> heights: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">zip</span>(heights, heights.sorted()).<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; <span class="keyword">return</span> $<span class="number">0</span> + ($<span class="number">1.0</span> == $<span class="number">1.1</span> ? <span class="number">0</span> : <span class="number">1</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Max-Consecutive-Ones-II"><a href="#Max-Consecutive-Ones-II" class="headerlink" title="Max Consecutive Ones II"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Max-Consecutive-Ones-II">Max Consecutive Ones II</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> z0 = <span class="number">0</span>, z1 = <span class="number">0</span>, maxZ = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums &#123;</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">1</span> &#123;</span><br><span class="line">                z1 += <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                z0 = z1</span><br><span class="line">                z1 = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">            maxZ = <span class="built_in">max</span>(maxZ, z0+z1+<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(maxZ, nums.<span class="built_in">count</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Third-Maximum-Number"><a href="#Third-Maximum-Number" class="headerlink" title="Third Maximum Number"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Third-Maximum-Number">Third Maximum Number</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">thirdMax</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> maxs = [<span class="type">Int</span>.<span class="built_in">min</span>, <span class="type">Int</span>.<span class="built_in">min</span>, <span class="type">Int</span>.<span class="built_in">min</span>]</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums &#123;</span><br><span class="line">            <span class="keyword">if</span> n &gt; maxs[<span class="number">2</span>], maxs.firstIndex(of: n) == <span class="literal">nil</span> &#123;</span><br><span class="line">                maxs[<span class="number">2</span>] = n</span><br><span class="line">                <span class="keyword">if</span> maxs[<span class="number">2</span>] &gt; maxs[<span class="number">1</span>] &#123;</span><br><span class="line">                    maxs.swapAt(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">if</span> maxs[<span class="number">1</span>] &gt; maxs[<span class="number">0</span>] &#123;</span><br><span class="line">                        maxs.swapAt(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxs[<span class="number">2</span>] == <span class="type">Int</span>.<span class="built_in">min</span> ? maxs[<span class="number">0</span>] : maxs[<span class="number">2</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Find-All-Numbers-Disappeared-in-an-Array"><a href="#Find-All-Numbers-Disappeared-in-an-Array" class="headerlink" title="Find All Numbers Disappeared in an Array"></a><a href="https://leihao0.github.io/LeetCode-Arrays-101/#Find-All-Numbers-Disappeared-in-an-Array">Find All Numbers Disappeared in an Array</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findDisappearedNumbers</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> nums = nums, ans = [<span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; nums.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> index = <span class="built_in">abs</span>(nums[i])-<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> nums[index] &gt; <span class="number">0</span> &#123; nums[index] *= -<span class="number">1</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; <span class="number">0</span> &#123; ans.append(i+<span class="number">1</span>) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>LeetCode</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Linked List</title>
    <url>/cn/LeetCode-Linked-List/</url>
    <content><![CDATA[<h2 id="Design-Linked-List"><a href="#Design-Linked-List" class="headerlink" title="Design Linked List"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Design-Linked-List">Design Linked List</a></h2><a id="more"></a>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> val: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> prev: <span class="type">Node?</span>, next: <span class="type">Node?</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> val: <span class="type">Int</span>, prev: <span class="type">Node?</span> = <span class="literal">nil</span>, <span class="number">_</span> next: <span class="type">Node?</span> = <span class="literal">nil</span>) &#123; <span class="keyword">self</span>.val = val; <span class="keyword">self</span>.prev = prev; <span class="keyword">self</span>.next = next &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> head: <span class="type">Node</span> = <span class="type">Node</span>(-<span class="number">1</span>), tail: <span class="type">Node</span> = <span class="type">Node</span>(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>() &#123;  head.next = tail; tail.prev = head &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> findNode(index)?.val ?? -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addAtHead</span><span class="params">(<span class="number">_</span> val: Int)</span></span> &#123;</span><br><span class="line">        addAtIndex(<span class="number">0</span>, val)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addAtTail</span><span class="params">(<span class="number">_</span> val: Int)</span></span> &#123;</span><br><span class="line">        addAtIndex(<span class="built_in">count</span>, val)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addAtIndex</span><span class="params">(<span class="number">_</span> index: Int, <span class="number">_</span> val: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="built_in">count</span>, <span class="keyword">let</span> node = findNode(index) &#123;</span><br><span class="line">            <span class="keyword">let</span> newNode = <span class="type">Node</span>(val)</span><br><span class="line">            newNode.next = node</span><br><span class="line">            newNode.prev = node.prev</span><br><span class="line">            node.prev?.next = newNode</span><br><span class="line">            node.prev = newNode</span><br><span class="line">            <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printList()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="built_in">count</span>, <span class="keyword">let</span> node = findNode(index) &#123;</span><br><span class="line">            node.prev?.next = node.next</span><br><span class="line">            node.next?.prev = node.prev</span><br><span class="line">            node.prev = <span class="literal">nil</span>; node.next = <span class="literal">nil</span></span><br><span class="line">            <span class="built_in">count</span> -= <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printList()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">findNode</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">Node?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> p: <span class="type">Node?</span>, i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> index &lt;= (<span class="built_in">count</span>/<span class="number">2</span>) &#123;</span><br><span class="line">            p = head.next</span><br><span class="line">            <span class="keyword">while</span> p != <span class="literal">nil</span>, i &lt; index &#123;</span><br><span class="line">                p = p?.next; i += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p = tail; i = <span class="built_in">count</span></span><br><span class="line">            <span class="keyword">while</span> p != <span class="literal">nil</span>, i &gt; index &#123;</span><br><span class="line">                p = p?.prev; i -= <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">printList</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> p = head.next, i: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span>, i &lt; <span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(p!.val, terminator: <span class="string">&quot;-&gt;&quot;</span> )</span><br><span class="line">            p = p?.next; i += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Linked-List-Cycle"><a href="#Linked-List-Cycle" class="headerlink" title="Linked List Cycle"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Linked-List-Cycle">Linked List Cycle</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hasCycle</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> fast = head?.next, slow = head</span><br><span class="line">        <span class="keyword">while</span> fast != <span class="literal">nil</span>, fast !== slow &#123;</span><br><span class="line">            fast = fast?.next?.next</span><br><span class="line">            slow = slow?.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast != <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Linked-List-Cycle-II"><a href="#Linked-List-Cycle-II" class="headerlink" title="Linked List Cycle II"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Linked-List-Cycle-II">Linked List Cycle II</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">detectCycle</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> slow = head, fast = head?.next</span><br><span class="line">        <span class="keyword">while</span> fast != <span class="literal">nil</span>, fast !== slow &#123;</span><br><span class="line">            fast = fast?.next?.next</span><br><span class="line">            slow = slow?.next</span><br><span class="line">        &#125;</span><br><span class="line">        slow = head; fast = fast?.next</span><br><span class="line">        <span class="keyword">while</span> fast != <span class="literal">nil</span>, fast !== slow &#123;</span><br><span class="line">            fast = fast?.next</span><br><span class="line">            slow = slow?.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Intersection-of-Two-Linked-Lists"><a href="#Intersection-of-Two-Linked-Lists" class="headerlink" title="Intersection of Two Linked Lists"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Intersection-of-Two-Linked-Lists">Intersection of Two Linked Lists</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getIntersectionNode</span><span class="params">(<span class="number">_</span> headA: ListNode?, <span class="number">_</span> headB: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> tailA = headA</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> p = tailA?.next &#123; tailA = p &#125;</span><br><span class="line">        tailA?.next = headB</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> fast = detectCycle(headA)</span><br><span class="line"></span><br><span class="line">        tailA?.next = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fast</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">detectCycle</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> slow = head, fast = head?.next</span><br><span class="line">        <span class="keyword">while</span> fast != <span class="literal">nil</span>, fast !== slow &#123;</span><br><span class="line">            fast = fast?.next?.next</span><br><span class="line">            slow = slow?.next</span><br><span class="line">        &#125;</span><br><span class="line">        slow = head; fast = fast?.next</span><br><span class="line">        <span class="keyword">while</span> fast != <span class="literal">nil</span>, fast !== slow &#123;</span><br><span class="line">            fast = fast?.next</span><br><span class="line">            slow = slow?.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Remove-Nth-Node-From-End-of-List"><a href="#Remove-Nth-Node-From-End-of-List" class="headerlink" title="Remove Nth Node From End of List"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Remove-Nth-Node-From-End-of-List">Remove Nth Node From End of List</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeNthFromEnd</span><span class="params">(<span class="number">_</span> head: ListNode?, <span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> pHead = <span class="type">ListNode</span>(-<span class="number">1</span>, head), p0: <span class="type">ListNode?</span> = pHead, p1 = p0, i = <span class="number">0</span>, j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> q = p1?.next, j &lt; n &#123;</span><br><span class="line">            p1 = q; j += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> q = p1?.next &#123;</span><br><span class="line">            p1 = q; p0 = p0?.next</span><br><span class="line">        &#125;</span><br><span class="line">        p0?.next = p0?.next?.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pHead.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Reverse-Linked-List"><a href="#Reverse-Linked-List" class="headerlink" title="Reverse Linked List"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Reverse-Linked-List">Reverse Linked List</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> head?.next == <span class="literal">nil</span> &#123; <span class="keyword">return</span> head &#125;</span><br><span class="line">        <span class="keyword">let</span> h = reverseList(head?.next)</span><br><span class="line">        head?.next?.next = head</span><br><span class="line">        head?.next = <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> prev: <span class="type">ListNode?</span> = <span class="literal">nil</span>, cur = head</span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> p = cur?.next</span><br><span class="line">            cur?.next = prev</span><br><span class="line">            prev = cur</span><br><span class="line">            cur = p</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Remove-Linked-List-Elements"><a href="#Remove-Linked-List-Elements" class="headerlink" title="Remove Linked List Elements"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Remove-Linked-List-Elements">Remove Linked List Elements</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeElements</span><span class="params">(<span class="number">_</span> head: ListNode?, <span class="number">_</span> val: Int)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> pHead = <span class="type">ListNode</span>(-<span class="number">1</span>, head); <span class="keyword">var</span> p: <span class="type">ListNode?</span> = pHead</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> pn = p!.next, pn.val == val &#123;</span><br><span class="line">                p!.next = pn.next</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p = p!.next</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pHead.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Odd-Even-Linked-List"><a href="#Odd-Even-Linked-List" class="headerlink" title="Odd Even Linked List"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Odd-Even-Linked-List">Odd Even Linked List</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">oddEvenList</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> evenHead = head, oddHead = head?.next</span><br><span class="line">        <span class="keyword">var</span> evenP = evenHead, oddP = oddHead</span><br><span class="line">        <span class="keyword">while</span> oddP?.next != <span class="literal">nil</span> &#123;</span><br><span class="line">            evenP?.next = evenP?.next?.next</span><br><span class="line">            oddP?.next = oddP?.next?.next</span><br><span class="line">            evenP = evenP?.next</span><br><span class="line">            oddP = oddP?.next</span><br><span class="line">        &#125;</span><br><span class="line">        evenP?.next = oddHead</span><br><span class="line">        <span class="keyword">return</span> evenHead</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Palindrome-Linked-List"><a href="#Palindrome-Linked-List" class="headerlink" title="Palindrome Linked List"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Palindrome-Linked-List">Palindrome Linked List</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isPalindrome</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tail = reverseList(center(head))</span><br><span class="line">        <span class="keyword">return</span> compare(head, tail)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">compare</span><span class="params">(<span class="number">_</span> head: ListNode?, <span class="number">_</span> tail: ListNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> p = head, q = tail</span><br><span class="line">        <span class="keyword">while</span> q != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> p == <span class="literal">nil</span> || q!.val != p!.val &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line">            p = p!.next; q = q!.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">center</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span>  -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> fast = head?.next, slow = head</span><br><span class="line">        <span class="keyword">while</span> fast != <span class="literal">nil</span>, fast !== slow &#123;</span><br><span class="line">            fast = fast?.next?.next</span><br><span class="line">            slow = slow?.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> prev: <span class="type">ListNode?</span> = <span class="literal">nil</span>, cur = head</span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> p = cur?.next</span><br><span class="line">            cur?.next = prev</span><br><span class="line">            prev = cur; cur = p</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Merge-Two-Sorted-Lists"><a href="#Merge-Two-Sorted-Lists" class="headerlink" title="Merge Two Sorted Lists"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Merge-Two-Sorted-Lists">Merge Two Sorted Lists</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(<span class="number">_</span> l1: ListNode?, <span class="number">_</span> l2: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> p1 = l1 <span class="keyword">else</span> &#123; <span class="keyword">return</span> l2 &#125;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> p2 = l2 <span class="keyword">else</span> &#123; <span class="keyword">return</span> l1 &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> (p, q) = p1.val &lt;= p2.val ? (p1, p2) : (p2, p1)</span><br><span class="line">        p.next = mergeTwoLists(p.next, q)</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Add-Two-Numbers"><a href="#Add-Two-Numbers" class="headerlink" title="Add Two Numbers"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Add-Two-Numbers">Add Two Numbers</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addTwoNumbers</span><span class="params">(<span class="number">_</span> l1: ListNode?, <span class="number">_</span> l2: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> head = <span class="type">ListNode</span>(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">var</span> p1 = l1, p2 = l2, p3: <span class="type">ListNode?</span> = head, v = <span class="number">0</span>, carry = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> p1 != <span class="literal">nil</span> || p2 != <span class="literal">nil</span> &#123;</span><br><span class="line">            v = (p1?.val ?? <span class="number">0</span>)+(p2?.val ?? <span class="number">0</span>)+carry</span><br><span class="line">            carry =  v/<span class="number">10</span>; v %= <span class="number">10</span></span><br><span class="line">            p3?.next = <span class="type">ListNode</span>(v)</span><br><span class="line">            p1 = p1?.next; p2 = p2?.next; p3 = p3?.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> carry != <span class="number">0</span> &#123; p3?.next = <span class="type">ListNode</span>(carry) &#125;</span><br><span class="line">        <span class="keyword">return</span> head.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Flatten-a-Multilevel-Doubly-Linked-List"><a href="#Flatten-a-Multilevel-Doubly-Linked-List" class="headerlink" title="Flatten a Multilevel Doubly Linked List"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Flatten-a-Multilevel-Doubly-Linked-List">Flatten a Multilevel Doubly Linked List</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">flatten</span><span class="params">(<span class="number">_</span> head: Node?)</span></span> -&gt; <span class="type">Node?</span> &#123;</span><br><span class="line">        getTail(head)</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">getTail</span><span class="params">(<span class="number">_</span> head: Node?)</span></span> -&gt; <span class="type">Node?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> head = head <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> child = head.child &#123;</span><br><span class="line">            <span class="keyword">let</span> tail = getTail(child)</span><br><span class="line">            tail?.next = head.next</span><br><span class="line">            head.next?.prev = tail</span><br><span class="line">            head.next = head.child</span><br><span class="line">            head.child?.prev = head</span><br><span class="line">            head.child = <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> p = head.next &#123;</span><br><span class="line">            <span class="keyword">return</span> getTail(p)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Insert-into-a-Cyclic-Sorted-List"><a href="#Insert-into-a-Cyclic-Sorted-List" class="headerlink" title="Insert into a Cyclic Sorted List"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Insert-into-a-Cyclic-Sorted-List">Insert into a Cyclic Sorted List</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(<span class="number">_</span> head: Node?, <span class="number">_</span> insertVal: Int)</span></span> -&gt; <span class="type">Node?</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> n = <span class="type">Node</span>(insertVal)</span><br><span class="line">            n.next = n</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> p = head</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (p!.val &lt;= insertVal &amp;&amp;  p!.next!.val &gt;= insertVal) ||</span><br><span class="line">            (p!.val &gt; p!.next!.val &amp;&amp; (insertVal &lt;= p!.next!.val || insertVal &gt;= p!.val ) ||</span><br><span class="line">             p!.next == head</span><br><span class="line">            ) &#123;</span><br><span class="line">                <span class="keyword">let</span> n = <span class="type">Node</span>(insertVal)</span><br><span class="line">                n.next = p!.next</span><br><span class="line">                p!.next = n</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            p = p!.next</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Copy-List-with-Random-Pointer"><a href="#Copy-List-with-Random-Pointer" class="headerlink" title="Copy List with Random Pointer"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Copy-List-with-Random-Pointer">Copy List with Random Pointer</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">copyRandomList</span><span class="params">(<span class="number">_</span> head: Node?)</span></span> -&gt; <span class="type">Node?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> p = head, nNode = head</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> n = <span class="type">Node</span>(p!.val)</span><br><span class="line">            n.next = p?.next</span><br><span class="line">            p?.next = n</span><br><span class="line">            p = p?.next?.next</span><br><span class="line">        &#125;</span><br><span class="line">        p = head</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">            p?.next?.random = p?.random?.next</span><br><span class="line">            p = p?.next?.next</span><br><span class="line">        &#125;</span><br><span class="line">        p = head; nNode = head?.next</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> q = p?.next</span><br><span class="line">            p?.next = p?.next?.next</span><br><span class="line">            q?.next = q?.next?.next</span><br><span class="line">            p = p?.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nNode</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Rotate-List"><a href="#Rotate-List" class="headerlink" title="Rotate List"></a><a href="https://leihao0.github.io/LeetCode-Linked-List/#Rotate-List">Rotate List</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">rotateRight</span><span class="params">(<span class="number">_</span> head: ListNode?, <span class="number">_</span> k: Int)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> length = <span class="number">0</span>, fast = head, slow = head, i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> fast != <span class="literal">nil</span> &#123; fast = fast!.next; length += <span class="number">1</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> length &lt; <span class="number">2</span> &#123; <span class="keyword">return</span> head &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> k = k % length</span><br><span class="line"></span><br><span class="line">        fast = head</span><br><span class="line">        <span class="keyword">while</span> i &lt; k &#123; fast = fast?.next; i += <span class="number">1</span> &#125;</span><br><span class="line">        <span class="keyword">while</span> fast?.next != <span class="literal">nil</span> &#123;</span><br><span class="line">            slow = slow?.next; fast = fast?.next</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fast?.next = head</span><br><span class="line">        <span class="keyword">let</span> node = slow?.next</span><br><span class="line">        slow?.next = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>LeetCode</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Binary Tree</title>
    <url>/cn/LeetCode-Binary-Tree/</url>
    <content><![CDATA[<h2 id="Binary-Tree-Preorder-Traversal"><a href="#Binary-Tree-Preorder-Traversal" class="headerlink" title="Binary Tree Preorder Traversal"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Binary-Tree-Preorder-Traversal">Binary Tree Preorder Traversal</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// iterative</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">preorderTraversal</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> ans = [<span class="type">Int</span>](), stack: [<span class="type">TreeNode</span>] = root != <span class="literal">nil</span> ? [root!] : []</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> p = stack.popLast() &#123;</span><br><span class="line">            ans.append(p.val)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> r = p.<span class="keyword">right</span> &#123; stack.append(r) &#125;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> l = p.<span class="keyword">left</span> &#123; stack.append(l) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// recursive</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">preorderTraversal0</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">        <span class="keyword">return</span> [root.val] + preorderTraversal(root.<span class="keyword">left</span>) + preorderTraversal(root.<span class="keyword">right</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="Binary-Tree-Inorder-Traversal"><a href="#Binary-Tree-Inorder-Traversal" class="headerlink" title="Binary Tree Inorder Traversal"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Binary-Tree-Inorder-Traversal">Binary Tree Inorder Traversal</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// iteratively</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> ans = [<span class="type">Int</span>](), stack = [<span class="type">TreeNode</span>](), p = root</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> || !stack.isEmpty &#123;</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">let</span> l = p &#123;</span><br><span class="line">                stack.append(l)</span><br><span class="line">                p = l.<span class="keyword">left</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> n = stack.popLast() &#123;</span><br><span class="line">                ans.append(n.val)</span><br><span class="line">                p = n.<span class="keyword">right</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Binary-Tree-Postorder-Traversal"><a href="#Binary-Tree-Postorder-Traversal" class="headerlink" title="Binary Tree Postorder Traversal"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Binary-Tree-Postorder-Traversal">Binary Tree Postorder Traversal</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Recursive</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">postorderTraversal</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">        <span class="keyword">return</span> postorderTraversal(root.<span class="keyword">left</span>) + postorderTraversal(root.<span class="keyword">right</span>) + [root.val]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Binary-Tree-Level-Order-Traversal"><a href="#Binary-Tree-Level-Order-Traversal" class="headerlink" title="Binary Tree Level Order Traversal"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Binary-Tree-Level-Order-Traversal">Binary Tree Level Order Traversal</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">levelOrder</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">var</span> ans = [[<span class="type">Int</span>]]()</span><br><span class="line">        helper(root, <span class="number">0</span>, &amp;ans)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> level: Int, <span class="number">_</span> ans: <span class="keyword">inout</span> [[Int]])</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> level &gt;= ans.<span class="built_in">count</span> &#123;</span><br><span class="line">            ans.append( [root.val] )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans[level].append(root.val)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        helper(root.<span class="keyword">left</span>, level+<span class="number">1</span>, &amp;ans)</span><br><span class="line">        helper(root.<span class="keyword">right</span>, level+<span class="number">1</span>, &amp;ans)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Maximum-Depth-of-Binary-Tree"><a href="#Maximum-Depth-of-Binary-Tree" class="headerlink" title="Maximum Depth of Binary Tree"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Maximum-Depth-of-Binary-Tree">Maximum Depth of Binary Tree</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">maxDepth</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> root != <span class="literal">nil</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">max</span>(maxDepth(root?.<span class="keyword">left</span>), maxDepth(root?.<span class="keyword">right</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Symmetric-Tree"><a href="#Symmetric-Tree" class="headerlink" title="Symmetric Tree"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Symmetric-Tree">Symmetric Tree</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isSymmetric</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> inOrder(root) == inOrder(<span class="built_in">reverse</span>(root))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(root.<span class="keyword">left</span>); <span class="built_in">reverse</span>(root.<span class="keyword">right</span>)</span><br><span class="line">        <span class="built_in">swap</span>(&amp;root.<span class="keyword">left</span>, &amp;root.<span class="keyword">right</span>)</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">inOrder</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [<span class="type">Int?</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> root == <span class="literal">nil</span> ? [<span class="literal">nil</span>] : [root!.val] + inOrder(root!.<span class="keyword">left</span>) + inOrder(root!.<span class="keyword">right</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Path-Sum"><a href="#Path-Sum" class="headerlink" title="Path Sum"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Path-Sum">Path Sum</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hasPathSum</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> sum: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> root.<span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; root.<span class="keyword">right</span> == <span class="literal">nil</span> &amp;&amp; root.val == sum &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> hasPathSum(root.<span class="keyword">left</span>, sum-root.val) || hasPathSum(root.<span class="keyword">right</span>, sum-root.val)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Count-Univalue-Subtrees"><a href="#Count-Univalue-Subtrees" class="headerlink" title="Count Univalue Subtrees"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Count-Univalue-Subtrees">Count Univalue Subtrees</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">countUnivalSubtrees</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        isUni(root)</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">isUni</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> root.<span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; root.<span class="keyword">right</span> == <span class="literal">nil</span> &#123;</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> lv = root.<span class="keyword">left</span>?.val ?? root.<span class="keyword">right</span>!.val</span><br><span class="line">        <span class="keyword">let</span> rv = root.<span class="keyword">right</span>?.val ?? root.<span class="keyword">left</span>!.val</span><br><span class="line">        <span class="keyword">let</span> l = root.<span class="keyword">left</span> == <span class="literal">nil</span> ? <span class="literal">true</span> : isUni(root.<span class="keyword">left</span>)</span><br><span class="line">        <span class="keyword">let</span> r = root.<span class="keyword">right</span> == <span class="literal">nil</span> ? <span class="literal">true</span> : isUni(root.<span class="keyword">right</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> ans = l &amp;&amp; r &amp;&amp; (lv == root.val &amp;&amp; rv == root.val)</span><br><span class="line">        <span class="keyword">if</span> ans &#123; num += <span class="number">1</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal"><a href="#Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal" class="headerlink" title="Construct Binary Tree from Inorder and Postorder Traversal"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal">Construct Binary Tree from Inorder and Postorder Traversal</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buildTree</span><span class="params">(<span class="number">_</span> inorder: [Int], <span class="number">_</span> postorder: [Int])</span></span> -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> dict = inorder.enumerated().<span class="built_in">reduce</span>(into: [<span class="type">Int</span>:<span class="type">Int</span>]()) &#123; $<span class="number">0</span>[$<span class="number">1.1</span>] = $<span class="number">1.0</span> &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">(<span class="number">_</span> inRange: <span class="params">(Int, Int)</span></span></span>, <span class="number">_</span> postI: <span class="type">Int</span>) -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> postI &lt; <span class="number">0</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">            <span class="keyword">let</span> v = postorder[postI]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> i = dict[v], i &gt;= inRange.<span class="number">0</span> &amp;&amp; i &lt;= inRange.<span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> n = <span class="type">TreeNode</span>(v)</span><br><span class="line">                n.<span class="keyword">left</span> = helper((inRange.<span class="number">0</span>, i-<span class="number">1</span>), postI-<span class="number">1</span>)</span><br><span class="line">                n.<span class="keyword">right</span> = helper((i+<span class="number">1</span>, inRange.<span class="number">1</span>), postI-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> n</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> helper(inRange, postI-<span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper((<span class="number">0</span>, inorder.<span class="built_in">count</span>-<span class="number">1</span>), postorder.<span class="built_in">count</span>-<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal"><a href="#Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal" class="headerlink" title="Construct Binary Tree from Preorder and Inorder Traversal"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal">Construct Binary Tree from Preorder and Inorder Traversal</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buildTree</span><span class="params">(<span class="number">_</span> preorder: [Int], <span class="number">_</span> inorder: [Int])</span></span> -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> dict = inorder.enumerated().<span class="built_in">reduce</span>(into: [<span class="type">Int</span>: <span class="type">Int</span>]()) &#123;$<span class="number">0</span>[$<span class="number">1.1</span>]=$<span class="number">1.0</span>&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">(<span class="number">_</span> inRange: <span class="params">(Int, Int)</span></span></span>, <span class="number">_</span> preI: <span class="type">Int</span>) -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> preI &gt;= preorder.<span class="built_in">count</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">            <span class="keyword">let</span> v = preorder[preI]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> i = dict[v], i &gt;= inRange.<span class="number">0</span> &amp;&amp; i &lt;= inRange.<span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> n = <span class="type">TreeNode</span>(v)</span><br><span class="line">                n.<span class="keyword">left</span> = helper((inRange.<span class="number">0</span>, i-<span class="number">1</span>), preI+<span class="number">1</span>)</span><br><span class="line">                n.<span class="keyword">right</span> = helper((i+<span class="number">1</span>, inRange.<span class="number">1</span>), preI+<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> n</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> helper(inRange, preI+<span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper((<span class="number">0</span>, inorder.<span class="built_in">count</span>-<span class="number">1</span>), <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Populating-Next-Right-Pointers-in-Each-Node"><a href="#Populating-Next-Right-Pointers-in-Each-Node" class="headerlink" title="Populating Next Right Pointers in Each Node"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Populating-Next-Right-Pointers-in-Each-Node">Populating Next Right Pointers in Each Node</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">connect</span><span class="params">(<span class="number">_</span> root: Node?)</span></span> -&gt; <span class="type">Node?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        root.<span class="keyword">left</span>?.next = root.<span class="keyword">right</span></span><br><span class="line">        root.<span class="keyword">right</span>?.next = root.next?.<span class="keyword">left</span></span><br><span class="line">        connect(root.<span class="keyword">left</span>)</span><br><span class="line">        connect(root.<span class="keyword">right</span>)</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Populating-Next-Right-Pointers-in-Each-Node-II"><a href="#Populating-Next-Right-Pointers-in-Each-Node-II" class="headerlink" title="Populating Next Right Pointers in Each Node II"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Populating-Next-Right-Pointers-in-Each-Node-II">Populating Next Right Pointers in Each Node II</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">connect</span><span class="params">(<span class="number">_</span> root: Node?)</span></span> -&gt; <span class="type">Node?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> nodes = [[<span class="type">Node</span>]]()</span><br><span class="line">        helper(root, <span class="number">0</span>, &amp;nodes)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nodes.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;(nodes[i].<span class="built_in">count</span>-<span class="number">1</span>) &#123;</span><br><span class="line">                nodes[i][j].next = nodes[i][j+<span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">(<span class="number">_</span> root: Node?, <span class="number">_</span> level: Int, <span class="number">_</span> nodes: <span class="keyword">inout</span> [[Node]])</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        level &lt; nodes.<span class="built_in">count</span> ? nodes[level].append(root) : nodes.append([root])</span><br><span class="line">        helper(root.<span class="keyword">left</span>, level+<span class="number">1</span>, &amp;nodes)</span><br><span class="line">        helper(root.<span class="keyword">right</span>, level+<span class="number">1</span>, &amp;nodes)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Lowest-Common-Ancestor-of-a-Binary-Tree"><a href="#Lowest-Common-Ancestor-of-a-Binary-Tree" class="headerlink" title="Lowest Common Ancestor of a Binary Tree"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Lowest-Common-Ancestor-of-a-Binary-Tree">Lowest Common Ancestor of a Binary Tree</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">lowestCommonAncestor</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> p: TreeNode?, <span class="number">_</span> q: TreeNode?)</span></span> -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root, <span class="keyword">let</span> p = p, <span class="keyword">let</span> q = q <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">let</span> l = lowestCommonAncestor(root.<span class="keyword">left</span>, p, q), r = lowestCommonAncestor(root.<span class="keyword">right</span>, p, q)</span><br><span class="line">        <span class="keyword">if</span> root.val == p.val || root.val == q.val || (l != <span class="literal">nil</span> &amp;&amp; r != <span class="literal">nil</span>) &#123; <span class="keyword">return</span> root &#125;</span><br><span class="line">        <span class="keyword">return</span> l ?? r</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Serialize-and-Deserialize-Binary-Tree"><a href="#Serialize-and-Deserialize-Binary-Tree" class="headerlink" title="Serialize and Deserialize Binary Tree"></a><a href="https://leihao0.github.io/LeetCode-Binary-Tree/#Serialize-and-Deserialize-Binary-Tree">Serialize and Deserialize Binary Tree</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Codec</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">serialize</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="string">&quot;#&quot;</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;\(root.val),\(serialize(root.left)),\(serialize(root.right))&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deserialize</span><span class="params">(<span class="number">_</span> data: String)</span></span> -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> vals = data.<span class="built_in">split</span>(separator: <span class="string">&quot;,&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">()</span></span> -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">            <span class="keyword">guard</span> i &lt; vals.<span class="built_in">count</span>, <span class="keyword">let</span> v = <span class="type">Int</span>(vals[i]) <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">            <span class="keyword">let</span> n = <span class="type">TreeNode</span>(v)</span><br><span class="line">            i += <span class="number">1</span>; n.<span class="keyword">left</span> = helper()</span><br><span class="line">            i += <span class="number">1</span>; n.<span class="keyword">right</span> = helper()</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> helper()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>LeetCode</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Recursion 1</title>
    <url>/cn/LeetCode-Recursion-1/</url>
    <content><![CDATA[<h2 id="Reverse-String"><a href="#Reverse-String" class="headerlink" title="Reverse String"></a>Reverse String</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">reverseString</span><span class="params">(<span class="number">_</span> s: <span class="keyword">inout</span> [Character])</span></span> &#123;</span><br><span class="line">        s.<span class="built_in">reverse</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="Swap-Nodes-in-Pairs"><a href="#Swap-Nodes-in-Pairs" class="headerlink" title="Swap Nodes in Pairs"></a>Swap Nodes in Pairs</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">swapPairs</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> h = <span class="built_in">swap</span>(head)</span><br><span class="line">        h?.next?.next = swapPairs(h?.next?.next)</span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> h0 = head, <span class="keyword">let</span> h1 = h0.next &#123;</span><br><span class="line">            h0.next = h1.next</span><br><span class="line">            h1.next = h0</span><br><span class="line">            <span class="keyword">return</span> h1</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Reverse-Linked-List"><a href="#Reverse-Linked-List" class="headerlink" title="Reverse Linked List"></a>Reverse Linked List</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> prev: <span class="type">ListNode?</span> = <span class="literal">nil</span>, cur = head</span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> p = cur?.next</span><br><span class="line">            cur?.next = prev</span><br><span class="line">            prev = cur</span><br><span class="line">            cur = p</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Search-in-a-Binary-Search-Tree"><a href="#Search-in-a-Binary-Search-Tree" class="headerlink" title="Search in a Binary Search Tree"></a>Search in a Binary Search Tree</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">searchBST</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> val: Int)</span></span> -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> root.val == val &#123; <span class="keyword">return</span> root &#125;</span><br><span class="line">        <span class="keyword">if</span> val &lt; root.val &#123;</span><br><span class="line">            <span class="keyword">return</span> searchBST(root.<span class="keyword">left</span>, val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> searchBST(root.<span class="keyword">right</span>, val)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Pascal’s-Triangle-II"><a href="#Pascal’s-Triangle-II" class="headerlink" title="Pascal’s Triangle II"></a>Pascal’s Triangle II</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getRow</span><span class="params">(<span class="number">_</span> rowIndex: Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> arr = [<span class="number">1</span>], j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;rowIndex &#123;</span><br><span class="line">            arr.append(<span class="number">1</span>)</span><br><span class="line">            j = arr.<span class="built_in">count</span> - <span class="number">2</span></span><br><span class="line">            <span class="keyword">while</span> j &gt; <span class="number">0</span> &#123;</span><br><span class="line">                arr[j] += arr[j-<span class="number">1</span>]</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Fibonacci-Number"><a href="#Fibonacci-Number" class="headerlink" title="Fibonacci Number"></a>Fibonacci Number</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="type">Array</span>(repeating: <span class="number">0</span>, <span class="built_in">count</span>: <span class="number">31</span>)</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fib</span><span class="params">(<span class="number">_</span> N: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="type">N</span> &lt; <span class="number">2</span> || arr[<span class="type">N</span>] != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> arr[<span class="type">N</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[<span class="type">N</span>-<span class="number">1</span>] = fib(<span class="type">N</span>-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> arr[<span class="type">N</span>-<span class="number">1</span>] + arr[<span class="type">N</span>-<span class="number">2</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Climbing-Stairs"><a href="#Climbing-Stairs" class="headerlink" title="Climbing Stairs"></a>Climbing Stairs</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] + <span class="type">Array</span>(repeating: <span class="number">0</span>, <span class="built_in">count</span>: <span class="number">127</span>)</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">climbStairs</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">4</span> || arr[n] != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> arr[n]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[n-<span class="number">1</span>] = climbStairs(n-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> arr[n-<span class="number">1</span>] + arr[n-<span class="number">2</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Maximum-Depth-of-Binary-Tree"><a href="#Maximum-Depth-of-Binary-Tree" class="headerlink" title="Maximum Depth of Binary Tree"></a>Maximum Depth of Binary Tree</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">maxDepth</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">max</span>(maxDepth(root.<span class="keyword">left</span>), maxDepth(root.<span class="keyword">right</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Pow-x-n"><a href="#Pow-x-n" class="headerlink" title="Pow(x, n)"></a>Pow(x, n)</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">myPow</span><span class="params">(<span class="number">_</span> x: Double, <span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> dic = [<span class="type">Int</span>:<span class="type">Double</span>]()</span><br><span class="line">        dic[-<span class="number">1</span>] = <span class="number">1</span>/x; dic[<span class="number">0</span>] = <span class="number">1</span>; dic[<span class="number">1</span>] = x</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fastPow(x, n, &amp;dic)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fastPow</span><span class="params">(<span class="number">_</span> x: Double, <span class="number">_</span> n: Int, <span class="number">_</span> arr: <span class="keyword">inout</span> [Int:Double])</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> v = arr[n] &#123; <span class="keyword">return</span> v &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> l = n / <span class="number">2</span>, r = n - l</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> arr[l] == <span class="literal">nil</span> &#123;</span><br><span class="line">            arr[l] = fastPow(x, l, &amp;arr)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> arr[r] == <span class="literal">nil</span> &#123;</span><br><span class="line">            arr[r] = fastPow(x, r, &amp;arr)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr[l]! * arr[r]!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Merge-Two-Sorted-Lists"><a href="#Merge-Two-Sorted-Lists" class="headerlink" title="Merge Two Sorted Lists"></a>Merge Two Sorted Lists</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(<span class="number">_</span> l1: ListNode?, <span class="number">_</span> l2: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> p1 = l1 <span class="keyword">else</span> &#123; <span class="keyword">return</span> l2 &#125;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> p2 = l2 <span class="keyword">else</span> &#123; <span class="keyword">return</span> l1 &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> (p, q) = p1.val &lt;= p2.val ? (p1, p2) : (p2, p1)</span><br><span class="line">        p.next = mergeTwoLists(p.next, q)</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="K-th-Symbol-in-Grammar"><a href="#K-th-Symbol-in-Grammar" class="headerlink" title="K-th Symbol in Grammar"></a>K-th Symbol in Grammar</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">kthGrammar</span><span class="params">(<span class="number">_</span> N: Int, <span class="number">_</span> K: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="type">N</span> &lt; <span class="number">2</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> (kthGrammar(<span class="type">N</span>-<span class="number">1</span>, (<span class="type">K</span>+<span class="number">1</span>)/<span class="number">2</span>) == <span class="number">0</span>) ? <span class="number">1</span>-<span class="type">K</span>%<span class="number">2</span> : <span class="type">K</span>%<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Unique-Binary-Search-Trees-II"><a href="#Unique-Binary-Search-Trees-II" class="headerlink" title="Unique Binary Search Trees II"></a>Unique Binary Search Trees II</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">generateTrees</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; [<span class="type">TreeNode?</span>] &#123;</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">1</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(<span class="number">1</span>, n)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">(<span class="number">_</span> i1: Int, <span class="number">_</span> i2:Int)</span></span> -&gt; [<span class="type">TreeNode?</span>] &#123;</span><br><span class="line">        <span class="keyword">if</span> i1 &gt; i2 &#123; <span class="keyword">return</span> [<span class="literal">nil</span>] &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> tn = [<span class="type">TreeNode</span>]()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> i1...i2 &#123;</span><br><span class="line">            <span class="keyword">let</span> l = helper(i1, i-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">let</span> r = helper(i+<span class="number">1</span>, i2)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> li <span class="keyword">in</span> l &#123;</span><br><span class="line">                <span class="keyword">for</span> ri <span class="keyword">in</span> r &#123;</span><br><span class="line">                    <span class="keyword">let</span> n = <span class="type">TreeNode</span>(i)</span><br><span class="line">                    n.<span class="keyword">left</span> = li</span><br><span class="line">                    n.<span class="keyword">right</span> = ri</span><br><span class="line">                    tn.append(n)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tn</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>LeetCode</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Recursion 2</title>
    <url>/cn/LeetCode-Recursion-2/</url>
    <content><![CDATA[<h2 id="Sort-an-Array"><a href="#Sort-an-Array" class="headerlink" title="Sort an Array"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Sort-an-Array">Sort an Array</a></h2><a id="more"></a>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">if</span> nums.<span class="built_in">count</span> &lt; <span class="number">2</span> &#123; <span class="keyword">return</span> nums &#125;</span><br><span class="line">        <span class="keyword">let</span> i = nums.<span class="built_in">count</span>/<span class="number">2</span>, l = sortArray(<span class="type">Array</span>(nums[..&lt;i])), r = sortArray(<span class="type">Array</span>(nums[i...]))</span><br><span class="line">        <span class="keyword">return</span> merge(l, r)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(<span class="number">_</span> n1: [Int], <span class="number">_</span> n2: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> i1 = <span class="number">0</span>, i2 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> arr = [<span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">while</span> i1 &lt; n1.<span class="built_in">count</span>, i2 &lt; n2.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> n1[i1] &lt; n2[i2] &#123;</span><br><span class="line">                arr.append(n1[i1])</span><br><span class="line">                i1 += <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arr.append(n2[i2])</span><br><span class="line">                i2 += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> i1 &lt; n1.<span class="built_in">count</span> &#123;</span><br><span class="line">            arr.append(n1[i1])</span><br><span class="line">            i1 += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> i2 &lt; n2.<span class="built_in">count</span> &#123;</span><br><span class="line">            arr.append(n2[i2])</span><br><span class="line">            i2 += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Validate-Binary-Search-Tree"><a href="#Validate-Binary-Search-Tree" class="headerlink" title="Validate Binary Search Tree"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Validate-Binary-Search-Tree">Validate Binary Search Tree</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isValidBST</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> helper(root, <span class="type">Int</span>.<span class="built_in">min</span>, <span class="type">Int</span>.<span class="built_in">max</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">(<span class="number">_</span> node: TreeNode?, <span class="number">_</span> lower: Int, <span class="number">_</span> upper: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> n = node <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> n.val &lt;= lower || n.val &gt;= upper &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper(n.<span class="keyword">left</span>, lower, n.val) &amp;&amp; helper(n.<span class="keyword">right</span>, n.val, upper)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Search-a-2D-Matrix-II"><a href="#Search-a-2D-Matrix-II" class="headerlink" title="Search a 2D Matrix II"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Search-a-2D-Matrix-II">Search a 2D Matrix II</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">searchMatrix</span><span class="params">(<span class="number">_</span> matrix: [[Int]], <span class="number">_</span> target: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> n = matrix.<span class="built_in">count</span>-<span class="number">1</span>, m = matrix.first?.<span class="built_in">count</span> ?? <span class="number">0</span>; <span class="keyword">var</span> i = n, j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> &amp;&amp; j &lt; m &#123;</span><br><span class="line">            <span class="keyword">if</span> target &gt; matrix[i][j] &#123;</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> target &lt; matrix[i][j] &#123;</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="N-Queens-II"><a href="#N-Queens-II" class="headerlink" title="N-Queens II"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#N-Queens-II">N-Queens II</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">totalNQueens</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">1</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(n-<span class="number">1</span>, <span class="type">Array</span>(repeating: <span class="type">Array</span>(repeating: <span class="number">1</span>, <span class="built_in">count</span>: n), <span class="built_in">count</span>: n)).<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">(<span class="number">_</span> i: Int, <span class="number">_</span> board: [[Int]])</span></span> -&gt; [[[<span class="type">Int</span>]]] &#123;</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> &#123; <span class="keyword">return</span> put(i, board) &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(i-<span class="number">1</span>, board).<span class="built_in">reduce</span>( [[[<span class="type">Int</span>]]]() ) &#123; $<span class="number">0</span> + put(i, $<span class="number">1</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">put</span><span class="params">(<span class="number">_</span> i: Int, <span class="number">_</span> board: [[Int]])</span></span> -&gt; [[[<span class="type">Int</span>]]] &#123;</span><br><span class="line">        <span class="keyword">var</span> boards = [[[<span class="type">Int</span>]]]()</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;board.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> board[i][j] == <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> board = put((i,j), board)</span><br><span class="line">                boards.append(board)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> boards</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">put</span><span class="params">(<span class="number">_</span> p: <span class="params">(Int, Int)</span></span></span>, <span class="number">_</span> board: [[<span class="type">Int</span>]]) -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">let</span> n = board.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">var</span> board = board</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;n &#123; board[i][p.<span class="number">1</span>] = <span class="number">0</span> &#125;</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;n &#123; board[p.<span class="number">0</span>][j] = <span class="number">0</span> &#125;</span><br><span class="line">        <span class="keyword">var</span> p0 = p.<span class="number">0</span>, p1 = p.<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> p0 &lt; n, p1 &lt; n, p0 &gt;= <span class="number">0</span>, p1 &gt;= <span class="number">0</span> &#123;</span><br><span class="line">            board[p0][p1] = <span class="number">0</span></span><br><span class="line">            p0 += <span class="number">1</span>; p1 += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        p0 = p.<span class="number">0</span>; p1 = p.<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> p0 &lt; n, p1 &lt; n, p0 &gt;= <span class="number">0</span>, p1 &gt;= <span class="number">0</span> &#123;</span><br><span class="line">            board[p0][p1] = <span class="number">0</span></span><br><span class="line">            p0 += <span class="number">1</span>; p1 -= <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        board[p.<span class="number">0</span>][p.<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> board</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Robot-Room-Cleaner"><a href="#Robot-Room-Cleaner" class="headerlink" title="Robot Room Cleaner"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Robot-Room-Cleaner">Robot Room Cleaner</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">cleanRoom</span><span class="params">(<span class="number">_</span> robot: Robot)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> visited = <span class="type">Set</span>&lt;[<span class="type">Int</span>]&gt;()</span><br><span class="line">        <span class="keyword">let</span> directions = [[-<span class="number">1</span>,<span class="number">0</span>], [<span class="number">0</span>,<span class="number">1</span>], [<span class="number">1</span>,<span class="number">0</span>], [<span class="number">0</span>,-<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">backtrack</span><span class="params">(<span class="number">_</span> cell: [Int] = [<span class="number">0</span>,<span class="number">0</span>], <span class="number">_</span> d: Int = <span class="number">0</span>)</span></span> &#123;</span><br><span class="line">            <span class="function"><span class="keyword">func</span> <span class="title">goBack</span><span class="params">()</span></span> &#123;</span><br><span class="line">                <span class="function"><span class="keyword">func</span> <span class="title">uTurn</span><span class="params">()</span></span> &#123; robot.turnRight(); robot.turnRight() &#125;</span><br><span class="line">                uTurn(); robot.move(); uTurn()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            visited.insert(cell)</span><br><span class="line">            robot.clean()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">4</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> d = (d+i)%<span class="number">4</span>, cell = [cell[<span class="number">0</span>]+directions[d][<span class="number">0</span>], cell[<span class="number">1</span>]+directions[d][<span class="number">1</span>]]</span><br><span class="line">                <span class="keyword">if</span> !visited.<span class="built_in">contains</span>(cell) &amp;&amp; robot.move() &#123;</span><br><span class="line">                    backtrack(cell, d)</span><br><span class="line">                    goBack()</span><br><span class="line">                &#125;</span><br><span class="line">                robot.turnRight()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        backtrack()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Sudoku-Solver"><a href="#Sudoku-Solver" class="headerlink" title="Sudoku Solver"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Sudoku-Solver">Sudoku Solver</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">solveSudoku</span><span class="params">(<span class="number">_</span> board: <span class="keyword">inout</span> [[Character]])</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> chars: [<span class="type">Character</span>] = [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;9&quot;</span>]</span><br><span class="line">        <span class="keyword">var</span> boxes = <span class="type">Array</span>(repeating: <span class="type">Array</span>(repeating: <span class="type">Set</span>&lt;<span class="type">Character</span>&gt;(), <span class="built_in">count</span>: <span class="number">3</span>), <span class="built_in">count</span>: <span class="number">3</span>),  rows = (<span class="number">0</span>..&lt;<span class="number">9</span>).<span class="built_in">map</span> &#123; <span class="type">Set</span>(board[$<span class="number">0</span>]) &#125;, cols = (<span class="number">0</span>..&lt;<span class="number">9</span>).<span class="built_in">map</span> &#123; i <span class="keyword">in</span> <span class="type">Set</span>( (<span class="number">0</span>..&lt;<span class="number">9</span>).<span class="built_in">map</span> &#123; j <span class="keyword">in</span> board[j][i] &#125; )&#125;</span><br><span class="line">        (<span class="number">0</span>..&lt;<span class="number">9</span>).forEach &#123; i <span class="keyword">in</span> (<span class="number">0</span>..&lt;<span class="number">9</span>).forEach &#123; j <span class="keyword">in</span> boxes[i/<span class="number">3</span>][j/<span class="number">3</span>].insert(board[i][j]) &#125; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">put</span><span class="params">(<span class="number">_</span> <span class="built_in">c</span>: Character, <span class="number">_</span> i: Int, <span class="number">_</span> j: Int)</span></span> &#123;</span><br><span class="line">            board[i][j] = <span class="built_in">c</span>; rows[i].insert(<span class="built_in">c</span>); cols[j].insert(<span class="built_in">c</span>); boxes[i/<span class="number">3</span>][j/<span class="number">3</span>].insert(<span class="built_in">c</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">restore</span><span class="params">(<span class="number">_</span> <span class="built_in">c</span>: Character, <span class="number">_</span> i: Int, <span class="number">_</span> j: Int)</span></span> &#123;</span><br><span class="line">            board[i][j] = <span class="string">&quot;.&quot;</span>; rows[i].remove(<span class="built_in">c</span>); cols[j].remove(<span class="built_in">c</span>); boxes[i/<span class="number">3</span>][j/<span class="number">3</span>].remove(<span class="built_in">c</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">backtrack</span><span class="params">(<span class="number">_</span> k: Int = <span class="number">0</span>)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> i = k/<span class="number">9</span>, j = k%<span class="number">9</span></span><br><span class="line">            <span class="keyword">if</span> k &gt;= <span class="number">81</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line">            <span class="keyword">if</span> board[i][j] != <span class="string">&quot;.&quot;</span> &#123; <span class="keyword">return</span> backtrack(k+<span class="number">1</span>) &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> chars.<span class="built_in">filter</span>(&#123; !rows[i].<span class="built_in">contains</span>($<span class="number">0</span>) &amp;&amp; !cols[j].<span class="built_in">contains</span>($<span class="number">0</span>) &amp;&amp; !boxes[i/<span class="number">3</span>][j/<span class="number">3</span>].<span class="built_in">contains</span>($<span class="number">0</span>) &#125;) &#123;</span><br><span class="line">                put(<span class="built_in">c</span>, i, j)</span><br><span class="line">                <span class="keyword">if</span> backtrack(k+<span class="number">1</span>) &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line">                restore(<span class="built_in">c</span>, i, j)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        backtrack()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Combinations"><a href="#Combinations" class="headerlink" title="Combinations"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Combinations">Combinations</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">combine</span><span class="params">(<span class="number">_</span> n: Int, <span class="number">_</span> k: Int)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">if</span> k &gt; n &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">        <span class="keyword">let</span> b = (k...n).<span class="built_in">map</span> &#123; [$<span class="number">0</span>] &#125;</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">1</span> &#123; <span class="keyword">return</span> b &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> a = combine(n-<span class="number">1</span>, k-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">var</span> ans = [[<span class="type">Int</span>]]()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> a &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> b &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> last = i.last, <span class="keyword">let</span> first = j.first, last &lt; first &#123;</span><br><span class="line">                    ans.append(i + j)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Same-Tree"><a href="#Same-Tree" class="headerlink" title="Same Tree"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Same-Tree">Same Tree</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isSameTree</span><span class="params">(<span class="number">_</span> p: TreeNode?, <span class="number">_</span> q: TreeNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> p = p, <span class="keyword">let</span> q = q, p.val == q.val &#123;</span><br><span class="line">            <span class="keyword">return</span> isSameTree(p.<span class="keyword">left</span>, q.<span class="keyword">left</span>) &amp;&amp; isSameTree(p.<span class="keyword">right</span>, q.<span class="keyword">right</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p == <span class="literal">nil</span> &amp;&amp; q == <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Generate-Parentheses"><a href="#Generate-Parentheses" class="headerlink" title="Generate Parentheses"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Generate-Parentheses">Generate Parentheses</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">generateParenthesis</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> ans = [<span class="type">String</span>]()</span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">backtrack</span><span class="params">(<span class="number">_</span> s: String = <span class="string">&quot;&quot;</span>, <span class="number">_</span> l: Int = <span class="number">0</span>, <span class="number">_</span> r: Int = <span class="number">0</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> s.<span class="built_in">count</span> == n*<span class="number">2</span> &#123;</span><br><span class="line">                ans.append(s); <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> l &lt; n &#123; backtrack(s+<span class="string">&quot;(&quot;</span>, l+<span class="number">1</span>, r) &#125;</span><br><span class="line">            <span class="keyword">if</span> r &lt; l &#123; backtrack(s+<span class="string">&quot;)&quot;</span>, l, r+<span class="number">1</span>) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        backtrack()</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Binary-Tree-Inorder-Traversal"><a href="#Binary-Tree-Inorder-Traversal" class="headerlink" title="Binary Tree Inorder Traversal"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Binary-Tree-Inorder-Traversal">Binary Tree Inorder Traversal</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// iteratively</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> ans = [<span class="type">Int</span>](), stack = [<span class="type">TreeNode</span>](), p = root</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> || !stack.isEmpty &#123;</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">let</span> l = p &#123;</span><br><span class="line">                stack.append(l)</span><br><span class="line">                p = l.<span class="keyword">left</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> n = stack.popLast() &#123;</span><br><span class="line">                ans.append(n.val)</span><br><span class="line">                p = n.<span class="keyword">right</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Binary-Tree-Level-Order-Traversal"><a href="#Binary-Tree-Level-Order-Traversal" class="headerlink" title="Binary Tree Level Order Traversal"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Binary-Tree-Level-Order-Traversal">Binary Tree Level Order Traversal</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">levelOrder</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">var</span> ans = [[<span class="type">Int</span>]]()</span><br><span class="line">        helper(root, <span class="number">0</span>, &amp;ans)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> level: Int, <span class="number">_</span> ans: <span class="keyword">inout</span> [[Int]])</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> level &gt;= ans.<span class="built_in">count</span> &#123;</span><br><span class="line">            ans.append( [root.val] )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans[level].append(root.val)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        helper(root.<span class="keyword">left</span>, level+<span class="number">1</span>, &amp;ans)</span><br><span class="line">        helper(root.<span class="keyword">right</span>, level+<span class="number">1</span>, &amp;ans)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Convert-Binary-Search-Tree-to-Sorted-Doubly-Linked-List"><a href="#Convert-Binary-Search-Tree-to-Sorted-Doubly-Linked-List" class="headerlink" title="Convert Binary Search Tree to Sorted Doubly Linked List"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Convert-Binary-Search-Tree-to-Sorted-Doubly-Linked-List">Convert Binary Search Tree to Sorted Doubly Linked List</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">treeToDoublyList</span><span class="params">(<span class="number">_</span> root: Node?)</span></span> -&gt; <span class="type">Node?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> first: <span class="type">Node?</span>, last: <span class="type">Node?</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">(<span class="number">_</span> root: Node?)</span></span> &#123;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> cur = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">            helper(cur.<span class="keyword">left</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> last = last &#123;</span><br><span class="line">                last.<span class="keyword">right</span> = cur</span><br><span class="line">                cur.<span class="keyword">left</span> = last</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                first = cur</span><br><span class="line">            &#125;</span><br><span class="line">            last = cur</span><br><span class="line">            helper(cur.<span class="keyword">right</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        helper(root)</span><br><span class="line">        last?.<span class="keyword">right</span> = first</span><br><span class="line">        first?.<span class="keyword">left</span> = last</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> first</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Largest-Rectangle-in-Histogram"><a href="#Largest-Rectangle-in-Histogram" class="headerlink" title="Largest Rectangle in Histogram"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Largest-Rectangle-in-Histogram">Largest Rectangle in Histogram</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="number">_</span> heights: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">(<span class="number">_</span> i: Int, <span class="number">_</span> j: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">            <span class="keyword">guard</span> i &lt;= j <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">            <span class="keyword">var</span> index = <span class="number">0</span>, v = <span class="type">Int</span>.<span class="built_in">max</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> i...j &#123;</span><br><span class="line">                <span class="keyword">if</span> heights[k] &lt; v &#123; index = k; v = heights[k] &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(v*(j-i+<span class="number">1</span>), helper(i, index-<span class="number">1</span>), helper(index+<span class="number">1</span>, j))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(<span class="number">0</span>, heights.<span class="built_in">count</span>-<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Permutations"><a href="#Permutations" class="headerlink" title="Permutations"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Permutations">Permutations</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">permute</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">if</span> nums.<span class="built_in">count</span> &lt; <span class="number">2</span> &#123; <span class="keyword">return</span> [nums] &#125;</span><br><span class="line">        <span class="keyword">var</span> ans = [[<span class="type">Int</span>]]()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> arr = nums; arr.remove(at: i)</span><br><span class="line">            ans += permute(arr).<span class="built_in">map</span> &#123; [nums[i]] + $<span class="number">0</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Letter-Combinations-of-a-Phone-Number"><a href="#Letter-Combinations-of-a-Phone-Number" class="headerlink" title="Letter Combinations of a Phone Number"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#Letter-Combinations-of-a-Phone-Number">Letter Combinations of a Phone Number</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> dict : [<span class="type">Character</span>: [<span class="type">String</span>]] = [<span class="string">&quot;2&quot;</span>:[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>],<span class="string">&quot;3&quot;</span>:[<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;f&quot;</span>],<span class="string">&quot;4&quot;</span>:[<span class="string">&quot;g&quot;</span>,<span class="string">&quot;h&quot;</span>,<span class="string">&quot;i&quot;</span>],<span class="string">&quot;5&quot;</span>:[<span class="string">&quot;j&quot;</span>,<span class="string">&quot;k&quot;</span>,<span class="string">&quot;l&quot;</span>],<span class="string">&quot;6&quot;</span>:[<span class="string">&quot;m&quot;</span>,<span class="string">&quot;n&quot;</span>,<span class="string">&quot;o&quot;</span>],<span class="string">&quot;7&quot;</span>:[<span class="string">&quot;p&quot;</span>,<span class="string">&quot;q&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="string">&quot;s&quot;</span>],<span class="string">&quot;8&quot;</span>:[<span class="string">&quot;t&quot;</span>,<span class="string">&quot;u&quot;</span>,<span class="string">&quot;v&quot;</span>],<span class="string">&quot;9&quot;</span>:[<span class="string">&quot;w&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="string">&quot;z&quot;</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">letterCombinations</span><span class="params">(<span class="number">_</span> digits: String)</span></span> -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> digits.isEmpty ? [] : digits.<span class="built_in">reduce</span>([<span class="string">&quot;&quot;</span>]) &#123; (ans, digit) <span class="keyword">in</span></span><br><span class="line">            ans.flatMap &#123; s <span class="keyword">in</span> dict[digit, <span class="keyword">default</span>: [<span class="string">&quot;&quot;</span>]].<span class="built_in">map</span> &#123; <span class="built_in">c</span> <span class="keyword">in</span> s + <span class="built_in">c</span> &#125; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="The-Skyline-Problem"><a href="#The-Skyline-Problem" class="headerlink" title="The Skyline Problem"></a><a href="https://leihao0.github.io/LeetCode-Recursion-2/#The-Skyline-Problem">The Skyline Problem</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getSkyline</span><span class="params">(<span class="number">_</span> buildings: [[Int]])</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">let</span> n = buildings.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> [[buildings[<span class="number">0</span>][<span class="number">0</span>], buildings[<span class="number">0</span>][<span class="number">2</span>]], [buildings[<span class="number">0</span>][<span class="number">1</span>], <span class="number">0</span>]]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> l = getSkyline(<span class="type">Array</span>(buildings[..&lt;(n/<span class="number">2</span>)]))</span><br><span class="line">        <span class="keyword">let</span> r = getSkyline(<span class="type">Array</span>(buildings[(n/<span class="number">2</span>)...]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> merge(l, r)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(<span class="number">_</span> l: [[Int]], <span class="number">_</span> r: [[Int]])</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">let</span> ln = l.<span class="built_in">count</span>, rn = r.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">var</span> lp = <span class="number">0</span>, rp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> curY = <span class="number">0</span>, lY = <span class="number">0</span>, rY = <span class="number">0</span> , output = [[<span class="type">Int</span>]]()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(<span class="number">_</span> x: Int, <span class="number">_</span> y: Int)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> output.isEmpty || output.last?.first != x &#123;</span><br><span class="line">                output.append([x, y])</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                output[output.<span class="built_in">count</span>-<span class="number">1</span>][<span class="number">1</span>] = y</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(<span class="number">_</span> p: Int, <span class="number">_</span> lst: [[Int]], <span class="number">_</span> n: Int, <span class="number">_</span> curY: Int)</span></span> &#123;</span><br><span class="line">            <span class="keyword">var</span> p = p, curY = curY</span><br><span class="line">            <span class="keyword">while</span> p &lt; n &#123;</span><br><span class="line">                <span class="keyword">let</span> (x, y) = (lst[p][<span class="number">0</span>], lst[p][<span class="number">1</span>])</span><br><span class="line">                p += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> curY != y &#123;</span><br><span class="line">                    update(x, y)</span><br><span class="line">                    curY = y</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> lp &lt; ln &amp;&amp; rp &lt; rn &#123;</span><br><span class="line">            <span class="keyword">let</span> lPoint = l[lp], rPoint = r[rp]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> lPoint[<span class="number">0</span>] &lt; rPoint[<span class="number">0</span>] &#123;</span><br><span class="line">                (x, lY) = (lPoint[<span class="number">0</span>], lPoint[<span class="number">1</span>])</span><br><span class="line">                lp += <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                (x, rY) = (rPoint[<span class="number">0</span>], rPoint[<span class="number">1</span>])</span><br><span class="line">                rp += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> maxY = <span class="built_in">max</span>(lY, rY)</span><br><span class="line">            <span class="keyword">if</span> curY != maxY &#123;</span><br><span class="line">                update(x, maxY)</span><br><span class="line">                curY = maxY</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        append(lp, l, ln, curY)</span><br><span class="line">        append(rp, r, rn, curY)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>LeetCode</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Binary Search</title>
    <url>/cn/LeetCode-Binary-Search/</url>
    <content><![CDATA[<h2 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Binary-Search">Binary Search</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> target: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = nums.<span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= j &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = i + (j-i)/<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target &#123; <span class="keyword">return</span> mid &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &lt; target &#123; i = mid+<span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; j = mid-<span class="number">1</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="Sqrt-x"><a href="#Sqrt-x" class="headerlink" title="Sqrt(x)"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Sqrt(x)">Sqrt(x)</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mySqrt</span><span class="params">(<span class="number">_</span> x: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> target = <span class="type">Int</span>(sqrt(<span class="type">Double</span>(x)))</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = x</span><br><span class="line">        <span class="keyword">while</span> i &lt;= j &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = i + (j-i)&gt;&gt;<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> mid == target &#123; <span class="keyword">return</span> mid &#125;</span><br><span class="line">            mid &lt; target ? (i=mid+<span class="number">1</span>) : (j=mid-<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Guess-Number-Higher-or-Lower"><a href="#Guess-Number-Higher-or-Lower" class="headerlink" title="Guess Number Higher or Lower"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Guess-Number-Higher-or-Lower">Guess Number Higher or Lower</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> : <span class="title">GuessGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">guessNumber</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">1</span>, j = n</span><br><span class="line">        <span class="keyword">while</span> i &lt;= j &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = i + (j-i)&gt;&gt;<span class="number">1</span></span><br><span class="line">            <span class="keyword">switch</span> guess(mid) &#123;</span><br><span class="line">                <span class="keyword">case</span> -<span class="number">1</span>:</span><br><span class="line">                    j = mid-<span class="number">1</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    i = mid+<span class="number">1</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> mid</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Search-in-Rotated-Sorted-Array"><a href="#Search-in-Rotated-Sorted-Array" class="headerlink" title="Search in Rotated Sorted Array"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Search-in-Rotated-Sorted-Array">Search in Rotated Sorted Array</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> target: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = nums.<span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= j &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = i + (j - i)/<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &gt;= nums[i] &#123;</span><br><span class="line">                (target &gt;= nums[i] &amp;&amp; target &lt; nums[mid]) ? (j = mid-<span class="number">1</span>) : (i = mid+<span class="number">1</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                (target &lt;= nums[j] &amp;&amp; target &gt; nums[mid]) ? (i = mid+<span class="number">1</span>) : (j = mid-<span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="First-Bad-Version"><a href="#First-Bad-Version" class="headerlink" title="First Bad Version"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#First-Bad-Version">First Bad Version</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>: <span class="title">VersionControl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">firstBadVersion</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">1</span>, j = n</span><br><span class="line">        <span class="keyword">while</span> i &lt;= j &#123;</span><br><span class="line">            <span class="keyword">let</span> h = i + (j-i)/<span class="number">2</span></span><br><span class="line">            isBadVersion(h) ? (j = h-<span class="number">1</span>) : (i = h + <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Find-Peak-Element"><a href="#Find-Peak-Element" class="headerlink" title="Find Peak Element"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Find-Peak-Element">Find Peak Element</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findPeakElement</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> l = <span class="number">0</span>, r = nums.<span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l &lt; r &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = l+(r-l)&gt;&gt;<span class="number">1</span></span><br><span class="line">            nums[mid] &gt; nums[mid+<span class="number">1</span>] ? (r = mid) : (l = mid+<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findPeakElement</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(<span class="number">_</span> l: Int, <span class="number">_</span> r: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (l == r) &#123; <span class="keyword">return</span> l &#125;</span><br><span class="line">            <span class="keyword">let</span> mid = l + (r-l)&gt;&gt;<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> (nums[mid] &gt; nums[mid+<span class="number">1</span>]) ? search(l, mid) : search(mid+<span class="number">1</span>, r)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> search(<span class="number">0</span>, nums.<span class="built_in">count</span>-<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Find-Minimum-in-Rotated-Sorted-Array"><a href="#Find-Minimum-in-Rotated-Sorted-Array" class="headerlink" title="Find Minimum in Rotated Sorted Array"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Find-Minimum-in-Rotated-Sorted-Array">Find Minimum in Rotated Sorted Array</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findMin</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> l = <span class="number">0</span>, r = nums.<span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l &lt; r &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = l+(r-l)&gt;&gt;<span class="number">1</span></span><br><span class="line">            nums[mid] &gt; nums[r] ? (l = mid+<span class="number">1</span>) : (r = mid)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[l]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Search-for-a-Range"><a href="#Search-for-a-Range" class="headerlink" title="Search for a Range"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Search-for-a-Range">Search for a Range</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">searchRange</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> target: Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">if</span> nums.isEmpty &#123; <span class="keyword">return</span> [-<span class="number">1</span>, -<span class="number">1</span>] &#125;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = nums.<span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = i+(j-i)/<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">                i = mid; j = mid</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &lt; target &#123;</span><br><span class="line">                i = mid+<span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                j = mid-<span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> i-<span class="number">1</span> &gt;= <span class="number">0</span>, nums[i-<span class="number">1</span>] == target &#123; i -= <span class="number">1</span> &#125;</span><br><span class="line">        <span class="keyword">while</span> j+<span class="number">1</span> &lt; nums.<span class="built_in">count</span>, nums[j+<span class="number">1</span>] == target &#123; j += <span class="number">1</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[i] == target ? [i, j] : [-<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Find-K-Closest-Elements"><a href="#Find-K-Closest-Elements" class="headerlink" title="Find K Closest Elements"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Find-K-Closest-Elements">Find K Closest Elements</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findClosestElements</span><span class="params">(<span class="number">_</span> arr: [Int], <span class="number">_</span> k: Int, <span class="number">_</span> x: Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">if</span> arr.isEmpty &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = arr.<span class="built_in">count</span>, ans = [<span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">while</span> i &lt; j &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = i+(j-i)/<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> arr[mid] == x &#123; i = mid &#125;</span><br><span class="line">            arr[mid] &lt; x ? (i = mid+<span class="number">1</span>) : (j = mid-<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        j = i+k &lt; arr.<span class="built_in">count</span> ? i+k : arr.<span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">        i = (i-k) &gt;= <span class="number">0</span> ? (i-k) : <span class="number">0</span></span><br><span class="line">        ans = <span class="type">Array</span>(arr[i...j])</span><br><span class="line">        <span class="keyword">while</span> ans.<span class="built_in">count</span> &gt; k &#123;</span><br><span class="line">            <span class="built_in">abs</span>(x-ans.first!) &lt;= <span class="built_in">abs</span>(x-ans.last!) ? ans.removeLast() : ans.removeFirst()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Closest-Binary-Search-Tree-Value"><a href="#Closest-Binary-Search-Tree-Value" class="headerlink" title="Closest Binary Search Tree Value"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Closest-Binary-Search-Tree-Value">Closest Binary Search Tree Value</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">closestValue</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> target: Double)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> p = root, v = p!.val</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(<span class="type">Double</span>(p!.val)-target) &lt; <span class="built_in">abs</span>(<span class="type">Double</span>(v)-target) &#123; v = p!.val &#125;</span><br><span class="line">            p = target &lt; <span class="type">Double</span>(p!.val) ? p!.<span class="keyword">left</span> : p!.<span class="keyword">right</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Search-in-a-Sorted-Array-of-Unknown-Size"><a href="#Search-in-a-Sorted-Array-of-Unknown-Size" class="headerlink" title="Search in a Sorted Array of Unknown Size"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Search-in-a-Sorted-Array-of-Unknown-Size">Search in a Sorted Array of Unknown Size</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(<span class="number">_</span> reader: ArrayReader, <span class="number">_</span> target: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> reader.<span class="keyword">get</span>(<span class="number">0</span>) == target &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> reader.<span class="keyword">get</span>(j) &lt; target &#123;</span><br><span class="line">            i = j; j &lt;&lt;= <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> i &lt;= j &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = i+(j-i)&gt;&gt;<span class="number">1</span>, v = reader.<span class="keyword">get</span>(mid)</span><br><span class="line">            <span class="keyword">if</span> v == target &#123; <span class="keyword">return</span> mid &#125;</span><br><span class="line">            v &lt; target ? (i=mid+<span class="number">1</span>) : (j=mid-<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Pow-x-n"><a href="#Pow-x-n" class="headerlink" title="Pow(x, n)"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Pow(x,-n)">Pow(x, n)</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">myPow</span><span class="params">(<span class="number">_</span> x: Double, <span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> dict = [<span class="number">0</span>: <span class="number">1.0</span>, <span class="number">1</span>: x]</span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">fastPow</span><span class="params">(<span class="number">_</span> x: Double, <span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> v = dict[n] &#123; <span class="keyword">return</span> v &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> h = fastPow(x, n/<span class="number">2</span>), v = n&amp;<span class="number">1</span> == <span class="number">0</span> ? h*h : x*h*h</span><br><span class="line">            dict[n] = v</span><br><span class="line">            <span class="keyword">return</span> v</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> v = fastPow(x, <span class="built_in">abs</span>(n))</span><br><span class="line">        <span class="keyword">return</span> n &lt; <span class="number">0</span> ? <span class="number">1</span>/v : v</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Valid-Perfect-Square"><a href="#Valid-Perfect-Square" class="headerlink" title="Valid Perfect Square"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Valid-Perfect-Square">Valid Perfect Square</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isPerfectSquare</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> x = (num+<span class="number">1</span>)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> x*x &gt; num &#123;</span><br><span class="line">            x = (x + num/x) / <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x*x == num</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Find-Smallest-Letter-Greater-Than-Target"><a href="#Find-Smallest-Letter-Greater-Than-Target" class="headerlink" title="Find Smallest Letter Greater Than Target"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Find-Smallest-Letter-Greater-Than-Target">Find Smallest Letter Greater Than Target</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">nextGreatestLetter</span><span class="params">(<span class="number">_</span> letters: [Character], <span class="number">_</span> target: Character)</span></span> -&gt; <span class="type">Character</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> letters &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">c</span> &gt; target &#123; <span class="keyword">return</span> <span class="built_in">c</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> letters.first!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Find-Minimum-in-Rotated-Sorted-Array-1"><a href="#Find-Minimum-in-Rotated-Sorted-Array-1" class="headerlink" title="Find Minimum in Rotated Sorted Array"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Find-Minimum-in-Rotated-Sorted-Array">Find Minimum in Rotated Sorted Array</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findMin</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> l = <span class="number">0</span>, r = nums.<span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l &lt; r &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = l+(r-l)/<span class="number">2</span></span><br><span class="line">            nums[mid] &gt;= nums[r] ? (l = mid+<span class="number">1</span>) : (r = mid)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[l]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Find-Minimum-in-Rotated-Sorted-Array-II"><a href="#Find-Minimum-in-Rotated-Sorted-Array-II" class="headerlink" title="Find Minimum in Rotated Sorted Array II"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Find-Minimum-in-Rotated-Sorted-Array-II">Find Minimum in Rotated Sorted Array II</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findMin</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> l = <span class="number">0</span>, r = nums.<span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l &lt; r &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = l+(r-l)/<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &gt; nums[r] &#123; l = mid+<span class="number">1</span> &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &lt; nums[r]  &#123; r = mid &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123; r -= <span class="number">1</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[l]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Intersection-of-Two-Arrays"><a href="#Intersection-of-Two-Arrays" class="headerlink" title="Intersection of Two Arrays"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Intersection-of-Two-Arrays">Intersection of Two Arrays</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">intersection</span><span class="params">(<span class="number">_</span> nums1: [Int], <span class="number">_</span> nums2: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">let</span> set1 = <span class="type">Set</span>(nums1), set2 = <span class="type">Set</span>(nums2)</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Array</span>(set1.intersection(set2))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Intersection-of-Two-Arrays-II"><a href="#Intersection-of-Two-Arrays-II" class="headerlink" title="Intersection of Two Arrays II"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Intersection-of-Two-Arrays-II">Intersection of Two Arrays II</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">intersect</span><span class="params">(<span class="number">_</span> nums1: [Int], <span class="number">_</span> nums2: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> dict = [<span class="type">Int</span>: <span class="type">Int</span>](), ans = [<span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums1 &#123;</span><br><span class="line">            dict[n, <span class="keyword">default</span>: <span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums2 &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> v = dict[n], v &gt; <span class="number">0</span> &#123;</span><br><span class="line">                ans.append(n)</span><br><span class="line">                dict[n] = v - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Two-Sum-II-Input-array-is-sorted"><a href="#Two-Sum-II-Input-array-is-sorted" class="headerlink" title="Two Sum II - Input array is sorted"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Two-Sum-II---Input-array-is-sorted">Two Sum II - Input array is sorted</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(<span class="number">_</span> numbers: [Int], <span class="number">_</span> target: Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = numbers.<span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j &#123;</span><br><span class="line">            <span class="keyword">let</span> v =  numbers[i]+numbers[j]</span><br><span class="line">            <span class="keyword">if</span> v == target &#123; <span class="keyword">break</span> &#125;</span><br><span class="line">            v &lt; target ? (i+=<span class="number">1</span>) : (j-=<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> [i+<span class="number">1</span>, j+<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Find-the-Duplicate-Number"><a href="#Find-the-Duplicate-Number" class="headerlink" title="Find the Duplicate Number"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Find-the-Duplicate-Number">Find the Duplicate Number</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findDuplicate</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">set</span> = <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;(), i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; nums.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">set</span>.<span class="built_in">contains</span>(nums[i]) &#123; <span class="keyword">break</span> &#125;</span><br><span class="line">            <span class="keyword">set</span>.insert(nums[i]); i+=<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Median-of-Two-Sorted-Arrays"><a href="#Median-of-Two-Sorted-Arrays" class="headerlink" title="Median of Two Sorted Arrays"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Median-of-Two-Sorted-Arrays">Median of Two Sorted Arrays</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="number">_</span> nums1: [Int], <span class="number">_</span> nums2: [Int])</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> nums = nums1+nums2</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; nums1.<span class="built_in">count</span>, j &lt; nums2.<span class="built_in">count</span> &#123;</span><br><span class="line">            nums1[i] &lt; nums2[j] ? (nums[k] = nums1[i], i+=<span class="number">1</span>) : (nums[k] = nums2[j], j+=<span class="number">1</span>); k+=<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> i &lt; nums1.<span class="built_in">count</span> &#123; nums[k] = nums1[i]; i+=<span class="number">1</span>; k+=<span class="number">1</span> &#125;</span><br><span class="line">        <span class="keyword">while</span> j &lt; nums2.<span class="built_in">count</span> &#123; nums[k] = nums2[j]; j+=<span class="number">1</span>; k+=<span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> h = nums.<span class="built_in">count</span>/<span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> nums.<span class="built_in">count</span>&amp;<span class="number">1</span> == <span class="number">1</span> ? <span class="type">Double</span>(nums[h]) : <span class="type">Double</span>(nums[h-<span class="number">1</span>]+nums[h])/<span class="number">2.0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Find-K-th-Smallest-Pair-Distance"><a href="#Find-K-th-Smallest-Pair-Distance" class="headerlink" title="Find K-th Smallest Pair Distance"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Find-K-th-Smallest-Pair-Distance">Find K-th Smallest Pair Distance</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">smallestDistancePair</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> k: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> nums = nums.sorted()</span><br><span class="line">        <span class="keyword">var</span> l = <span class="number">0</span>, h = nums.last!-nums.first!</span><br><span class="line">        <span class="keyword">while</span> l &lt; h &#123;</span><br><span class="line">            <span class="keyword">let</span> m = (l+h)/<span class="number">2</span></span><br><span class="line">            <span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">0</span>, l1 = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> r1 <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (nums[r1]-nums[l1]) &gt; m &#123; l1 += <span class="number">1</span> &#125;</span><br><span class="line">                <span class="built_in">count</span> += r1-l1</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">count</span> &gt;= k ? (h = m): (l = m+<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Split-Array-Largest-Sum"><a href="#Split-Array-Largest-Sum" class="headerlink" title="Split Array Largest Sum"></a><a href="https://leihao0.github.io/LeetCode-Binary-Search/#Split-Array-Largest-Sum">Split Array Largest Sum</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>LeetCode</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Hash Table</title>
    <url>/cn/LeetCode-Hash-Table/</url>
    <content><![CDATA[<h2 id="Design-HashSet"><a href="#Design-HashSet" class="headerlink" title="Design HashSet"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Design-HashSet">Design HashSet</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHashSet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> bucket = <span class="type">Array</span>(repeating: <span class="literal">false</span>, <span class="built_in">count</span>: <span class="number">1000001</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(<span class="number">_</span> key: Int)</span></span> &#123;</span><br><span class="line">        bucket[key] = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(<span class="number">_</span> key: Int)</span></span> &#123;</span><br><span class="line">         bucket[key] = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">contains</span><span class="params">(<span class="number">_</span> key: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bucket[key]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="Design-HashMap"><a href="#Design-HashMap" class="headerlink" title="Design HashMap"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Design-HashMap">Design HashMap</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHashMap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> bucket = <span class="type">Array</span>(repeating: -<span class="number">1</span>, <span class="built_in">count</span>: <span class="number">1000001</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">put</span><span class="params">(<span class="number">_</span> key: Int, <span class="number">_</span> value: Int)</span></span> &#123;</span><br><span class="line">        bucket[key] = value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(<span class="number">_</span> key: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bucket[key]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(<span class="number">_</span> key: Int)</span></span> &#123;</span><br><span class="line">        bucket[key] = -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Contains-Duplicate"><a href="#Contains-Duplicate" class="headerlink" title="Contains Duplicate"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Contains-Duplicate">Contains Duplicate</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">containsDuplicate</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">set</span> = <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">set</span>.<span class="built_in">contains</span>(i) &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line">            <span class="keyword">set</span>.insert(i)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Single-Number"><a href="#Single-Number" class="headerlink" title="Single Number"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Single-Number">Single Number</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">singleNumber</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> nums.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; $<span class="number">0</span> ^ $<span class="number">1</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Intersection-of-Two-Arrays"><a href="#Intersection-of-Two-Arrays" class="headerlink" title="Intersection of Two Arrays"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Intersection-of-Two-Arrays">Intersection of Two Arrays</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">intersection</span><span class="params">(<span class="number">_</span> nums1: [Int], <span class="number">_</span> nums2: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">let</span> set1 = <span class="type">Set</span>(nums1), set2 = <span class="type">Set</span>(nums2)</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Array</span>(set1.intersection(set2))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Happy-Number"><a href="#Happy-Number" class="headerlink" title="Happy Number"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Happy-Number">Happy Number</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> setI = <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isHappy</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line">        <span class="keyword">var</span> i = n, r = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &gt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> t = i%<span class="number">10</span></span><br><span class="line">            r += t*t</span><br><span class="line">            i /= <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> setI.<span class="built_in">contains</span>(r) &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line"></span><br><span class="line">        setI.insert(r)</span><br><span class="line">        <span class="keyword">return</span> isHappy(r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>##</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>##</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Minimum-Index-Sum-of-Two-Lists"><a href="#Minimum-Index-Sum-of-Two-Lists" class="headerlink" title="Minimum Index Sum of Two Lists"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Minimum-Index-Sum-of-Two-Lists">Minimum Index Sum of Two Lists</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 452 ms</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findRestaurant</span><span class="params">(<span class="number">_</span> list1: [String], <span class="number">_</span> list2: [String])</span></span> -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> dict2 = [<span class="type">String</span>: <span class="type">Int</span>](), least = <span class="type">Int</span>.<span class="built_in">max</span>, arr = [<span class="type">String</span>]()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;list2.<span class="built_in">count</span> &#123;</span><br><span class="line">            dict2[ list2[i] ] = i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;list1.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> j = dict2[ list1[i] ] &#123;</span><br><span class="line">                <span class="keyword">let</span> n = i+j</span><br><span class="line">                <span class="keyword">if</span> n &lt; least &#123;</span><br><span class="line">                    arr = [list1[i]]</span><br><span class="line">                    least = n</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> n == least &#123;</span><br><span class="line">                    arr.append(list1[i])</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2104 ms</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findRestaurant</span><span class="params">(<span class="number">_</span> list1: [String], <span class="number">_</span> list2: [String])</span></span> -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">let</span> dict1 = list1.enumerated().<span class="built_in">reduce</span>(into: [<span class="type">String</span>: <span class="type">Int</span>]()) &#123; $<span class="number">0</span>[$<span class="number">1.1</span>] = $<span class="number">1.0</span> &#125;</span><br><span class="line">        <span class="keyword">let</span> dict2 = list2.enumerated().<span class="built_in">reduce</span>(into: [<span class="type">String</span>: <span class="type">Int</span>]()) &#123; $<span class="number">0</span>[$<span class="number">1.1</span>] = $<span class="number">1.0</span> &#125;</span><br><span class="line">        <span class="keyword">let</span> dict = <span class="type">Set</span>(dict1.keys).intersection(dict2.keys).<span class="built_in">reduce</span>(into: [<span class="type">String</span>: <span class="type">Int</span>]()) &#123; $<span class="number">0</span>[$<span class="number">1</span>] = dict1[$<span class="number">1</span>]! + dict2[$<span class="number">1</span>]! &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dict.<span class="built_in">filter</span> &#123; $<span class="number">0</span>.value == dict.<span class="built_in">map</span>(&#123; $<span class="number">0</span>.value &#125;).<span class="built_in">min</span>()  &#125;.<span class="built_in">map</span> &#123; $<span class="number">0</span>.key &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Intersection-of-Two-Arrays-II"><a href="#Intersection-of-Two-Arrays-II" class="headerlink" title="Intersection of Two Arrays II"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Intersection-of-Two-Arrays-II">Intersection of Two Arrays II</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">intersect</span><span class="params">(<span class="number">_</span> nums1: [Int], <span class="number">_</span> nums2: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> dict = [<span class="type">Int</span>: <span class="type">Int</span>](), ans = [<span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums1 &#123;</span><br><span class="line">            dict[n, <span class="keyword">default</span>: <span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums2 &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> v = dict[n], v &gt; <span class="number">0</span> &#123;</span><br><span class="line">                ans.append(n)</span><br><span class="line">                dict[n] = v - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Contains-Duplicate-II"><a href="#Contains-Duplicate-II" class="headerlink" title="Contains Duplicate II"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Contains-Duplicate-II">Contains Duplicate II</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">containsNearbyDuplicate</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> k: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> dict = [<span class="type">Int</span>: [<span class="type">Int</span>]]()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> n = nums[i]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> arr = dict[n] &#123;</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> arr &#123;</span><br><span class="line">                    <span class="keyword">if</span> i-j &lt;= k &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                dict[n] = arr + [i]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dict[n] = [i]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Logger-Rate-Limiter"><a href="#Logger-Rate-Limiter" class="headerlink" title="Logger Rate Limiter"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Logger-Rate-Limiter">Logger Rate Limiter</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> logs = [<span class="type">String</span>: <span class="type">Int</span>]()</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">shouldPrintMessage</span><span class="params">(<span class="number">_</span> timestamp: Int, <span class="number">_</span> message: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> lastTimestamp = logs[message], timestamp - lastTimestamp &lt; <span class="number">10</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        logs[message] = timestamp</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Group-Shifted-Strings"><a href="#Group-Shifted-Strings" class="headerlink" title="Group Shifted Strings"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Group-Shifted-Strings">Group Shifted Strings</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">groupStrings</span><span class="params">(<span class="number">_</span> strings: [String])</span></span> -&gt; [[<span class="type">String</span>]] &#123;</span><br><span class="line">        <span class="keyword">var</span> dict = [[<span class="type">Int</span>]: [<span class="type">String</span>]]()</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> strings &#123;</span><br><span class="line">            <span class="keyword">let</span> arrS = <span class="type">Array</span>(s)</span><br><span class="line">            <span class="keyword">var</span> arr = [<span class="type">Int</span>]()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">1</span>..&lt;arrS.<span class="built_in">count</span>) &#123;</span><br><span class="line">                arr.append((<span class="type">Int</span>(arrS[i].asciiValue!)-<span class="type">Int</span>(arrS[i-<span class="number">1</span>].asciiValue!)+<span class="number">26</span>)%<span class="number">26</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            dict[arr, <span class="keyword">default</span>: []] += [s]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dict.<span class="built_in">map</span> &#123; $<span class="number">0</span>.value &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Valid-Sudoku"><a href="#Valid-Sudoku" class="headerlink" title="Valid Sudoku"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Valid-Sudoku">Valid Sudoku</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isValidSudoku</span><span class="params">(<span class="number">_</span> board: [[Character]])</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> sets = <span class="type">Array</span>(repeating: <span class="type">Set</span>&lt;<span class="type">Character</span>&gt;(), <span class="built_in">count</span>: <span class="number">9</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">9</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">9</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="built_in">c</span> = board[i][j]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">c</span> == <span class="string">&quot;.&quot;</span> &#123; <span class="keyword">continue</span> &#125;</span><br><span class="line">                <span class="keyword">if</span> sets[i].<span class="built_in">contains</span>(<span class="built_in">c</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sets[i].insert(<span class="built_in">c</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sets = <span class="type">Array</span>(repeating: <span class="type">Set</span>&lt;<span class="type">Character</span>&gt;(), <span class="built_in">count</span>: <span class="number">9</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">9</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">9</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="built_in">c</span> = board[i][j]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">c</span> == <span class="string">&quot;.&quot;</span> &#123; <span class="keyword">continue</span> &#125;</span><br><span class="line">                <span class="keyword">if</span> sets[j].<span class="built_in">contains</span>(<span class="built_in">c</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sets[j].insert(<span class="built_in">c</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">3</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> setC = <span class="type">Set</span>&lt;<span class="type">Character</span>&gt;()</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">3</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">3</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> <span class="built_in">c</span> = board[i*<span class="number">3</span>+k][j*<span class="number">3</span>+l]</span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">c</span> == <span class="string">&quot;.&quot;</span> &#123; <span class="keyword">continue</span> &#125;</span><br><span class="line">                        <span class="keyword">if</span> setC.<span class="built_in">contains</span>(<span class="built_in">c</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            setC.insert(<span class="built_in">c</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Find-Duplicate-Subtrees"><a href="#Find-Duplicate-Subtrees" class="headerlink" title="Find Duplicate Subtrees"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Find-Duplicate-Subtrees">Find Duplicate Subtrees</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findDuplicateSubtrees</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [<span class="type">TreeNode?</span>] &#123;</span><br><span class="line">        dfs(root)</span><br><span class="line">        <span class="keyword">return</span> nodeDict.<span class="built_in">filter</span> &#123; $<span class="number">0</span>.value.<span class="number">1</span> &gt; <span class="number">1</span> &#125;.<span class="built_in">map</span> &#123; $<span class="number">0</span>.value.<span class="number">0</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> nodeDict = [[<span class="type">Int?</span>]: (<span class="type">TreeNode</span>, <span class="type">Int</span>)]()</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(<span class="number">_</span> node: TreeNode?)</span></span> -&gt; [<span class="type">Int?</span>] &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> node = node <span class="keyword">else</span> &#123; <span class="keyword">return</span> [<span class="literal">nil</span>] &#125;</span><br><span class="line">        <span class="keyword">let</span> key: [<span class="type">Int?</span>] = [node.val] + dfs(node.<span class="keyword">left</span>) + dfs(node.<span class="keyword">right</span>)</span><br><span class="line">        nodeDict[key, <span class="keyword">default</span>: (node, <span class="number">0</span>)].<span class="number">1</span> += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> key</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Jewels-and-Stones"><a href="#Jewels-and-Stones" class="headerlink" title="Jewels and Stones"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Jewels-and-Stones">Jewels and Stones</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">numJewelsInStones</span><span class="params">(<span class="number">_</span> J: String, <span class="number">_</span> S: String)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> j = <span class="type">Set</span>(<span class="type">J</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="type">S</span>.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; $<span class="number">0</span> + (j.<span class="built_in">contains</span>($<span class="number">1</span>) ? <span class="number">1</span> : <span class="number">0</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Longest-Substring-Without-Repeating-Characters"><a href="#Longest-Substring-Without-Repeating-Characters" class="headerlink" title="Longest Substring Without Repeating Characters"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Longest-Substring-Without-Repeating-Characters">Longest Substring Without Repeating Characters</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Two-Sum-III-Data-structure-design"><a href="#Two-Sum-III-Data-structure-design" class="headerlink" title="Two Sum III - Data structure design"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Two-Sum-III---Data-structure-design">Two Sum III - Data structure design</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoSum</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> numbers = [<span class="type">Int</span>: <span class="type">Int</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(<span class="number">_</span> number: Int)</span></span> &#123;</span><br><span class="line">        numbers[number, <span class="keyword">default</span>: <span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">find</span><span class="params">(<span class="number">_</span> value: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (k, v) <span class="keyword">in</span> numbers &#123;</span><br><span class="line">            <span class="keyword">let</span> rest = value-k</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> num = numbers[rest], (num &gt; ((rest == k) ? <span class="number">1</span> : <span class="number">0</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4Sum-II"><a href="#4Sum-II" class="headerlink" title="4Sum II"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#4Sum-II">4Sum II</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fourSumCount</span><span class="params">(<span class="number">_</span> A: [Int], <span class="number">_</span> B: [Int], <span class="number">_</span> C: [Int], <span class="number">_</span> D: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">0</span>, ab = [<span class="type">Int</span>: <span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="type">A</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="type">B</span> &#123;</span><br><span class="line">                ab[i+j, <span class="keyword">default</span>: <span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="type">C</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="type">D</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> v = ab[-i-j] &#123; num += v &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Top-K-Frequent-Elements"><a href="#Top-K-Frequent-Elements" class="headerlink" title="Top K Frequent Elements"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Top-K-Frequent-Elements">Top K Frequent Elements</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">topKFrequent</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> k: Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> nums.<span class="built_in">reduce</span>(into: [<span class="type">Int</span>: <span class="type">Int</span>]()) &#123; $<span class="number">0</span>[$<span class="number">1</span>, <span class="keyword">default</span>: <span class="number">0</span>] += <span class="number">1</span> &#125;.sorted(by: &#123;$<span class="number">0</span>.value &gt; $<span class="number">1</span>.value&#125;)[..&lt;k].<span class="built_in">map</span>&#123;$<span class="number">0</span>.key&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Unique-Word-Abbreviation"><a href="#Unique-Word-Abbreviation" class="headerlink" title="Unique Word Abbreviation"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Unique-Word-Abbreviation">Unique Word Abbreviation</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValidWordAbbr</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> abbrDict = [<span class="type">String</span>: <span class="type">Set</span>&lt;<span class="type">String</span>&gt;]()</span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> dictionary: [<span class="type">String</span>]) &#123;</span><br><span class="line">        dictionary.forEach &#123; abbrDict[abbreviate($<span class="number">0</span>), <span class="keyword">default</span>: <span class="type">Set</span>&lt;<span class="type">String</span>&gt;()].insert($<span class="number">0</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isUnique</span><span class="params">(<span class="number">_</span> word: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> abbrSet = abbrDict[abbreviate(word)] &#123;</span><br><span class="line">            <span class="keyword">return</span> abbrSet.<span class="built_in">contains</span>(word) &amp;&amp; abbrSet.<span class="built_in">count</span> == <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">abbreviate</span><span class="params">(<span class="number">_</span> word: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> word.<span class="built_in">count</span> &lt; <span class="number">3</span> ? word : (<span class="type">String</span>(word.first!) + <span class="type">String</span>(word.<span class="built_in">count</span>-<span class="number">2</span>) + <span class="type">String</span>(word.last!))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Insert-Delete-GetRandom-O-1"><a href="#Insert-Delete-GetRandom-O-1" class="headerlink" title="Insert Delete GetRandom O(1)"></a><a href="https://leihao0.github.io/LeetCode-Hash-Table/#Insert-Delete-GetRandom-O(1)">Insert Delete GetRandom O(1)</a></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 220 ms, 30.27%</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomizedSet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> vals = <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(<span class="number">_</span> val: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> vals.<span class="built_in">contains</span>(val) &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line">        vals.insert(val)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(<span class="number">_</span> val: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> !vals.<span class="built_in">contains</span>(val) &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line">        vals.remove(val)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getRandom</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> vals.randomElement() ?? <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>LeetCode</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>如何通过收缩视频减少iCloud存储</title>
    <url>/cn/How-to-reduce-iCloud-storage-by-shrink-videos/</url>
    <content><![CDATA[<p>当我在“照片”中画廊视频时，它将显示我在何时何地拍摄它们</p>
<p>这是一个很棒的功能，可以帮助我回忆我的记忆<br>但是原始的 4k 在 iCloud 中占用了太多空间</p>
<p>例如，即使采用 HEVC（高效视频编码），则 2:30 的视频将占用 1GB 的空间<br>我的 200G iCloud 计划几乎已 ​​ 满</p>
<p>因此，我计划稍微压缩视频以节省一些空间。</p>
<a id="more"></a>

<p>但，</p>
<h2 id="FFmpeg-转换视频，即使有元数据也会丢失-GPS"><a href="#FFmpeg-转换视频，即使有元数据也会丢失-GPS" class="headerlink" title="FFmpeg 转换视频，即使有元数据也会丢失 GPS"></a>FFmpeg 转换视频，即使有元数据也会丢失 GPS</h2><p>幸运的是，我找到了一种方法</p>
<h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h3><ul>
<li>FFmpeg</li>
<li>Exiftool</li>
</ul>
<h4 id="将原始视频导出到文件夹"><a href="#将原始视频导出到文件夹" class="headerlink" title="将原始视频导出到文件夹"></a>将原始视频导出到文件夹</h4><p>将视频从“照片”拖到文件夹的常用方法是让“照片”转换视频</p>
<p>因此，您必须选择所有要导出的视频，</p>
<p><code>File -&gt; Export -&gt; Export Unmodified Original For...</code></p>
<h4 id="缩小每个视频"><a href="#缩小每个视频" class="headerlink" title="缩小每个视频"></a>缩小每个视频</h4><p>iPhone 默认流为</p>
<p><code>#0:0(und): Video: hevc (Main) (hvc1 / 0x31637668), yuv420p(tv, bt709)</code></p>
<p>因此使用<code>-pix_fmt yuv420p10le</code>重新编码为 10bit 并没有帮助</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">ffmov</span></span>() &#123;</span><br><span class="line">    mkdir -p shrunk</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ffmpeg with h265</span></span><br><span class="line">    ffmpeg -i <span class="string">&quot;<span class="variable">$1</span>&quot;</span> -c:v libx265 -crf 28 -c:a copy -c:s copy -tag:v hvc1 shrunk/<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    overwriteExif <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">overwriteExif</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># copy Exif info from the original video to the shrunk *.mov</span></span><br><span class="line">    exiftool -tagsFromFile <span class="string">&quot;<span class="variable">$1</span>&quot;</span> shrunk/<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    exiftool shrunk/<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    rm shrunk/<span class="string">&quot;<span class="variable">$1_original</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">shrinkVideos</span></span>() &#123;</span><br><span class="line">    <span class="comment">## walk thought all *.mov</span></span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> *.mov</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$f</span></span><br><span class="line">        ffmov <span class="variable">$f</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，您可以将这些代码复制并粘贴到<code>Terminal</code> 和 <code>cd VideoFolder</code>, 然后 <code>shrinkVideos</code></p>
<p>收缩将花费很长时间</p>
<p>在我的 MacBook Pro（15 英寸，2018 年）上，只有 0.3 倍<br>但通常情况下，视频会缩小 5 倍，而不会损失太多质量</p>
<p>全部完成后，缩小的视频将位于 <code>shrunk/</code> 文件夹下</p>
<p>然后，您可以对其进行比较，并先删除原始视频，然后再导入缩小的视频</p>
<p>好的，最后我不能忍受极慢的速度，所以我使用 Nvidia 1080 GPU 进行加速，以了解更多: <a href="https://leihao0.github.io/CUDA-GPU-Accelerated-h264-h265-HEVC-Video-Encoding-with-Staxrip/">CUDA GPU Accelerated h264/h265/HEVC Video Encoding with Staxrip</a></p>
<p>下一步是将转换后的视频标记为 <code>hvc1</code>，否则，导入照片时会出现错误：</p>
<p><strong>Invalid: The operation couldn’t be completed. (PHPhotosErrorDomain error -1.)</strong></p>
<p>所以整个步骤是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">ffhvc1</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> -&gt; <span class="variable">$1</span>.mov&quot;</span></span><br><span class="line">    ffmpeg -i <span class="string">&quot;<span class="variable">$1</span>&quot;</span> -c:v copy -c:a copy -c:s copy -tag:v hvc1 <span class="string">&quot;<span class="variable">$1</span>.mov&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span>.mov -&gt; <span class="variable">$1</span>&quot;</span></span><br><span class="line">    rm <span class="string">&quot;<span class="variable">$1</span>&quot;</span>; mv <span class="string">&quot;<span class="variable">$1</span>.mov&quot;</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">overwriteExif</span></span>() &#123;</span><br><span class="line">    <span class="comment"># copy Exif info from the original video to the shrunk *.mov</span></span><br><span class="line">    exiftool -tagsFromFile <span class="string">&quot;<span class="variable">$1</span>&quot;</span> shrunk/<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    exiftool shrunk/<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    rm shrunk/<span class="string">&quot;<span class="variable">$1_original</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">shrinkVideos</span></span>() &#123;</span><br><span class="line">    <span class="comment">## walk thought all *.mov</span></span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> *.mov</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$f</span>&quot;</span></span><br><span class="line">        ffhvc1 <span class="string">&quot;shrunk/<span class="variable">$f</span>&quot;</span></span><br><span class="line">        overwriteExif <span class="string">&quot;<span class="variable">$f</span>&quot;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># use Staxrip to convert all videos to shrunk/</span></span><br><span class="line"><span class="comment"># then run `shrinkVideos`</span></span><br></pre></td></tr></table></figure>

<hr>
<p>希望对您有帮助</p>
]]></content>
      <tags>
        <tag>FFmpeg</tag>
        <tag>Exiftool</tag>
        <tag>iCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI Tips</title>
    <url>/cn/SwiftUI-Tips/</url>
    <content><![CDATA[<h2 id="Binding-to-UserDefaults"><a href="#Binding-to-UserDefaults" class="headerlink" title="Binding to UserDefaults"></a>Binding to UserDefaults</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UD</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> date: <span class="type">Date</span> = <span class="type">UserDefaults</span>.standard.value(forKey: <span class="string">&quot;date&quot;</span>) <span class="keyword">as</span>? <span class="type">Date</span> ?? <span class="type">Date</span>() &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="type">UserDefaults</span>.standard.<span class="keyword">set</span>(<span class="keyword">self</span>.date, forKey: <span class="string">&quot;date&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="AppDelegate-gt-SceneDelegate"><a href="#AppDelegate-gt-SceneDelegate" class="headerlink" title="AppDelegate -&gt; SceneDelegate"></a>AppDelegate -&gt; SceneDelegate</h2><p>Many Delegates moved from <code>AppDelegate.swift</code> to <code>SceneDelegate.swift</code></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> app: UIApplication, <span class="keyword">open</span> url: URL, options: [UIApplication.OpenURLOptionsKey : <span class="keyword">Any</span>] = [:])</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// to</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scene</span><span class="params">(<span class="number">_</span> scene: UIScene, openURLContexts URLContexts: Set&lt;UIOpenURLContext&gt;)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="NavigationView-NavigationBarItems-NavigationLink"><a href="#NavigationView-NavigationBarItems-NavigationLink" class="headerlink" title="NavigationView, NavigationBarItems, NavigationLink"></a>NavigationView, NavigationBarItems, NavigationLink</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">EnvironmentObject</span> <span class="keyword">var</span> ud: <span class="type">UD</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> url = <span class="string">&quot;Title:status?date=\(String(ud.firstDate.timeIntervalSince1970))&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                qrCodeImage(<span class="keyword">for</span>: url)!</span><br><span class="line"></span><br><span class="line">                <span class="type">Spacer</span>().frame(height: <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;\(ud.firstDate)&quot;</span>)</span><br><span class="line">            &#125;.navigationBarTitle(<span class="string">&quot;Title&quot;</span>)</span><br><span class="line">                .navigationBarItems(trailing:</span><br><span class="line">                    <span class="type">HStack</span> &#123;</span><br><span class="line">                        <span class="type">NavigationLink</span>(destination: <span class="type">PickerView</span>(firstDate: $ud.firstDate)) &#123;</span><br><span class="line">                            <span class="type">Image</span>(systemName: <span class="string">&quot;gear&quot;</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="PickerView-Binding"><a href="#PickerView-Binding" class="headerlink" title="PickerView Binding"></a>PickerView Binding</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PickerView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">Binding</span> <span class="keyword">var</span> date: <span class="type">Date</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="type">DatePicker</span>(selection: $date, <span class="keyword">in</span>: ...<span class="type">Date</span>(), displayedComponents: .date) &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Fix-SwiftUI-Image-Blank-View"><a href="#Fix-SwiftUI-Image-Blank-View" class="headerlink" title="Fix SwiftUI Image Blank View"></a>Fix SwiftUI Image Blank View</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ciContext = <span class="type">CIContext</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">qrCodeImage</span><span class="params">(<span class="keyword">for</span> string: String)</span></span> -&gt; <span class="type">Image?</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = string.data(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> qrFilter = <span class="type">CIFilter</span>(name: <span class="string">&quot;CIQRCodeGenerator&quot;</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">    qrFilter.setValue(data, forKey: <span class="string">&quot;inputMessage&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> transform = <span class="type">CGAffineTransform</span>(scaleX: <span class="number">10</span>, y: <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> ciImage = qrFilter.outputImage?.transformed(by: transform) <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> cgImage = ciContext.createCGImage(ciImage, from: ciImage.extent)</span><br><span class="line">    <span class="comment">// convert to UIImage</span></span><br><span class="line">    <span class="keyword">let</span> uiImage = <span class="type">UIImage</span>(cgImage: cgImage!)</span><br><span class="line">    <span class="keyword">let</span> image = <span class="type">Image</span>(uiImage: uiImage)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>SwiftUI</tag>
      </tags>
  </entry>
  <entry>
    <title>坟场之书</title>
    <url>/cn/The-Graveyard-Book/</url>
    <content><![CDATA[<h1 id="游乐园-🎠-之书"><a href="#游乐园-🎠-之书" class="headerlink" title="游乐园 🎠 之书"></a>游乐园 🎠 之书</h1><div style="width: 300px">
<img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/The%20Graveyard%20Book.jpg" />
</div>

<p>孩子们没有生死的概念，坟场对于他们来说更像是游乐园</p>
<a id="more"></a>

<hr>
<p>感谢 🙏 🐼 读客 又寄来一本书</p>
<p>说来惭愧，出国后阅读数量直线下降<br>由以前每年的几百本骤变成现在的个位数</p>
<p>想想以前大言不惭的说阅读应无功利心，而应由兴趣驱动<br>现在真是啪啪打脸</p>
<p>不过也有客观原因：</p>
<p>一是我现在想看的大多数书都有原版<br>既然有原版，我就不是很想看翻译的版本</p>
<p>二是有次我电话，被一个新加坡国立大学的朋友听到了<br>之后就被她反复鄙视 “你的塑料英语”</p>
<p>不过我有我的倔强，慢就慢，但坚持看原版<br>应该总会有一天可以向中文书那样快起来</p>
<p>三是坡县是个岛，没有各位大神说的什么国外好山好水好寂寞<br>并且这次疫情的初期让我一度以为这里是纸糊的发达国家<br>另外一年四季都是夏天，除了比较热，其他都蛮安逸的<br>蓝天白云暴雨电闪雷鸣，感觉时间像是凝固了，挺好</p>
<p>没了功利心，自然也没了阅读的动力</p>
<p>现在 Circuit Breaker 了，算是有了点时间和心情吧</p>
<hr>
<p>最早拿到这本书<br>刚开始时以为是科幻<br>听到可以隐身以为是玄幻<br>碰到妹纸以为是爱情<br>去上学又以为是校园<br>老爸来局里捞人以为是亲子<br>全家被杀又以为是悬疑<br>最后的最后原来是在说成长</p>
<p>就如最后作者写到：</p>
<blockquote>
<p>我在美国新奥尔良一家破旧的宾馆里写完第六章，《伯蒂上学的日子》。我在自家花园的凉亭里完成了最后一页，一边写一边强忍泪水。只在那一刻，我明白了我为何没在刚刚当爸爸时写下这本书。因为在创作之前，我得先陪伴我的孩子走完他们的成长历程，养育他们，爱他们，并在最后学会放手</p>
</blockquote>
<hr>
<p>另外阅读过程中很难入戏<br>整本书一直给我一种哈利波特翻版的感觉</p>
<p>不过这次阅读有一个明显的不同<br>以前阅读此类小说，往往是以主人公的视角进入书本<br>随着年龄的增长<br>这次更多的是以 Silas 的视角</p>
<p>这书如果是国内常见的玄幻套路<br>Bod 肯定把妹 Scarlett，驯服 Sleer，成为 Master， 手撕 Jack，坐当 Brotherhood 老大</p>
<p>然而这一切在写出了 美国众神的 Neil 笔下并没有发生<br>Bod 打完怪 👾 后，妹纸反倒吓跑了，Bod 也只是普普通通的 <strong>世界那么大，我想去看看</strong></p>
<p>作为父亲，你希望看到自己的 Bod 成为国内的那个还是书 📖 中的这个？</p>
<hr>
<p>还有有时候叛逆期做的一些蠢事，需要父母来买单<br>现在年龄大了，也理解的当年父母各种禁令的苦衷</p>
<p>不过想想也没什么办法<br>那时候的自己并不知道现在的自己知道的这些</p>
<p>我曾设想过，如果现在的自己和那时的自己对话<br>那时的自己肯定也不会乖乖听话<br>必须被社会的铁拳锤在脸上才能幡然醒悟<br>毅然决然的做一些事情</p>
<hr>
<p>处理了总总事情后，总有一天要走出童话世界，进入生活</p>
<blockquote>
<p>“Good-bye, then, Silas.” Bod held out his hand, as he had when he was a small boy, and Silas took it, in a cold hand the color of old ivory, and shook it gravely.<br>“Good-bye, Nobody Owens.”<br>Bod picked up the little suitcase. He opened the door to let himself out of the crypt, walked back up the gentle slope to the path without looking back.”</p>
</blockquote>
<p>我出来的时候就比较惨，没人送我，没有道别<br>北京的房租退了，买了单程机票<br>全部家当打了三个行李箱<br>凌晨 4 点打车去机场<br>办完托运，登机，然后就走了</p>
<blockquote>
<p>without looking back</p>
</blockquote>
<p>我多么希望当时也听到了 Bod 的幻听：</p>
<blockquote>
<p>He took a step forward … a voice said, “I am so proud of you, my son.”</p>
</blockquote>
]]></content>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>适用于儿童的 Python vs Java</title>
    <url>/cn/Python-vs-Java-for-Kids/</url>
    <content><![CDATA[<p><em>该</em> <a href="https://junilearning.com/blog/guide/python-vs-java/"><em>文章</em></a> <em>最初出现在</em> <a href="https://junilearning.com/"><em>junilearning.com</em></a></p>
<h1 id="Python-与-Java：使用，性能，学习"><a href="#Python-与-Java：使用，性能，学习" class="headerlink" title="Python 与 Java：使用，性能，学习"></a>Python 与 Java：使用，性能，学习</h1><p>在计算机科学领域，有许多编程语言，没有一种语言能比另一种语言优越。换句话说，<strong>每种语言最适合解决某些问题</strong>，实际上，对于给定的编程项目，通常没有一种最佳语言可供选择。因此，对于希望开发软件或通过代码解决有趣问题的学生来说，拥有<strong>适用于任何编程语言的强大计算机科学基础非常重要</strong>。</p>
<a id="more"></a>

<p>编程语言倾向于在它们的工作方式上共享某些特征，例如，它们在处理内存使用情况或使用对象的强度方面。当学生接触更多语言时，他们将开始看到这些模式。本文将主要关注 Python 与 Java，这是世界上使用最广泛的两种编程语言。虽然很难准确地衡量每种编程语言的增长速度，但<strong>它们是当今工业上使用的两种最受欢迎的编程语言</strong>。</p>
<p>Python 和 Java 之间的主要区别是 Python 是<strong>动态类型的</strong>，而 Java 是<strong>静态类型的</strong>。宽松地讲，这意味着 Java 对如何在代码中定义和使用变量更加严格。<strong>结果，Java 的语法趋于冗长，这是我们建议初学者在 Java 之前学习 Python 的原因之一。</strong>例如，这是<code>numbers</code>在 Python 中创建一个名称变量的方法，该变量保存数字 0 到 9：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">numbers.append(i)</span><br></pre></td></tr></table></figure>

<p>Here’s how you would do the same thing in Java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList numbers = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    numbers.add(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另一个主要区别是，Java 是一种<strong>编译语言</strong>，因此通常比 Python 运行程序的速度更快。这意味着在实际运行程序之前，编译器会将 Java 代码转换为机器级代码。相比之下，Python 是一种<strong>解释型</strong>语言，这意味着没有编译步骤。</p>
<h2 id="用法和实用性"><a href="#用法和实用性" class="headerlink" title="用法和实用性"></a>用法和实用性</h2><p>从历史上看，Java 之所以成为较流行的语言，部分原因是它的悠久历史。但是，Python 正在迅速普及。根据<a href="https://octoverse.github.com/">Github 的十月状态报告</a>，它最近已经超过 Java，成为使用最广泛的编程语言。根据 2018 年开发人员调查，<strong>Python 现在是增长最快的计算机编程语言</strong>。</p>
<p>Python 和 Java 都有大量的开发人员社区，可以在<a href="https://stackoverflow.com/">Stack Overflow 之</a>类的网站上回答问题。从<a href="https://insights.stackoverflow.com/trends?tags=python%2Cjava">Stack Overflow 趋势中</a>可以看出，<strong>Python 在 2017 年 Stack Overflow 上所问问题的百分比超过 Java</strong>。在撰写本文时，Stack Overflow 上大约 13％的问题用 Python 标记，而大约 8％的问题用 Java 标记！</p>
<h2 id="Web-开发"><a href="#Web-开发" class="headerlink" title="Web 开发"></a>Web 开发</h2><p><strong>Python 和 Java 均可用于后端 Web 开发</strong>。通常，开发人员将使用适用于 Python 的<a href="https://stackify.com/python-frameworks/">Django 和 Flask</a>框架以及适用于 Java 的<a href="https://spring.io/">Spring</a>。Python 以其代码的可读性而闻名，这意味着 Python 代码干净，易读且简洁。Python 还拥有大量，全面的模块，软件包和库，这些模块，软件包和库由 Python 发烧友社区开发，而其标准库之外。Java 具有类似的生态系统，尽管程度可能较小。</p>
<h2 id="移动应用开发"><a href="#移动应用开发" class="headerlink" title="移动应用开发"></a>移动应用开发</h2><p><strong>在移动应用程序开发方面，Java 占据了主导地位</strong>，因为<strong>Java</strong>是用于构建 Android 应用程序和游戏的主要语言。借助上述量身定制的库，开发人员可以选择利用专门为操作系统构建的强大框架和开发工具来编写 Android 应用程序。当前，尽管有<a href="https://kivy.org/">Kivy</a>和<a href="https://beeware.org/">BeeWare 之</a>类的工具可让您编写一次代码并在 Windows，OS X，iOS 和 Android 上部署应用程序，但是 Python 并不常用于移动开发。</p>
<h2 id="机器学习与大数据"><a href="#机器学习与大数据" class="headerlink" title="机器学习与大数据"></a>机器学习与大数据</h2><p>相反，在机器学习和<a href="https://junilearning.com/blog/coding-and-data-science">数据科学领域</a>，Python 是最受欢迎的语言。Python 通常用于大数据，科学计算和人工智能（AI）项目。<strong>在从事涉及情感分析的项目时，绝大多数数据科学家和机器学习程序员都选择使用 Python 而不是 Java</strong>。同时，值得注意的是，许多机器学习程序员在从事与网络安全，网络攻击预防和欺诈检测有关的项目时可能会选择使用 Java。</p>
<h2 id="从哪儿开始"><a href="#从哪儿开始" class="headerlink" title="从哪儿开始"></a>从哪儿开始</h2><p>在学习编程的基础时，<strong>许多研究得出的结论是</strong>，由于 Python 的简单直观的语法，因此<strong>比 Java</strong> <strong>更容易**</strong><a href="https://junilearning.com/coding">学习 Python</a><strong>，如前面的示例所示。与 Python 相比，Java 程序通常具有更多的样板代码-必须在许多地方包含很少或没有改动的部分代码。话虽如此，Java 有一些显着的优势，特别是它作为一种编译语言的速度。</strong>学习 Python 和 Java 将使学生接触两种语言，这两种语言基于相似的计算机科学概念，但教育方式不同。**</p>
<p>总体而言，很明显，Python 和 Java 在实践中都是强大的编程语言，因此，对于任何有抱负的软件开发人员，最好熟练地学习这两种语言。程序员应该根据每个软件开发项目的特定需求比较 Python 和 Java，而不是简单地学习他们喜欢的一种语言。简而言之，<strong>任何一种语言都不比另一种语言优越，因此程序员应力争在两种编码方面都拥有这两种语言</strong>。</p>
<table>
<thead>
<tr>
<th></th>
<th>Python</th>
<th>Java</th>
</tr>
</thead>
<tbody><tr>
<td>Runtime Performance</td>
<td></td>
<td>Winner</td>
</tr>
<tr>
<td>Ease of Learning</td>
<td>Winner</td>
<td></td>
</tr>
<tr>
<td>Practical Agility</td>
<td>Tie</td>
<td>Tie</td>
</tr>
<tr>
<td>Mobile App Development</td>
<td></td>
<td>Winner</td>
</tr>
<tr>
<td>Big Data</td>
<td>Winner</td>
<td></td>
</tr>
</tbody></table>
<hr>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>如何清洁 MacBook 灰尘和风扇</title>
    <url>/cn/How-to-Clean-MacBook-Dust-Fan/</url>
    <content><![CDATA[<h2 id="If-kernel-task-is-using-a-large-percentage-of-your-Mac-CPU"><a href="#If-kernel-task-is-using-a-large-percentage-of-your-Mac-CPU" class="headerlink" title="If kernel_task is using a large percentage of your Mac CPU"></a>If kernel_task is using a large percentage of your Mac CPU</h2><p>之前我有留意到 <code>kernel_task</code> 动不动就会 100%，卡到不行，但它又是 <code>System</code> 进程，毫无办法</p>
<p>根据  的文档 <a href="https://support.apple.com/en-us/HT207359">If kernel_task is using a large percentage of your Mac CPU</a></p>
<blockquote>
<p>In other words, kernel_task responds to conditions that cause <strong>your CPU to become too hot</strong>, even if your Mac doesn’t feel hot to you. It does not itself cause those conditions. When the CPU temperature decreases, kernel_task automatically reduces its activity.</p>
</blockquote>
<p>这是说因为 CPU 太热 🔥 了，即使你觉得不热 🥶…</p>
<p>另外 <code>kernel_task</code> 也不是罪魁祸首，等 CPU 不热了，它的占用率也就自动下去…</p>
<a id="more"></a>

<p>又查到不应该在左侧 👈 充电 🔋 ，信以为真</p>
<h3 id="Here’s-why-you-shouldn’t-charge-your-MacBook-Pro-on-the-left-side"><a href="#Here’s-why-you-shouldn’t-charge-your-MacBook-Pro-on-the-left-side" class="headerlink" title="Here’s why you shouldn’t charge your MacBook Pro on the left side"></a><a href="https://www.digitaltrends.com/computing/why-you-shouldnt-charge-macbook-pro-left-side/#:~:text=While%20charging%20the%20MacBook%20Pro,use%20the%20right%2Dhand%20ports.">Here’s why you shouldn’t charge your MacBook Pro on the left side</a></h3><blockquote>
<p>While charging the MacBook Pro and having peripherals plugged in to the left-hand ports, the device’s ports can get hot; for some reason, this can result in kernel_task going a bit haywire and using up a whole boatload of system resources.</p>
</blockquote>
<p>但换到右边 👉 充电 🔋 了几天后，还是过一阵就 100%</p>
<p>绝望…</p>
<p>突然想是不是因为需要清灰了</p>
<h2 id="How-to-Clean-MacBook-Dust-amp-Fan"><a href="#How-to-Clean-MacBook-Dust-amp-Fan" class="headerlink" title="How to Clean MacBook Dust &amp; Fan"></a>How to Clean MacBook Dust &amp; Fan</h2><p>Google 了下才知道可以自己拆卸<br>我的是 16 年的本本，已经过保<br>不然根据 <a href="https://www.apple.com/legal/warranty/products/embedded-mac-warranty-rest-of-apac-english.html">Mac Warranty</a><br>自己拆了应该就不保了</p>
<blockquote>
<p>This Warranty does not apply:</p>
<ul>
<li>(c) to damage caused by use a third party component or product that does not meet the Apple Product’s specifications</li>
</ul>
</blockquote>
<h3 id="工具-🔧"><a href="#工具-🔧" class="headerlink" title="工具 🔧"></a>工具 🔧</h3><ul>
<li>五角螺丝 🔩 刀</li>
<li>吹灰球，小刷子</li>
<li>废弃的信用卡 💳</li>
</ul>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>把螺丝拧下来</li>
<li>边上开个小缝</li>
<li>把不用的信用卡 💳 插进去，沿着图示蓝色箭头方向滑动<ol>
<li>会听见 <strong>咔</strong> 的一声</li>
<li>图 2 可以看到中间水平线一排有四个卡扣</li>
<li>而不是把什么东西弄断了（但愿如此 😓）</li>
</ol>
</li>
<li>右边对称的用 💳 在滑一下</li>
<li>然后按红色箭头用力水平拽<ol>
<li>图 2 风扇上方可以看到卡槽</li>
<li>所以要水平用力，左右 ↔️ 对称一点点的拽</li>
</ol>
</li>
<li>后盖就打开了</li>
</ol>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/clean-macbook-3.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/clean-macbook-0.jpg" alt=""></div></div></div>

<p>确实脏到不行</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/clean-macbook-1.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/clean-macbook-2.jpg" alt=""></div></div></div>

<p>清了灰后 <code>kernel_task</code> 就不怎么出现了，💻 也复活了<br>瞬间感觉 16 年的本本 💻 可以在用 5 年 👨‍💻</p>
]]></content>
      <tags>
        <tag>Macbook</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派 4</title>
    <url>/cn/Raspberry-Pi-4/</url>
    <content><![CDATA[<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Pi-Hole.png" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/Raspberrypi.png" alt=""></div></div></div>

<a id="more"></a>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># EEPROM</span></span><br><span class="line">sudo apt -y update</span><br><span class="line">sudo apt -y upgrade</span><br><span class="line">sudo apt -y install rpi-eeprom</span><br><span class="line">sudo rpi-eeprom-update</span><br><span class="line">sudo rpi-eeprom-update -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># oh-my-zsh</span></span><br><span class="line">sudo apt-get install zsh</span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="line">sudo apt -y install vim</span><br><span class="line"></span><br><span class="line">sudo chsh -s /bin/zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># pi-hole</span></span><br><span class="line">curl -sSL https://install.pi-hole.net | bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># piVPN</span></span><br><span class="line">curl -L https://install.pivpn.io | bash</span><br><span class="line">pivpn add</span><br><span class="line">pivpn remove</span><br><span class="line">pivpn list</span><br><span class="line">pivpn -qr</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Passwordless-SSH-access"><a href="#Passwordless-SSH-access" class="headerlink" title="Passwordless SSH access"></a>Passwordless SSH access</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">ssh-keygen</span><br><span class="line"><span class="comment"># raspberrypi</span></span><br><span class="line">cat raspberrypi.pub</span><br><span class="line">cat ~/.ssh/raspberrypi.pub | ssh pi@192.168.2.2 <span class="string">&#x27;mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h2><p><a href="https://magpi.raspberrypi.org/articles/vnc-raspberry-pi">https://magpi.raspberrypi.org/articles/vnc-raspberry-pi</a></p>
<h2 id="Rclone-amp-Google-Drive"><a href="#Rclone-amp-Google-Drive" class="headerlink" title="Rclone &amp; Google Drive"></a>Rclone &amp; Google Drive</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt -y install fuse</span><br><span class="line"></span><br><span class="line">curl -L https://raw.github.com/pageauc/rclone4pi/master/rclone-install.sh | bash</span><br><span class="line">rclone config</span><br><span class="line"></span><br><span class="line">mkdir -p /tmp/gdrive</span><br><span class="line">fusermount -u /tmp/gdrive</span><br><span class="line"></span><br><span class="line">sudo vim /etc/fuse.conf</span><br><span class="line"><span class="comment"># user_allow_other</span></span><br></pre></td></tr></table></figure>

<h2 id="Auto-Mount"><a href="#Auto-Mount" class="headerlink" title="Auto Mount"></a>Auto Mount</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo blkid</span><br><span class="line"></span><br><span class="line"><span class="comment"># sudo vim /etc/fstab</span></span><br><span class="line"></span><br><span class="line">UUID=633a8bc8 /media/3T ext4 defaults,auto,users,rw,nofail 0 0</span><br><span class="line">UUID=d271d018 /media/TM ext4 defaults,auto,users,rw,nofail 0 0</span><br><span class="line">UUID=53f3ce6b /media/8G ext4 defaults,auto,users,rw,nofail 0 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo chown -R pi:pi /media/3T /media/TM</span><br></pre></td></tr></table></figure>

<h2 id="Ramdisk-amp-Logs"><a href="#Ramdisk-amp-Logs" class="headerlink" title="Ramdisk &amp; Logs"></a>Ramdisk &amp; Logs</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sudo service rsyslog stop</span></span><br><span class="line"><span class="comment"># sudo systemctl disable rsyslog</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sudo vim /etc/fstab</span></span><br><span class="line"></span><br><span class="line">tmpfs /var/lib/plexmediaserver tmpfs defaults,noatime 0 0</span><br><span class="line">tmpfs /home/pi./cache tmpfs defaults,noatime 0 0</span><br><span class="line">tmpfs /tmp tmpfs defaults,noatime 0 0</span><br><span class="line">tmpfs /var/<span class="built_in">log</span> tmpfs defaults,noatime 0 0</span><br></pre></td></tr></table></figure>

<h2 id="Fix-Ext4"><a href="#Fix-Ext4" class="headerlink" title="Fix Ext4"></a>Fix Ext4</h2><p><code>sudo fsck.ext4 -vfy /dev/sda2</code></p>
<h2 id="Swap-space-on-an-external-hard-drive"><a href="#Swap-space-on-an-external-hard-drive" class="headerlink" title="Swap space on an external hard drive"></a>Swap space on an external hard drive</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/dphys-swapfile</span><br><span class="line"></span><br><span class="line">CONF_SWAPFILE=/media/3T/swapfile</span><br><span class="line">CONF_SWAPSIZE=8192</span><br></pre></td></tr></table></figure>

<h2 id="AFP-amp-Time-Machine"><a href="#AFP-amp-Time-Machine" class="headerlink" title="AFP &amp; Time Machine"></a>AFP &amp; Time Machine</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt -y install netatalk gparted</span><br><span class="line"></span><br><span class="line"><span class="comment"># sudo mkfs.ext4 /dev/sda2</span></span><br><span class="line"><span class="comment"># sudo mkfs.ext4 /dev/sda3</span></span><br><span class="line"><span class="comment"># sudo mkdir /media/TM</span></span><br><span class="line"><span class="comment"># sudo mount /dev/sda3 /media/TM</span></span><br><span class="line"><span class="comment"># sudo chown -R pi:pi /media/3T</span></span><br><span class="line"><span class="comment"># sudo chown -R pi:pi /media/TM</span></span><br><span class="line"></span><br><span class="line">sudo vim /etc/netatalk/afp.conf</span><br><span class="line"><span class="comment"># ;[3T]</span></span><br><span class="line"><span class="comment"># ;  path = /media/3T/</span></span><br><span class="line"><span class="comment"># ;[tmp]</span></span><br><span class="line"><span class="comment"># ;  path = /tmp/</span></span><br><span class="line"><span class="comment"># [TM]</span></span><br><span class="line"><span class="comment">#   path = /media/TM/</span></span><br><span class="line"><span class="comment">#   time machine = yes</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo systemctl restart netatalk</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Samba"><a href="#Samba" class="headerlink" title="Samba"></a>Samba</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install samba samba-common-bin</span><br><span class="line"></span><br><span class="line">sudo vim /etc/samba/smb.conf</span><br><span class="line"><span class="comment"># [pimylifeupshare]</span></span><br><span class="line"><span class="comment"># path = /media/3T/</span></span><br><span class="line"><span class="comment"># writeable=Yes</span></span><br><span class="line"><span class="comment"># create mask=0777</span></span><br><span class="line"><span class="comment"># directory mask=0777</span></span><br><span class="line"><span class="comment"># public=no</span></span><br><span class="line"><span class="comment"># [tmp]</span></span><br><span class="line"><span class="comment"># path = /tmp/</span></span><br><span class="line"><span class="comment"># writeable=Yes</span></span><br><span class="line"><span class="comment"># create mask=0777</span></span><br><span class="line"><span class="comment"># directory mask=0777</span></span><br><span class="line"><span class="comment"># public=no</span></span><br><span class="line">sudo smbpasswd -a pi</span><br><span class="line">sudo systemctl restart smbd</span><br></pre></td></tr></table></figure>

<h2 id="Plex-Server"><a href="#Plex-Server" class="headerlink" title="Plex Server"></a>Plex Server</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="string">&quot;/tmp/plexmediaserver&quot;</span></span><br><span class="line">sudo mount -t tmpfs -o size=1000M tmpfs /tmp/plexmediaserver</span><br><span class="line">sudo chown -R pi:pi /var/lib/plexmediaserver</span><br><span class="line"></span><br><span class="line">sudo apt -y install apt-transport-https</span><br><span class="line">curl https://downloads.plex.tv/plex-keys/PlexSign.key | sudo apt-key add -</span><br><span class="line"><span class="built_in">echo</span> deb https://downloads.plex.tv/repo/deb public main | sudo tee /etc/apt/sources.list.d/plexmediaserver.list</span><br><span class="line">sudo apt -y install plexmediaserver</span><br><span class="line"></span><br><span class="line">sudo vim /etc/default/plexmediaserver</span><br><span class="line"><span class="comment"># export PLEX_MEDIA_SERVER_USER=pi</span></span><br><span class="line"></span><br><span class="line">hostname -I</span><br><span class="line">sudo vim /boot/cmdline.txt</span><br><span class="line"><span class="comment"># ip=IPADDRESS</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sudo apt -y install pmount</span></span><br><span class="line"><span class="comment"># sudo apt-get install ntfs-3g exfat-fuse exfat-utils pmount</span></span><br><span class="line"><span class="comment"># sudo apt-get install hfsplus hfsutils hfsprogs gdisk</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lsblk</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /lib/systemd/system/plexmediaserver.service</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># user plex to pi</span></span><br><span class="line">sudo mkdir -p /etc/systemd/system/plexmediaserver.service.d</span><br><span class="line">sudo vim /etc/systemd/system/plexmediaserver.service.d/override.conf</span><br><span class="line"><span class="comment"># [Service]</span></span><br><span class="line"><span class="comment"># User=pi</span></span><br><span class="line"><span class="comment"># Group=pi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [Service]</span></span><br><span class="line"><span class="comment"># ExecStartPre=/bin/sleep 120;/bin/sh -c &#x27;/usr/bin/test -d &quot;$&#123;PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR&#125;&quot; || /bin/mkdir -p &quot;$&#123;PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR&#125;&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># data folder</span></span><br><span class="line"></span><br><span class="line">sudo systemctl stop plexmediaserver</span><br><span class="line"></span><br><span class="line">sudo service plexmediaserver stop</span><br><span class="line"></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> plexmediaserver.service</span><br><span class="line">sudo systemctl restart plexmediaserver.service</span><br></pre></td></tr></table></figure>

<h2 id="Crontab-e"><a href="#Crontab-e" class="headerlink" title="Crontab -e"></a>Crontab -e</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt -y install php php-curl</span><br></pre></td></tr></table></figure>

<p><code>crontab -e</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># rclone</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#x27;</span><span class="string">&#x27;mkdir -p /tmp/gdrive</span></span><br><span class="line"><span class="string">fusermount -u /tmp/gdrive</span></span><br><span class="line"><span class="string">/usr/bin/rclone mount Plex:Plex /tmp/gdrive --umask 0000 --default-permissions --allow-non-empty --allow-other --buffer-size 64M --dir-cache-time 48h --vfs-read-chunk-size 128M --vfs-read-chunk-size-limit 1500M &amp;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span> &gt; rclone.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Backup</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tar --exclude=&quot;$PlexPath/Logs&quot; --exclude=&quot;$PlexPath/Cache&quot; --exclude=&quot;$PlexPath/Crash Reports&quot; -czf /tmp/gdrive/backup/plex.tar.gz /var/lib/plexmediaserver</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">mkdir -p /tmp/gdrive/backup/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">PlexPath=&quot;/var/lib/plexmediaserver/Library/Application Support/Plex Media Server&quot;</span></span><br><span class="line"><span class="string">tar cf - --exclude=&quot;$PlexPath/Logs&quot; --exclude=&quot;$PlexPath/Cache&quot; --exclude=&quot;$PlexPath/Crash Reports&quot; /var/lib/plexmediaserver | lz4 -f - /tmp/gdrive/backup/plex.tar.lz4</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span> &gt; backup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Restore</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">lz4 -d /tmp/gdrive/backup/plex.tar.lz4 | tar -xC /</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">PlexPath=&quot;/var/lib/plexmediaserver/Library/Application Support/Plex Media Server&quot;</span></span><br><span class="line"><span class="string">mkdir -p &quot;$PlexPath/Logs&quot; &quot;$PlexPath/Cache&quot; &quot;$PlexPath/Crash Reports&quot;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span> &gt; restore.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chmod a+x backup.sh restore.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Update</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">sudo apt update &amp;&amp; sudo apt upgrade &amp;&amp; sudo apt autoremove &amp;&amp; sudo apt clean</span></span><br><span class="line"><span class="string">pihole -up &amp;&amp; pihole -g</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span> &gt; update.sh</span><br><span class="line"></span><br><span class="line">chmod a+x update.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">@reboot vncserver</span><br><span class="line"></span><br><span class="line"><span class="comment"># @reboot pmount sda2 3T</span></span><br><span class="line"><span class="comment"># @reboot pmount sda3 TM</span></span><br><span class="line"></span><br><span class="line">@reboot /home/pi/rclone.sh</span><br><span class="line">@reboot sleep 30 &amp;&amp; /home/pi/restore.sh</span><br><span class="line"></span><br><span class="line">*/30 * * * * /home/pi/backup.sh</span><br><span class="line">0 3 * * * /home/pi/update.sh</span><br><span class="line"></span><br><span class="line">0 22 * * * <span class="built_in">cd</span> ~/Bot;python3 autoPill.py</span><br><span class="line">0 9 * * * php ~/Bot/bilibiliRun.ph</span><br></pre></td></tr></table></figure>

<p><code>sudo crontab -e</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 0 4 * * * &#x2F;sbin&#x2F;shutdown -r</span><br><span class="line">@reboot sleep 90 &amp;&amp; sudo service plexmediaserver start</span><br></pre></td></tr></table></figure>

<h2 id="Jellyfin"><a href="#Jellyfin" class="headerlink" title="Jellyfin"></a><del>Jellyfin</del></h2><p><a href="https://jellyfin.org/">https://jellyfin.org/</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install apt-transport-https</span><br><span class="line">wget -O - https://repo.jellyfin.org/jellyfin_team.gpg.key | sudo apt-key add -</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$( dpkg --print-architecture )</span>] https://repo.jellyfin.org/<span class="subst">$( awk -F&#x27;=&#x27; &#x27;/^ID=/&#123; print $NF &#125;&#x27; /etc/os-release )</span> <span class="subst">$( awk -F&#x27;=&#x27; &#x27;/^VERSION_CODENAME=/&#123; print $NF &#125;&#x27; /etc/os-release )</span> main&quot;</span> | sudo tee /etc/apt/sources.list.d/jellyfin.list</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install jellyfin</span><br><span class="line"></span><br><span class="line"><span class="comment"># service jellyfin status</span></span><br><span class="line"><span class="comment"># systemctl restart jellyfin</span></span><br><span class="line"><span class="comment"># sudo /etc/init.d/jellyfin stop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .local/share/jellyfin</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#x27;</span><span class="string">&#x27;#!/bin/zsh</span></span><br><span class="line"><span class="string">JELLYFINTMP=&quot;/tmp/jellyfin&quot;</span></span><br><span class="line"><span class="string">USRBIN=&quot;/usr/bin&quot;</span></span><br><span class="line"><span class="string">mkdir -p $JELLYFINTMP/log $JELLYFINTMP/cache $JELLYFINTMP/transcodes \</span></span><br><span class="line"><span class="string">$JELLYFINTMP/data \</span></span><br><span class="line"><span class="string">$JELLYFINTMP/metadata \</span></span><br><span class="line"><span class="string">$JELLYFINTMP/config</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$USRBIN/jellyfin \</span></span><br><span class="line"><span class="string"> -C $JELLYFINTMP/cache \</span></span><br><span class="line"><span class="string"> -l $JELLYFINTMP/log \</span></span><br><span class="line"><span class="string"> -d $JELLYFINTMP/data \</span></span><br><span class="line"><span class="string"> -c $JELLYFINTMP/config \</span></span><br><span class="line"><span class="string"> --ffmpeg $USRBIN/ffmpeg &amp;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span> &gt; jellyfin.sh</span><br><span class="line"></span><br><span class="line">chmod a+x jellyfin.sh</span><br><span class="line">nohup ./jellyfin.sh &lt;/dev/null &amp;</span><br><span class="line"></span><br><span class="line">sudo systemctl <span class="built_in">disable</span> jellyfin</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://jellyfin.org/docs/general/administration/hardware-acceleration.html</span></span><br><span class="line">sudo usermod -aG video jellyfin</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Raspberry</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 iOS 令牌的 APN</title>
    <url>/cn/iOS-Token-Based-APNs/</url>
    <content><![CDATA[<p>苹果提供了一种新的方法（身份验证令牌）来进行 APN</p>
<p>与以前的方式（提供商证书）相比，证书 <code>*.p12</code> 每年都会过期</p>
<p>基于令牌的<code>* .p8</code> <strong>永不过期</strong></p>
<a id="more"></a>

<ul>
<li><a href="https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/establishing_a_token-based_connection_to_apns">建立与 APN 的基于令牌的连接</a></li>
<li><a href="https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CommunicatingwithAPNs.html">与 APN 通讯</a></li>
</ul>
<h2 id="对于客户"><a href="#对于客户" class="headerlink" title="对于客户"></a>对于客户</h2><p>客户端唯一不同的是</p>
<ol>
<li>在上创建身份验证令牌签名密钥 <a href="https://developer.apple.com/">https://developer.apple.com/</a></li>
<li>Download the <code>*.p8</code> and send it to backend engineer</li>
</ol>
<h2 id="对于后端"><a href="#对于后端" class="headerlink" title="对于后端"></a>对于后端</h2><p>许多框架都有支持 <code>*.p8</code>.</p>
<p>例如：</p>
<p><a href="https://firebase.google.com/docs/cloud-messaging/ios/certs">Firebase</a></p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>APNs</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 的用途是什么</title>
    <url>/cn/What-is-Python-Used-for/</url>
    <content><![CDATA[<h1 id="在现实世界中如何使用-Python"><a href="#在现实世界中如何使用-Python" class="headerlink" title="在现实世界中如何使用 Python"></a>在现实世界中如何使用 Python</h1><p><strong>Python</strong>是世界上最受欢迎的编码语言之一。</p>
<p>大多数美国顶尖大学甚至在其入门的编码课程中都使用 Python：教导学生使用 Python 来构建简单的游戏，解析来自网页的信息，甚至进行语言处理！</p>
<p>尽管如此，许多父母和学生都常常想知道-Python 在公司或各个领域中实际上是如何使用的？</p>
<p>继续阅读以了解<strong>Python</strong>如何驱动<strong>当今的领先行业，并在众多计算机科学学科中发挥重要作用。</strong></p>
<a id="more"></a>

<h2 id="为什么选择-Python？"><a href="#为什么选择-Python？" class="headerlink" title="为什么选择 Python？"></a>为什么选择 Python？</h2><p><a href="https://junilearning.com/blog/guide/what-is-python-101-for-students/?fbclid=IwAR2B-DsUCsJJo8_VkKQ87k0iyQeXJhBUcllDiUMXX9ACqjMEHBXfCjJMxTc?utm_source=gf&utm_medium=what_is_python_used_for&utm_campaign=outreach">Python</a>是一种<strong>高层次的</strong>和<strong>通用的编码语言</strong> -这意味着它更容易理解和可用于解决各种各样的问题！</p>
<p>凭借其简单的语法，高可读性，可在整个操作系统上使用，Python 是一种有价值的语言，可用于各种应用程序的学习和使用。</p>
<p><img src="https://images.ctfassets.net/mrop88jh71hl/70P7f6p7J1Bk4VY8GDzm95/58d544a1044609e94a001523d9583f22/python-code-application.jpeg" alt="屏幕上的Python代码。"></p>
<p>工程师屏幕上的 Python 代码示例。</p>
<p>因此，Python 不仅在当今的就业市场中盛行，而且在我们日常使用的通用技术中盛行也就不足为奇了。</p>
<p><strong>Python 编程</strong>是一种几乎可以在任何行业中使用的技能，其作用远不止软件开发。从行业像<strong>金融，医疗保健，</strong>以及<strong>保险</strong>，像田<strong>航空航天</strong>到<strong>娱乐</strong> - <a href="https://appdevelopermagazine.com/ten-industries-using-python-programming/">基于 Python 的技术</a>是推动<strong>创新和新的解决方案</strong>。</p>
<p>在《<a href="https://junilearning.com/blog/guide/what-is-python-101-for-students/?fbclid=IwAR2B-DsUCsJJo8_VkKQ87k0iyQeXJhBUcllDiUMXX9ACqjMEHBXfCjJMxTc?utm_source=gf&utm_medium=what_is_python_used_for&utm_campaign=outreach">什么是 Python 101》指南中</a>，我们介绍了 Python 以及 Python 所使用的一些领域，例如<strong>技术</strong>，<strong>金融</strong>和<strong>生物技术</strong>。但是在本文中，我们将更深入地研究 Python 的广泛用途-特别是在以下领域：</p>
<ul>
<li><strong>Web 开发</strong></li>
<li><strong>数据科学</strong></li>
<li><strong>机器学习</strong></li>
<li><strong>人工智能</strong></li>
</ul>
<h2 id="Python-的应用"><a href="#Python-的应用" class="headerlink" title="Python 的应用"></a>Python 的应用</h2><h3 id="Web-开发"><a href="#Web-开发" class="headerlink" title="Web 开发"></a>Web 开发</h3><p>虽然 HTML，CSS 和 Javascript 可能是进行<strong>Web 开发</strong>的常用工具，但 Python 也是一个不错的选择。</p>
<p><a href="https://careerfoundry.com/en/blog/web-development/what-does-it-take-to-become-a-web-developer-everything-you-need-to-know-before-getting-started/">Web 开发</a>是指从静态纯文本页面到动态电子商务网站和交互式 Internet 应用程序，在 Internet 上构建网站。</p>
<p>编码对于 Web 开发对于构建站点功能，优化用户体验并确保信息被正确组织至关重要。Python 的<strong>Django</strong>和<strong>Flask</strong>等网络框架已成为网站开发的流行选择。</p>
<p><img src="https://images.ctfassets.net/mrop88jh71hl/6prH9NRKgybllrNcEqeCBy/c7fbc7b6960e8f94efb9eaa0b70a97d2/python-web-development-applications.png" alt="Python用于创建网页。"></p>
<p>Python 是后端 Web 开发的绝佳选择，如今已被许多公司使用。</p>
<p>这些开放源代码框架使用户能够更有效地构建 Web 应用程序，因为 Python 具有处理大量数据和自动执行任务的能力。实际上，<strong>Instagram</strong>，<strong>Pinterest</strong>和<strong>Google 等</strong>公司在其<a href="https://learn.onemonth.com/10-famous-websites-built-using-python/">后端 Web 开发中都</a>采用了 Python 。</p>
<h3 id="数据科学"><a href="#数据科学" class="headerlink" title="数据科学"></a>数据科学</h3><p>在<a href="https://junilearning.com/blog/guide/coding-and-data-science/?fbclid=IwAR2B-DsUCsJJo8_VkKQ87k0iyQeXJhBUcllDiUMXX9ACqjMEHBXfCjJMxTc?utm_source=gf&utm_medium=what_is_python_used_for&utm_campaign=outreach">数据科学</a>和<strong>数据分析</strong><a href="https://junilearning.com/blog/guide/coding-and-data-science/?fbclid=IwAR2B-DsUCsJJo8_VkKQ87k0iyQeXJhBUcllDiUMXX9ACqjMEHBXfCjJMxTc?utm_source=gf&utm_medium=what_is_python_used_for&utm_campaign=outreach">方面</a>，Python 还是主要的选择语言。</p>
<p>在<strong>大数据</strong>时代，我们通过导航（GPS），在线购物，能源使用以及智能手表等可穿戴设备来与日常生活中的数据频繁接触。</p>
<p>平均每个家庭约有<a href="https://variety.com/2019/digital/news/u-s-households-have-an-average-of-11-connected-devices-and-5g-should-push-that-even-higher-1203431225/">11 台设备，</a>并且将来这个数字可能还会增加！拥有如此多的设备，企业需要处理大量数据才能提供服务。</p>
<p><img src="https://images.ctfassets.net/mrop88jh71hl/3XS43f9pqDhRuft9GdnvZq/2d0513d9f0079c572923a49cd214add5/python-data-analysis-applications.png" alt="Python用于数据分析的过程的说明"></p>
<p>基于 Python 的工具通常用于可视化，处理和分析大量数据。</p>
<p><strong>数据科学</strong>涉及处理数据和推断趋势<strong>-Python</strong>在此领域非常有用，因为它包含<strong>scipy</strong>，<strong>numpy</strong>和<strong>pandas</strong>等密集包 。</p>
<p>此外，<strong>matplotlib</strong>软件包可用于构建数据可视化。这使 Python 成为诸如<strong>生物信息学</strong>等领域的热门选择，该领域还涉及大量数据和建模。</p>
<p>这些基于 Python 的工具因其易用性和可伸缩性而变得流行。例如，<a href="https://www.edureka.co/blog/how-netflix-uses-python/#hownetflixusespython">Netflix</a>使用<strong>scipy</strong>和<strong>numpy</strong>进行数值计算来管理跨平台的用户流量。</p>
<p>▶ <strong>尝试：</strong> <a href="https://junilearning.com/blog/coding-projects/python-data-science-monte-carlo-simulations/?fbclid=IwAR2B-DsUCsJJo8_VkKQ87k0iyQeXJhBUcllDiUMXX9ACqjMEHBXfCjJMxTc?utm_source=gf&utm_medium=what_is_python_used_for&utm_campaign=outreach">高级数据科学和 Python 教程</a></p>
<h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><p>通过分析大量数据，<strong>机器学习</strong> <a href="https://junilearning.com/blog/guide/what-are-algorithms/?fbclid=IwAR2B-DsUCsJJo8_VkKQ87k0iyQeXJhBUcllDiUMXX9ACqjMEHBXfCjJMxTc?utm_source=gf&utm_medium=what_is_python_used_for&utm_campaign=outreach">算法</a>可以找到模式并将其应用于未来的行为。</p>
<p>产品中机器学习最明显的用途是推荐系统。公司如<strong>Netflix 公司</strong>，<strong>Spotify 的</strong>，和<strong>的 Youtube</strong>收集用户行为进行预测，并建议播放列表和视频。</p>
<p><strong>Scikit-learn</strong>和<strong>tensorflow</strong>是 Python 库，可用于对大型数据集进行分类，聚类和回归的算法。这些库的高性能和广泛功能使其在任何机器学习探索中都至关重要。</p>
<p>▶ <strong>了解更多：</strong> <a href="https://junilearning.com/blog/guide/importance-of-algorithms-for-kids/?fbclid=IwAR2B-DsUCsJJo8_VkKQ87k0iyQeXJhBUcllDiUMXX9ACqjMEHBXfCjJMxTc?utm_source=gf&utm_medium=what_is_python_used_for&utm_campaign=outreach">儿童算法的重要性</a></p>
<h3 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h3><p>机器学习实际上只是<strong>人工智能的</strong>一个方面。AI 是指机器的智能和计算机系统的开发，以执行以人为本的任务，例如感知或决策。</p>
<p>人工智能的一个杰出示例是<strong>Uber</strong>和<strong>Lyft</strong>等乘车应用。</p>
<p><img src="https://images.ctfassets.net/mrop88jh71hl/dlvfPv6HAIV4YaMb1TRCl/88739612a93476c94733255a94a567d7/python-artificial-intelligence-in-ride-sharing.png" alt="人工智能用于拼车应用的Python插图。"></p>
<p>Python 在人工智能中用于 Lyft 或 Uber 等应用程序。然后，AI 系统可以预测诸如用户需求和预计到达时间之类的事情。</p>
<p>Uber 利用 AI 来<strong>预测用户需求</strong>和<strong>估计的到达时间</strong>（以及其他功能），其中大部分是通过<a href="https://eng.uber.com/uber-ai-blog-2019/">Python</a>完成的。</p>
<p>除了一些前面提到的 Python 库之外，还可以通过<strong>keras</strong>和<strong>pytorch</strong>等其他库来创建 AI 功能（例如预测模型和神经网络）。</p>
<h2 id="Python-无处不在！"><a href="#Python-无处不在！" class="headerlink" title="Python 无处不在！"></a>Python 无处不在！</h2><p>在流行的编程语言中，Python 是其应用程序中种类最多的语言之一。此外，它已与我们以及当今的领先公司深入地融合在一起。</p>
<p>涉及 Python 的职业包括<strong>软件工程师，Web 开发人员，数据科学家，产品经理，业务分析师</strong>等。无论哪个行业，这个技术时代的公司都依赖于数据驱动的决策制定，而 Python 是做到这一点的完美工具。</p>
<p>如果您或您的孩子对上面列出的领域或角色感兴趣，那么学习 Python 是一个不错的选择！</p>
<h2 id="想要成为-Python-程序员？"><a href="#想要成为-Python-程序员？" class="headerlink" title="想要成为 Python 程序员？"></a>想要成为 Python 程序员？</h2><p>Python 的最大优势之一是帮助新编码人员学习基本概念并熟悉编程！对于各个年龄段的新程序员，也有许多资源可供广泛学习 Python。</p>
<h3 id="适用于儿童的-Python-类"><a href="#适用于儿童的-Python-类" class="headerlink" title="适用于儿童的 Python 类"></a>适用于儿童的 Python 类</h3><p><img src="https://images.ctfassets.net/mrop88jh71hl/2dK37wFC5SF8HNKm4nGmqr/c256e7002d196ea54e4c10817a68f8a7/learning-python-with-juni.png" alt="一位使用Python的Juni讲师。"></p>
<p>Juni 讲师向一名年轻学生教授基本的 Python。</p>
<p>在 Juni Learning 中，我们将在经验丰富的编码老师的帮助下，向 11-18 岁的年轻编码人员<a href="https://junilearning.com/coding/?fbclid=IwAR2B-DsUCsJJo8_VkKQ87k0iyQeXJhBUcllDiUMXX9ACqjMEHBXfCjJMxTc?utm_source=gf&utm_medium=what_is_python_used_for&utm_campaign=outreach">教授 Python</a>。从<strong>巩固编码基础到构建算法和分析数据集</strong>，这些课程探索 Python 的许多不同应用，并教学生如何构建自己的编码项目。</p>
<p>阅读有关我们的<a href="https://junilearning.com/coding/?fbclid=IwAR2B-DsUCsJJo8_VkKQ87k0iyQeXJhBUcllDiUMXX9ACqjMEHBXfCjJMxTc?utm_source=gf&utm_medium=what_is_python_used_for&utm_campaign=outreach">编码课程</a>和课程的更多信息，或<a href="https://join.junilearning.com/">开始</a>与我们的招生团队一起学习哪种课程最适合您孩子的编码之旅。</p>
<hr>
<p><em>This</em> <a href="https://junilearning.com/blog/guide/what-is-python-used-for-major-industries/?fbclid=IwAR2B-DsUCsJJo8_VkKQ87k0iyQeXJhBUcllDiUMXX9ACqjMEHBXfCjJMxTc?utm_source=gf&utm_medium=what_is_python_used_for&utm_campaign=outreach"><em>article</em></a> <em>originally appeared on</em> <a href="https://junilearning.com/?utm_source=gf&utm_medium=what_is_python_used_for&utm_campaign=outreach"><em>junilearning.com</em></a>.</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>QSearch</title>
    <url>/cn/QSearch/</url>
    <content><![CDATA[<p>Transfer to Github:</p>
<p><a href="https://github.com/leihao0/Fake-Everything">Fake-Everything</a><br>Fake Everything<br>=======</p>
<p>If you don’t know what is <em>Everything</em>, just look at <a href="http://en.wikipedia.org/wiki/Everything_(software)">here</a></p>
<blockquote>
<p>Everything is a proprietary freeware Windows desktop search engine that can <strong>rapidly</strong> find files and folders by name on an NTFS volume.</p>
</blockquote>
<p>All methods reading and hashing the NTFS Volume are in <strong>/QSearch/Volume.h</strong></p>
<hr>
<p><img src="https://camo.githubusercontent.com/42a505629ab5267e7467e4886bbbbd8b339e5568/687474703a2f2f6661726d342e737461746963666c69636b722e636f6d2f333736322f31303833343639353531335f303532343934666230642e6a7067" alt=""></p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><ol>
<li>Save image above as -&gt; *.jpg</li>
<li>rename .jpg -&gt; .7z</li>
<li>unzip *.7z -&gt; (QSearch.exe config.ini)</li>
</ol>
<hr>
<h1 id="Everything-的原理猜想与实现"><a href="#Everything-的原理猜想与实现" class="headerlink" title="Everything 的原理猜想与实现"></a>Everything 的原理猜想与实现</h1><p>研究内容</p>
<ol>
<li>读取 NTFS 的 MFT</li>
<li>哈希表的构建</li>
<li>文件的系统路径</li>
<li>GUI 与 worker 线程</li>
<li>多种查找方式</li>
<li>MFC 界面</li>
</ol>
<p>研究计划</p>
<ul>
<li>4 月初 - 4 月中 确定研究方向</li>
<li>4 月下 - 4 月底 各知识点的准备，简单的 test</li>
<li>5 月初 程序的设计与开发的调试与运行</li>
<li>5 月中 - 5 月底 撰写毕业设计论文</li>
</ul>
<p>特色与创新</p>
<ol>
<li>CPU 与内存占用在合理的范围内</li>
<li>软件稳定，提供不同的搜索选项</li>
<li>相对于 windows 的查找功能，定位文件速度超快</li>
</ol>
<h1 id="NTFS-磁盘文件的快速定位"><a href="#NTFS-磁盘文件的快速定位" class="headerlink" title="NTFS 磁盘文件的快速定位"></a>NTFS 磁盘文件的快速定位</h1><p><strong>摘要</strong></p>
<blockquote>
<p>本文介绍了在 windows NTFS 磁盘格式下，枚举硬盘上所有文件以及文件夹的名称，以及利用 C++的 STL 构建哈希表，还有 MFC 的 GUI 与 worker 线程，最终根据用户输入的关键字，实现像 google 关键字查找那样简单的搜索，然后瞬间返回所有匹配的文件/文件夹以及递归得到该文件/文件夹的系统路径。</p>
</blockquote>
<p><strong>关键词</strong>：<strong>NTFS, 快速，关键词，查找，文件路径</strong></p>
<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a>1 引言</h2><p>Windows 的目录结构，在 NTFS 卷中，文件在目录中以<br>B+树的形式排列，在目录中查找文件时按<br>B+树的搜索方法先搜索根节点(从根目录开始)，然后按要找的文件名与根节点中的子节点对应的文件名相比较以确定在哪个子节点对应的存储区中搜索，然后以子节点为当前的根节点再搜索，直到找到文件为止。^[1]^</p>
<p>微软系统提供的搜索虽然可以搜索文本内容，但速度十分不理想。大多数情况下，我们只想知道文件存放在电脑的哪个文件夹下，而本程序很好的解决了这一点。</p>
<h2 id="2-NTFS-简要介绍"><a href="#2-NTFS-简要介绍" class="headerlink" title="2 NTFS 简要介绍"></a>2 NTFS 简要介绍</h2><h3 id="2-1-NTFS"><a href="#2-1-NTFS" class="headerlink" title="2.1 NTFS"></a>2.1 NTFS</h3><p>NTFS(New Technology File System)是 Windows<br>NT 以及之后的 Windows 的标准文件系统。NTFS 取代了文件分配表（FAT）文件系统，为 Microsoft 的 Windows 系列操作系统提供文件系统。NTFS 对 FAT 和 HPFS（高性能文件系统）作了若干改进，例如，支持元数据，并且使用了高级数据结构，以便于改善性能、可靠性和磁盘空间利用率。^[2]^</p>
<h3 id="2-2-现状"><a href="#2-2-现状" class="headerlink" title="2.2 现状"></a>2.2 现状</h3><p>随着以 NT 为内核的 Windows<br>2000/XP 的普及，很多个人用户开始用到了 NTFS。NTFS 也是以簇为单位来存储数据文件，但 NTFS 中簇的大小并不依赖于磁盘或分区大小。簇尺寸缩小不但降低了磁盘空间的浪费，还减少了产生磁盘碎片的可能。NTFS 支持文件加密管理功能，可为用户提供更高层次的安全保证。^[3]^</p>
<h2 id="3-准备"><a href="#3-准备" class="headerlink" title="3 准备"></a>3 准备</h2><h3 id="3-1-设计思路"><a href="#3-1-设计思路" class="headerlink" title="3.1 设计思路"></a>3.1 设计思路</h3><p>读取磁盘全部文件名称作为数据，根据用户输入关键字，在数据中匹配。正确的连同路径一起返回给用户，以方便的打开文件。</p>
<p>具体设计思路如图 3-1 所示。</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/QSearch_00.jpg" alt="图 3-1 设计思路"></p>
<p>哈希表最大的优点，就是把数据的存储和查找消耗的时间大大降低，几乎可以看成是常数时间；而代价仅仅是消耗比较多的内存。然而在当前可利用内存越来越多的情况下，用空间换时间的做法是值得的。另外，编码比较容易也是它的特点之一。</p>
<h3 id="3-2-什么是-USN"><a href="#3-2-什么是-USN" class="headerlink" title="3.2 什么是 USN"></a>3.2 什么是 USN</h3><p>程序的重中之重是读取 USN。</p>
<p>USN 是 Update Service Number Journal or Change<br>Journal 的缩写，对 NTFS 卷里所修改过的信息进行相关记录的功能，可以在分区中设置监视更改的文件和目录的数量，记录下监视对象修改时间和修改内容。</p>
<p>当启用 USN 日志时，对于每一个 NTFS 卷，当有添加、删除和修改文件的信息时，NTFS 都使用 USN 日志记录下来，并储存为<br>USN_RECORD 的格式。</p>
<h3 id="3-3-为什么快速"><a href="#3-3-为什么快速" class="headerlink" title="3.3 为什么快速"></a>3.3 为什么快速</h3><p>USN 日志相当于 WORD 目录，提供了索引，当然文章内容发生变化的时候，USN 日志会记录下来何时做了修改，但它并不记录里面具体修改了什么东西，所以索引文件很小。而当你想查找文章具体的段落时，你就不用狂转鼠标滚轮，直接看目录即可，定位也只需要按住 ctrl+鼠标单击。</p>
<p>同理，当你想查找某一篇文件时，可以直接通过查找 USN 日志（也就是建立的索引）就知道这个文件是否存在。</p>
<p>PS：windows 虽然不是“一切皆是文件”（Unix/Linux<br>的基本哲学之一），但文件夹也是以文件的形式存在，所以也可以通过 USN 来查找位置。</p>
<h3 id="3-4-环境"><a href="#3-4-环境" class="headerlink" title="3.4 环境"></a>3.4 环境</h3><p>由于 NTFS 格式本来就是微软的专利，所以提供了一系列的 API 函数，供我们方便的访问。</p>
<p>作为古老但是经典的 Visual C++ 6.0<br>编程工具，但那时尚未有 NTFS 格式，所以选择了 VC2005 作为集成开发环境，而且只能运行在 2000 以后的 windows 系统。</p>
<h2 id="4-程序的实现"><a href="#4-程序的实现" class="headerlink" title="4 程序的实现"></a>4 程序的实现</h2><h3 id="4-1-读取-USN"><a href="#4-1-读取-USN" class="headerlink" title="4.1 读取 USN"></a>4.1 读取 USN</h3><p>下面的均为微软提供的 API 函数^[4]^，包含在 <code>&lt;Winioctl.h&gt;</code> 头文件中。</p>
<h4 id="4-1-1-判断磁盘格式"><a href="#4-1-1-判断磁盘格式" class="headerlink" title="4.1.1 判断磁盘格式"></a>4.1.1 判断磁盘格式</h4><p>调用以下函数，找出为 NTFS 格式的磁盘</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">GetVolumeInformation(</span><br><span class="line">	lpRootPathName: PChar;               <span class="comment">// 磁盘驱动器代码字符串</span></span><br><span class="line">	lpVolumeNameBuffer: PChar;           <span class="comment">// 磁盘驱动器卷标名称</span></span><br><span class="line">	nVolumeNameSize: DWORD;              <span class="comment">// 磁盘驱动器卷标名称长度</span></span><br><span class="line">	lpVolumeSerialNumber: PDWORD;        <span class="comment">// 磁盘驱动器卷标序列号</span></span><br><span class="line">	var lpMaximumComponentLength: DWORD; <span class="comment">// 系统允许的最大文件名长度</span></span><br><span class="line">    var lpFileSystemFlags: DWORD;        <span class="comment">// 文件系统标识</span></span><br><span class="line">	lpFileSystemNameBuffer: PChar;       <span class="comment">// 格式类型</span></span><br><span class="line">	nFileSystemNameSize: DWORD           <span class="comment">// 文件操作系统名称长度</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>其中的 lpFileSystemNameBuffer，即为我们所要的，会返回”FAT32”，”NTFS”等字符串。</p>
<p>然后用一个循环，统计 A-Z 为 NTFS 格式的盘符，然后初始化</p>
<h4 id="4-1-2-获取驱动盘句柄"><a href="#4-1-2-获取驱动盘句柄" class="headerlink" title="4.1.2 获取驱动盘句柄"></a>4.1.2 获取驱动盘句柄</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">HANDLE hVol = CreateFile(</span><br><span class="line">	<span class="string">&quot;盘符字符串&quot;</span>,  <span class="comment">// 必须如\.\C: (A-Z)的形式</span></span><br><span class="line">	GENERIC_READ | GENERIC_WRITE, <span class="comment">// 可以为</span></span><br><span class="line">	FILE_SHARE_READ | FILE_SHARE_WRITE, <span class="comment">// 必须包含有FILE_SHARE_WRITE</span></span><br><span class="line">	<span class="literal">NULL</span>, <span class="comment">// 这里不需要</span></span><br><span class="line">	OPEN_EXISTING, <span class="comment">// 必须包含OPEN_EXISTING, CREATE_ALWAYS可能会导致错误</span></span><br><span class="line">	FILE_ATTRIBUTE_READONLY, <span class="comment">// FILE_ATTRIBUTE_NORMAL可能会导致错误</span></span><br><span class="line">	<span class="literal">NULL</span>); <span class="comment">// 这里不需要</span></span><br></pre></td></tr></table></figure>

<p>需要注意的几点：</p>
<ol>
<li>CreateFile 返回一个句柄，下面需要用到；</li>
<li>由于盘符必须为<code>\\.\C:</code>的形式，在 <code>C++</code> 语言中反斜杠”//“才代表 “/“；</li>
<li>需要管理员权限（vista，win7 中会弹出 UAC）</li>
</ol>
<p>如果 <code>hVol != INVALID_HANDLE_VALUE</code>，就代表获取句柄成功，可以继续下一步了。</p>
<h4 id="4-1-3-初始化-USN-日志"><a href="#4-1-3-初始化-USN-日志" class="headerlink" title="4.1.3 初始化 USN 日志"></a>4.1.3 初始化 USN 日志</h4><p>用 <code>FSCTL_CREATE_USN_JOURNAL</code> 作为 <code>DeviceIoControl</code> 的控制代码。</p>
<p><code>Cujd</code> 是一个指向输入缓冲区的指针，指向 <code>CREATE_USN_JOURNAL_DATA</code> 结构体。</p>
<h4 id="4-1-4-获取-USN-日志信息"><a href="#4-1-4-获取-USN-日志信息" class="headerlink" title="4.1.4 获取 USN 日志信息"></a>4.1.4 获取 USN 日志信息</h4><p>用 <code>FSCTL_QUERY_USN_JOURNAL</code> 作为 <code>DeviceIoControl</code> 的控制代码。</p>
<p><code>lpOutBuffer</code> 返回一个 <code>USN_JOURNAL_DATA</code>，是一个结构体</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    DWORDLONG UsnJournalID;</span><br><span class="line">    USN       FirstUsn;</span><br><span class="line">    USN       NextUsn;</span><br><span class="line">    USN       LowestValidUsn;</span><br><span class="line">    USN       MaxUsn;</span><br><span class="line">    DWORDLONG MaximumSize;</span><br><span class="line">    DWORDLONG AllocationDelta;</span><br><span class="line">&#125; USN_JOURNAL_DATA, *PUSN_JOURNAL_DATA;</span><br></pre></td></tr></table></figure>

<p><code>UsnJournalID</code>, <code>FirstUsn</code>, <code>NextUsn</code> 下一步会用到</p>
<h4 id="4-1-5-获取-USN-Journal-文件的信息"><a href="#4-1-5-获取-USN-Journal-文件的信息" class="headerlink" title="4.1.5 获取 USN Journal 文件的信息"></a>4.1.5 获取 USN Journal 文件的信息</h4><p>由于 <code>USN</code> 是以 <code>USN_RECORD</code> 形式储存的，其结构为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	DWORD RecordLength; <span class="comment">// 记录长度</span></span><br><span class="line">	WORD MajorVersion; <span class="comment">// 主版本</span></span><br><span class="line">	WORD MinorVersion; <span class="comment">// 次版本</span></span><br><span class="line">	DWORDLONG FileReferenceNumber; <span class="comment">// 文件引用数</span></span><br><span class="line">	DWORDLONG ParentFileReferenceNumber; <span class="comment">// 父目录引用数</span></span><br><span class="line">	USN Usn; <span class="comment">// USN</span></span><br><span class="line">	LARGE_INTEGER TimeStamp; <span class="comment">// 时间戳</span></span><br><span class="line">	DWORD Reason; <span class="comment">// 原因</span></span><br><span class="line">	DWORD SourceInfo; <span class="comment">// 源信息</span></span><br><span class="line">	DWORD SecurityId; <span class="comment">// 安全</span></span><br><span class="line">	ID DWORD FileAttributes; <span class="comment">// 文件属性</span></span><br><span class="line">	WORD FileNameLength; <span class="comment">// 文件长度</span></span><br><span class="line">	WORD FileNameOffset; <span class="comment">// 文件名偏移</span></span><br><span class="line">	DWORD ExtraInfo1;</span><br><span class="line">	DWORD ExtraInfo2; DWORD ExtraInfo3; <span class="comment">// Hypothetically added in version 2.3</span></span><br><span class="line">	WCHAR FileName[<span class="number">1</span>]; <span class="comment">// 文件名第一位的指针</span></span><br><span class="line">&#125; USN_RECORD, *PUSN_RECORD;</span><br></pre></td></tr></table></figure>

<p>注意里面的 <code>FileReferenceNumber</code>, <code>ParentFileReferenceNumber</code>, <code>FileNameLength</code>, <code>FileName</code></p>
<p>这几个变量至关重要</p>
<p><code>DeviceIoControl()</code> 与 <code>FSCTL_ENUM_USN_DATA</code> 配合</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">0</span>!=DeviceIoControl(hVol,</span><br><span class="line">	 	FSCTL_ENUM_USN_DATA,</span><br><span class="line">	 	&amp;med,</span><br><span class="line">	 	<span class="keyword">sizeof</span> (med),</span><br><span class="line">	 	Buffer,</span><br><span class="line">	 	BUF_LEN,</span><br><span class="line">	 	&amp;usnDataSize,</span><br><span class="line">	 	<span class="literal">NULL</span>)) &#123;</span><br><span class="line"></span><br><span class="line">	 	DWORD dwRetBytes = usnDataSize - <span class="keyword">sizeof</span> (USN);</span><br><span class="line">	 	<span class="comment">// 找到第一个 USN 记录</span></span><br><span class="line">	 	UsnRecord = (PUSN_RECORD)(((PCHAR)Buffer)+<span class="keyword">sizeof</span> (USN));</span><br><span class="line"></span><br><span class="line">	 	<span class="keyword">while</span> (dwRetBytes&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">	 		<span class="comment">// 获取到的信息</span></span><br><span class="line">	 		<span class="function">CString <span class="title">CfileName</span><span class="params">(UsnRecord-&gt;FileName, UsnRecord-&gt;FileNameLength/<span class="number">2</span>)</span></span>;</span><br><span class="line">	 		pfrnName.filename = nameCur.filename = CfileName;</span><br><span class="line">	 		pfrnName.pfrn = nameCur.pfrn = UsnRecord-&gt;ParentFileReferenceNumber;</span><br><span class="line"></span><br><span class="line">	 		<span class="comment">// Vector</span></span><br><span class="line">	 		VecNameCur.push_back(nameCur);</span><br><span class="line"></span><br><span class="line">	 		<span class="comment">// 构建hash...</span></span><br><span class="line">	 		frnPfrnNameMap[UsnRecord-&gt;FileReferenceNumber] = pfrnName;</span><br><span class="line">	 		<span class="comment">// 获取下一个记录</span></span><br><span class="line">	 		DWORD recordLen = UsnRecord-&gt;RecordLength;</span><br><span class="line">	 		dwRetBytes -= recordLen;</span><br><span class="line">	 		UsnRecord = (PUSN_RECORD)(((PCHAR)UsnRecord)+recordLen);</span><br><span class="line"></span><br><span class="line">	 	&#125;</span><br><span class="line">	 	<span class="comment">// 获取下一页数据</span></span><br><span class="line">	 	med.StartFileReferenceNumber = \*(USN \*)&amp;Buffer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，<code>Med</code> 为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MFT_ENUM_DATA med;</span><br><span class="line"></span><br><span class="line">med.StartFileReferenceNumber = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">med.LowUsn = <span class="number">0</span>;<span class="comment">//UsnInfo.FirstUsn;</span></span><br></pre></td></tr></table></figure>

<p>这里经测试发现，如果用 <code>FirstUsn</code> 有时候不正确，导致获取到不完整的数据，还是直接写 0 好.</p>
<p><code>med.HighUsn = UsnInfo.NextUsn;</code></p>
<p>在这个循环中，把每次获取到的文件名，分别插入 vector 与哈希表中（下文有介绍）。</p>
<h4 id="4-1-6-删除-USN-日志文件"><a href="#4-1-6-删除-USN-日志文件" class="headerlink" title="4.1.6 删除 USN 日志文件"></a>4.1.6 删除 USN 日志文件</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">DeviceIoControl(hVol,</span><br><span class="line">	FSCTL_DELETE_USN_JOURNAL,</span><br><span class="line">	&amp;dujd,</span><br><span class="line">	<span class="keyword">sizeof</span> (dujd),</span><br><span class="line">	<span class="literal">NULL</span>,</span><br><span class="line">	<span class="number">0</span>,</span><br><span class="line">	&amp;br,</span><br><span class="line">	<span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure>

<h4 id="4-1-7-枚举所有文件的结果"><a href="#4-1-7-枚举所有文件的结果" class="headerlink" title="4.1.7 枚举所有文件的结果"></a>4.1.7 枚举所有文件的结果</h4><p>将数据先保存为 Allfile.txt 文本，以便用来分析，如图 4-1。</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/QSearch_01.jpg" alt="图 4-1 Allfile.txt"></p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/QSearch_02.jpg" alt="图 4-1 Allfile.txt"></p>
<p>用了自己电脑上的 D 盘作为测试，枚举出了全部的文件。如图，大约有 40W 文件，一共有 100 多 W 条数据，文件大小约 20MB。这对于之后的程序占用内存的数量，有了个模糊的估计，大约在 50M 左右。对于即使只有 1G 的内存，也在合理范围内。有了原始数据，分析如下：</p>
<p>比如 Linux 编程实践.isz 这个文件，其系统路径为：<code>D:\Ghost\Linux\Linux 编程实践.isz</code>，在看文件中的结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\</span><br><span class="line">Frn: 5000000000005</span><br><span class="line">Pfrn: NULL</span><br><span class="line">……</span><br><span class="line">……</span><br><span class="line">Ghost</span><br><span class="line">Frn: 20000000000fd</span><br><span class="line">Pfrn: 5000000000005</span><br><span class="line">……</span><br><span class="line">……</span><br><span class="line">Linux</span><br><span class="line">Frn: e0000000010d2</span><br><span class="line">Pfrn: 20000000000fd</span><br><span class="line">……</span><br><span class="line">……</span><br><span class="line">Linux编程实践.isz</span><br><span class="line">Frn: 190000000003b2</span><br><span class="line">Pfrn: e0000000010d2</span><br><span class="line">可以得出：</span><br><span class="line">Linux编程实践.isz-&gt;Pfrn &#x3D;&#x3D; Linux-&gt;Frn</span><br><span class="line">Linux-&gt;Pfrn &#x3D;&#x3D; Ghost-&gt;Frn</span><br><span class="line">Ghost-&gt;Pfrn &#x3D;&#x3D; D:\ -&gt; Frn</span><br><span class="line">D:\ -&gt; Pfrn 停止</span><br></pre></td></tr></table></figure>

<p>所以用一个递归函数（直接或间接地调用自身的函数），便可得到完整的路径。</p>
<h3 id="4-2-构建查找数据"><a href="#4-2-构建查找数据" class="headerlink" title="4.2 构建查找数据"></a>4.2 构建查找数据</h3><h4 id="4-2-1-构建-Vector"><a href="#4-2-1-构建-Vector" class="headerlink" title="4.2.1 构建 Vector"></a>4.2.1 构建 Vector</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">name_cur</span> &#123;</span></span><br><span class="line">    CString filename;</span><br><span class="line">    DWORDLONG pfrn;</span><br><span class="line">&#125;Name_Cur;</span><br></pre></td></tr></table></figure>

<p>Vector：</p>
<p>一种顺序容器。vector 中的元素通过其位置下标访问。可通过调用 push_back 或<br>insert 函数在 vector 中添加元素。在 vector<br>中添加元素可能会导致重新为容器分配内存空间，也可能会使所有的迭代器失效。在<br>vector<br>容器中间添加（或删除）元素将使所有指向插入（或删除）点后面的元素的迭代器失效。</p>
<p>用 Vector 来存放&lt;文件名，当前目录&gt;，由于模糊查找的要求，二分查找之类的快速查找方式，在这里反而不适用，而 Vector 从 begin 到 end 的线性遍历方式，反而比较符合这一要求。</p>
<h4 id="4-2-2-构建哈希表"><a href="#4-2-2-构建哈希表" class="headerlink" title="4.2.2 构建哈希表"></a>4.2.2 构建哈希表</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">pfrn_name</span> &#123;</span></span><br><span class="line">    DWORDLONG pfrn;</span><br><span class="line">    CString filename;</span><br><span class="line">&#125;Pfrn_Name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">map</span>&lt;DWORDLONG, Pfrn_Name&gt; Frn_Pfrn_Name_Map;</span><br></pre></td></tr></table></figure>

<p>这里利用 STL 提供的 map 库函数^[5]^，map 是键－值对的集合。map<br>类型通常可理解为关联数组（associative<br>array）：可使用键作为下标来获取一个值，正如内置数组类型一样。而关联的本质在于元素的值与某个特定的键相关联，而并非通过元素在数组中的位置来获取。</p>
<ol>
<li>考虑到若是自己实现哈希函数，可能有若干 bug，影响进度，不如使用 STL 提供的稳定的 map 来实现</li>
<li>“Don’t Reinvent the Wheel”不要重复发明轮子^[6]^<ol>
<li>如 Google 的 Android，是 Google 没有能力单独开发一个系统内核，才用了很成熟的 Linux 内核？我想也以 Google 这样的世界巨头公司，是不可能没有这个能力的，而是尊崇了不要重复发明轮子的原则。</li>
</ol>
</li>
</ol>
<h4 id="4-2-3-插入数据："><a href="#4-2-3-插入数据：" class="headerlink" title="4.2.3 插入数据："></a>4.2.3 插入数据：</h4><p>这里就用到了在 4.1.5 节，获取 USN Journal<br>文件的信息那个循环中，把每次获取到的 <code>USN_RECORD</code> 信息，里面的 <code>filename</code>,<br><code>pfrn</code>, <code>frn</code> 分别插入到 vector 与哈希表中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pfrnName.filename &#x3D; nameCur.filename &#x3D; CfileName;</span><br><span class="line">pfrnName.pfrn &#x3D; nameCur.pfrn &#x3D; UsnRecord-&gt;ParentFileReferenceNumber;</span><br><span class="line">VecNameCur.push_back(nameCur);</span><br><span class="line">frnPfrnNameMap[UsnRecord-&gt;FileReferenceNumber] &#x3D; pfrnName;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-界面"><a href="#4-3-界面" class="headerlink" title="4.3 界面"></a>4.3 界面</h3><p>开始一个项目时，VC2005 提供了命令行（控制台）项目，以及 GUI 项目。命令行编程非常的方便、快捷、实用，而且相对的简单。在控制台能满足的情况下，用界面是没有必要的。或者有时目标平台不能够显示图形用户界面。不过，<br>GUI 有着更明显的优势，比如菜单系统以及更好的交互性。另外，在菜单选择，字段之间移动数据录入过程中，<br>鼠标是非常有用的，GUI 是必经之路。所以，写程序时，先在 console 下试验了些中间数据，没问题结束后，在转向 GUI 界面。</p>
<p>MFC：Microsoft Foundation Classes，也就是一般人简称的 MFC<br>，是微软公司对于“降低 Windows<br>程序设计之厌烦无聊及困难度”而做出的最大贡献。MFC<br>使得对话框的产生极为简单。它也实现出消息派送系统（message<br>dispatching），处理 WPARAM 和 LP ARAM 的易犯错误。MFC<br>甚至是引诱某些人进入 C++ 的原动力。<br>本程序用微软提供的 MFC 实现，如图 4-2：</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/QSearch_04.jpg" alt="图 4-2 MFC 界面"></p>
<h4 id="4-3-1-KISS-原则"><a href="#4-3-1-KISS-原则" class="headerlink" title="4.3.1 KISS 原则"></a>4.3.1 KISS 原则</h4><p>KISS 原则就是”Keep It Sample And<br>Stupid”的缩写，简洁和易于操作是设计的最重要的原则。</p>
<p>KISS 原则在设计上可能最被推崇的，在家装设计，界面设计<br>，操作设计上，复杂的东西越来越被众人所 BS 了，而简单的东西越来越被人所认可，比如这些 UI 的设计和我们中国网页是负面的例子。“宜家”（IKEA）简约、效率的家居设计、生产思路；“微软”（Microsoft）“所见即所得”的理念；“谷歌”（Google)简约、直接的商业风格，无一例外的遵循了“kiss”原则。^[7]^</p>
<h4 id="4-3-2-功能"><a href="#4-3-2-功能" class="headerlink" title="4.3.2 功能"></a>4.3.2 功能</h4><p>在 kiss 原则下，尽可能做到简洁。添加 Editbox button listbox<br>menu^[8]^这几个控件，分别实现功能为：</p>
<ul>
<li>Editbox<ul>
<li>得到用户输入的需要查找的字符串</li>
</ul>
</li>
<li>Button<ol>
<li>得到 EditBox 中的字符串</li>
<li>字符太短弹出提示</li>
<li>加上放大镜图片，功能一目了然</li>
</ol>
</li>
<li>Listbox<ol>
<li>显示匹配的文件名与路径，双击可打开文件</li>
<li>由于路径可能比较长，加入水平滚动条</li>
<li>双击 Listbox 中的结果文件路径，打开被双击选中的文件</li>
</ol>
</li>
<li>Menu<ul>
<li>菜单，可以选择大小写、查找顺序</li>
</ul>
</li>
</ul>
<h3 id="4-4-加入线程"><a href="#4-4-加入线程" class="headerlink" title="4.4 加入线程"></a>4.4 加入线程</h3><h4 id="4-4-1-为什么加入线程"><a href="#4-4-1-为什么加入线程" class="headerlink" title="4.4.1 为什么加入线程"></a>4.4.1 为什么加入线程</h4><p>线程的好处：线程价廉。线程启动比较快，退出比较快，对系统资源的冲击也比较小。</p>
<p>另外考虑到：</p>
<ol>
<li>由于 io 的限制，对同一块硬盘，用多线程同时读取 MFT，意义不是很大</li>
<li>磁盘访问位于同一硬盘不同分区的 MFT，有可能反而会影响速度。而对于多块硬盘的电脑，应该可大大提高效率。但是多块硬盘的用户，可能组成了 RAID 磁盘列阵。最好的解决方案应该就是 A-Z 盘顺序读取。</li>
<li>最初创建 MFC 时，顺序执行，结果导致界面在全部数据统计结束后才能显示，在此过程中，用户很容易失去耐心。</li>
<li>最终决定一个 UI 线程，一个 worker 线程后台统计数据。</li>
</ol>
<h4 id="4-4-2-在-MFC-中启动一个-Worker-线程"><a href="#4-4-2-在-MFC-中启动一个-Worker-线程" class="headerlink" title="4.4.2 在 MFC 中启动一个 Worker 线程"></a>4.4.2 在 MFC 中启动一个 Worker 线程</h4><p>MFC 早加入了对多线程的支持。在一个典型的 MFC<br>程序中，多线程的支持隐藏在一大段非常惊人的工作之后。MFC<br>甚至企图强化某些与多线程有关的 Win32 观念。</p>
<p>GUI 与 worker 线程都是以 AfxBeginThread()启动，但是 MFC 利用 C++函数的 overloading 性质，对该函数提供了两种不同的声明。编译器会根据你所提供的参数，自动选择正确的一个来用。^[9]^</p>
<p>用 AfxBeginThread 来启动线程。<br>pParam 任意４字节数值，用来传给新线程。它可以是个整数，或指针，或单纯只是个 0。</p>
<p>这里只用到前面两个参数即可，对象中的线程函数，以及该对象指针</p>
<p>在任务管理器中可以看到两个线程，如图 4-3 所示</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/QSearch_03.jpg" alt="图 4-3 任务管理器显示线程数量"></p>
<p>当 worker 线程完成任务后，便会自动结束，回复为一个线程。</p>
<h4 id="4-4-3-最小化到通知区域"><a href="#4-4-3-最小化到通知区域" class="headerlink" title="4.4.3 最小化到通知区域"></a>4.4.3 最小化到通知区域</h4><p>现在越来越多的程序点击右上角的关闭，实际为最小化到托盘图标。真正退出程序需要从托盘图标上右键退出。</p>
<p>实现最小化而不退出程序，可以方便的查找文件。</p>
<p>1)最小化在任务栏显示。</p>
<p>2)点击关闭，退出到托盘图标，而不在任务栏显示；双击回复显示窗口。</p>
<p>3)托盘图标添加菜单。</p>
<h3 id="4-5-查找"><a href="#4-5-查找" class="headerlink" title="4.5 查找"></a>4.5 查找</h3><h4 id="4-5-1-通配符"><a href="#4-5-1-通配符" class="headerlink" title="4.5.1 通配符"></a>4.5.1 通配符</h4><p>实际应用中，文件名不可能清楚的记得，比如 test.2012-5-14.txt，经常是输入“test<br>.txt”，所以需要模糊查找。由于在 console 下，以&lt;filename,<br>pfrn&gt;创建哈希表，如果要实现模糊查找，哈希表变没有必要，可以直接利用容器 vector。</p>
<p>根据实际情况，不需要很严格的通配符，”* ？”<br>即可解决大部分查找问题，加上用户一般可能不知道通配符的使用，更不用说正则表达式。所以以“空格”<br>代替 “* ？”，实现 百度<br>google 那样以空格隔开关键字的查找方式，是个很好的解决办法。****</p>
<h4 id="4-5-2-大小写、顺序"><a href="#4-5-2-大小写、顺序" class="headerlink" title="4.5.2 大小写、顺序"></a>4.5.2 大小写、顺序</h4><p>一般会有以下两种情况：</p>
<ol>
<li>用户可能记不清文件名称或者路径的大小写</li>
<li>有时文件过多，可能需要严格的大小写，以过滤正确文件</li>
<li>记不清关键字的顺序</li>
</ol>
<p>所以提供下面两个选项：</p>
<ol>
<li>严格大小写</li>
<li>无顺序</li>
</ol>
<p>根据普遍情况，默认为：大小写不敏感，有顺序的查找方式</p>
<h4 id="4-5-3-用户隐私与系统路径"><a href="#4-5-3-用户隐私与系统路径" class="headerlink" title="4.5.3 用户隐私与系统路径"></a>4.5.3 用户隐私与系统路径</h4><ol>
<li>考虑到有些文件夹被用来存放用户私密文件。</li>
<li>系统文件夹，例如：<code>c:\windows\*</code> 一般用户是用不到的，同等搜索只会增加不必要的文件，拖重系统负担。</li>
</ol>
<p>所以有必要添加一个排除文件夹选项，如图 4-4</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/QSearch_06.jpg" alt="图 4-4 排除文件夹界面"></p>
<p>相应的函数为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isIgnore</span><span class="params">( <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;\* pignorelist )</span> </span>&#123;</span><br><span class="line">	<span class="built_in">string</span> tmp = CW2A(path);</span><br><span class="line">	<span class="keyword">for</span> ( <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator it = pignorelist-&gt;<span class="built_in">begin</span>();</span><br><span class="line">		it != pignorelist-&gt;<span class="built_in">end</span>(); ++it ) &#123;</span><br><span class="line">			<span class="keyword">size_t</span> i = it-&gt;length();</span><br><span class="line">			<span class="keyword">if</span> ( !tmp.compare(<span class="number">0</span>, i, \*it,<span class="number">0</span>, i) ) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-5-4-实现"><a href="#4-5-4-实现" class="headerlink" title="4.5.4 实现"></a>4.5.4 实现</h4><p>新建匹配字符串类</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cmpStrStr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	cmpStrStr(<span class="keyword">bool</span> uplow, <span class="keyword">bool</span> inorder) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;uplow = uplow;</span><br><span class="line">		<span class="keyword">this</span>-&gt;isOrder = inorder;</span><br><span class="line">	&#125;</span><br><span class="line">	~cmpStrStr() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">cmpStrFilename</span><span class="params">(CString str, CString filename)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">infilename</span><span class="params">(CString &amp;strtmp, CString &amp;filenametmp)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">bool</span> uplow;</span><br><span class="line">	<span class="keyword">bool</span> isOrder;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>遍历<strong>4.2.1</strong>中的 VecNameCur，通过 cmpStrFilename 匹配函数，得到符合的 filename</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="built_in">vector</span>&lt;Name_Cur&gt;::const_iterator cit = VecNameCur.<span class="built_in">begin</span>();</span><br><span class="line">	cit != VecNameCur.<span class="built_in">end</span>(); ++cit) &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ( cmpstrstr.cmpStrFilename(str, cit-&gt;filename) ) &#123;</span><br><span class="line">		path.Empty();</span><br><span class="line">		<span class="comment">// 还原 路径</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// vol:\  path \ cit-&gt;filename</span></span><br><span class="line">		getPath(cit-&gt;pfrn, path);</span><br><span class="line">		path += cit-&gt;filename;</span><br><span class="line">		<span class="comment">// path已是全路径</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> ( isIgnore(pignorelist) ) &#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		rightFile.push_back(path);</span><br><span class="line">		<span class="comment">//path.Empty();</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cmpStrFilename函数：</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">end</span> = str.GetLength();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ( pos &lt; <span class="built_in">end</span> ) &#123;</span><br><span class="line">	<span class="comment">// 对于str，取得 每个空格分开为的关键词</span></span><br><span class="line">	pos = str.Find( _T(<span class="string">&#x27; &#x27;</span>) );</span><br><span class="line"></span><br><span class="line">	CString strtmp;</span><br><span class="line">	<span class="keyword">if</span> ( pos == <span class="number">-1</span> ) &#123;</span><br><span class="line">		<span class="comment">// 无空格</span></span><br><span class="line">		strtmp = str;</span><br><span class="line">		pos = <span class="built_in">end</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		strtmp = str.Mid(<span class="number">0</span>, pos<span class="number">-0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ( !infilename(strtmp, filename) ) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	str.Delete(<span class="number">0</span>, pos);</span><br><span class="line">	str.TrimLeft(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以在 infilename 函数中，很方便改写字符串匹配的算法，实现某些拓展</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">CString <span class="title">filenametmp</span><span class="params">(filename)</span></span>;</span><br><span class="line"><span class="keyword">int</span> pos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( !uplow ) &#123;</span><br><span class="line">	<span class="comment">// 大小写敏感</span></span><br><span class="line">	filenametmp.MakeLower();</span><br><span class="line">	pos = filenametmp.Find(strtmp.MakeLower());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	pos = filenametmp.Find(strtmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( <span class="number">-1</span> == pos ) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( !isOrder ) &#123;</span><br><span class="line">	<span class="comment">// 无顺序</span></span><br><span class="line">	filename.Delete(<span class="number">0</span>, pos+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-5-5-路径输出"><a href="#4-5-5-路径输出" class="headerlink" title="4.5.5 路径输出"></a>4.5.5 路径输出</h4><p>得到匹配的文件名后，下一步就是得到文件的系统路径。把上面得到的匹配文件名称的全名，传入<strong>4.2.2</strong>中构建的 frnPfrnNameMap 哈希表，递归得到路径。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">CString <span class="title">Volume::getPath</span><span class="params">(DWORDLONG frn, CString &amp;path)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 查找2</span></span><br><span class="line">	Frn_Pfrn_Name_Map::iterator it = frnPfrnNameMap.<span class="built_in">find</span>(frn);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (it != frnPfrnNameMap.<span class="built_in">end</span>()) &#123;</span><br><span class="line"></span><br><span class="line">		  <span class="keyword">if</span> ( <span class="number">0</span> != it-&gt;second.pfrn ) &#123;</span><br><span class="line">		 	  getPath(it-&gt;second.pfrn, path);</span><br><span class="line">		  &#125;</span><br><span class="line"></span><br><span class="line">		  path += it-&gt;second.filename;</span><br><span class="line">		  path += ( _T(<span class="string">&quot;\&quot;) );</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	return path;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-复杂度分析"><a href="#5-复杂度分析" class="headerlink" title="5 复杂度分析"></a>5 复杂度分析</h2><h3 id="5-1-时间复杂度"><a href="#5-1-时间复杂度" class="headerlink" title="5.1 时间复杂度"></a>5.1 时间复杂度</h3><p>理论上，时间复杂度分别为：</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/QSearch_05.jpg" alt="图 5-1 复杂度分析"></p>
<p>在 AMD Athlon(tm) II X2 245 2.9GHz 处理器上，结果几乎瞬间完成。</p>
<h3 id="5-2-空间复杂度"><a href="#5-2-空间复杂度" class="headerlink" title="5.2 空间复杂度"></a>5.2 空间复杂度</h3><p>由于电脑文件数量巨大——通常为 10W-100W 级别，所以程序本身内存占用可以忽略不计。</p>
<p>234,708 个文件 约 43M。</p>
<p>对于如今至少 2G 的内存的系统来说，算不上负担。</p>
<h2 id="6-遇到的问题"><a href="#6-遇到的问题" class="headerlink" title="6 遇到的问题"></a>6 遇到的问题</h2><h3 id="6-1-无法初始化-USN-文件"><a href="#6-1-无法初始化-USN-文件" class="headerlink" title="6.1 无法初始化 USN 文件"></a>6.1 无法初始化 USN 文件</h3><p>电脑上的 O 盘无法初始化 USN 日志文件，通过调试发现：</p>
<p>DeviceIoControl 返回 0，GetLastError 0x70</p>
<p>查阅 msdn，原因是 ERROR_SHARING_PAUSED</p>
<p>原来是忘记初始化添加以下代码，程序即可正常访问 O 盘</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">CREATE_USN_JOURNAL_DATA cujd;</span><br><span class="line">cujd.MaximumSize = <span class="number">0</span>; <span class="comment">// 0表示使用默认值</span></span><br><span class="line">cujd.AllocationDelta = <span class="number">0</span>; <span class="comment">// 0表示使用默认值</span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-unicode-下-wchar-与-char-的问题"><a href="#6-2-unicode-下-wchar-与-char-的问题" class="headerlink" title="6.2 unicode 下 wchar 与 char 的问题"></a>6.2 unicode 下 wchar 与 char 的问题</h3><p>最初在字符串处理方面，用标准库函数的 string 作为处理方法，但在 unicode<br>下为双字节的 wchar，在字符串转换方面陷入不少麻烦，最后全部以 CString 作为默认字符串，并以_T(“”)，初始化字符串得以解决。</p>
<h3 id="6-3-ifdef-位置的小问题"><a href="#6-3-ifdef-位置的小问题" class="headerlink" title="6.3 #ifdef 位置的小问题"></a>6.3 #ifdef 位置的小问题</h3><p>#ifdef，里面不能设断点，后来才注意到#define 写在了 include 前面。</p>
<h3 id="6-4-参数传递"><a href="#6-4-参数传递" class="headerlink" title="6.4 参数传递"></a>6.4 参数传递</h3><p>开始以面向过程的思想设计，陷入了不断的以传参的方式，传递相同的句柄的麻烦之中，后来改为用类的方法，改善许多。</p>
<h2 id="7-小优化"><a href="#7-小优化" class="headerlink" title="7 小优化"></a>7 小优化</h2><h3 id="7-1-读取速度"><a href="#7-1-读取速度" class="headerlink" title="7.1 读取速度"></a>7.1 读取速度</h3><p>在构建哈希函数时，想到了三种方法，分别作了实验，用 time 函数统计所用时间，结果如下：</p>
<p>1）修改代码后，一次性读取 usn，存入临时文件，读取、构建哈希表</p>
<p>每次运行，时间平均 27s 左右</p>
<p>2）使用 vector，将数据保存在内存中，release 后，</p>
<p>结果喜人，时间提高近 10 倍！！！如图 7-1 所示：</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/QSearch_06.jpg" alt="7-1 遍历全部磁盘"></p>
<p>完全在可接受的范围之内。</p>
<p>第一次运行明显耗时较长，之后从磁盘缓存中预读文件，速度飙升。分析热点应该在于磁盘寻道时间、以及文件读取。</p>
<h3 id="7-2-打开文件方式"><a href="#7-2-打开文件方式" class="headerlink" title="7.2 打开文件方式"></a>7.2 打开文件方式</h3><p>在<strong>4.3.2</strong>中，双击 ListBox 中的文件路径，打开响应文件时，刚开始用了 system()系统函数，但是会弹出一个黑色的控制台窗口，并且主窗口处于锁定状态，等文件关闭后，才能继续执行，非常不利于用户体验。改为调用 ShellExecute 函数，从而开辟一个新的进程，主窗口也可以继续执行。</p>
<h3 id="7-3-进度条"><a href="#7-3-进度条" class="headerlink" title="7.3 进度条"></a>7.3 进度条</h3><p>V1.0 版本放出后，有同学反映后台统计文件时，没有提示，所以不知道什么时候完成。于是在主界面底部加了个进度条，增强交互性，如图<br>7-2：</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/QSearch_07.jpg" alt="图 7-2 进度条"></p>
<p>当然，线程函数也作出了必要的修改：</p>
<h1 id="8-结束语"><a href="#8-结束语" class="headerlink" title="8 结束语"></a>8 结束语</h1><p>至此，程序基本功能完成，在多台电脑，以及不同的系统上（XP 以及之后的 windows 系列）测试，基本没有假死以及程序挂掉的情况。</p>
<p>由于时间等原因还有许多的功能没有实现，比如界面无法伸展，不能动态的统计文件数据等等。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] 硬件白皮书. NTFS 文件系统规范[OL]. 百度文库，2011: 30.<br>[2] Beiyu. NTFS 文件系统若干技术研究[OL]. 2007: 7.<br>[3] 婴儿. 互动百科[OL]. <a href="http://www.hudong.com/wiki/ntfs">http://www.hudong.com/wiki/ntfs</a><br>[4] Microsoft. MSDN Library[OL]. 2012 :<br>[5] Stanley B.Lippman / Josée LaJoie / Barbara E.Moo. C++ Primer[M]. Addison-Wesley Professional , 2006 : 10.3<br>[6] Eric S. Raymond. 译者: 姜宏、何源、蔡晓骏. UNIX 编程艺术[m]. 电子工业出版社, 2006:<br>[7] 陈皓. 一些软件设计的原则[OL]. <a href="http://coolshell.cn/articles/4535.html">http://coolshell.cn/articles/4535.html</a><br>[8] 孙鑫. VC++深入详解[m]. 电子工业, 2006<br>[9] Jim Beveridge / Robert Wiener. Multithreading Applications in Win32: The Complete Guide to Threads<br>[10] Addison-Wesley Professional, 1996: 223-243</p>
<h1 id="英文摘要"><a href="#英文摘要" class="headerlink" title="英文摘要"></a>英文摘要</h1><p><strong>Rapid positioning of the NTFS disk files</strong></p>
<p>Lei Hao</p>
<p>(School of Information &amp; Computer, Anhui Agricultural University, Hefei 230036)</p>
<p><strong>Abstract</strong>：This article describes on windows NTFS disk, the<br>enumeration all the names of the files and folders on the hard disk ,<br>and to build a hash table by using C++ STL, MFC GUI and worker thread.<br>Ultimately the user to enter keywords , as a simple search like google<br>keyword search , and then instantly return all matching files / folders<br>and their system path.</p>
<p><strong>Key words :</strong> NTFS, Fast, Search, Keywords, File Path</p>
]]></content>
      <tags>
        <tag>Programming</tag>
        <tag>Everything</tag>
        <tag>NTFS</tag>
      </tags>
  </entry>
  <entry>
    <title>线程编程指南</title>
    <url>/cn/Threading-Programming-Guide/</url>
    <content><![CDATA[<p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i-CH1-SW1">Threading Programming Guide</a></p>
<p>最近总是被问到 Runloop<br>那么什么是 运行循环 呢<br>直接看  2014-07-15 就停止修订的文档吧 👆 ～～～</p>
<p>官方解说 异常清晰呢</p>
<a id="more"></a>

<p>👇 是 Google AI 翻译 (jifan)</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>线程是使在单个应用程序中同时执行多个代码路径成为可能的几种技术之一。尽管诸如操作对象和 Grand Central Dispatch（GCD）之类的较新技术为实现并发提供了更现代，更高效的基础架构，但是 OS X 和 iOS 还提供了用于创建和管理线程的接口。</p>
<p>本文档介绍了 OS X 中可用的线程包，并向您展示了如何使用它们。本文档还描述了为支持应用程序内的线程化和多线程代码同步而提供的相关技术。</p>
<p><strong>重要说明：</strong> 如果要开发新的应用程序，建议您研究用于实现并发性的替代 OS X 技术。如果您还不熟悉实现线程应用程序所需的设计技术，则尤其如此。这些替代技术可简化实现并发执行路径的工作量，并提供比传统线程更好的性能。有关这些技术的信息，请参见《_<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091">并发编程指南》</a>_。</p>
<h4 id="本文件的组织"><a href="#本文件的组织" class="headerlink" title="本文件的组织"></a>本文件的组织</h4><p>本文档包含以下章节和附录：</p>
<ul>
<li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/AboutThreads/AboutThreads.html#//apple_ref/doc/uid/10000057i-CH6-SW2">关于线程编程</a>介绍了线程的概念及其在应用程序设计中的作用。</li>
<li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html#//apple_ref/doc/uid/10000057i-CH15-SW2">线程管理</a>提供有关 OS X 中的线程技术以及如何使用它们的信息。</li>
<li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW1">运行循环</a>提供有关如何在辅助线程中管理事件处理循环的信息。</li>
<li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW1">同步</a>描述了同步问题以及用于防止多个线程破坏数据或使程序崩溃的工具。</li>
<li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafetySummary/ThreadSafetySummary.html#//apple_ref/doc/uid/10000057i-CH12-SW1">线程安全摘要</a>提供了 OS X 和 iOS 及其一些关键框架的固有线程安全的高级摘要。</li>
</ul>
<h4 id="也可以看看"><a href="#也可以看看" class="headerlink" title="也可以看看"></a>也可以看看</h4><p>有关线程替代方法的信息，请参见《_<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091">并发编程指南》</a>_。</p>
<p>本文档仅简要介绍 POSIX 线程 API 的用法。有关可用的 POSIX 线程例程的更多信息，请参见<code>pthread</code>手册页。有关 POSIX 线程及其用法的更深入说明，请参阅 David R. Butenhof 撰写的“ <em>使用 POSIX 线程编程</em> ”。</p>
<h2 id="线程管理"><a href="#线程管理" class="headerlink" title="线程管理"></a>线程管理</h2><p>OS X 或 iOS 中的每个进程（应用程序）都由一个或多个线程组成，每个线程代表通过应用程序代码执行的单个路径。每个应用程序都从一个线程开始，该线程运行该应用程序的<code>main</code>功能。应用程序可以产生其他线程，每个线程都执行特定功能的代码。</p>
<p>当应用程序产生新线程时，该线程将成为应用程序进程空间内的一个独立实体。每个线程都有其自己的执行堆栈，并由内核分别计划在运行时运行。线程可以与其他线程和其他进程通信，执行 I / O 操作以及执行您可能需要执行的其他任何操作。但是，由于它们位于同一进程空间内，因此单个应用程序中的所有线程共享同一虚拟内存空间，并且与进程本身具有相同的访问权限。</p>
<p>本章概述了 OS X 和 iOS 中可用的线程技术以及如何在应用程序中使用这些技术的示例。</p>
<p><strong>注意：</strong> 有关 Mac OS 线程体系结构的历史记录以及有关线程的其他背景信息，请参阅技术说明 TN2028，“线程体系结构”。</p>
<h4 id="线程成本"><a href="#线程成本" class="headerlink" title="线程成本"></a>线程成本</h4><p>就内存使用和性能而言，线程化会给您的程序（和系统）带来实际成本。每个线程都需要在内核内存空间和程序的内存空间中分配内存。使用有线内存将管理线程和协调其调度所需的核心结构存储在内核中。线程的堆栈空间和每个线程的数据存储在程序的内存空间中。这些结构中的大多数是在您首次创建线程时创建和初始化的，由于与内核之间的交互作用，该过程可能相对昂贵。</p>
<p>表 2-1 量化了与在应用程序中创建新的用户级线程相关的近似成本。其中一些成本是可配置的，例如分配给辅助线程的堆栈空间量。创建线程的时间成本是一个近似值，应仅用于彼此之间的相对比较。线程创建时间会因处理器负载，计算机速度以及可用系统和程序内存的数量而有很大不同。</p>
<table>
<thead>
<tr>
<th align="left">项目</th>
<th align="left">大概费用</th>
<th align="left">笔记</th>
</tr>
</thead>
<tbody><tr>
<td align="left">内核数据结构</td>
<td align="left">大约 1 KB</td>
<td align="left">该内存用于存储线程数据结构和属性，其中许多数据结构和属性分配为有线内存，因此无法分页到磁盘。</td>
</tr>
<tr>
<td align="left">堆叠空间</td>
<td align="left">512 KB（辅助线程）8 MB（OS X 主线程）1 MB（iOS 主线程）</td>
<td align="left">辅助线程允许的最小堆栈大小为 16 KB，并且堆栈大小必须为 4 KB 的倍数。在线程创建时会在进程空间中预留此内存的空间，但是直到需要它们时，才会创建与该内存关联的实际页面。</td>
</tr>
<tr>
<td align="left">创作时间</td>
<td align="left">大约 90 微秒</td>
<td align="left">该值反映了从创建线程的初始调用到线程的入口点例程开始执行之间的时间。这些数字是通过分析在基于 Intel 的 iMac（具有 2 GHz Core Duo 处理器和 1 GB 运行 OS X v10.5 的 RAM）上的线程创建过程中生成的平均值和中值确定的。</td>
</tr>
</tbody></table>
<p><strong>注意：</strong> 由于具有底层内核支持，因此操作对象通常可以更快地创建线程。他们不是每次都从头开始创建线程，而是使用内核中已经存在的线程池来节省分配时间。有关使用操作对象的更多信息，请参见《_<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091">并发编程指南》</a>_。</p>
<p>编写线程代码时要考虑的另一个成本是生产成本。设计线程化的应用程序有时可能需要对组织应用程序的数据结构的方式进行根本性的更改。为避免使用同步，可能需要进行这些更改，否则同步本身可能对设计不良的应用程序造成巨大的性能损失。设计这些数据结构以及调试线程代码中的问题可能会增加开发线程应用程序所需的时间。但是，如果线程花费太多时间等待锁或不执行任何操作，则避免这些开销会在运行时产生更大的问题。</p>
<h4 id="创建一个线程"><a href="#创建一个线程" class="headerlink" title="创建一个线程"></a>创建一个线程</h4><p>创建低级线程相对简单。在所有情况下，您都必须具有充当线程的主要入口点的函数或方法，并且必须使用可用的线程例程之一来启动线程。以下各节显示了更常用的线程技术的基本创建过程。使用这些技术创建的线程将继承一组默认属性，这些属性由您使用的技术确定。有关如何配置线程的信息，请参阅“ <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html#//apple_ref/doc/uid/10000057i-CH15-SW8">配置线程属性”</a>。</p>
<h6 id="使用-NSThread"><a href="#使用-NSThread" class="headerlink" title="使用 NSThread"></a>使用 NSThread</h6><p>有两种使用<code>NSThread</code>该类创建线程的方法：</p>
<ul>
<li>使用<code>detachNewThreadSelector:toTarget:withObject:</code>class 方法产生新线程。</li>
<li>创建一个新<code>NSThread</code>对象并调用其<code>start</code>方法。（仅在 iOS 和 OS X v10.5 及更高版本中受支持。）</li>
</ul>
<p>两种技术都会在您的应用程序中创建一个分离线程。分离的线程意味着线程退出时系统会自动回收线程的资源。这也意味着您的代码以后不必与线程显式连接。</p>
<p>由于该<code>detachNewThreadSelector:toTarget:withObject:</code>方法在 OS X 的所有版本中均受支持，因此经常在使用线程的现有 Cocoa 应用程序中找到。要分离新线程，只需提供要用作线程入口点的方法名称（指定为选择器），定义该方法的对象以及要在启动时传递给线程的任何数据。 。以下示例显示了此方法的基本调用，该调用使用当前对象的自定义方法生成一个线程。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[NSThread detachNewThreadSelector：@selector（myThreadMainMethod :) toTarget：self withObject：nil];</span><br></pre></td></tr></table></figure>

<p>在 OS X v10.5 之前，您<code>NSThread</code>主要使用该类生成线程。尽管您可以获取<code>NSThread</code>对象并访问某些线程属性，但是只能在线程运行之后从线程本身进行操作。在 OS X v10.5 中，添加了对创建<code>NSThread</code>对象的支持，而无需立即产生相应的新线程。（此支持在 iOS 中也可用。）此支持使得可以在启动线程之前获取和设置各种线程属性。这也使得以后可以使用该线程对象来引用正在运行的线程。</p>
<p><code>NSThread</code>在 OS X v10.5 及更高版本中初始化对象的简单方法是使用该<code>initWithTarget:selector:object:</code>方法。此方法<code>detachNewThreadSelector:toTarget:withObject:</code>使用与该方法完全相同的信息，并使用它来初始化新<code>NSThread</code>实例。但是，它不会启动线程。要启动线程，请<code>start</code>显式调用线程对象的方法，如以下示例所示：</p>
<table>
<thead>
<tr>
<th><code>NSThread * myThread = [[NSThread分配] initWithTarget：self</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>选择器：@选择器（myThreadMainMethod :)</code></td>
</tr>
<tr>
<td><code>对象：无]；</code></td>
</tr>
<tr>
<td><code>[myThread开始]; //实际创建线程</code></td>
</tr>
</tbody></table>
<p><strong>注意：</strong> 使用该<code>initWithTarget:selector:object:</code>方法的另一种方法是继承<code>NSThread</code>并覆盖其<code>main</code>方法。您将使用此方法的重写版本来实现线程的主入口点。有关更多信息，请参见《*<a href="https://developer.apple.com/documentation/foundation/nsthread">NSThread 类参考》中</a>*的子类注释。</p>
<p>如果您有一个<code>NSThread</code>对象的线程当前正在运行，则可以向该线程发送消息的<code>performSelector:onThread:withObject:waitUntilDone:</code>一种方法是使用应用程序中几乎所有对象的方法。OS X v10.5 中引入了对在线程（主线程除外）上执行选择器的支持，这是在线程之间进行通信的便捷方式。（此支持在 iOS 中也可用。）使用此技术发送的消息由另一个线程直接执行，作为其正常运行循环处理的一部分。（当然，这确实意味着目标线程必须在其运行循环中运行；请参阅<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW1">“运行循环”</a>。）以这种方式进行通信时，您可能仍需要某种形式的同步，但是比在线程之间设置通信端口更简单。线程。</p>
<p><strong>注意：</strong> 尽管对于线程间的偶尔通信很有用，但是您不应将 <code>performSelector:onThread:withObject:waitUntilDone:</code>方法用于时间紧迫或线程间的频繁通信。</p>
<p>有关其他线程通信选项的列表，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html#//apple_ref/doc/uid/10000057i-CH15-SW3">设置</a>线程<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html#//apple_ref/doc/uid/10000057i-CH15-SW3">的分离状态</a>。</p>
<h6 id="使用-POSIX-线程"><a href="#使用-POSIX-线程" class="headerlink" title="使用 POSIX 线程"></a>使用 POSIX 线程</h6><p>OS X 和 iOS 为使用 POSIX 线程 API 创建线程提供了基于 C 的支持。该技术实际上可以在任何类型的应用程序（包括 Cocoa 和 Cocoa Touch 应用程序）中使用，如果您要为多个平台编写软件，则可能会更加方便。适当地调用了用于创建线程的 POSIX 例程<code>pthread_create</code>。</p>
<p>清单 2-1 显示了两个使用 POSIX 调用创建线程的自定义函数。该<code>LaunchThread</code>函数创建一个新线程，其主例程在该<code>PosixThreadMainRoutine</code>函数中实现。由于 POSIX 默认将线程创建为可连接线程，因此本示例更改了线程的属性以创建分离的线程。将线程标记为已分离使系统有机会在退出时立即回收该线程的资源。</p>
<p><strong>清单 2-1</strong> 在 C 中创建线程</p>
<table>
<thead>
<tr>
<th><code>#include</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>#include</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>void * PosixThreadMainRoutine（void *数据）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//在这里做一些工作。</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>返回NULL;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>无效LaunchThread（）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//使用POSIX例程创建线程。</code></td>
</tr>
<tr>
<td><code>pthread_attr_t attr;</code></td>
</tr>
<tr>
<td><code>pthread_t posixThreadID;</code></td>
</tr>
<tr>
<td><code>int returnVal;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>returnVal = pthread_attr_init（＆attr）;</code></td>
</tr>
<tr>
<td><code>assert（！returnVal）;</code></td>
</tr>
<tr>
<td><code>returnVal = pthread_attr_setdetachstate（＆attr，PTHREAD_CREATE_DETACHED）;</code></td>
</tr>
<tr>
<td><code>assert（！returnVal）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>int threadError = pthread_create（＆posixThreadID，＆attr，＆PosixThreadMainRoutine，NULL）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>returnVal = pthread_attr_destroy（＆attr）;</code></td>
</tr>
<tr>
<td><code>assert（！returnVal）;</code></td>
</tr>
<tr>
<td><code>如果（threadError！= 0）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//报告错误。</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>如果将上述清单中的代码添加到一个源文件中并调用该<code>LaunchThread</code>函数，它将在您的应用程序中创建一个新的分离线程。当然，使用此代码创建的新线程将无用。线程将启动，几乎立即退出。为了使事情变得更有趣，您需要向该<code>PosixThreadMainRoutine</code>函数添加代码以完成一些实际工作。为了确保线程知道要执行的工作，可以在创建时将其传递给一些数据的指针。您将此指针作为<code>pthread_create</code>函数的最后一个参数传递。</p>
<p>要将信息从新创建的线程传递回应用程序的主线程，您需要在目标线程之间建立通信路径。对于基于 C 的应用程序，有多种方法可以在线程之间进行通信，包括使用端口，条件或共享内存。对于寿命长的线程，几乎应该始终设置某种线程间通信机制，以为应用程序的主线程提供一种检查线程状态或在应用程序退出时将其干净关闭的方法。</p>
<p>有关 POSIX 线程功能的更多信息，请参见<code>pthread</code>手册页。</p>
<h6 id="使用-NSObject-生成线程"><a href="#使用-NSObject-生成线程" class="headerlink" title="使用 NSObject 生成线程"></a>使用 NSObject 生成线程</h6><p>在 iOS 和 OS X v10.5 及更高版本中，所有对象都可以生成新线程并使用它执行其方法之一。该<code>performSelectorInBackground:withObject:</code>方法创建一个新的分离线程，并使用指定的方法作为新线程的入口点。例如，如果您有某个对象（由表示<code>myObj</code>），并且该对象具有一个<code>doSomething</code>要在后台线程中运行的方法，则可以使用以下代码来执行该操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[myObj performSelectorInBackground：@selector（doSomething）withObject：nil];</span><br></pre></td></tr></table></figure>

<p>调用此方法的效果是一样的，如果你调用<code>detachNewThreadSelector:toTarget:withObject:</code>的方法<code>NSThread</code>与当前对象，选择和参数对象作为参数。立即使用默认配置生成新线程并开始运行。在选择器内部，必须像配置任何线程一样配置线程。例如，如果您打算使用自动释放池（如果您不使用垃圾回收），则需要设置它，并配置线程的运行循环。有关如何配置新线程的信息，请参阅“ <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html#//apple_ref/doc/uid/10000057i-CH15-SW8">配置线程属性”</a>。</p>
<h6 id="在-Cocoa-应用程序中使用-POSIX-线程"><a href="#在-Cocoa-应用程序中使用-POSIX-线程" class="headerlink" title="在 Cocoa 应用程序中使用 POSIX 线程"></a>在 Cocoa 应用程序中使用 POSIX 线程</h6><p>尽管<code>NSThread</code>该类是在 Cocoa 应用程序中创建线程的主要接口，但是您可以自由使用 POSIX 线程，如果这样做对您更方便。例如，如果您已经有使用 POSIX 线程的代码并且不想重写它，则可以使用。如果确实打算在 Cocoa 应用程序中使用 POSIX 线程，则仍应了解 Cocoa 和线程之间的交互作用，并遵守以下各节中的准则。</p>
<p>######## 保护可可框架</p>
<p>对于多线程应用程序，Cocoa 框架使用锁和其他形式的内部同步来确保它们的行为正确。但是，为了防止这些锁在单线程情况下降低性能，在应用程序使用<code>NSThread</code>类产生其第一个新线程之前，Cocoa 不会创建它们。如果仅使用 POSIX 线程例程生成线程，则 Cocoa 不会收到需要知道您的应用程序现在是多线程的通知。发生这种情况时，涉及 Cocoa 框架的操作可能会使您的应用程序不稳定或崩溃。</p>
<p>为了让 Cocoa 知道您打算使用多个线程，您所要做的就是使用<code>NSThread</code>类产生一个线程，然后立即退出该线程。您的线程入口点无需执行任何操作。仅使用生成一个线程的行为<code>NSThread</code>就足以确保将 Cocoa 框架所需的锁放置到位。</p>
<p>如果不确定 Cocoa 是否认为您的应用程序是多线程的，则可以使用的<code>isMultiThreaded</code>方法<code>NSThread</code>进行检查。</p>
<p>######## 混合 POSIX 和可可锁</p>
<p>在同一应用程序中混合使用 POSIX 和 Cocoa 锁是安全的。可可锁和条件对象实际上只是 POSIX 互斥对象和条件的包装。但是，对于给定的锁，必须始终使用相同的接口来创建和操作该锁。换句话说，您不能使用 Cocoa <code>NSLock</code>对象来操纵使用该<code>pthread_mutex_init</code>函数创建的互斥对象，反之亦然。</p>
<h4 id="配置线程属性"><a href="#配置线程属性" class="headerlink" title="配置线程属性"></a>配置线程属性</h4><p>在创建线程之后，有时甚至在创建线程之前，您可能需要配置线程环境的不同部分。以下各节描述了可以进行的某些更改以及何时进行更改。</p>
<h6 id="配置线程的堆栈大小"><a href="#配置线程的堆栈大小" class="headerlink" title="配置线程的堆栈大小"></a>配置线程的堆栈大小</h6><p>对于您创建的每个新线程，系统都会在进程空间中分配特定数量的内存，以充当该线程的堆栈。堆栈管理堆栈帧，也是声明线程的任何局部变量的地方。为线程分配的内存量在“ <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html#//apple_ref/doc/uid/10000057i-CH15-SW7">线程成本”中</a>列出。</p>
<p>如果要更改给定线程的堆栈大小，则必须在创建线程之前进行更改。尽管<code>NSThread</code>只有 iOS 和 OS X v10.5 及更高版本才提供使用设置堆栈大小的功能，但是所有线程技术都提供了一些设置堆栈大小的方法。表 2-2 列出了每种技术的不同选项。</p>
<table>
<thead>
<tr>
<th align="left">技术</th>
<th align="left">选项</th>
</tr>
</thead>
<tbody><tr>
<td align="left">可可</td>
<td align="left">在 iOS 和 OS X v10.5 及更高版本中，分配和初始化<code>NSThread</code>对象（请勿使用<code>detachNewThreadSelector:toTarget:withObject:</code>方法）。在调用<code>start</code>线程对象的方法之前，请使用该<code>setStackSize:</code>方法指定新的堆栈大小。</td>
</tr>
<tr>
<td align="left">POSIX</td>
<td align="left">创建一个新<code>pthread_attr_t</code>结构，并使用该<code>pthread_attr_setstacksize</code>函数更改默认堆栈大小。<code>pthread_create</code>创建线程时，将属性传递给函数。</td>
</tr>
<tr>
<td align="left">多处理服务</td>
<td align="left"><code>MPCreateTask</code>创建线程时，将适当的堆栈大小值传递给函数。</td>
</tr>
</tbody></table>
<h6 id="配置线程本地存储"><a href="#配置线程本地存储" class="headerlink" title="配置线程本地存储"></a>配置线程本地存储</h6><p>每个线程维护一个键-值对的字典，可以从线程中的任何位置进行访问。您可以使用此词典存储要在整个线程执行过程中保留的信息。例如，您可以使用它存储要在线程运行循环的多次迭代中保留的状态信息。</p>
<p>Cocoa 和 POSIX 以不同的方式存储线程字典，因此您不能混合和匹配对这两种技术的调用。但是，只要您在线程代码中坚持使用一种技术，最终结果应该是相似的。在 Cocoa 中，可以使用对象的<code>threadDictionary</code>方法<code>NSThread</code>来检索<code>NSMutableDictionary</code>对象，可以在该对象中添加线程所需的任何键。在 POSIX 中，您可以使用<code>pthread_setspecific</code>和<code>pthread_getspecific</code>函数来设置和获取线程的键和值。</p>
<h6 id="设置线程的分离状态"><a href="#设置线程的分离状态" class="headerlink" title="设置线程的分离状态"></a>设置线程的分离状态</h6><p>默认情况下，大多数高级线程技术都会创建分离的线程。在大多数情况下，最好使用分离的线程，因为它们允许系统在线程完成后立即释放线程的数据结构。分离的线程也不需要与程序进行显式交互。从线程中检索结果的方法由您自行决定。相比之下，系统不会为可连接线程回收资源，直到另一个线程与该线程显式连接为止，该过程可能会阻塞执行该连接的线程。</p>
<p>您可以将可连接线程视为类似于子线程。尽管它们仍然作为独立线程运行，但是在系统可以回收其资源之前，可连接线程必须由另一个线程连接。可连接线程还提供了一种显式的方法，可将数据从退出线程传递到另一个线程。在连接退出之前，可连接线程可以将数据指针或其他返回值传递给该<code>pthread_exit</code>函数。然后另一个线程可以通过调用该<code>pthread_join</code>函数来声明此数据。</p>
<p><strong>重要：</strong> 在应用程序退出时，分离的线程可以立即终止，但可连接的线程不能终止。在允许进程退出之前，必须先连接每个可连接线程。因此，在线程正在执行不应中断的关键工作（例如将数据保存到磁盘）的情况下，可连接线程可能更可取。</p>
<p>如果确实要创建可连接线程，则唯一的方法是使用 POSIX 线程。POSIX 默认将线程创建为可连接线程。要将线程标记为分离的或可联接的，请<code>pthread_attr_setdetachstate</code>在创建线程之前使用函数修改线程属性。线程开始后，您可以通过调用<code>pthread_detach</code>函数将可连接线程更改为分离线程。有关这些 POSIX 线程功能的更多信息，请参见<code>pthread</code>手册页。有关如何加入线程的信息，请参见<code>pthread_join</code>手册页。</p>
<h6 id="设置线程优先级"><a href="#设置线程优先级" class="headerlink" title="设置线程优先级"></a>设置线程优先级</h6><p>您创建的任何新线程都具有与之关联的默认优先级。内核的调度算法在确定要运行的线程时会考虑线程优先级，与优先级较低的线程相比，优先级较高的线程更有可能运行。较高的优先级并不能保证您的线程有特定的执行时间，只是与较低优先级的线程相比，调度程序更可能选择该时间。</p>
<p><strong>重要说明：</strong> 通常最好将线程的优先级保留为默认值。增加某些线程的优先级也会增加低优先级线程之间出现饥饿的可能性。如果您的应用程序包含必须彼此交互的高优先级和低优先级线程，则低优先级线程的饥饿可能会阻塞其他线程并造成性能瓶颈。</p>
<p>如果您确实想修改线程优先级，那么 Cocoa 和 POSIX 都提供了一种方法。对于 Cocoa 线程，可以使用的<code>setThreadPriority:</code>class 方法<code>NSThread</code>来设置当前正在运行的线程的优先级。对于 POSIX 线程，请使用<code>pthread_setschedparam</code>函数。有关更多信息，请参见*<a href="https://developer.apple.com/documentation/foundation/nsthread">NSThread 类参考</a>*或<code>pthread_setschedparam</code>手册页。</p>
<h4 id="编写线程输入例程"><a href="#编写线程输入例程" class="headerlink" title="编写线程输入例程"></a>编写线程输入例程</h4><p>在大多数情况下，OS X 中线程入口点例程的结构与其他平台上的相同。您可以初始化数据结构，进行一些工作或有选择地设置运行循环，并在线程代码完成后进行清理。根据您的设计，编写输入例程时可能需要执行一些其他步骤。</p>
<h6 id="创建一个自动释放池"><a href="#创建一个自动释放池" class="headerlink" title="创建一个自动释放池"></a>创建一个自动释放池</h6><p>在 Objective-C 框架中链接的应用程序通常必须在其每个线程中至少创建一个自动释放池。如果应用程序使用托管模型（该应用程序负责对象的保留和释放），则自动释放池将捕获从该线程自动释放的所有对象。</p>
<p>如果应用程序使用垃圾回收而不是托管内存模型，则不一定必须创建自动释放池。垃圾收集应用程序中自动释放池的存在无害，并且在大多数情况下都将被忽略。在代码模块必须同时支持垃圾回收和托管内存模型的情况下，允许使用此方法。在这种情况下，必须存在自动释放池以支持托管内存模型代码，并且如果在启用垃圾回收的情况下运行应用程序，则将自动忽略该释放池。</p>
<p>如果您的应用程序使用托管内存模型，则创建自动释放池应该是您在线程输入例程中要做的第一件事。同样，销毁此自动释放池应该是线程中的最后一件事。该池确保捕获自动释放的对象，尽管它直到线程本身退出才释放它们。清单 2-2 显示了使用自动释放池的基本线程输入例程的结构。</p>
<p><strong>清单 2-2</strong> 定义线程入口点例程</p>
<table>
<thead>
<tr>
<th><code>-（无效）myThreadMainRoutine</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init]; //顶级池</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//在这里做线程工作。</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>[池释放]; //释放池中的对象。</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>由于顶级自动释放池在线程退出之前不会释放其对象，因此长寿命的线程应创建其他自动释放池以更频繁地释放对象。例如，使用运行循环的线程可能每次通过该运行循环都会创建并释放一个自动释放池。更频繁地释放对象可以防止应用程序的内存占用量过大，从而可能导致性能问题。但是，与任何与性能相关的行为一样，您应该测量代码的实际性能，并适当调整自动释放池的使用。</p>
<p>有关内存管理和自动释放池的更多信息，请参见《_<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html#//apple_ref/doc/uid/10000011i">高级内存管理编程指南》</a>_。</p>
<h6 id="设置异常处理程序"><a href="#设置异常处理程序" class="headerlink" title="设置异常处理程序"></a>设置异常处理程序</h6><p>如果您的应用程序捕获并处理了异常，则应准备好线程代码以捕获可能发生的任何异常。尽管最好在可能发生异常的地方处理异常，但是未能捕获线程中引发的异常会导致应用程序退出。在线程输入例程中安装最终的 try / catch 可以捕获任何未知的异常并提供适当的响应。</p>
<p>在 Xcode 中构建项目时，可以使用 C ++或 Objective-C 异常处理样式。有关在 Objective-C 中设置如何引发和捕获异常的信息，请参见*<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Exceptions/Exceptions.html#//apple_ref/doc/uid/10000012i">异常编程主题</a>*。</p>
<h6 id="设置运行循环"><a href="#设置运行循环" class="headerlink" title="设置运行循环"></a>设置运行循环</h6><p>在编写要在单独的线程上运行的代码时，有两个选择。第一种选择是将线程的代码编写为一个很长的任务而几乎不中断执行，也不会中断，并在完成时退出线程。第二种选择是将您的线程置于循环中，并使其在到达请求时动态处理请求。第一个选项不需要为您的代码进行特殊设置。您只需开始做您想做的工作。但是，第二个选项涉及设置线程的运行循环。</p>
<p>OS X 和 iOS 为在每个线程中实现运行循环提供了内置支持。应用程序框架会自动启动应用程序主线程的运行循环。如果创建任何辅助线程，则必须配置运行循环并手动启动它。</p>
<p>有关使用和配置运行循环的信息，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW1">“运行循环”</a>。</p>
<h4 id="终止线程"><a href="#终止线程" class="headerlink" title="终止线程"></a>终止线程</h4><p>建议的退出线程的方法是让其正常退出其入口点例程。尽管 Cocoa，POSIX 和 Multiprocessing Services 提供了直接杀死线程的例程，但强烈建议不要使用此类例程。杀死线程可防止该线程在其自身清除后清理。线程分配的内存可能会泄漏，线程当前正在使用的任何其他资源可能无法正确清理，从而在以后产生潜在的问题。</p>
<p>如果您预计需要在操作过程中终止线程，则应从一开始就设计线程以响应取消或退出消息。对于长时间运行的操作，这可能意味着要定期停止工作并检查是否收到此消息。如果确实有消息要求线程退出，则该线程将有机会执行所需的清理并正常退出；否则，它可以简单地返回工作并处理下一个数据块。</p>
<p>响应取消消息的一种方法是使用运行循环输入源接收此类消息。清单 2-3 显示了该代码在线程的主入口例程中的外观结构。（该示例仅显示了主循环部分，不包括设置自动释放池或配置要执行的实际工作的步骤。）该示例在运行循环上安装了一个自定义输入源，该输入源大概可以从另一个您的线程；有关设置输入源的信息，请参阅<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW7">配置运行循环源</a>。在完成全部工作量的一部分后，线程会短暂运行运行循环，以查看消息是否到达输入源。如果不是，则运行循环立即退出，并且循环继续进行下一个工作块。因为处理程序无法直接访问<code>exitNow</code>局部变量，所以退出条件通过线程字典中的键值对传达。</p>
<p><strong>清单 2-3</strong> 在长时间工作期间检查退出条件</p>
<table>
<thead>
<tr>
<th><code>-（无效）threadMainRoutine</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>BOOL moreWorkToDo = YES;</code></td>
</tr>
<tr>
<td><code>BOOL exitNow = NO;</code></td>
</tr>
<tr>
<td><code>NSRunLoop * runLoop = [NSRunLoop currentRunLoop];</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//将exitNow BOOL添加到线程字典中。</code></td>
</tr>
<tr>
<td><code>NSMutableDictionary * threadDict = [[[NSThread currentThread] threadDictionary];</code></td>
</tr>
<tr>
<td><code>[threadDict setValue：[NSNumber numberWithBool：exitNow] forKey：@“ ThreadShouldExitNow”];</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//安装输入源。</code></td>
</tr>
<tr>
<td><code>[self myInstallCustomInputSource];</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>同时（moreWorkToDo &amp;&amp;！exitNow）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//在这里做一大块工作。</code></td>
</tr>
<tr>
<td><code>//完成后更改moreWorkToDo布尔值。</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//运行运行循环，但如果输入源不等待触发，则立即超时。</code></td>
</tr>
<tr>
<td><code>[runLoop runUntilDate：[NSDate date]];</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//检查输入源处理程序是否更改了exitNow值。</code></td>
</tr>
<tr>
<td><code>exitNow = [[threadDict valueForKey：@“ ThreadShouldExitNow”] boolValue];</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<h2 id="运行循环"><a href="#运行循环" class="headerlink" title="运行循环"></a>运行循环</h2><p>运行循环是与线程关联的基础架构的一部分。一个<em>运行循环</em>是一个事件处理循环，你用它来安排工作，并协调接收传入的事件。运行循环的目的是在有工作要做时让线程忙，而在没有工作时让线程进入睡眠状态。</p>
<p>运行循环管理不是完全自动的。您仍然必须设计线程的代码以在适当的时间启动运行循环并响应传入的事件。Cocoa 和 Core Foundation 都提供了<em>运行循环对象，</em>以帮助您配置和管理线程的运行循环。您的应用程序不需要显式创建这些对象。每个线程（包括应用程序的主线程）都有一个关联的运行循环对象。但是，只有辅助线程需要显式地运行其运行循环。在应用程序启动过程中，应用程序框架会自动在主线程上设置并运行运行循环。</p>
<p>以下各节提供有关运行循环以及如何为应用程序配置循环的更多信息。有关运行循环对象的其他信息，请参见《*<a href="https://developer.apple.com/documentation/foundation/nsrunloop">NSRunLoop 类参考》</a>*和《_<a href="https://developer.apple.com/documentation/corefoundation/cfrunloop">CFRunLoop 参考》</a>_。</p>
<h4 id="运行循环的解剖"><a href="#运行循环的解剖" class="headerlink" title="运行循环的解剖"></a>运行循环的解剖</h4><p>运行循环非常像其名称听起来。这是您的线程进入的一个循环，用于响应传入事件而运行事件处理程序。您的代码提供了用于实现运行循环的实际循环部分的控制语句-换句话说，您的代码提供了驱动运行循环的<code>while</code>or <code>for</code>循环。在循环内，您可以使用运行循环对象来“运行”事件处理代码，以接收事件并调用已安装的处理程序。</p>
<p>运行循环从两种不同类型的源接收事件。<em>输入源</em>传递异步事件，通常是来自另一个线程或其他应用程序的消息。<em>计时器源</em>传递同步事件，这些事件在计划的时间或重复的间隔发生。两种类型的源都使用特定于应用程序的处理程序例程来处理事件到达时的事件。</p>
<p>图 3-1 显示了运行循环和各种来源的概念结构。输入源将异步事件传递给相应的处理程序，并导致<code>runUntilDate:</code>方法（在线程的关联<code>NSRunLoop</code>对象上调用）退出。计时器源将事件传递到其处理程序例程，但不会导致运行循环退出。</p>
<p><strong>图 3-1</strong> 运行循环的结构及其来源<img src="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Art/runloop.jpg" alt="运行循环的结构及其来源"></p>
<p>除了处理输入源之外，运行循环还生成有关运行循环行为的通知。注册的<em>运行循环观察者</em>可以接收这些通知，并使用它们在线程上进行其他处理。您可以使用 Core Foundation 在线程上安装运行循环观察器。</p>
<p>以下各节提供有关运行循环的组件及其运行方式的更多信息。它们还描述了事件处理期间在不同时间生成的通知。</p>
<h6 id="运行循环模式"><a href="#运行循环模式" class="headerlink" title="运行循环模式"></a>运行循环模式</h6><p>一个<em>运行的循环模式</em>是输入源和定时器的集合进行监测和运行循环观察员集合通知。每次运行运行循环时，都可以（显式或隐式）指定运行的特定“模式”。在运行循环的整个过程中，仅监视与该模式关联的源，并允许其传递事件。（类似地，仅将与该模式关联的观察者通知运行循环的进度。）与其他模式关联的源将保留任何新事件，直到随后以适当的模式通过循环。</p>
<p>在代码中，您可以通过名称识别模式。Cocoa 和 Core Foundation 都定义了默认模式和几种常用模式，以及用于在代码中指定这些模式的字符串。您可以通过简单地为模式名称指定自定义字符串来定义自定义模式。尽管您分配给自定义模式的名称是任意的，但是这些模式的内容不是任意的。您必须确保将一个或多个输入源，计时器或运行循环观察器添加到您创建的任何模式中，以使其有用。</p>
<p>您可以使用模式从运行循环的特定遍历中过滤掉有害来源的事件。大多数情况下，您将需要在系统定义的“默认”模式下运行运行循环。但是，模式面板可以在“模式”模式下运行。在这种模式下，只有与模式面板相关的源才将事件传递给线程。对于辅助线程，您可以使用自定义模式来防止低优先级源在时间紧迫的操作期间传递事件。</p>
<p><strong>注意：</strong> 模式是根据事件的来源而不是事件的类型来区分的。例如，您不会使用仅匹配鼠标按下事件或仅匹配键盘事件的模式。您可以使用模式来侦听另一组端口，暂时暂停计时器，或者以其他方式更改源并运行当前正在监视的循环观察器。</p>
<p>表 3-1 列出了 Cocoa 和 Core Foundation 定义的标准模式，以及何时使用该模式的说明。名称列列出了用于在代码中指定模式的实际常量。</p>
<table>
<thead>
<tr>
<th align="left">模式</th>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">默认</td>
<td align="left"><code>NSDefaultRunLoopMode</code> （可可）<code>kCFRunLoopDefaultMode</code> （核心基金会）</td>
<td align="left">默认模式是用于大多数操作的模式。大多数时候，您应该使用此模式来启动运行循环并配置输入源。</td>
</tr>
<tr>
<td align="left">连接</td>
<td align="left"><code>NSConnectionReplyMode</code> （可可）</td>
<td align="left">可可将此模式与<code>NSConnection</code>对象结合使用以监视答复。您很少需要自己使用此模式。</td>
</tr>
<tr>
<td align="left">模态</td>
<td align="left"><code>NSModalPanelRunLoopMode</code> （可可）</td>
<td align="left">可可使用此模式来识别用于模式面板的事件。</td>
</tr>
<tr>
<td align="left">事件追踪</td>
<td align="left"><code>NSEventTrackingRunLoopMode</code> （可可）</td>
<td align="left">可可使用此模式来限制鼠标拖动循环和其他类型的用户界面跟踪循环期间的传入事件。</td>
</tr>
<tr>
<td align="left">普通模式</td>
<td align="left"><code>NSRunLoopCommonModes</code> （可可）<code>kCFRunLoopCommonModes</code> （核心基金会）</td>
<td align="left">这是一组可配置的常用模式。将输入源与此模式相关联还将其与组中的每个模式相关联。对于 Cocoa 应用程序，此集合默认包括默认，模式和事件跟踪模式。最初，Core Foundation 仅包括默认模式。您可以使用该<code>CFRunLoopAddCommonMode</code>功能将自定义模式添加到集合中。</td>
</tr>
</tbody></table>
<h6 id="输入源"><a href="#输入源" class="headerlink" title="输入源"></a>输入源</h6><p>输入源将事件异步传递到您的线程。事件的来源取决于输入来源的类型，通常是两个类别之一。基于端口的输入源监视您的应用程序的 Mach 端口。定制输入源监视事件的定制源。就您的运行循环而言，输入源是基于端口的还是定制的都无关紧要。系统通常实现两种类型的输入源，您可以按原样使用。两种信号源之间的唯一区别是信号的发送方式。基于端口的源由内核自动发出信号，而自定义源必须从另一个线程手动发出信号。</p>
<p>创建输入源时，可以将其分配给运行循环的一种或多种模式。模式会影响在任何给定时刻监视哪些输入源。大多数情况下，您会在默认模式下运行运行循环，但也可以指定自定义模式。如果输入源不在当前监视的模式下，则它生成的任何事件都将保留，直到运行循环以正确的模式运行。</p>
<p>以下各节描述了一些输入源。</p>
<p>######## 基于端口的源</p>
<p>Cocoa 和 Core Foundation 提供了内置支持，用于使用与端口相关的对象和功能创建基于端口的输入源。例如，在可可中，您根本不必直接创建输入源。您只需创建一个端口对象，然后使用的方法<code>NSPort</code>将该端口添加到运行循环中。端口对象为您处理所需输入源的创建和配置。</p>
<p>在 Core Foundation 中，您必须手动创建端口及其运行循环源。在这两种情况下，您使用的端口类型不透明（相关的功能<code>CFMachPortRef</code>，<code>CFMessagePortRef</code>或<code>CFSocketRef</code>）创建合适的对象。</p>
<p>有关如何设置和配置基于端口的自定义源的示例，请参阅“ <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-131281">配置基于端口的输入源”</a>。</p>
<p>######## 自定义输入源</p>
<p>要创建自定义输入源，必须使用与<code>CFRunLoopSourceRef</code>Core Foundation 中的不透明类型关联的功能。您可以使用多个回调函数配置自定义输入源。当从运行循环中删除源时，Core Foundation 会在不同位置调用这些函数以配置源，处理所有传入事件并拆除源。</p>
<p>除了定义事件到达时自定义源的行为外，还必须定义事件传递机制。源代码的这一部分在单独的线程上运行，负责为输入源提供其数据，并在准备好处理数据时向其发出信号。事件传递机制取决于您，但不必过于复杂。</p>
<p>有关如何创建自定义输入源的示例，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW3">定义自定义输入源</a>。有关自定义输入源的参考信息，另请参见*<a href="https://developer.apple.com/documentation/corefoundation/cfrunloopsource-rhr">CFRunLoopSource 参考</a>*。</p>
<p>######## 可可执行选择器来源</p>
<p>除了基于端口的源代码外，Cocoa 还定义了一个自定义输入源，使您可以在任何线程上执行选择器。像基于端口的源一样，执行选择器请求在目标线程上被序列化，从而减轻了在一个线程上运行多个方法时可能发生的许多同步问题。与基于端口的源不同，执行选择器源在执行选择器后将其自身从运行循环中删除。</p>
<p><strong>注意：</strong> 在 OS X v10.5 之前，执行选择器源主要用于将消息发送到主线程，但是在 OS X v10.5 和更高版本以及 iOS 中，可以使用它们将消息发送到任何线程。</p>
<p>在另一个线程上执行选择器时，目标线程必须具有活动的运行循环。对于您创建的线程，这意味着等到您的代码显式启动运行循环。但是，由于主线程启动了自己的运行循环，因此您可以在应用程序调用<code>applicationDidFinishLaunching:</code>应用程序委托的方法后立即开始在该线程上发出调用 。每次循环时，运行循环都会处理所有排队的执行选择器调用，而不是在每次循环迭代时都处理一个。</p>
<p>表 3-2 列出了<code>NSObject</code>可在其他线程上执行选择器的方法。由于这些方法是在上声明的<code>NSObject</code>，因此可以在可以访问 Objective-C 对象的任何线程（包括 POSIX 线程）中使用它们。这些方法实际上不会创建新线程来执行选择器。</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>performSelectorOnMainThread:withObject:waitUntilDone:``performSelectorOnMainThread:withObject:waitUntilDone:modes:</code></td>
<td align="left">在该线程的下一个运行循环周期内，在该应用程序的主线程上执行指定的选择器。这些方法使您可以选择阻塞当前线程，直到执行选择器为止。</td>
</tr>
<tr>
<td align="left"><code>performSelector:onThread:withObject:waitUntilDone:``performSelector:onThread:withObject:waitUntilDone:modes:</code></td>
<td align="left">在具有<code>NSThread</code>对象的任何线程上执行指定的选择器。这些方法使您可以选择阻塞当前线程，直到执行选择器为止。</td>
</tr>
<tr>
<td align="left"><code>performSelector:withObject:afterDelay:``performSelector:withObject:afterDelay:inModes:</code></td>
<td align="left">在下一个运行循环周期和一个可选的延迟时间之后，在当前线程上执行指定的选择器。因为它一直等到下一个运行循环周期执行选择器，所以这些方法提供了当前执行代码的最小自动延迟。多个排队的选择器按照排队的顺序依次执行。</td>
</tr>
<tr>
<td align="left"><code>cancelPreviousPerformRequestsWithTarget:``cancelPreviousPerformRequestsWithTarget:selector:object:</code></td>
<td align="left">使您可以使用<code>performSelector:withObject:afterDelay:</code>or <code>performSelector:withObject:afterDelay:inModes:</code>方法取消发送到当前线程的消息。</td>
</tr>
</tbody></table>
<p>有关每种方法的详细信息，请参见《_<a href="https://developer.apple.com/documentation/objectivec/nsobject">NSObject 类参考》</a>_。</p>
<h6 id="计时器来源"><a href="#计时器来源" class="headerlink" title="计时器来源"></a>计时器来源</h6><p>计时器源在将来的预设时间将事件同步传递到您的线程。计时器是线程通知自己执行某事的一种方式。例如，一旦在来自用户的连续击键之间经过了一定的时间量，则搜索字段可以使用计时器来启动自动搜索。使用此延迟时间使用户有机会在开始搜索之前键入尽可能多的所需搜索字符串。</p>
<p>尽管计时器生成基于时间的通知，但它不是实时机制。像输入源一样，计时器与运行循环的特定模式相关联。如果计时器不在运行循环当前正在监视的模式下，则在您以计时器支持的一种模式运行运行循环之前，它不会触发。同样，如果运行循环在执行处理程序例程的中间触发计时器，则计时器将等到下一次通过运行循环调用其处理例程。如果运行循环根本没有运行，则计时器永远不会触发。</p>
<p>您可以将计时器配置为仅一次或重复生成事件。重复计时器会根据计划的触发时间（而不是实际的触发时间）自动重新计划自身。例如，如果计划将计时器在特定时间触发，然后每 5 秒触发一次，则即使实际触发时间被延迟，计划的触发时间也将始终落在原始的 5 秒时间间隔上。如果触发时间延迟得太多，以致错过了一个或多个计划的触发时间，则计时器将在错过的时间段内仅触发一次。在错过了一段时间后触发后，计时器将重新安排为下一个计划的触发时间。</p>
<p>有关配置计时器源的更多信息，请参见“ <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW6">配置计时器源”</a>。有关参考信息，请参见《*<a href="https://developer.apple.com/documentation/foundation/timer">NSTimer 类参考》</a>*或《_<a href="https://developer.apple.com/documentation/corefoundation/cfrunlooptimer-rhk">CFRunLoopTimer 参考》</a>_。</p>
<h6 id="运行循环观察者"><a href="#运行循环观察者" class="headerlink" title="运行循环观察者"></a>运行循环观察者</h6><p>与在适当的异步或同步事件发生时触发的源相反，运行循环观察者在运行循环本身执行期间的特定位置触发。您可以使用运行循环观察器来准备线程以处理给定事件，或者在线程进入睡眠之前准备线程。您可以将运行循环观察者与运行循环中的以下事件相关联：</p>
<ul>
<li>运行循环的入口。</li>
<li>当运行循环将要处理计时器时。</li>
<li>当运行循环将要处理输入源时。</li>
<li>当运行循环即将进入睡眠状态时。</li>
<li>当运行循环醒来但在处理事件之前将其唤醒。</li>
<li>运行循环的退出。</li>
</ul>
<p>您可以使用 Core Foundation 将运行循环观察器添加到应用程序。要创建运行循环观察器，请创建<code>CFRunLoopObserverRef</code>不透明类型的新实例。此类型跟踪您的自定义回调函数及其感兴趣的活动。</p>
<p>与计时器类似，运行循环观察器可以使用一次或重复使用。一次触发的观察者在触发后将自己从运行循环中删除，而重复的观察者仍保持连接。您可以指定创建观察者时是运行一次还是重复运行。</p>
<p>有关如何创建运行循环观察器的示例，请参见“ <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW18">配置运行循环”</a>。有关参考信息，请参见*<a href="https://developer.apple.com/documentation/corefoundation/cfrunloopobserver">CFRunLoopObserver 参考</a>*。</p>
<h6 id="事件的运行循环序列"><a href="#事件的运行循环序列" class="headerlink" title="事件的运行循环序列"></a>事件的运行循环序列</h6><p>每次运行它时，线程的运行循环都会处理未决事件并为任何附加的观察者生成通知。它执行此操作的顺序非常具体，如下所示：</p>
<ol>
<li>通知观察者已进入运行循环。</li>
<li>通知观察者任何准备就绪的计时器即将触发。</li>
<li>通知观察者任何不基于端口的输入源都将被触发。</li>
<li>触发所有准备触发的非基于端口的输入源。</li>
<li>如果基于端口的输入源已准备好并等待启动，请立即处理事件。转到步骤 9。</li>
<li>通知观察者线程即将进入睡眠状态。</li>
<li>使线程进入睡眠状态，直到发生以下事件之一：<ul>
<li>事件到达基于端口的输入源。</li>
<li>计时器触发。</li>
<li>为运行循环设置的超时值到期。</li>
<li>运行循环被明确唤醒。</li>
</ul>
</li>
<li>通知观察者线程刚刚醒来。</li>
<li>处理未决事件。<ul>
<li>如果触发了用户定义的计时器，请处理计时器事件并重新启动循环。转到步骤 2。</li>
<li>如果触发了输入源，则传递事件。</li>
<li>如果运行循环已显式唤醒，但尚未超时，请重新启动循环。转到步骤 2。</li>
</ul>
</li>
<li>通知观察者运行循环已退出。</li>
</ol>
<p>由于计时器和输入源的观察者通知是在这些事件实际发生之前传递的，因此通知时间和实际事件时间之间可能会有差距。如果这些事件之间的时间很关键，则可以使用睡眠和从睡眠中唤醒通知来帮助您关联实际事件之间的时间。</p>
<p>由于在运行运行循环时会传递计时器和其他定期事件，因此规避该循环会中断这些事件的传递。每当您通过进入循环并重复从应用程序请求事件来实现鼠标跟踪例程时，就会出现此行为的典型示例。因为您的代码直接捕获事件，而不是让应用程序正常分配事件，所以活动计时器将无法触发，直到您的鼠标跟踪例程退出并将控制权返回给应用程序为止。</p>
<p>可以使用运行循环对象显式唤醒运行循环。其他事件也可能导致运行循环被唤醒。例如，添加另一个非基于端口的输入源将唤醒运行循环，以便可以立即处理输入源，而不是等到发生其他事件为止。</p>
<h4 id="什么时候使用运行循环？"><a href="#什么时候使用运行循环？" class="headerlink" title="什么时候使用运行循环？"></a>什么时候使用运行循环？</h4><p>唯一需要明确运行运行循环的时间是在为应用程序创建辅助线程时。应用程序主线程的运行循环是基础架构的关键部分。结果，应用程序框架提供了用于运行主应用程序循环并自动启动该循环的代码。在 iOS（或 OS X）<code>run</code>中<code>UIApplication</code>，的方法<code>NSApplication</code>作为正常启动顺序的一部分启动应用程序的主循环。如果使用 Xcode 模板项目创建应用程序，则永远不必显式调用这些例程。</p>
<p>对于辅助线程，您需要确定是否需要运行循环，如果需要，请自行配置并启动它。您无需在所有情况下都启动线程的运行循环。例如，如果您使用线程来执行一些长时间运行且预定的任务，则可以避免启动运行循环。运行循环用于需要与线程更多交互的情况。例如，如果您打算执行以下任一操作，则需要启动运行循环：</p>
<ul>
<li>使用端口或自定义输入源与其他线程进行通信。</li>
<li>在线程上使用计时器。</li>
<li><code>performSelector</code>在 Cocoa 应用程序中使用任何…方法。</li>
<li>保持线程执行定期任务。</li>
</ul>
<p>如果确实选择使用运行循环，则配置和设置非常简单。与所有线程编程一样，您应该有一个计划，在适当的情况下退出辅助线程。最好通过让线程退出干净地结束线程，而不是强制终止线程。<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW5">使用运行循环对象中</a>介绍了有关如何配置和退出<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW5">运行循环的信息</a>。</p>
<h4 id="使用运行循环对象"><a href="#使用运行循环对象" class="headerlink" title="使用运行循环对象"></a>使用运行循环对象</h4><p>运行循环对象提供了用于将输入源，计时器和运行循环观察器添加到您的运行循环然后运行它的主界面。每个线程都有一个与之关联的运行循环对象。在可可中，此对象是<code>NSRunLoop</code>类的实例。在低级应用程序中，它是指向<code>CFRunLoopRef</code>不透明类型的指针。</p>
<h6 id="获取运行循环对象"><a href="#获取运行循环对象" class="headerlink" title="获取运行循环对象"></a>获取运行循环对象</h6><p>要获取当前线程的运行循环，请使用以下方法之一：</p>
<ul>
<li>在 Cocoa 应用程序中，使用的<code>currentRunLoop</code>类方法<code>NSRunLoop</code>检索<code>NSRunLoop</code>对象。</li>
<li>使用<code>CFRunLoopGetCurrent</code>功能。</li>
</ul>
<p>尽管它们不是免费的桥接类型，但是您可以在需要时<code>CFRunLoopRef</code>从<code>NSRunLoop</code>对象获取不透明类型。本<code>NSRunLoop</code>类定义了一个<code>getCFRunLoop</code>返回的方法<code>CFRunLoopRef</code>类型，你可以传递给 Core Foundation 的例程。由于两个对象都引用相同的运行循环，因此您可以根据需要混合对<code>NSRunLoop</code>对象和<code>CFRunLoopRef</code>不透明类型的调用。</p>
<h6 id="配置运行循环"><a href="#配置运行循环" class="headerlink" title="配置运行循环"></a>配置运行循环</h6><p>在辅助线程上运行运行循环之前，必须向其添加至少一个输入源或计时器。如果运行循环没有任何要监视的源，则当您尝试运行它时，它将立即退出。有关如何将源添加到运行循环的示例，请参见《<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW7">配置运行循环源》</a>。</p>
<p>除了安装源代码，您还可以安装运行循环观察器，并使用它们来检测运行循环的不同执行阶段。要安装运行循环观察器，请创建一个<code>CFRunLoopObserverRef</code>不透明类型，然后使用该<code>CFRunLoopAddObserver</code>函数将其添加到您的运行循环中。即使使用 Cocoa 应用程序，也必须使用 Core Foundation 创建运行循环观察器。</p>
<p>清单 3-1 显示了将运行循环观察器附加到其运行循环的线程的主例程。该示例的目的是向您展示如何创建运行循环观察器，因此代码仅设置了一个运行循环观察器以监视所有运行循环活动。基本处理程序例程（未显示）在处理计时器请求时仅记录运行循环活动。</p>
<p><strong>清单 3-1</strong> 创建一个运行循环观察器</p>
<table>
<thead>
<tr>
<th><code>-（无效）threadMain</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//该应用程序使用垃圾回收，因此不需要自动释放池。</code></td>
</tr>
<tr>
<td><code>NSRunLoop * myRunLoop = [NSRunLoop currentRunLoop];</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//创建一个运行循环观察器，并将其附加到运行循环。</code></td>
</tr>
<tr>
<td><code>CFRunLoopObserverContext context = &#123;0，self，NULL，NULL，NULL&#125;;</code></td>
</tr>
<tr>
<td><code>CFRunLoopObserverRef观察者= CFRunLoopObserverCreate（kCFAllocatorDefault，</code></td>
</tr>
<tr>
<td><code>kCFRunLoopAllActivities，是，0，＆myRunLoopObserver，＆context）；</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>如果（观察者）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>CFRunLoopRef cfLoop = [myRunLoop getCFRunLoop];</code></td>
</tr>
<tr>
<td><code>CFRunLoopAddObserver（cfLoop，观察者，kCFRunLoopDefaultMode）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//创建并安排计时器。</code></td>
</tr>
<tr>
<td><code>[NSTimer ScheduledTimerWithTimeInterval：0.1目标：自我</code></td>
</tr>
<tr>
<td><code>选择器：@选择器（doFireTimer ：） userInfo：无重复：是]；</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>NSInteger loopCount = 10;</code></td>
</tr>
<tr>
<td><code>做</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//运行运行循环10次以使计时器启动。</code></td>
</tr>
<tr>
<td><code>[myRunLoop runUntilDate：[NSDate dateWithTimeIntervalSinceNow：1]];</code></td>
</tr>
<tr>
<td><code>loopCount--;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>while（loopCount）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>为长寿命线程配置运行循环时，最好添加至少一个输入源以接收消息。尽管您可以仅连接一个计时器即可进入运行循环，但是一旦计时器触发，它通常就会失效，这将导致运行循环退出。附加重复计时器可以使运行循环在更长的时间内运行，但是会涉及定期触发计时器以唤醒线程，这实际上是轮询的另一种形式。相比之下，输入源会等待事件发生，使线程保持睡眠状态直到事件发生。</p>
<h6 id="启动运行循环"><a href="#启动运行循环" class="headerlink" title="启动运行循环"></a>启动运行循环</h6><p>仅对于应用程序中的辅助线程，才需要启动运行循环。一个运行循环必须至少有一个输入源或计时器要监视。如果未连接，运行循环将立即退出。</p>
<p>有几种启动运行循环的方法，包括以下几种：</p>
<ul>
<li>无条件</li>
<li>设定时间限制</li>
<li>在特定模式下</li>
</ul>
<p>无条件进入运行循环是最简单的选择，但也是最不希望的。无条件运行运行循环会将线程置于永久循环，这使您几乎无法控制运行循环本身。您可以添加和删除输入源和计时器，但是停止运行循环的唯一方法是终止运行循环。也没有办法在自定义模式下运行运行循环。</p>
<p>与其无条件地运行运行循环，不如使用超时值运行运行循环。当您使用超时值时，运行循环将运行直到事件到达或指定的时间到期为止。如果事件到达，则将该事件调度到处理程序进行处理，然后退出运行循环。然后，您的代码可以重新启动运行循环以处理下一个事件。如果分配的时间到期了，您可以简单地重新启动运行循环或使用该时间进行任何必要的内务处理。</p>
<p>除了超时值之外，您还可以使用特定模式运行运行循环。模式和超时值不是互斥的，并且在启动运行循环时都可以使用。模式限制了将事件传递到运行循环的源的类型，<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW12">运行循环模式中</a>对此进行了详细描述。</p>
<p>清单 3-2 显示了线程的主进入例程的框架版本。此示例的关键部分显示了运行循环的基本结构。本质上，您将输入源和计时器添加到运行循环中，然后重复调用例程之一以启动运行循环。每次运行循环例程返回时，您都要检查是否出现了可能保证退出线程的条件。该示例使用 Core Foundation 运行循环例程，以便它可以检查返回结果并确定为什么退出运行循环。<code>NSRunLoop</code>如果您使用的是 Cocoa，并且不需要检查返回值，则也可以使用类的方法以类似的方式运行运行循环。（有关调用<code>NSRunLoop</code>类的方法的运行循环的示例，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW9">清单 3-14</a>。）</p>
<p><strong>清单 3-2</strong> 运行一个运行循环</p>
<table>
<thead>
<tr>
<th><code>-（void）skeletonThreadMain</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//如果不使用垃圾回收，请在此处设置一个自动释放池。</code></td>
</tr>
<tr>
<td><code>BOOL完成=否；</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//将您的源代码或计时器添加到运行循环中，然后进行其他任何设置。</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>做</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//开始运行循环，但在处理完每个源之后返回。</code></td>
</tr>
<tr>
<td><code>SInt32结果= CFRunLoopRunInMode（kCFRunLoopDefaultMode，10，是）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//如果源明确停止了运行循环，或者没有</code></td>
</tr>
<tr>
<td><code>//来源或计时器，请继续并退出。</code></td>
</tr>
<tr>
<td>`如果（（结果== kCFRunLoopRunStopped）</td>
</tr>
<tr>
<td><code>完成=是;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//在此处检查其他退出条件，并设置</code></td>
</tr>
<tr>
<td><code>//根据需要完成变量。</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>同时（！完成）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//在此处清理代码。确保释放所有分配的自动释放池。</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>可以递归运行运行循环。换句话说，您可以在输入源或计时器的处理程序例程中调用<code>CFRunLoopRun</code>，<code>CFRunLoopRunInMode</code>或任何<code>NSRunLoop</code>用于启动运行循环的方法。这样做时，可以使用任何要运行嵌套运行循环的模式，包括外部运行循环使用的模式。</p>
<h6 id="退出运行循环"><a href="#退出运行循环" class="headerlink" title="退出运行循环"></a>退出运行循环</h6><p>在处理事件之前，有两种方法可以使运行循环退出：</p>
<ul>
<li>配置运行循环以使用超时值运行。</li>
<li>告诉运行循环停止。</li>
</ul>
<p>如果可以管理，使用超时值无疑是首选。指定超时值可使运行循环在退出之前完成其所有正常处理，包括将通知传递给运行循环观察器。</p>
<p>使用该<code>CFRunLoopStop</code>函数显式停止运行循环会产生类似于超时的结果。运行循环将发出所有剩余的运行循环通知，然后退出。区别在于您可以在无条件启动的运行循环中使用此技术。</p>
<p>尽管删除运行循环的输入源和计时器也可能导致运行循环退出，但这不是停止运行循环的可靠方法。一些系统例程将输入源添加到运行循环中以处理所需的事件。因为您的代码可能不知道这些输入源，所以它将无法删除它们，这将阻止运行循环退出。</p>
<h6 id="线程安全和运行循环对象"><a href="#线程安全和运行循环对象" class="headerlink" title="线程安全和运行循环对象"></a>线程安全和运行循环对象</h6><p>线程安全性取决于您用来操纵运行循环的 API。Core Foundation 中的函数通常是线程安全的，可以从任何线程中调用。但是，如果您执行的操作会更改运行循环的配置，则仍然最好从拥有运行循环的线程中进行更改。</p>
<p>可可<code>NSRunLoop</code>类在本质上不如其 Core Foundation 同类线程安全。如果要使用<code>NSRunLoop</code>该类来修改运行循环，则只能从拥有该运行循环的同一线程进行。将输入源或计时器添加到属于不同线程的运行循环中可能会导致代码崩溃或行为异常。</p>
<h4 id="配置运行循环源"><a href="#配置运行循环源" class="headerlink" title="配置运行循环源"></a>配置运行循环源</h4><p>以下各节显示了如何在 Cocoa 和 Core Foundation 中设置不同类型的输入源的示例。</p>
<h6 id="定义自定义输入源"><a href="#定义自定义输入源" class="headerlink" title="定义自定义输入源"></a>定义自定义输入源</h6><p>创建自定义输入源涉及定义以下内容：</p>
<ul>
<li>您希望输入源处理的信息。</li>
<li>调度程序，让感兴趣的客户知道如何联系您的输入源。</li>
<li>处理程序例程，用于执行任何客户端发送的请求。</li>
<li>取消例程使您的输入源无效。</li>
</ul>
<p>因为您创建了一个定制输入源来处理定制信息，所以实际配置被设计为灵活的。调度程序，处理程序和取消例程是自定义输入源几乎始终需要的关键例程。但是，其余大多数输入源行为都发生在那些处理程序例程之外。例如，由您决定定义用于将数据传递到输入源以及将输入源的存在传达给其他线程的机制。</p>
<p>图 3-2 显示了定制输入源的样本配置。在此示例中，应用程序的主线程维护对输入源，该输入源的定制命令缓冲区以及安装该输入源的运行循环的引用。当主线程有一个要移交给工作线程的任务时，它将一个命令以及工作线程启动该任务所需的所有信息发布到命令缓冲区。（由于主线程和工作线程的输入源都可以访问命令缓冲区，因此必须同步该访问。）一旦发布命令，主线程将向输入源发出信号并唤醒工作线程的运行循环。收到唤醒命令后，运行循环将调用输入源的处理程序，该处理程序将处理在命令缓冲区中找到的命令。</p>
<p><strong>图 3-2</strong> 操作自定义输入源<img src="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Art/custominputsource.jpg" alt="操作自定义输入源"></p>
<p>以下各节说明了上图中自定义输入源的实现，并显示了您需要实现的关键代码。</p>
<p>######## 定义输入源</p>
<p>定义自定义输入源需要使用 Core Foundation 例程来配置您的运行循环源并将其附加到运行循环。尽管基本处理程序是基于 C 的函数，但这并不妨碍您编写这些函数的包装程序并使用 Objective-C 或 C ++实现代码主体。</p>
<p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW31">图 3-2 中</a>引入的输入源使用一个 Objective-C 对象来管理命令缓冲区并与运行循环协调。清单 3-3 显示了此对象的定义。该<code>RunLoopSource</code>对象管理命令缓冲区，并使用该缓冲区从其他线程接收消息。此清单还显示了<code>RunLoopContext</code>对象的定义，它实际上只是一个容器对象，用于传递<code>RunLoopSource</code>对象和对应用程序主线程的运行循环引用。</p>
<p><strong>清单 3-3</strong> 定制输入源对象定义</p>
<table>
<thead>
<tr>
<th><code>@interface RunLoopSource：NSObject</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>CFRunLoopSourceRef runLoopSource;</code></td>
</tr>
<tr>
<td><code>NSMutableArray *命令；</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>-（id）init;</code></td>
</tr>
<tr>
<td><code>-（void）addToCurrentRunLoop;</code></td>
</tr>
<tr>
<td><code>-（无效）无效；</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//处理程序方法</code></td>
</tr>
<tr>
<td><code>-（void）sourceFired;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//客户端接口，用于注册要处理的命令</code></td>
</tr>
<tr>
<td><code>-（void）addCommand：（NSInteger）命令withData：（id）data;</code></td>
</tr>
<tr>
<td><code>-（void）fireAllCommandsOnRunLoop：（CFRunLoopRef）runloop;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>@结束</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//这些是CFRunLoopSourceRef回调函数。</code></td>
</tr>
<tr>
<td><code>void RunLoopSourceScheduleRoutine（void * info，CFRunLoopRef rl，CFStringRef模式）;</code></td>
</tr>
<tr>
<td><code>void RunLoopSourcePerformRoutine（void * info）;</code></td>
</tr>
<tr>
<td><code>void RunLoopSourceCancelRoutine（void * info，CFRunLoopRef rl，CFStringRef模式）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>// RunLoopContext是在输入源注册期间使用的容器对象。</code></td>
</tr>
<tr>
<td><code>@interface RunLoopContext：NSObject</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>CFRunLoopRef runLoop;</code></td>
</tr>
<tr>
<td><code>RunLoopSource *源；</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>@property（只读）CFRunLoopRef runLoop;</code></td>
</tr>
<tr>
<td><code>@property（只读）RunLoopSource *源；</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>-（id）initWithSource：（RunLoopSource *）src和Loop：（CFRunLoopRef）loop;</code></td>
</tr>
<tr>
<td><code>@结束</code></td>
</tr>
</tbody></table>
<p>尽管 Objective-C 代码管理输入源的自定义数据，但是将输入源附加到运行循环需要基于 C 的回调函数。当您将运行循环源实际附加到运行循环时，将调用其中的第一个函数，如清单 3-4 所示。因为此输入源只有一个客户端（主线程），所以它使用调度程序功能发送消息以在该线程上的应用程序委托中注册自己。当委托人想要与输入源进行通信时，它将使用<code>RunLoopContext</code>object 中的信息进行通信。</p>
<p><strong>清单 3-4</strong> 安排运行循环源</p>
<table>
<thead>
<tr>
<th><code>void RunLoopSourceScheduleRoutine（void * info，CFRunLoopRef rl，CFStringRef模式）</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>RunLoopSource * obj =（RunLoopSource *）info;</code></td>
</tr>
<tr>
<td><code>AppDelegate * del = [AppDelegate sharedAppDelegate];</code></td>
</tr>
<tr>
<td><code>RunLoopContext * theContext = [[[RunLoopContext alloc] initWithSource：obj和Loop：rl];</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>[del performSelectorOnMainThread：@selector（registerSource :)</code></td>
</tr>
<tr>
<td><code>withObject：theContext waitUntilDone：NO];</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>最重要的回调例程之一是当输入源被信号通知时用于处理自定义数据的例程。清单 3-5 显示了与<code>RunLoopSource</code>对象关联的 perform 回调例程。该功能只是将完成工作的请求转发给<code>sourceFired</code>方法，该方法然后处理命令缓冲区中存在的所有命令。</p>
<p><strong>清单 3-5</strong> 在输入源中执行工作</p>
<table>
<thead>
<tr>
<th><code>void RunLoopSourcePerformRoutine（void * info）</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>RunLoopSource * obj =（RunLoopSource *）info;</code></td>
</tr>
<tr>
<td><code>[obj sourceFired];</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>如果使用该<code>CFRunLoopSourceInvalidate</code>功能从运行循环中删除输入源，系统将调用输入源的取消例程。您可以使用此例程来通知客户端您的输入源不再有效，并且他们应删除对其的任何引用。 清单 3-6 显示了向该<code>RunLoopSource</code>对象注册的取消回调例程。此函数将另一个<code>RunLoopContext</code>对象发送给应用程序委托，但这一次要求委托删除对运行循环源的引用。</p>
<p><strong>清单 3-6</strong> 使输入源无效</p>
<table>
<thead>
<tr>
<th><code>void RunLoopSourceCancelRoutine（无效* info，CFRunLoopRef rl，CFStringRef模式）</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>RunLoopSource * obj =（RunLoopSource *）info;</code></td>
</tr>
<tr>
<td><code>AppDelegate * del = [AppDelegate sharedAppDelegate];</code></td>
</tr>
<tr>
<td><code>RunLoopContext * theContext = [[[RunLoopContext alloc] initWithSource：obj和Loop：rl];</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>[del performSelectorOnMainThread：@selector（removeSource :)</code></td>
</tr>
<tr>
<td><code>withObject：theContext waitUntilDone：YES];</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p><strong>注意：</strong><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW37">与输入源的客户端协调中</a>显示 了应用程序委托<code>registerSource:</code>和<code>removeSource:</code>方法<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW37">的代码</a>。</p>
<p>######## 在运行循环上安装输入源</p>
<p>清单 3-7 显示了该类的<code>init</code>和<code>addToCurrentRunLoop</code>方法<code>RunLoopSource</code>。该<code>init</code>方法创建<code>CFRunLoopSourceRef</code>实际上必须附加到运行循环的不透明类型。它将<code>RunLoopSource</code>对象本身作为上下文信息传递，以便回调例程具有指向该对象的指针。在工作线程调用该<code>addToCurrentRunLoop</code>方法之前，不会安装输入源，此时将<code>RunLoopSourceScheduleRoutine</code>调用回调函数。将输入源添加到运行循环后，线程可以运行其运行循环以等待它。</p>
<p><strong>清单 3-7</strong> 安装运行循环源</p>
<table>
<thead>
<tr>
<th><code>-（id）初始化</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>CFRunLoopSourceContext context = &#123;0，self，NULL，NULL，NULL，NULL，NULL，</code></td>
</tr>
<tr>
<td><code>＆RunLoopSourceScheduleRoutine，</code></td>
</tr>
<tr>
<td><code>RunLoopSourceCancelRoutine，</code></td>
</tr>
<tr>
<td><code>RunLoopSourcePerformRoutine&#125;;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>runLoopSource = CFRunLoopSourceCreate（NULL，0，＆context）;</code></td>
</tr>
<tr>
<td><code>命令= [[[NSMutableArray alloc] init];</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>返回自我</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>-（void）addToCurrentRunLoop</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>CFRunLoopRef runLoop = CFRunLoopGetCurrent（）;</code></td>
</tr>
<tr>
<td><code>CFRunLoopAddSource（runLoop，runLoopSource，kCFRunLoopDefaultMode）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>######## 与输入源的客户协调</p>
<p>为了使您的输入源有用，您需要对其进行操作并从另一个线程发出信号。输入源的全部目的是使其关联线程处于休眠状态，直到有事要做。这个事实使得您的应用程序中的其他线程必须了解输入源并有一种与之通信的方法。</p>
<p>通知客户有关您的输入源的一种方法是在您的输入源首次安装在其运行循环中时发出注册请求。您可以向任意数量的客户注册您的输入源，也可以简单地向某个中央机构注册它，然后将您的输入源出售给感兴趣的客户。清单 3-8 显示了由应用程序委托定义的注册方法，该方法在调用<code>RunLoopSource</code>对象的调度程序函数时调用。此方法接收该<code>RunLoopContext</code>对象提供的<code>RunLoopSource</code>对象，并将其添加到其源列表中。此清单还显示了从运行循环中删除输入源时用于注销输入源的例程。</p>
<p><strong>清单 3-8</strong> 使用应用程序委托注册和删除输入源</p>
<table>
<thead>
<tr>
<th><code>-（void）registerSource：（RunLoopContext *）sourceInfo;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>[sourcesToPing addObject：sourceInfo];</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>-（无效）removeSource：（RunLoopContext *）sourceInfo</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>id objToRemove = nil;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>用于（SourcesToPing中的RunLoopContext *上下文）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>如果（[context isEqual：sourceInfo]）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>objToRemove =上下文；</code></td>
</tr>
<tr>
<td><code>打破;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>如果（objToRemove）</code></td>
</tr>
<tr>
<td><code>[sourcesToPing removeObject：objToRemove];</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p><strong>注意：</strong><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW32">清单 3-4</a>和<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW34">清单 3-6</a> 中显示了调用前面清单中的方法的回调函数。</p>
<p>######## 用信号通知输入源</p>
<p>在将其数据交给输入源后，客户端必须向该源发出信号并唤醒其运行循环。向源发出信号会使运行循环知道该源已准备好进行处理。并且由于当信号出现时线程可能处于睡眠状态，因此您应该始终明确地唤醒运行循环。否则，可能会导致输入源处理延迟。</p>
<p>清单 3-9 显示了<code>fireCommandsOnRunLoop</code>该<code>RunLoopSource</code>对象的方法。客户端准备好让源处理它们添加到缓冲区的命令时，客户端将调用此方法。</p>
<p><strong>清单 3-9</strong> 唤醒运行循环</p>
<table>
<thead>
<tr>
<th><code>-（void）fireCommandsOnRunLoop：（CFRunLoopRef）runloop</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>CFRunLoopSourceSignal（runLoopSource）;</code></td>
</tr>
<tr>
<td><code>CFRunLoopWakeUp（runloop）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p><strong>注意：</strong> 永远不要尝试<code>SIGHUP</code>通过传递自定义输入源来处理一个或其他类型的过程级信号。唤醒运行循环的 Core Foundation 函数不是信号安全的，不应在应用程序的信号处理程序例程中使用。有关信号处理程序例程的更多信息，请参见<code>sigaction</code>手册页。</p>
<h6 id="配置计时器源"><a href="#配置计时器源" class="headerlink" title="配置计时器源"></a>配置计时器源</h6><p>要创建计时器源，您要做的就是创建一个计时器对象并将其安排在运行循环中。在 Cocoa 中，您可以使用<code>NSTimer</code>该类来创建新的计时器对象，而在 Core Foundation 中，您可以使用<code>CFRunLoopTimerRef</code>不透明类型。在内部，<code>NSTimer</code>该类只是 Core Foundation 的扩展，提供了一些便利功能，例如使用同一方法创建和安排计时器的功能。</p>
<p>在 Cocoa 中，您可以使用以下两种方法之一同时创建和安排计时器：</p>
<ul>
<li><code>scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:</code></li>
<li><code>scheduledTimerWithTimeInterval:invocation:repeats:</code></li>
</ul>
<p>这些方法创建计时器并将其以默认模式（<code>NSDefaultRunLoopMode</code>）添加到当前线程的运行循环中。如果需要，还可以通过创建<code>NSTimer</code>对象然后使用的<code>addTimer:forMode:</code>方法将其添加到运行循环中来手动安排计时器<code>NSRunLoop</code>。两种技术基本上都做同样的事情，但是给您对计时器配置的不同级别的控制。例如，如果您创建计时器并将其手动添加到运行循环中，则可以使用默认模式以外的其他模式来执行此操作。清单 3-10 显示了如何使用这两种技术创建计时器。第一个计时器的初始延迟为 1 秒，但此后每隔 0.1 秒定期触发一次。第二个计时器在最初的 0.2 秒延迟后开始触发，然后在此之后每 0.2 秒触发一次。</p>
<p><strong>清单 3-10</strong> 使用 NSTimer 创建和调度计时器</p>
<table>
<thead>
<tr>
<th><code>NSRunLoop * myRunLoop = [NSRunLoop currentRunLoop];</code></th>
</tr>
</thead>
<tbody><tr>
<td>``</td>
</tr>
<tr>
<td><code>//创建并安排第一个计时器。</code></td>
</tr>
<tr>
<td><code>NSDate * futureDate = [NSDate dateWithTimeIntervalSinceNow：1.0];</code></td>
</tr>
<tr>
<td><code>NSTimer * myTimer = [[NSTimer分配] initWithFireDate：futureDate</code></td>
</tr>
<tr>
<td><code>间隔：0.1</code></td>
</tr>
<tr>
<td><code>目标：自我</code></td>
</tr>
<tr>
<td><code>选择器：@选择器（myDoFireTimer1 :)</code></td>
</tr>
<tr>
<td><code>userInfo：无</code></td>
</tr>
<tr>
<td><code>重复：是]；</code></td>
</tr>
<tr>
<td><code>[myRunLoop addTimer：myTimer的模式：NSDefaultRunLoopMode]；</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//创建并安排第二个计时器。</code></td>
</tr>
<tr>
<td><code>[NSTimer ScheduledTimerWithTimeInterval：0.2</code></td>
</tr>
<tr>
<td><code>目标：自我</code></td>
</tr>
<tr>
<td><code>选择器：@选择器（myDoFireTimer2 :)</code></td>
</tr>
<tr>
<td><code>userInfo：无</code></td>
</tr>
<tr>
<td><code>重复：是]；</code></td>
</tr>
</tbody></table>
<p>清单 3-11 显示了使用 Core Foundation 函数配置计时器所需的代码。尽管此示例未在上下文结构中传递任何用户定义的信息，但是您可以使用此结构传递计时器所需的任何自定义数据。有关此结构的内容的更多信息，请参见*<a href="https://developer.apple.com/documentation/corefoundation/cfrunlooptimer-rhk">CFRunLoopTimer 参考中的</a>*描述。</p>
<p><strong>清单 3-11</strong> 使用 Core Foundation 创建和安排计时器</p>
<table>
<thead>
<tr>
<th><code>CFRunLoopRef runLoop = CFRunLoopGetCurrent（）;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>CFRunLoopTimerContext context = &#123;0，NULL，NULL，NULL，NULL&#125;;</code></td>
</tr>
<tr>
<td><code>CFRunLoopTimerRef timer = CFRunLoopTimerCreate（kCFAllocatorDefault，0.1，0.3，0，0，</code></td>
</tr>
<tr>
<td><code>＆myCFTimerCallback，＆context）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>CFRunLoopAddTimer（runLoop，timer，kCFRunLoopCommonModes）;</code></td>
</tr>
</tbody></table>
<h6 id="配置基于端口的输入源"><a href="#配置基于端口的输入源" class="headerlink" title="配置基于端口的输入源"></a>配置基于端口的输入源</h6><p>Cocoa 和 Core Foundation 都提供了基于端口的对象，用于在线程之间或进程之间进行通信。以下各节说明如何使用几种不同类型的端口来设置端口通信。</p>
<p>######## 配置 NSMachPort 对象</p>
<p>要与<code>NSMachPort</code>对象建立本地连接，请创建端口对象并将其添加到主线程的运行循环中。启动辅助线程时，将同一对象传递给线程的入口点函数。辅助线程可以使用同一对象将消息发送回您的主线程。</p>
<p>########## 实施主线程代码</p>
<p>清单 3-12 显示了用于启动辅助工作线程的主要线程代码。因为 Cocoa 框架执行了许多配置端口和运行循环的干预步骤，所以该<code>launchThread</code>方法明显短于其 Core Foundation 等效方法（<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-139726-BAJBGHHB">清单 3-17</a>）。但是，两者的行为几乎相同。一个区别是，此方法不是将本地端口的名称发送到工作线程，而是<code>NSPort</code>直接发送对象。</p>
<p><strong>清单 3-12</strong> 主线程启动方法</p>
<table>
<thead>
<tr>
<th><code>-（无效）launchThread</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>NSPort * myPort = [NSMachPort端口]；</code></td>
</tr>
<tr>
<td><code>如果（myPort）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//此类处理传入的端口消息。</code></td>
</tr>
<tr>
<td><code>[myPort setDelegate：self];</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//将端口安装为当前运行循环上的输入源。</code></td>
</tr>
<tr>
<td><code>[[NSRunLoop currentRunLoop] addPort：myPort forMode：NSDefaultRunLoopMode];</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//分离线程。让工作人员释放端口。</code></td>
</tr>
<tr>
<td><code>[NSThread detachNewThreadSelector：@selector（LaunchThreadWithPort :)</code></td>
</tr>
<tr>
<td><code>toTarget：[MyWorkerClass class] withObject：myPort];</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>为了在线程之间建立双向通信通道，您可能希望工作线程在签入消息中将其自己的本地端口发送到主线程。接收到签入消息可以使您的主线程知道在启动第二个线程时一切进展顺利，还为您提供了一种向该线程发送更多消息的方法。</p>
<p>清单 3-13 显示<code>handlePortMessage:</code>了主线程的方法。当数据到达线程自己的本地端口时，将调用此方法。当签入消息到达时，该方法直接从端口消息中检索辅助线程的端口，并将其保存以供以后使用。</p>
<p><strong>清单 3-13</strong> 处理 Mach 端口消息</p>
<table>
<thead>
<tr>
<th><code>#define kCheckinMessage 100</code></th>
</tr>
</thead>
<tbody><tr>
<td>``</td>
</tr>
<tr>
<td><code>//处理来自辅助线程的响应。</code></td>
</tr>
<tr>
<td><code>-（void）handlePortMessage：（NSPortMessage *）portMessage</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>unsigned int消息= [portMessage msgid];</code></td>
</tr>
<tr>
<td><code>NSPort * distantPort = nil;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>如果（消息== kCheckinMessage）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//获取辅助线程的通信端口。</code></td>
</tr>
<tr>
<td><code>distantPort = [portMessage sendPort];</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//保留并保存工作端口，以备后用。</code></td>
</tr>
<tr>
<td><code>[self storeDistantPort：distantPort];</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>其他</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//处理其他消息。</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>########## 实施辅助线程代码</p>
<p>对于辅助工作线程，您必须配置线程并使用指定的端口将信息传递回主线程。</p>
<p>清单 3-14 显示了设置工作线程的代码。在为线程创建自动释放池之后，该方法将创建一个工作器对象以驱动线程执行。worker 对象的<code>sendCheckinMessage:</code>方法（如<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW10">清单 3-15</a>所示）为 worker 线程创建一个本地端口，并将签入消息发送回主线程。</p>
<p><strong>清单 3-14</strong> 使用 Mach 端口启动工作线程</p>
<table>
<thead>
<tr>
<th><code>+（无效）LaunchThreadWithPort：（id）inData</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//设置此线程与主线程之间的连接。</code></td>
</tr>
<tr>
<td><code>NSPort * distantPort =（NSPort *）inData;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>MyWorkerClass * workerObj = [[self alloc] init];</code></td>
</tr>
<tr>
<td><code>[workerObj sendCheckinMessage：distantPort];</code></td>
</tr>
<tr>
<td><code>[distantPort版本]；</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//让运行循环处理事物。</code></td>
</tr>
<tr>
<td><code>做</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>[[NSRunLoop currentRunLoop] runMode：NSDefaultRunLoopMode</code></td>
</tr>
<tr>
<td><code>beforeDate：[NSDate distantFuture]];</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>while（！[workerObj shouldExit]）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>[workerObj发布]；</code></td>
</tr>
<tr>
<td><code>[池释放];</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>使用时<code>NSMachPort</code>，本地线程和远程线程可以将相同的端口对象用于线程之间的单向通信。换句话说，一个线程创建的本地端口对象成为另一线程的远程端口对象。</p>
<p>清单 3-15 显示了辅助线程的签入例程。此方法设置自己的本地端口以用于将来的通信，然后将签入消息发送回主线程。该方法将方法中接收到的端口对象<code>LaunchThreadWithPort:</code>用作消息的目标。</p>
<p><strong>清单 3-15</strong> 使用 Mach 端口发送签入消息</p>
<table>
<thead>
<tr>
<th><code>//工作线程签入方法</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>-（void）sendCheckinMessage：（NSPort *）outPort</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//保留并保存远程端口以备将来使用。</code></td>
</tr>
<tr>
<td><code>[self setRemotePort：outPort];</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//创建并配置工作线程端口。</code></td>
</tr>
<tr>
<td><code>NSPort * myPort = [NSMachPort端口]；</code></td>
</tr>
<tr>
<td><code>[myPort setDelegate：self];</code></td>
</tr>
<tr>
<td><code>[[NSRunLoop currentRunLoop] addPort：myPort forMode：NSDefaultRunLoopMode];</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//创建签到消息。</code></td>
</tr>
<tr>
<td><code>NSPortMessage * messageObj = [[NSPortMessage alloc] initWithSendPort：outPort</code></td>
</tr>
<tr>
<td><code>receivePort：myPort组件：无]；</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>如果（messageObj）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//完成消息配置并立即发送。</code></td>
</tr>
<tr>
<td><code>[messageObj setMsgId：setMsgid：kCheckinMessage]；</code></td>
</tr>
<tr>
<td><code>[messageObj sendBeforeDate：[NSDate date]]；</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>######## 配置 NSMessagePort 对象</p>
<p>要与<code>NSMessagePort</code>对象建立本地连接，不能简单地在线程之间传递端口对象。远程消息端口必须按名称获取。要在 Cocoa 中实现此功能，需要使用特定名称注册您的本地端口，然后将该名称传递给远程线程，以便它可以获得用于通信的适当端口对象。清单 3-16 显示了要使用消息端口的情况下的端口创建和注册过程。</p>
<p><strong>清单 3-16</strong> 注册消息端口</p>
<table>
<thead>
<tr>
<th><code>NSPort * localPort = [[NSMessagePort alloc] init];</code></th>
</tr>
</thead>
<tbody><tr>
<td>``</td>
</tr>
<tr>
<td><code>//配置对象并将其添加到当前运行循环中。</code></td>
</tr>
<tr>
<td><code>[localPort setDelegate：self];</code></td>
</tr>
<tr>
<td><code>[[NSRunLoop currentRunLoop] addPort：localPort forMode：NSDefaultRunLoopMode];</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//使用特定名称注册端口。名称必须唯一。</code></td>
</tr>
<tr>
<td><code>NSString * localPortName = [NSString stringWithFormat：@“ MyPortName”];</code></td>
</tr>
<tr>
<td><code>[[NSMessagePortNameServer sharedInstance] registerPort：localPort</code></td>
</tr>
<tr>
<td><code>name：localPortName];</code></td>
</tr>
</tbody></table>
<p>######## 在 Core Foundation 中配置基于端口的输入源</p>
<p>本节说明如何使用 Core Foundation 在应用程序的主线程和辅助线程之间建立双向通信通道。</p>
<p>清单 3-17 显示了由应用程序的主线程调用以启动工作线程的代码。代码要做的第一件事是建立一个<code>CFMessagePortRef</code>不透明类型，以侦听来自工作线程的消息。工作线程需要使用端口名称进行连接，以便将字符串值传递到工作线程的入口点函数。在当前用户上下文中，端口名称通常应该是唯一的；否则，您可能会遇到冲突。</p>
<p><strong>清单 3-17</strong> 将 Core Foundation 消息端口附加到新线程</p>
<table>
<thead>
<tr>
<th><code>＃定义kThreadStackSize（8 * 4096）</code></th>
</tr>
</thead>
<tbody><tr>
<td>``</td>
</tr>
<tr>
<td><code>OSStatus MySpawnThread（）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//创建一个本地端口以接收响应。</code></td>
</tr>
<tr>
<td><code>CFStringRef myPortName;</code></td>
</tr>
<tr>
<td><code>CFMessagePortRef myPort;</code></td>
</tr>
<tr>
<td><code>CFRunLoopSourceRef rlSource;</code></td>
</tr>
<tr>
<td><code>CFMessagePortContext context = &#123;0，NULL，NULL，NULL，NULL&#125;;</code></td>
</tr>
<tr>
<td><code>布尔值shouldFreeInfo;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//用端口名创建一个字符串。</code></td>
</tr>
<tr>
<td><code>myPortName = CFStringCreateWithFormat（NULL，NULL，CFSTR（“ com.myapp.MainThread”））;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//创建端口。</code></td>
</tr>
<tr>
<td><code>myPort = CFMessagePortCreateLocal（NULL，</code></td>
</tr>
<tr>
<td><code>myPortName，</code></td>
</tr>
<tr>
<td><code>＆MainThreadResponseHandler，</code></td>
</tr>
<tr>
<td><code>＆context，</code></td>
</tr>
<tr>
<td><code>＆shouldFreeInfo）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>如果（myPort！= NULL）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//端口已成功创建。</code></td>
</tr>
<tr>
<td><code>//现在为其创建一个运行循环源。</code></td>
</tr>
<tr>
<td><code>rlSource = CFMessagePortCreateRunLoopSource（NULL，myPort，0）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>如果（rlSource）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//将源添加到当前的运行循环中。</code></td>
</tr>
<tr>
<td><code>CFRunLoopAddSource（CFRunLoopGetCurrent（），rlSource，kCFRunLoopDefaultMode）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//一旦安装，就可以释放它们。</code></td>
</tr>
<tr>
<td><code>CFRelease（myPort）;</code></td>
</tr>
<tr>
<td><code>CFRelease（rlSource）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//创建线程并继续处理。</code></td>
</tr>
<tr>
<td><code>MPTaskID taskID;</code></td>
</tr>
<tr>
<td><code>return（MPCreateTask（＆ServerThreadEntryPoint，</code></td>
</tr>
<tr>
<td><code>（void *）myPortName，</code></td>
</tr>
<tr>
<td><code>kThreadStackSize，</code></td>
</tr>
<tr>
<td><code>空值，</code></td>
</tr>
<tr>
<td><code>空值，</code></td>
</tr>
<tr>
<td><code>空值，</code></td>
</tr>
<tr>
<td><code>0，</code></td>
</tr>
<tr>
<td><code>＆taskID））;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>安装端口并启动线程后，主线程可以在等待线程检入的同时继续其常规执行。当检入消息到达时，它将分派给主线程的<code>MainThreadResponseHandler</code>函数，如清单 3-18 所示。。此函数提取工作线程的端口名，并创建用于将来通信的管道。</p>
<p><strong>清单 3-18</strong> 接收签入消息</p>
<table>
<thead>
<tr>
<th><code>#define kCheckinMessage 100</code></th>
</tr>
</thead>
<tbody><tr>
<td>``</td>
</tr>
<tr>
<td><code>//主线程端口消息处理程序</code></td>
</tr>
<tr>
<td><code>CFDataRef MainThreadResponseHandler（CFMessagePortRef local，</code></td>
</tr>
<tr>
<td><code>SInt32 msgid，</code></td>
</tr>
<tr>
<td><code>CFDataRef数据，</code></td>
</tr>
<tr>
<td><code>无效*信息）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>如果（msgid == kCheckinMessage）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>CFMessagePortRef messagePort;</code></td>
</tr>
<tr>
<td><code>CFStringRef threadPortName;</code></td>
</tr>
<tr>
<td><code>CFIndex bufferLength = CFDataGetLength（data）;</code></td>
</tr>
<tr>
<td><code>UInt8 * buffer = CFAllocatorAllocate（NULL，bufferLength，0）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>CFDataGetBytes（data，CFRangeMake（0，bufferLength），buffer）;</code></td>
</tr>
<tr>
<td><code>threadPortName = CFStringCreateWithBytes（NULL，buffer，bufferLength，kCFStringEncodingASCII，FALSE）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//您必须按名称获取远程消息端口。</code></td>
</tr>
<tr>
<td><code>messagePort = CFMessagePortCreateRemote（NULL，（CFStringRef）threadPortName）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>如果（messagePort）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//保留并保存线程的通讯端口，以备将来参考。</code></td>
</tr>
<tr>
<td><code>AddPortToListOfActiveThreads（messagePort）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//由于该端口由上一个函数保留，因此释放</code></td>
</tr>
<tr>
<td><code>// 在这里。</code></td>
</tr>
<tr>
<td><code>CFRelease（messagePort）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>// 清理。</code></td>
</tr>
<tr>
<td><code>CFRelease（threadPortName）;</code></td>
</tr>
<tr>
<td><code>CFAllocatorDeallocate（NULL，buffer）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>其他</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//处理其他消息。</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>返回NULL;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>配置了主线程后，剩下的唯一事情就是新创建的工作线程创建自己的端口并签入。清单 3-19 显示了工作线程的入口点函数。该函数提取主线程的端口名，并使用它来创建返回到主线程的远程连接。然后，该函数为其自身创建一个本地端口，将该端口安装在线程的运行循环上，并向主线程发送包含本地端口名称的签入消息。</p>
<p><strong>清单 3-19</strong> 设置线程结构</p>
<table>
<thead>
<tr>
<th><code>OSStatus ServerThreadEntryPoint（void *参数）</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//创建到主线程的远程端口。</code></td>
</tr>
<tr>
<td><code>CFMessagePortRef mainThreadPort;</code></td>
</tr>
<tr>
<td><code>CFStringRef portName =（CFStringRef）param;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>mainThreadPort = CFMessagePortCreateRemote（NULL，portName）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//释放在参数中传递的字符串。</code></td>
</tr>
<tr>
<td><code>CFRelease（端口名）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//为工作线程创建一个端口。</code></td>
</tr>
<tr>
<td><code>CFStringRef myPortName = CFStringCreateWithFormat（NULL，NULL，CFSTR（“ com.MyApp.Thread-％d”），MPCurrentTaskID（））;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//将端口存储在此线程的上下文信息中，以供以后参考。</code></td>
</tr>
<tr>
<td><code>CFMessagePortContext context = &#123;0，mainThreadPort，NULL，NULL，NULL&#125;;</code></td>
</tr>
<tr>
<td><code>布尔值shouldFreeInfo;</code></td>
</tr>
<tr>
<td><code>布尔值shouldAbort = TRUE;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>CFMessagePortRef myPort = CFMessagePortCreateLocal（NULL，</code></td>
</tr>
<tr>
<td><code>myPortName，</code></td>
</tr>
<tr>
<td><code>＆ProcessClientRequest，</code></td>
</tr>
<tr>
<td><code>＆context，</code></td>
</tr>
<tr>
<td><code>＆shouldFreeInfo）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>如果（shouldFreeInfo）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//无法创建本地端口，因此请终止线程。</code></td>
</tr>
<tr>
<td><code>MPExit（0）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>CFRunLoopSourceRef rlSource = CFMessagePortCreateRunLoopSource（NULL，myPort，0）;</code></td>
</tr>
<tr>
<td><code>如果（！rlSource）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//无法创建本地端口，因此请终止线程。</code></td>
</tr>
<tr>
<td><code>MPExit（0）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//将源添加到当前的运行循环中。</code></td>
</tr>
<tr>
<td><code>CFRunLoopAddSource（CFRunLoopGetCurrent（），rlSource，kCFRunLoopDefaultMode）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//一旦安装，就可以释放它们。</code></td>
</tr>
<tr>
<td><code>CFRelease（myPort）;</code></td>
</tr>
<tr>
<td><code>CFRelease（rlSource）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//打包端口名称并发送签入消息。</code></td>
</tr>
<tr>
<td><code>CFDataRef returnData = nil;</code></td>
</tr>
<tr>
<td><code>CFDataRef outData;</code></td>
</tr>
<tr>
<td><code>CFIndex stringLength = CFStringGetLength（myPortName）;</code></td>
</tr>
<tr>
<td><code>UInt8 * buffer = CFAllocatorAllocate（NULL，stringLength，0）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>CFStringGetBytes（myPortName，</code></td>
</tr>
<tr>
<td><code>CFRangeMake（0，stringLength），</code></td>
</tr>
<tr>
<td><code>kCFStringEncodingASCII，</code></td>
</tr>
<tr>
<td><code>0，</code></td>
</tr>
<tr>
<td><code>假，</code></td>
</tr>
<tr>
<td><code>缓冲，</code></td>
</tr>
<tr>
<td><code>stringLength，</code></td>
</tr>
<tr>
<td><code>空值）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>outData = CFDataCreate（NULL，buffer，stringLength）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>CFMessagePortSendRequest（mainThreadPort，kCheckinMessage，outData，0.1，0.0，NULL，NULL）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//清理线程数据结构。</code></td>
</tr>
<tr>
<td><code>CFRelease（outData）;</code></td>
</tr>
<tr>
<td><code>CFAllocatorDeallocate（NULL，buffer）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//进入运行循环。</code></td>
</tr>
<tr>
<td><code>CFRunLoopRun（）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>一旦进入运行循环，该<code>ProcessClientRequest</code>函数将处理所有将来发送到线程端口的事件。该函数的实现取决于线程执行的工作类型，此处未显示。</p>
<h2 id="同步化"><a href="#同步化" class="headerlink" title="同步化"></a>同步化</h2><p>应用程序中存在多个线程带来了与从多个执行线程安全访问资源有关的潜在问题。修改同一资源的两个线程可能会以意想不到的方式相互干扰。例如，一个线程可能会覆盖另一个线程的更改，或者将应用程序置于未知且可能无效的状态。如果幸运的话，损坏的资源可能会导致明显的性能问题或崩溃，这些问题相对容易跟踪和修复。但是，如果您不走运，损坏可能会导致细微的错误，直到很久以后才会显现出来，或者这些错误可能需要对基础的编码假设进行重大检查。</p>
<p>在线程安全方面，好的设计是您拥有的最佳保护。避免共享资源并最小化线程之间的交互，使这些线程相互干扰的可能性降低。但是，并非总是可以实现完全无干扰的设计。如果您的线程必须进行交互，则需要使用同步工具来确保它们在交互时安全地进行交互。</p>
<p>OS X 和 iOS 提供了许多同步工具供您使用，从提供互斥访问的工具到在应用程序中正确排序事件的工具。以下各节描述了这些工具以及如何在代码中使用它们以影响对程序资源的安全访问。</p>
<h4 id="同步工具"><a href="#同步工具" class="headerlink" title="同步工具"></a>同步工具</h4><p>为了防止不同的线程意外更改数据，可以将应用程序设计为不存在同步问题，也可以使用同步工具。尽管最好完全避免同步问题，但这并不总是可能的。以下各节介绍了可供您使用的同步工具的基本类别。</p>
<h6 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h6><p>原子操作是一种简单的同步形式，适用于简单的数据类型。原子操作的优点是它们不会阻塞竞争线程。对于简单的操作（例如增加计数器变量），这比使用锁可以带来更好的性能。</p>
<p>OS X 和 iOS 包含许多操作，可以对 32 位和 64 位值执行基本的数学和逻辑运算。这些操作包括比较和交换，测试和设置以及测试和清除操作的原子版本。有关受支持的原子操作的列表，请参见<code>/usr/include/libkern/OSAtomic.h</code>头文件或<code>atomic</code>手册页。</p>
<h6 id="内存壁垒和易失性变量"><a href="#内存壁垒和易失性变量" class="headerlink" title="内存壁垒和易失性变量"></a>内存壁垒和易失性变量</h6><p>为了获得最佳性能，编译器经常对汇编级指令进行重新排序，以使处理器的指令流水线尽可能完整。作为此优化的一部分，当编译器认为这样做不会产生不正确的数据时，可能会对访问主内存的指令进行重新排序。不幸的是，编译器并非总是能够检测到所有与内存相关的操作。如果看似独立的变量实际上相互影响，则编译器优化可能会以错误的顺序更新这些变量，从而产生可能不正确的结果。</p>
<p>内存屏障是一种非阻塞同步工具，用于确保内存操作以正确的顺序发生。内存屏障的作用类似于围栏，迫使处理器在允许执行位于屏障之后的加载和存储操作之前，完成位于屏障前面的所有加载和存储操作。内存屏障通常用于确保一个线程（但另一线程可见）的内存操作始终按预期的顺序发生。在这种情况下缺少内存屏障可能会使其他线程看到看似不可能的结果。（有关示例，请参阅 Wikipedia 条目中的<a href="http://en.wikipedia.org/wiki/Memory_barrier">内存障碍</a>。）要使用内存障碍，只需<code>OSMemoryBarrier</code>在代码中的适当位置调用该函数。</p>
<p>易失性变量将另一种类型的内存约束应用于单个变量。编译器通常通过将变量的值加载到寄存器中来优化代码。对于局部变量，这通常不是问题。但是，如果从另一个线程可见该变量，则这种优化可能会阻止另一个线程注意到对该变量的任何更改。将<code>volatile</code>关键字应用于变量会强制编译器每次使用时从内存中加载该变量。您可以声明一个变量，<code>volatile</code>好像它的值可以随时被编译器可能无法检测到的外部源更改一样。</p>
<p>由于内存屏障和易失性变量都减少了编译器可执行的优化次数，因此应谨慎使用它们，并且仅在需要确保正确性的地方使用它们。有关使用内存屏障的信息，请参见 <code>OSMemoryBarrier</code>手册页。</p>
<h6 id="锁具"><a href="#锁具" class="headerlink" title="锁具"></a>锁具</h6><p>锁是最常用的同步工具之一。您可以使用锁来保护代码的<em>关键部分</em>，这是一段代码，一次只能允许一个线程访问。例如，关键部分可能操纵特定的数据结构或一次使用最多支持一个客户端的某些资源。通过在此部分周围加锁，可以排除其他线程进行可能影响代码正确性的更改。</p>
<p>表 4-1 列出了程序员常用的一些锁。OS X 和 iOS 提供了大多数此类锁类型的实现，但并非全部。对于不受支持的锁类型，描述列说明了未在平台上直接实现这些锁的原因。</p>
<table>
<thead>
<tr>
<th align="left">锁</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">互斥体</td>
<td align="left">互斥（或<em>互斥</em>）锁充当资源周围的保护性屏障。互斥锁是一种信号量，它一次只能授予对一个线程的访问权限。如果正在使用互斥锁，而另一个线程试图获取该互斥锁，则该线程将阻塞，直到该互斥锁被其原始持有者释放为止。如果多个线程竞争同一个互斥锁，则一次只能访问一个。</td>
</tr>
<tr>
<td align="left">递归锁</td>
<td align="left">递归锁是互斥锁的一种变体。递归锁允许单个线程在释放它之前多次获取该锁。其他线程将保持阻塞状态，直到锁的所有者以与获取锁相同的次数释放锁。递归锁主要在递归迭代期间使用，但也可以在多个方法各自需要分别获取锁的情况下使用。</td>
</tr>
<tr>
<td align="left">读写锁</td>
<td align="left">读写锁也称为共享独占锁。这种类型的锁通常用于较大规模的操作，如果经常读取受保护的数据结构并仅偶尔进行修改，则可以显着提高性能。在正常操作期间，多个读取器可以同时访问数据结构。但是，当线程要写入结构时，它将阻塞，直到所有读取器都释放锁为止，此时，它获取了锁并可以更新结构。当写入线程正在等待锁定时，新的读取器线程将阻塞，直到写入线程完成。系统仅支持使用 POSIX 线程的读写锁。有关如何使用这些锁的更多信息，请参见<code>pthread</code>手册页。</td>
</tr>
<tr>
<td align="left">分布式锁</td>
<td align="left">分布式锁在进程级别提供互斥访问。与真正的互斥锁不同，分布式锁不会阻止进程或阻止其运行。它仅报告锁何时繁忙，并让进程决定如何进行。</td>
</tr>
<tr>
<td align="left">自旋锁</td>
<td align="left">自旋锁反复轮询其锁定条件，直到该条件变为 true。自旋锁最常用于多处理器系统，其中锁的预期等待时间很小。在这些情况下，轮询通常比阻塞线程更有效，这需要上下文切换和线程数据结构的更新。由于它们具有轮询性质，因此系统不提供自旋锁的任何实现，但是您可以在特定情况下轻松地实现它们。有关在内核中实现自旋锁的信息，请参见《_<a href="https://developer.apple.com/library/archive/documentation/Darwin/Conceptual/KernelProgramming/About/About.html#//apple_ref/doc/uid/TP30000905">内核编程指南》</a>_。</td>
</tr>
<tr>
<td align="left">双重检查锁</td>
<td align="left">双重检查锁是通过在获取锁之前测试锁定条件来减少获取锁的开销的尝试。由于双重检查的锁可能不安全，因此系统不会为它们提供明确的支持，因此不建议使用它们。</td>
</tr>
</tbody></table>
<p><strong>注意：</strong> 大多数类型的锁还包含一个内存屏障，以确保在进入关键部分之前完成所有先前的装载和存储指令。</p>
<p>有关如何使用锁的信息，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW16">使用锁</a>。</p>
<h6 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h6><p>条件是信号量的另一种类型，当某个条件为真时，它允许线程彼此发信号。条件通常用于指示资源的可用性或确保任务以特定顺序执行。当线程测试条件时，除非该条件已经为真，否则它将阻塞。它保持阻塞状态，直到其他线程显式更改并发出条件信号为止。条件和互斥锁之间的区别在于，可以允许多个线程同时访问该条件。条件更多是看门人，它根据某些指定的标准让不同的线程通过门。</p>
<p>使用条件的一种方法是管理未决事件池。当事件队列中有事件时，事件队列将使用条件变量来通知等待线程。如果一个事件到达，则队列将适当地发出条件信号。如果一个线程已经在等待，它将被唤醒，随后它将把事件从队列中拉出并进行处理。如果两个事件几乎同时进入队列，则队列将两次发出信号通知状态以唤醒两个线程。</p>
<p>该系统为几种不同技术的条件提供支持。条件的正确实现需要仔细的编码，因此，在将其用于自己的代码之前，应先查看“ <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW4">使用条件”</a>中的示例。</p>
<h6 id="执行选择器例程"><a href="#执行选择器例程" class="headerlink" title="执行选择器例程"></a>执行选择器例程</h6><p>可可应用程序具有一种以同步方式将消息传递到单个线程的便捷方法。在<code>NSObject</code>类声明对应用程序的活动线程的一个进行选择的方法。这些方法使您的线程可以异步传递消息，并确保它们将由目标线程同步执行。例如，您可以使用执行选择器消息将结果从分布式计算传递到应用程序的主线程或指定的协调器线程。每个执行选择器的请求都在目标线程的运行循环中排队，然后按照接收顺序对请求进行顺序处理。</p>
<p>有关执行选择器例程的摘要以及有关如何使用它们的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW44">Cocoa Perform Selector Sources</a>。</p>
<h4 id="同步成本和性能"><a href="#同步成本和性能" class="headerlink" title="同步成本和性能"></a>同步成本和性能</h4><p>同步有助于确保代码的正确性，但这样做会牺牲性能。即使在无争议的情况下，使用同步工具也会带来延迟。锁和原子操作通常涉及内存屏障和内核级同步的使用，以确保代码得到适当的保护。如果存在争用锁的情况，您的线程可能会阻塞并经历更大的延迟。</p>
<p>表 4-2 列出了在无争议的情况下与互斥锁和原子操作相关的一些近似成本。这些测量值代表了数千个样本的平均时间。但是，与线程创建时间一样，互斥锁获取时间（即使在无争议的情况下）也可能因处理器负载，计算机速度以及可用系统和程序内存量的不同而有很大差异。</p>
<table>
<thead>
<tr>
<th align="left">项目</th>
<th align="left">大概费用</th>
<th align="left">笔记</th>
</tr>
</thead>
<tbody><tr>
<td align="left">互斥体获取时间</td>
<td align="left">约 0.2 微秒</td>
<td align="left">这是无争议情况下的锁获取时间。如果该锁由另一个线程持有，则获取时间可能会更长。这些数字是通过分析在基于 Intel 的 iMac（具有 2 GHz Core Duo 处理器和 1 GB 运行 OS X v10.5 的 RAM）上的互斥锁获取期间生成的平均值和中值确定的。</td>
</tr>
<tr>
<td align="left">原子比较和交换</td>
<td align="left">约 0.05 微秒</td>
<td align="left">这是无争议情况下的比较和交换时间。这些数字是通过分析操作的平均值和中值确定的，是在基于 Intel 的 iMac 上生成的，该 iMac 具有 2 GHz Core Duo 处理器和 1 GB 运行 OS X v10.5 的 RAM。</td>
</tr>
</tbody></table>
<p>在设计并发任务时，正确性始终是最重要的因素，但是您也应该考虑性能因素。在多个线程下可以正确执行的代码，但是比在单个线程上运行的相同代码慢的代码，几乎没有改进。</p>
<p>如果要翻新现有的单线程应用程序，则应始终对关键任务的性能进行一组基准测量。添加其他线程后，您应该对这些相同的任务进行新的测量，并将多线程案例与单线程案例的性能进行比较。如果在调整代码后，线程无法提高性能，则您可能需要重新考虑您的特定实现或线程的使用。</p>
<p>有关性能和用于收集指标的工具的信息，请参阅*<a href="https://developer.apple.com/library/archive/documentation/Performance/Conceptual/PerformanceOverview/Introduction/Introduction.html#//apple_ref/doc/uid/TP40001410">性能概述</a>*。有关锁和原子操作成本的特定信息，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html#//apple_ref/doc/uid/10000057i-CH15-SW7">线程成本</a>。</p>
<h4 id="线程安全和信号"><a href="#线程安全和信号" class="headerlink" title="线程安全和信号"></a>线程安全和信号</h4><p>对于线程化应用程序，没有什么比处理信号问题引起更多的恐惧或困惑了。信号是一种低级 BSD 机制，可用于将信息传递给流程或以某种方式操纵它。一些程序使用信号来检测某些事件，例如子进程的死亡。系统使用信号终止失控过程并传达其他类型的信息。</p>
<p>信号的问题不是它们的作用，而是应用程序具有多个线程时的行为。在单线程应用程序中，所有信号处理程序都在主线程上运行。在多线程应用程序中，与特定硬件错误（例如非法指令）无关的信号会传递到当时正在运行的任何线程。如果同时运行多个线程，则将信号传递给系统碰巧的任何一个。换句话说，信号可以传递到应用程序的任何线程。</p>
<p>在应用程序中实现信号处理程序的第一条规则是避免假设哪个线程正在处理信号。如果特定线程要处理给定的信号，则需要制定某种方法在信号到达时通知该线程。您不能仅仅假设从该线程安装信号处理程序将导致信号传递到同一线程。</p>
<p>有关信号和安装信号处理程序的更多信息，请参见<code>signal</code>和<code>sigaction</code>手册页。</p>
<h4 id="线程安全设计的提示"><a href="#线程安全设计的提示" class="headerlink" title="线程安全设计的提示"></a>线程安全设计的提示</h4><p>同步工具是使代码线程安全的一种有用方法，但不是万能药。与非线程性能相比，使用过多的锁和其他类型的同步原语实际上会降低应用程序的线程性能。在安全和性能之间找到合适的平衡是一门需要经验的艺术。以下各节提供了一些技巧，以帮助您为应用程序选择适当的同步级别。</p>
<h6 id="完全避免同步"><a href="#完全避免同步" class="headerlink" title="完全避免同步"></a>完全避免同步</h6><p>对于您正在从事的任何新项目，甚至对于现有项目，设计代码和数据结构来避免需要同步都是最佳的解决方案。尽管锁和其他同步工具很有用，但它们确实会影响任何应用程序的性能。而且，如果总体设计导致特定资源之间的争用较高，则您的线程可能会等待更长的时间。</p>
<p>实施并发的最佳方法是减少并发任务之间的交互和相互依赖性。如果每个任务都在其自己的私有数据集上运行，则无需使用锁来保护该数据。即使在两个任务确实共享一个公共数据集的情况下，您也可以查看对该集进行分区的方式或为每个任务提供自己的副本。当然，复制数据集也有其成本，因此在做出决定之前，您必须权衡这些成本和同步成本。</p>
<h6 id="了解同步的局限性"><a href="#了解同步的局限性" class="headerlink" title="了解同步的局限性"></a>了解同步的局限性</h6><p>同步工具仅在应用程序中的所有线程一致使用时才有效。如果创建互斥量以限制对特定资源的访问，则所有线程在尝试操作该资源之前必须获取相同的互斥量。否则会破坏互斥锁提供的保护，这是程序员的错误。</p>
<h6 id="注意代码正确性的威胁"><a href="#注意代码正确性的威胁" class="headerlink" title="注意代码正确性的威胁"></a>注意代码正确性的威胁</h6><p>使用锁和内存屏障时，应始终仔细考虑它们在代码中的位置。即使是看似位置正确的锁，实际上也会使您陷入一种错误的安全感。以下一系列示例试图通过指出看似无害的代码中的缺陷来说明这个问题。基本前提是您具有一个包含一组不可变对象的可变数组。假设您要调用数组中第一个对象的方法。您可以使用以下代码进行操作：</p>
<table>
<thead>
<tr>
<th><code>NSLock * arrayLock = GetArrayLock（）;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>NSMutableArray * myArray = GetSharedArray（）;</code></td>
</tr>
<tr>
<td><code>id anObject;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>[arrayLock锁];</code></td>
</tr>
<tr>
<td><code>anObject = [myArray objectAtIndex：0];</code></td>
</tr>
<tr>
<td><code>[arrayLock解锁]；</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>[anObject doSomething];</code></td>
</tr>
</tbody></table>
<p>由于数组是可变的，因此数组周围的锁可防止其他线程修改数组，直到获得所需的对象为止。并且由于您检索的对象本身是不可变的，因此在<code>doSomething</code>方法调用周围不需要锁定。</p>
<p>但是，前面的示例存在问题。如果释放锁并有另一个线程进入并从数组中删除所有对象，然后才有可能执行该<code>doSomething</code>方法，会发生什么？在没有垃圾回收的应用程序中，可以释放代码所持有的对象，而<code>anObject</code>指向无效的内存地址。要解决此问题，您可以决定简单地重新排列现有代码，并在调用后释放锁<code>doSomething</code>，如下所示：</p>
<table>
<thead>
<tr>
<th><code>NSLock * arrayLock = GetArrayLock（）;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>NSMutableArray * myArray = GetSharedArray（）;</code></td>
</tr>
<tr>
<td><code>id anObject;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>[arrayLock锁];</code></td>
</tr>
<tr>
<td><code>anObject = [myArray objectAtIndex：0];</code></td>
</tr>
<tr>
<td><code>[anObject doSomething];</code></td>
</tr>
<tr>
<td><code>[arrayLock解锁]；</code></td>
</tr>
</tbody></table>
<p>通过<code>doSomething</code>在锁内移动调用，您的代码可确保在调用该方法时该对象仍然有效。不幸的是，如果该<code>doSomething</code>方法需要很长时间才能执行，则可能导致您的代码长时间保持锁定，从而可能导致性能瓶颈。</p>
<p>代码的问题不是关键区域定义不正确，而是实际问题未被理解。真正的问题是仅由其他线程的存在触发的内存管理问题。因为它可以被另一个线程释放，所以更好的解决方案是<code>anObject</code>在释放锁之前保留它。该解决方案解决了对象被释放的实际问题，并且这样做不会造成潜在的性能损失。</p>
<table>
<thead>
<tr>
<th><code>NSLock * arrayLock = GetArrayLock（）;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>NSMutableArray * myArray = GetSharedArray（）;</code></td>
</tr>
<tr>
<td><code>id anObject;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>[arrayLock锁];</code></td>
</tr>
<tr>
<td><code>anObject = [myArray objectAtIndex：0];</code></td>
</tr>
<tr>
<td><code>[anObject保留]；</code></td>
</tr>
<tr>
<td><code>[arrayLock解锁]；</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>[anObject doSomething];</code></td>
</tr>
<tr>
<td><code>[anObject版本]；</code></td>
</tr>
</tbody></table>
<p>尽管以上示例本质上非常简单，但是它们确实说明了非常重要的一点。当涉及到正确性时，您必须超越明显的问题进行思考。内存管理和设计的其他方面也可能会受到多个线程的影响，因此您必须预先考虑这些问题。另外，您应该始终假设编译器在安全方面会做最坏的事情。这种了解和警惕应有助于您避免潜在的问题，并确保您的代码正常运行。</p>
<p>有关如何使程序具有线程安全性的其他示例，请参见“ <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafetySummary/ThreadSafetySummary.html#//apple_ref/doc/uid/10000057i-CH12-SW1">线程安全性摘要”</a>。</p>
<h6 id="当心死锁和活锁"><a href="#当心死锁和活锁" class="headerlink" title="当心死锁和活锁"></a>当心死锁和活锁</h6><p>每当线程尝试同时获取多个锁时，都有可能发生死锁。当两个不同的线程持有另一个线程需要的锁，然后尝试获取另一个线程持有的锁时，就会发生死锁。结果是每个线程都永久阻塞，因为它永远无法获取另一个锁。</p>
<p>活动锁类似于死锁，当两个线程竞争同一组资源时发生。在活动锁情况下，线程放弃其第一把锁，以尝试获取其第二把锁。一旦获得第二个锁，它将返回并尝试再次获取第一个锁。它之所以锁定，是因为它花费了所有时间释放一个锁并试图获取另一个锁，而不是进行任何实际工作。</p>
<p>避免出现死锁和活锁情况的最佳方法是一次只锁定一个。如果一次必须获取多个锁，则应确保其他线程不要尝试执行类似的操作。</p>
<h6 id="正确使用易失性变量"><a href="#正确使用易失性变量" class="headerlink" title="正确使用易失性变量"></a>正确使用易失性变量</h6><p>如果您已经在使用互斥锁来保护代码部分，则不要自动假定您需要使用<code>volatile</code>关键字来保护该部分中的重要变量。互斥锁包括一个内存屏障，以确保正确地排序装入和存储操作。将<code>volatile</code>关键字添加到关键部分中的变量后，每次访问该值时都会强制将其从内存中加载。两种同步技术的组合在特定情况下可能是必需的，但也会导致明显的性能损失。如果仅互斥量足以保护变量，请省略<code>volatile</code>关键字。</p>
<p>同样重要的是，不要使用易失性变量来避免使用互斥体。通常，互斥锁和其他同步机制是比易失性变量更好的方法来保护数据结构的完整性。的<code>volatile</code>关键字仅确保一个变量被从存储器加载，而不是存储在寄存器中。它不能确保您的代码正确访问该变量。</p>
<h4 id="使用原子操作"><a href="#使用原子操作" class="headerlink" title="使用原子操作"></a>使用原子操作</h4><p>非阻塞同步是一种执行某些类型的操作并避免锁定费用的方式。尽管锁是同步两个线程的有效方法，但是即使在无争议的情况下，获取锁也是相对昂贵的操作。相比之下，许多原子操作仅需花费一小部分时间即可完成，并且与锁一样有效。</p>
<p>原子运算使您可以对 32 位或 64 位值执行简单的数学和逻辑运算。这些操作依靠特殊的硬件指令（和可选的内存屏障）来确保给定的操作在再次访问受影响的内存之前完成。在多线程情况下，应始终使用包含内存屏障的原子操作来确保内存在线程之间正确同步。</p>
<p>表 4-3 列出了可用的原子数学和逻辑运算以及相应的函数名称。这些函数都在<code>/usr/include/libkern/OSAtomic.h</code>头文件中声明，您还可以在其中找到完整的语法。这些功能的 64 位版本仅在 64 位进程中可用。</p>
<table>
<thead>
<tr>
<th align="left">运作方式</th>
<th align="left">功能名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">加</td>
<td align="left"><code>OSAtomicAdd32``OSAtomicAdd32Barrier``OSAtomicAdd64``OSAtomicAdd64Barrier</code></td>
<td align="left">将两个整数值相加并将结果存储在指定的变量之一中。</td>
</tr>
<tr>
<td align="left">增量</td>
<td align="left"><code>OSAtomicIncrement32``OSAtomicIncrement32Barrier``OSAtomicIncrement64``OSAtomicIncrement64Barrier</code></td>
<td align="left">将指定的整数值增加 1。</td>
</tr>
<tr>
<td align="left">减量</td>
<td align="left"><code>OSAtomicDecrement32``OSAtomicDecrement32Barrier``OSAtomicDecrement64``OSAtomicDecrement64Barrier</code></td>
<td align="left">将指定的整数值减 1。</td>
</tr>
<tr>
<td align="left">逻辑或</td>
<td align="left"><code>OSAtomicOr32``OSAtomicOr32Barrier</code></td>
<td align="left">在指定的 32 位值和 32 位掩码之间执行逻辑或。</td>
</tr>
<tr>
<td align="left">逻辑与</td>
<td align="left"><code>OSAtomicAnd32``OSAtomicAnd32Barrier</code></td>
<td align="left">在指定的 32 位值和 32 位掩码之间执行逻辑与。</td>
</tr>
<tr>
<td align="left">逻辑异或</td>
<td align="left"><code>OSAtomicXor32``OSAtomicXor32Barrier</code></td>
<td align="left">在指定的 32 位值和 32 位掩码之间执行逻辑 XOR。</td>
</tr>
<tr>
<td align="left">比较并交换</td>
<td align="left"><code>OSAtomicCompareAndSwap32``OSAtomicCompareAndSwap32Barrier``OSAtomicCompareAndSwap64``OSAtomicCompareAndSwap64Barrier``OSAtomicCompareAndSwapPtr``OSAtomicCompareAndSwapPtrBarrier``OSAtomicCompareAndSwapInt``OSAtomicCompareAndSwapIntBarrier``OSAtomicCompareAndSwapLong``OSAtomicCompareAndSwapLongBarrier</code></td>
<td align="left">将变量与指定的旧值进行比较。如果两个值相等，则此函数将指定的新值分配给变量；否则，它什么都不做。比较和赋值作为一个原子操作完成，并且该函数返回一个布尔值，该布尔值指示是否实际发生了交换。</td>
</tr>
<tr>
<td align="left">测试并设定</td>
<td align="left"><code>OSAtomicTestAndSet``OSAtomicTestAndSetBarrier</code></td>
<td align="left">测试指定变量中的某个位，将该位设置为 1，然后将旧位的值作为布尔值返回。根据<code>(0x80 &gt;&gt; (n &amp; 7))</code>字节的公式测试位，<code>((char*)address + (n &gt;&gt; 3))</code>其中<code>n</code>是位号，<code>address</code>是指向变量的指针。该公式有效地将变量分解为 8 位大小的块，并按相反的顺序对每个块中的位进行排序。例如，要测试 32 位整数的最低位（位 0），您实际上应将位数指定为 7；同样，要测试最高阶位（位 32），请为位号指定 24。</td>
</tr>
<tr>
<td align="left">测试并清除</td>
<td align="left"><code>OSAtomicTestAndClear``OSAtomicTestAndClearBarrier</code></td>
<td align="left">测试指定变量中的某个位，将该位设置为 0，然后将旧位的值作为布尔值返回。根据<code>(0x80 &gt;&gt; (n &amp; 7))</code>字节的公式测试位，<code>((char*)address + (n &gt;&gt; 3))</code>其中<code>n</code>是位号，<code>address</code>是指向变量的指针。该公式有效地将变量分解为 8 位大小的块，并按相反的顺序对每个块中的位进行排序。例如，要测试 32 位整数的最低位（位 0），您实际上应将位数指定为 7；同样，要测试最高阶位（位 32），请为位号指定 24。</td>
</tr>
</tbody></table>
<p>大多数原子函数的行为应相对简单明了，并具有您所期望的。但是，清单 4-1 显示了原子测试设置和比较交换操作的行为，这些操作稍微复杂一些。对<code>OSAtomicTestAndSet</code>函数的前三个调用说明了对整数值使用的位操作公式及其结果可能与您期望的不同。最后两个调用显示了该<code>OSAtomicCompareAndSwap32</code>函数的行为。在所有情况下，当没有其他线程在操纵这些值时，将在无争议的情况下调用这些函数。</p>
<p><strong>清单 4-1</strong> 执行原子操作</p>
<table>
<thead>
<tr>
<th><code>int32_t theValue = 0;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>OSAtomicTestAndSet（0，＆theValue）;</code></td>
</tr>
<tr>
<td><code>// theValue现在为128。</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>theValue = 0;</code></td>
</tr>
<tr>
<td><code>OSAtomicTestAndSet（7，＆theValue）;</code></td>
</tr>
<tr>
<td><code>// theValue现在为1。</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>theValue = 0;</code></td>
</tr>
<tr>
<td><code>OSAtomicTestAndSet（15，＆theValue）</code></td>
</tr>
<tr>
<td><code>// theValue现在为256。</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>OSAtomicCompareAndSwap32（256，512，＆theValue）;</code></td>
</tr>
<tr>
<td><code>// theValue现在为512。</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>OSAtomicCompareAndSwap32（256，1024，＆theValue）;</code></td>
</tr>
<tr>
<td><code>// theValue仍然是512。</code></td>
</tr>
</tbody></table>
<p>有关原子操作的信息，请参见<code>atomic</code>手册页和<code>/usr/include/libkern/OSAtomic.h</code>头文件。</p>
<h4 id="使用锁"><a href="#使用锁" class="headerlink" title="使用锁"></a>使用锁</h4><p>锁是用于线程编程的基本同步工具。锁使您可以轻松保护大部分代码，从而可以确保该代码的正确性。OS X 和 iOS 为所有应用程序类型提供基本互斥锁，并且 Foundation 框架为特殊情况定义了互斥锁的一些其他变体。以下各节说明如何使用这些锁类型中的几种。</p>
<h6 id="使用-POSIX-互斥锁"><a href="#使用-POSIX-互斥锁" class="headerlink" title="使用 POSIX 互斥锁"></a>使用 POSIX 互斥锁</h6><p>POSIX 互斥锁在任何应用程序中都非常易于使用。要创建互斥锁，您需要声明并初始化一个<code>pthread_mutex_t</code>结构。要锁定和解锁互斥锁，请使用<code>pthread_mutex_lock</code> 和 <code>pthread_mutex_unlock</code>功能。清单 4-2 显示了初始化和使用 POSIX 线程互斥锁所需的基本代码。完成锁后，只需致电<code>pthread_mutex_destroy</code> 释放锁数据结构。</p>
<p><strong>清单 4-2</strong> 使用互斥锁</p>
<table>
<thead>
<tr>
<th><code>pthread_mutex_t互斥体;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>void MyInitFunction（）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>pthread_mutex_init（＆mutex，NULL）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>void MyLockingFunction（）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>pthread_mutex_lock（＆mutex）;</code></td>
</tr>
<tr>
<td><code>// 做工作。</code></td>
</tr>
<tr>
<td><code>pthread_mutex_unlock（＆mutex）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p><strong>注意：</strong> 前面的代码是一个简化的示例，旨在显示 POSIX 线程互斥函数的基本用法。您自己的代码应检查这些函数返回的错误代码并进行适当处理。</p>
<h6 id="使用-NSLock-类"><a href="#使用-NSLock-类" class="headerlink" title="使用 NSLock 类"></a>使用 NSLock 类</h6><p>一个 <code>NSLock</code>对象为 Cocoa 应用程序实现基本互斥量。所有锁（包括<code>NSLock</code>）的接口实际上都是由<code>NSLocking</code>协议定义的，协议定义了<code>lock</code>和<code>unlock</code>方法。您可以像使用任何互斥锁一样使用这些方法来获取和释放锁。</p>
<p>除了标准的锁定行为外，<code>NSLock</code>该类还添加了<code>tryLock</code> 和 <code>lockBeforeDate:</code>方法。该<code>tryLock</code>方法尝试获取锁，但是如果锁不可用则不会阻塞；相反，该方法仅返回<code>NO</code>。如果未在指定的时间限制内获取锁，则该<code>lockBeforeDate:</code>方法尝试获取锁，但取消阻塞线程（并返回<code>NO</code>）。</p>
<p>下面的示例演示如何使用<code>NSLock</code>对象来协调视觉显示的更新，该视觉显示的数据是由多个线程计算的。如果线程无法立即获取锁，则仅继续执行计算，直到可以获取锁并更新显示。</p>
<table>
<thead>
<tr>
<th><code>BOOL moreToDo = YES;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>NSLock * theLock = [[NSLock alloc] init];</code></td>
</tr>
<tr>
<td><code>...</code></td>
</tr>
<tr>
<td><code>而（moreToDo）&#123;</code></td>
</tr>
<tr>
<td><code>/ *再进行一次计算* /</code></td>
</tr>
<tr>
<td><code>/ *，直到没有其他事情可做为止。* /</code></td>
</tr>
<tr>
<td><code>如果（[theLock tryLock]）&#123;</code></td>
</tr>
<tr>
<td><code>/ *更新所有线程使用的显示。* /</code></td>
</tr>
<tr>
<td><code>[theLock解锁]；</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<h6 id="使用-synchronized-指令"><a href="#使用-synchronized-指令" class="headerlink" title="使用@synchronized 指令"></a>使用@synchronized 指令</h6><p>该<code>@synchronized</code>指令是在 Objective-C 代码中动态创建互斥锁的便捷方法。该<code>@synchronized</code>指令执行任何其他互斥锁将执行的操作-防止不同的线程同时获取同一锁。但是，在这种情况下，您不必直接创建互斥量或锁定对象。相反，您只需将任何 Objective-C 对象用作锁定令牌，如以下示例所示：</p>
<table>
<thead>
<tr>
<th><code>-（void）myMethod：（id）anObj</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>@synchronized（anObj）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//大括号之间的所有内容均受@synchronized指令保护。</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>传递给<code>@synchronized</code>指令的对象是用于区分受保护块的唯一标识符。如果在两个不同的线程中执行上述方法，并<code>anObj</code>在每个线程上为参数传递一个不同的对象，则每个线程将获得其锁并继续进行处理而不会被另一个线程阻塞。但是，如果在两种情况下都传递相同的对象，则其中一个线程将首先获取锁，而另一个线程将阻塞，直到第一个线程完成关键部分。</p>
<p>作为一种预防措施，该<code>@synchronized</code>块会向受保护的代码隐式添加一个异常处理程序。如果抛出异常，此处理程序将自动释放互斥量。这意味着，为了使用该<code>@synchronized</code>指令，还必须在代码中启用 Objective-C 异常处理。如果您不希望由隐式异常处理程序引起的额外开销，则应考虑使用锁类。</p>
<p>有关<code>@synchronized</code>指令的更多信息，请参见*<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjectiveC/Introduction/introObjectiveC.html#//apple_ref/doc/uid/TP30001163">Objective-C 编程语言</a>*。</p>
<h6 id="使用其他可可锁"><a href="#使用其他可可锁" class="headerlink" title="使用其他可可锁"></a>使用其他可可锁</h6><p>以下各节描述了使用其他几种类型的可可锁的过程。</p>
<p>######## 使用 NSRecursiveLock 对象</p>
<p>该<code>NSRecursiveLock</code>班定义一个锁，同一线程可以多次获取该锁，而不会导致线程死锁。递归锁跟踪成功获取了多少次。每次成功获取锁，必须通过相应的调用来平衡以解锁该锁。仅当所有锁定和解锁调用均达到平衡时，才实际释放该锁定，以便其他线程可以获取它。</p>
<p>顾名思义，这种类型的锁通常在递归函数内部使用，以防止递归阻塞线程。在非递归情况下，您可以类似地使用它来调用函数，这些函数的语义要求它们也具有锁定功能。这是一个简单的递归函数示例，该函数通过递归获取锁。如果您没有<code>NSRecursiveLock</code>为此代码使用对象，则当再次调用该函数时，线程将死锁。</p>
<table>
<thead>
<tr>
<th><code>NSRecursiveLock * theLock = [[NSRecursiveLock alloc] init];</code></th>
</tr>
</thead>
<tbody><tr>
<td>``</td>
</tr>
<tr>
<td><code>void MyRecursiveFunction（int value）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>[theLock锁];</code></td>
</tr>
<tr>
<td><code>如果（值！= 0）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>- 值;</code></td>
</tr>
<tr>
<td><code>MyRecursiveFunction（value）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>[theLock解锁]；</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>MyRecursiveFunction（5）;</code></td>
</tr>
</tbody></table>
<p><strong>注意：</strong> 由于在所有锁调用与解锁调用平衡之前不会释放递归锁，因此您应仔细权衡使用性能锁的决定与潜在的性能影响。长时间持有任何锁都可能导致其他线程阻塞，直到递归完成为止。如果您可以重写代码以消除递归或不需要使用递归锁，则可能会获得更好的性能。</p>
<p>######## 使用 NSConditionLock 对象</p>
<p>一个<code>NSConditionLock</code>对象定义了一个互斥锁，该互斥锁可以使用特定的值进行锁定和解锁。您不应将这种类型的锁与条件混淆（请参阅<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-126424">条件</a>）。该行为在某种程度上类似于条件，但实现方式却大不相同。</p>
<p>通常，<code>NSConditionLock</code>当线程需要按特定顺序执行任务时（例如，当一个线程产生另一个线程消耗的数据时），您可以使用一个对象。生产者执行时，消费者使用特定于您的程序的条件来获取锁。（条件本身只是您定义的整数值。）生产者完成时，它将解锁锁，并将锁定条件设置为适当的整数值以唤醒使用者线程，然后消费者线程继续处理数据。</p>
<p><code>NSConditionLock</code>对象响应的锁定和解锁方法可以任意组合使用。例如，您可以将一条<code>lock</code>消息与<code>unlockWithCondition:</code>或 <code>lockWhenCondition:</code>的消息<code>unlock</code>。当然，后一种组合可以解锁该锁，但可能不会释放等待特定条件值的任何线程。</p>
<p>下面的示例显示如何使用条件锁来处理生产者－消费者问题。想象一个应用程序包含一个数据队列。生产者线程将数据添加到队列，而消费者线程从队列中提取数据。生产者不必等待特定的条件，但是必须等待锁可用，以便可以安全地将数据添加到队列中。</p>
<table>
<thead>
<tr>
<th><code>id condLock = [[NSConditionLock alloc] initWithCondition：NO_DATA];</code></th>
</tr>
</thead>
<tbody><tr>
<td>``</td>
</tr>
<tr>
<td><code>而（真）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>[condLock锁定]；</code></td>
</tr>
<tr>
<td><code>/ *将数据添加到队列。* /</code></td>
</tr>
<tr>
<td><code>[condLock unlockWithCondition：HAS_DATA];</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>因为锁的初始条件设置为<code>NO_DATA</code>，所以生产者线程应该在最初获取锁时没有任何麻烦。它用数据填充队列，并将条件设置为<code>HAS_DATA</code>。在后续迭代期间，生产者线程可以在到达时添加新数据，而不管队列是空还是仍有一些数据。它唯一阻止的时间是使用者线程从队列中提取数据。</p>
<p>因为使用者线程必须要处理数据，所以它使用特定条件在队列上等待。当生产者将数据放入队列时，消费者线程将唤醒并获取其锁。然后，它可以从队列中提取一些数据并更新队列状态。以下示例显示了使用者线程处理循环的基本结构。</p>
<table>
<thead>
<tr>
<th><code>而（真）</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>[condLock lockWhenCondition：HAS_DATA];</code></td>
</tr>
<tr>
<td><code>/ *从队列中删除数据。* /</code></td>
</tr>
<tr>
<td><code>[condLock unlockWithCondition：（isEmpty？NO_DATA：HAS_DATA）]；</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//在本地处理数据。</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>######## 使用 NSDistributedLock 对象</p>
<p>该<code>NSDistributedLock</code>班 可以被多个主机上的多个应用程序用来限制对某些共享资源（例如文件）的访问。该锁本身实际上是使用文件系统项（如文件或目录）实现的互斥锁。为了使<code>NSDistributedLock</code>对象可用，该锁必须可由使用它的所有应用程序写入。这通常意味着将其放置在运行该应用程序的所有计算机都可以访问的文件系统上。</p>
<p>与其他类型的锁不同，<code>NSDistributedLock</code>它不符合<code>NSLocking</code>协议，因此没有<code>lock</code>方法。一种<code>lock</code>方法将阻止线程的执行，并要求系统以预定速率轮询锁。与其对您的代码强加惩罚，不如<code>NSDistributedLock</code>提供<code>tryLock</code> 方法，让您决定是否要轮询。</p>
<p>因为它是使用文件系统实现的，所以<code>NSDistributedLock</code>除非所有者明确释放对象，否则不会释放对象。如果您的应用程序在持有分布式锁的同时崩溃，则其他客户端将无法访问受保护的资源。在这种情况下，您可以使用<code>breakLock</code>打破现有锁的方法，以便您可以获取它。但是，通常应该避免破坏锁，除非您确定拥有进程已死并且无法释放锁。</p>
<p>与其他类型的锁一样，使用<code>NSDistributedLock</code>完对象后，可以通过调用<code>unlock</code>方法来释放它。</p>
<h4 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h4><p>条件是一种特殊类型的锁，可用于同步操作必须执行的顺序。它们与互斥锁有一个微妙的区别。等待某个条件的线程保持阻塞状态，直到该条件被另一个线程显式发出信号为止。</p>
<p>由于实现操作系统所涉及的微妙之处，即使代码未真正发出条件锁，也允许伪造成功返回条件锁。为了避免由这些虚假信号引起的问题，您应始终将谓词与条件锁结合使用。谓词是确定线程继续执行是否安全的更具体方法。该条件只是让您的线程处于睡眠状态，直到可以由信令线程设置谓词为止。</p>
<p>以下各节说明如何在代码中使用条件。</p>
<h6 id="使用-NSCondition-类"><a href="#使用-NSCondition-类" class="headerlink" title="使用 NSCondition 类"></a>使用 NSCondition 类</h6><p>的<code>NSCondition</code>类提供相同的语义 POSIX 的条件，但在单个对象包装二者所需的锁和条件数据结构。结果是可以像互斥锁一样锁定对象，然后像条件一样等待。</p>
<p>清单 4-3 显示了一个代码片段，演示了等待<code>NSCondition</code>对象的事件序列。该<code>cocoaCondition</code>变量包含一个<code>NSCondition</code>对象，并且该<code>timeToDoWork</code>变量是一个整数，在发出该信号之前立即从另一个线程递增。</p>
<p><strong>清单 4-3</strong> 使用可可条件</p>
<table>
<thead>
<tr>
<th><code>[cocoaCondition锁];</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>一会儿（timeToDoWork &lt;= 0）</code></td>
</tr>
<tr>
<td><code>[cocoaCondition等待]；</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>timeToDoWork--;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//在这里做真实的工作。</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>[cocoaCondition解锁]；</code></td>
</tr>
</tbody></table>
<p>清单 4-4 显示了用于发出可可条件信号并增加谓词变量的代码。您应该始终在发出信号之前锁定该条件。</p>
<p><strong>清单 4-4</strong> 发出可可状况信号</p>
<table>
<thead>
<tr>
<th><code>[cocoaCondition锁];</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>timeToDoWork ++;</code></td>
</tr>
<tr>
<td><code>[可可状态信号]；</code></td>
</tr>
<tr>
<td><code>[cocoaCondition解锁]；</code></td>
</tr>
</tbody></table>
<h6 id="使用-POSIX-条件"><a href="#使用-POSIX-条件" class="headerlink" title="使用 POSIX 条件"></a>使用 POSIX 条件</h6><p>POSIX 线程条件锁需要同时使用条件数据结构和互斥量。尽管两个锁结构是分开的，但互斥锁在运行时与条件结构密切相关。等待信号的线程应始终一起使用相同的互斥锁和条件结构。更改配对会导致错误。</p>
<p>清单 4-5 显示了条件和谓词的基本初始化和用法。在初始化条件和互斥锁之后，等待线程使用该<code>ready_to_go</code>变量作为其谓词进入 while 循环。仅当谓词已设置且随后发出条件通知时，等待线程才会唤醒并开始执行其工作。</p>
<p><strong>清单 4-5</strong> 使用 POSIX 条件</p>
<table>
<thead>
<tr>
<th><code>pthread_mutex_t互斥体;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>pthread_cond_t条件;</code></td>
</tr>
<tr>
<td><code>布尔值ready_to_go = true;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>void MyCondInitFunction（）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>pthread_mutex_init（＆mutex）;</code></td>
</tr>
<tr>
<td><code>pthread_cond_init（＆condition，NULL）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>void MyWaitOnConditionFunction（）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//锁定互斥锁。</code></td>
</tr>
<tr>
<td><code>pthread_mutex_lock（＆mutex）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//如果谓词已经设置，则while循环被绕过；</code></td>
</tr>
<tr>
<td><code>//否则，线程将休眠直到谓词被设置。</code></td>
</tr>
<tr>
<td><code>while（ready_to_go == false）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>pthread_cond_wait（＆condition，＆mutex）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>// 做工作。（互斥锁应保持锁定状态。）</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//重置谓词并释放互斥量。</code></td>
</tr>
<tr>
<td><code>ready_to_go = false;</code></td>
</tr>
<tr>
<td><code>pthread_mutex_unlock（＆mutex）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>信令线程既负责设置谓词，也负责将信号发送到条件锁。 清单 4-6 显示了实现此行为的代码。在此示例中，条件在互斥锁内部发出信号，以防止在等待条件的线程之间发生竞争条件。</p>
<p><strong>清单 4-6 发</strong> 信号通知条件锁定</p>
<table>
<thead>
<tr>
<th><code>void SignalThreadUsingCondition（）</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//此时，应该有另一个线程要做的工作。</code></td>
</tr>
<tr>
<td><code>pthread_mutex_lock（＆mutex）;</code></td>
</tr>
<tr>
<td><code>ready_to_go = true;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//通知另一个线程开始工作。</code></td>
</tr>
<tr>
<td><code>pthread_cond_signal（＆condition）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>pthread_mutex_unlock（＆mutex）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p><strong>注意：</strong> 前面的代码是一个简化的示例，旨在显示 POSIX 线程条件函数的基本用法。您自己的代码应检查这些函数返回的错误代码并进行适当处理。</p>
<h2 id="线程安全摘要"><a href="#线程安全摘要" class="headerlink" title="线程安全摘要"></a>线程安全摘要</h2><p>本附录描述了 OS X 和 iOS 中某些关键框架的高级线程安全性。本附录中的信息可能会更改。</p>
<h4 id="可可"><a href="#可可" class="headerlink" title="可可"></a>可可</h4><p>从多个线程使用可可的准则包括：</p>
<ul>
<li>不可变对象通常是线程安全的。创建它们之后，就可以安全地在线程之间传递这些对象。另一方面，可变对象通常不是线程安全的。要在线程应用程序中使用可变对象，应用程序必须适当地同步。有关更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafetySummary/ThreadSafetySummary.html#//apple_ref/doc/uid/20000736-126010">可变与不可变</a>。</li>
<li>许多被认为“线程不安全”的对象仅在多个线程中使用是不安全的。只要一次仅一个线程，就可以从任何线程使用许多这些对象。专门调出应用程序主线程的对象就这样被调出。</li>
<li>应用程序的主线程负责处理事件。尽管如果事件路径中包含其他线程，Application Kit 仍可以继续工作，但是操作可能会不按顺序进行。</li>
<li>如果要使用线程绘制视图，请在的<code>lockFocusIfCanDraw</code>和<code>unlockFocus</code>方法之间将所有绘制代码括在括号中<code>NSView</code>。</li>
<li>要将 POSIX 线程与 Cocoa 一起使用，必须首先将 Cocoa 置于多线程模式。有关更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html#//apple_ref/doc/uid/20000738-125024">在 Cocoa 应用程序中使用 POSIX 线程</a>。</li>
</ul>
<h6 id="基础框架线程安全"><a href="#基础框架线程安全" class="headerlink" title="基础框架线程安全"></a>基础框架线程安全</h6><p>有一个误解，认为 Foundation 框架是线程安全的，而 Application Kit 框架不是。不幸的是，这是一个粗略的概括并且有些误导。每个框架都有线程安全的区域和不是线程安全的区域。以下各节描述了 Foundation 框架的一般线程安全性。</p>
<p>######## 线程安全的类和函数</p>
<p>以下类和函数通常被认为是线程安全的。您可以从多个线程使用同一实例，而无需先获取锁。</p>
<ul>
<li><code>NSArray</code></li>
<li><code>NSAssertionHandler</code></li>
<li><code>NSAttributedString</code></li>
<li><code>NSBundle</code></li>
<li><code>NSCalendar</code></li>
<li><code>NSCalendarDate</code></li>
<li><code>NSCharacterSet</code></li>
<li><code>NSConditionLock</code></li>
<li><code>NSConnection</code></li>
<li><code>NSData</code></li>
<li><code>NSDate</code></li>
<li><code>NSDateFormatter</code></li>
<li><code>NSDecimal</code> 功能</li>
<li><code>NSDecimalNumber</code></li>
<li><code>NSDecimalNumberHandler</code></li>
<li><code>NSDeserializer</code></li>
<li><code>NSDictionary</code></li>
<li><code>NSDistantObject</code></li>
<li><code>NSDistributedLock</code></li>
<li><code>NSDistributedNotificationCenter</code></li>
<li><code>NSException</code></li>
<li><code>NSFileManager</code></li>
<li><code>NSFormatter</code></li>
<li><code>NSHost</code></li>
<li><code>NSJSONSerialization</code></li>
<li><code>NSLock</code></li>
<li><code>NSLog</code>/<code>NSLogv</code></li>
<li><code>NSMethodSignature</code></li>
<li><code>NSNotification</code></li>
<li><code>NSNotificationCenter</code></li>
<li><code>NSNumber</code></li>
<li><code>NSNumberFormatter</code></li>
<li><code>NSObject</code></li>
<li><code>NSOrderedSet</code></li>
<li><code>NSPortCoder</code></li>
<li><code>NSPortMessage</code></li>
<li><code>NSPortNameServer</code></li>
<li><code>NSProgress</code></li>
<li><code>NSProtocolChecker</code></li>
<li><code>NSProxy</code></li>
<li><code>NSRecursiveLock</code></li>
<li><code>NSSet</code></li>
<li><code>NSString</code></li>
<li><code>NSThread</code></li>
<li><code>NSTimer</code></li>
<li><code>NSTimeZone</code></li>
<li><code>NSUserDefaults</code></li>
<li><code>NSValue</code></li>
<li><code>NSXMLParser</code></li>
<li>对象分配和保留计数功能</li>
<li>区域和记忆功能</li>
</ul>
<p>######## 线程不安全类</p>
<p>以下类和函数通常不是线程安全的。在大多数情况下，您可以从任何线程使用这些类，只要一次仅从一个线程使用它们即可。检查类文档以获取更多详细信息。</p>
<ul>
<li><code>NSArchiver</code></li>
<li><code>NSAutoreleasePool</code></li>
<li><code>NSCoder</code></li>
<li><code>NSCountedSet</code></li>
<li><code>NSEnumerator</code></li>
<li><code>NSFileHandle</code></li>
<li><code>NSHashTable</code> 功能</li>
<li><code>NSInvocation</code></li>
<li><code>NSMapTable</code> 功能</li>
<li><code>NSMutableArray</code></li>
<li><code>NSMutableAttributedString</code></li>
<li><code>NSMutableCharacterSet</code></li>
<li><code>NSMutableData</code></li>
<li><code>NSMutableDictionary</code></li>
<li><code>NSMutableOrderedSet</code></li>
<li><code>NSMutableSet</code></li>
<li><code>NSMutableString</code></li>
<li><code>NSNotificationQueue</code></li>
<li><code>NSPipe</code></li>
<li><code>NSPort</code></li>
<li><code>NSProcessInfo</code></li>
<li><code>NSRunLoop</code></li>
<li><code>NSScanner</code></li>
<li><code>NSSerializer</code></li>
<li><code>NSTask</code></li>
<li><code>NSUnarchiver</code></li>
<li><code>NSUndoManager</code></li>
<li>用户名和主目录功能</li>
</ul>
<p>请注意，尽管<code>NSArchiver</code>，<code>NSCoder</code>和<code>NSEnumerator</code>对象本身都是线程安全的，但在此处列出它们是因为在使用它们时更改由它们包装的数据对象并不安全。例如，对于归档器，更改要归档的对象图是不安全的。对于枚举，任何线程更改枚举集合都是不安全的。</p>
<p>######## 仅主线程类</p>
<p>只能在应用程序的主线程中使用以下类。</p>
<ul>
<li><code>NSAppleScript</code></li>
</ul>
<p>######## 可变与不可变</p>
<p>不变的对象通常是线程安全的；创建它们之后，就可以安全地在线程之间传递这些对象。当然，当使用不可变对象时，您仍然需要记住正确使用引用计数。如果不当释放了一个未保留的对象，则稍后可能会导致异常。</p>
<p>可变对象通常不是线程安全的。要在线程应用程序中使用可变对象，应用程序必须使用锁同步对它们的访问。（有关更多信息，请参阅<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW2">原子操作</a>）。通常，当涉及到突变时，收集类（例如<code>NSMutableArray</code>，<code>NSMutableDictionary</code>）不是线程安全的。也就是说，如果一个或多个线程正在更改同一阵列，则可能会出现问题。您必须锁定发生读写的地方，以确保线程安全。</p>
<p>即使某个方法声称要返回一个不可变的对象，您也绝不能简单地假设返回的对象是不可变的。根据方法的实现，返回的对象可能是可变的或不可变的。例如，返回类型为的方法<code>NSString</code>可能会<code>NSMutableString</code>由于其实现而实际上返回 a 。如果要保证所拥有的对象是不可变的，则应制作不可变的副本。</p>
<p>######## 再入</p>
<p>只有在操作“调出”同一对象或不同对象上的其他操作的情况下，才可以重入。保留和释放物体是一种有时被忽略的“召唤”。</p>
<p>下表列出了 Foundation 框架中明确可重入的部分。所有其他类别可能会也可能不会重入，或者将来可能会重入。尚未对折返进行完整的分析，此列表可能并不详尽。</p>
<ul>
<li>分布式对象</li>
<li><code>NSConditionLock</code></li>
<li><code>NSDistributedLock</code></li>
<li><code>NSLock</code></li>
<li><code>NSLog</code>/<code>NSLogv</code></li>
<li><code>NSNotificationCenter</code></li>
<li><code>NSRecursiveLock</code></li>
<li><code>NSRunLoop</code></li>
<li><code>NSUserDefaults</code></li>
</ul>
<p>######## 类初始化</p>
<p>Objective-C 运行时系统发送一个 <code>initialize</code>在类收到任何其他消息之前，向每个类对象发送消息。这使该类有机会设置其运行时环境在使用之前。在多线程应用程序中，运行时保证只有一个线程（恰好将第一条消息发送给类的线程）执行该<code>initialize</code>方法。如果在第一个线程仍在该<code>initialize</code>方法中时第二个线程尝试向该类发送消息，则第二个线程将阻塞直到该<code>initialize</code>方法完成执行。同时，第一个线程可以继续调用该类上的其他方法。该<code>initialize</code>方法不应依赖于该类的第二个线程调用方法。如果是这样，则两个线程将陷入僵局。</p>
<p>由于 OS X 版本 10.1.x 和更早版本中的错误，一个线程可以在另一个线程完成执行该类的<code>initialize</code>方法之前将消息发送给该类。然后，线程可以访问尚未完全初始化的值，这可能会使应用程序崩溃。如果遇到此问题，则需要引入锁以防止在初始化值之前访问值，或者强制类在成为多线程之前对其进行初始化。</p>
<p>######## 自动释放池</p>
<p>每个线程维护自己的<code>NSAutoreleasePool</code>对象堆栈。Cocoa 希望在当前线程的堆栈上始终有一个自动释放池。如果池不可用，则不会释放对象，并且会泄漏内存。一个<code>NSAutoreleasePool</code>对象会自动创建并在基于应用程序套件应用的主线程摧毁，但辅助线程（和基金会只应用）必须在使用前，可可创建自己的。如果您的线程是长期存在的，并可能生成许多自动释放的对象，您应该定期销毁并创建自动释放池（就像 Application Kit 在主线程上一样）；否则，自动释放的对象会堆积，并且您的内存占用也会增加。如果分离的线程不使用 Cocoa，则无需创建自动释放池。</p>
<p>######## 运行循环</p>
<p>每个线程只有一个运行循环。但是，每个运行循环以及每个线程都有自己的一组输入模式，这些输入模式确定运行运行循环时侦听哪些输入源。一个运行循环中定义的输入模式不会影响另一个运行循环中定义的输入模式，即使它们的名称相同。</p>
<p>如果您的应用程序基于 Application Kit，则主线程的运行循环将自动运行，但是辅助线程（和仅基金会的应用程序）必须自己运行运行循环。如果分离的线程未进入运行循环，则该线程将在分离的方法完成执行后立即退出。</p>
<p>尽管有一些外表，但<code>NSRunLoop</code>该类不是线程安全的。您只能从拥有它的线程中调用此类的实例方法。</p>
<h6 id="应用套件框架线程安全"><a href="#应用套件框架线程安全" class="headerlink" title="应用套件框架线程安全"></a>应用套件框架线程安全</h6><p>以下各节描述了 Application Kit 框架的一般线程安全性。</p>
<p>######## 线程不安全类</p>
<p>以下类和函数通常不是线程安全的。在大多数情况下，您可以从任何线程使用这些类，只要一次仅从一个线程使用它们即可。检查类文档以获取更多详细信息。</p>
<ul>
<li><code>NSGraphicsContext</code>。有关更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafetySummary/ThreadSafetySummary.html#//apple_ref/doc/uid/10000057i-CH12-126712">NSGraphicsContext 限制</a>。</li>
<li><code>NSImage</code>。有关更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafetySummary/ThreadSafetySummary.html#//apple_ref/doc/uid/10000057i-CH12-126728">NSImage 限制</a>。</li>
<li><code>NSResponder</code></li>
<li><code>NSWindow</code>及其所有后代。有关更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafetySummary/ThreadSafetySummary.html#//apple_ref/doc/uid/10000057i-CH12-123364">窗口限制</a>。</li>
</ul>
<p>######## 仅主线程类</p>
<p>只能在应用程序的主线程中使用以下类。</p>
<ul>
<li><code>NSCell</code> 及其所有后代</li>
<li><code>NSView</code>及其所有后代。有关更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafetySummary/ThreadSafetySummary.html#//apple_ref/doc/uid/10000057i-CH12-123427">NSView 限制</a>。</li>
</ul>
<p>######## 窗口限制</p>
<p>您可以在辅助线程上创建一个窗口。应用程序包确保与窗口关联的数据结构在主线程上被重新分配，以避免出现竞争情况。窗口对象可能会在同时处理大量窗口的应用程序中泄漏。</p>
<p>您可以在辅助线程上创建模式窗口。当主线程运行模式循环时，应用程序工具包将阻止正在调用的辅助线程。</p>
<p>######## 事件处理限制</p>
<p>应用程序的主线程负责处理事件。主线程是的<code>run</code>方法中被阻塞的线程<code>NSApplication</code>，通常在应用程序的<code>main</code>函数中调用。如果事件路径中涉及其他线程，则 Application Kit 继续工作时，操作可能会不按顺序进行。例如，如果两个不同的线程正在响应按键事件，则可能会乱序接收按键。通过让主线程处理事件，您可以获得更一致的用户体验。接收到事件后，如果需要，可以将事件调度到辅助线程进行进一步处理。</p>
<p>您可以从辅助线程调用<code>postEvent:atStart:</code>方法，<code>NSApplication</code>以将事件发布到主线程的事件队列中。但是，不能保证有关用户输入事件的顺序。应用程序的主线程仍负责处理事件队列中的事件。</p>
<p>######## 绘图限制</p>
<p>使用其图形功能和类（包括<code>NSBezierPath</code>和<code>NSString</code>类）进行绘制时，Application Kit 通常是线程安全的。以下各节介绍了使用特定类的详细信息。有关绘图和螺纹的更多信息，请参见《_<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CocoaDrawingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40003290">可可绘图指南》</a>_。</p>
<p>########## NSView 限制</p>
<p>该<code>NSView</code>班通常不是线程安全的。您<code>NSView</code>仅应从应用程序的主线程创建，销毁，调整大小，移动对象并执行其他操作。从辅助线程进行绘图是线程安全的，只要将绘图调用与<code>lockFocusIfCanDraw</code> 和 <code>unlockFocus</code>。</p>
<p>如果一个应用程序的一个次级线程想要使视图的部分是主要的线程上重新绘制，它必须这样做使用的方法，如<code>display</code>，<code>setNeedsDisplay:</code>，<code>setNeedsDisplayInRect:</code>，或<code>setViewsNeedDisplay:</code>。相反，它应该向主线程发送一条消息，或使用<code>performSelectorOnMainThread:withObject:waitUntilDone:</code> 方法代替。</p>
<p>视图系统的图形状态（gstates）是每个线程的。使用图形状态曾经是在单线程应用程序上获得更好绘图性能的一种方式，但是现在不再如此。错误使用图形状态实际上会导致绘制代码的效率低于在主线程中绘制的效率。</p>
<p>########## NSGraphicsContext 限制</p>
<p>该<code>NSGraphicsContext</code>班表示基础图形系统提供的绘图上下文。每个<code>NSGraphicsContext</code>实例都拥有自己独立的图形状态：坐标系，剪辑，当前字体等。在每个<code>NSWindow</code>实例的主线程上自动创建该类的实例。如果您从辅助线程进行任何绘图，<code>NSGraphicsContext</code>则会专门为该线程创建一个新的实例。</p>
<p>如果从辅助线程进行任何绘图，则必须手动刷新绘图调用。Cocoa 不会自动使用从辅助线程绘制的内容来更新视图，因此您需要在完成绘制时调用<code>flushGraphics</code>方法<code>NSGraphicsContext</code>。如果您的应用程序仅从主线程绘制内容，则无需刷新绘制调用。</p>
<p>########## NSImage 限制</p>
<p>一个线程可以创建一个<code>NSImage</code>对象，绘制到图像缓冲区，然后将其传递给主线程进行绘制。基础图像缓存在所有线程之间共享。有关图像以及缓存如何工作的更多信息，请参见*<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CocoaDrawingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40003290">Cocoa Drawing Guide</a>*。</p>
<h6 id="核心数据框架"><a href="#核心数据框架" class="headerlink" title="核心数据框架"></a>核心数据框架</h6><p>尽管有一些使用注意事项，但 Core Data 框架通常支持线程化。有关这些警告信息，请参阅并发与核心数据的*<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreData/index.html#//apple_ref/doc/uid/TP40001075">核心数据编程指南</a>*。</p>
<h4 id="核心基础"><a href="#核心基础" class="headerlink" title="核心基础"></a>核心基础</h4><p>Core Foundation 具有足够的线程安全性，因此，如果谨慎编程，就不会遇到与竞争线程有关的任何问题。在常见情况下，例如查询，保留，释放和传递不可变对象时，它是线程安全的。即使是可能从多个线程中查询的中央共享对象，也是可靠的线程安全的。</p>
<p>像 Cocoa 一样，当涉及对象或其内容的突变时，Core Foundation 也不是线程安全的。例如，正如您可能期望的那样，修改可变数据或可变数组对象不是线程安全的，但修改不可变数组内部的对象也不是线程安全的。原因之一就是性能，这在这些情况下至关重要。此外，通常无法在此级别上实现绝对线程安全。例如，您不能排除由于保留从集合中获取的对象而导致的不确定行为。在进行调用以保留包含的对象之前，可能会释放集合本身。</p>
<p>在要从多个线程访问和变异的 Core Foundation 对象的情况下，您的代码应通过在访问点使用锁来防止同时访问。例如，枚举 Core Foundation 数组对象的代码应在枚举块周围使用适当的锁定调用，以防止其他人更改该数组。</p>
<h2 id="词汇表"><a href="#词汇表" class="headerlink" title="词汇表"></a>词汇表</h2><ul>
<li><p>应用</p>
<p>一种特定的<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Glossary/Glossary.html#//apple_ref/doc/uid/10000057i-CH13-SW3">程序</a>样式，向用户显示图形界面。</p>
</li>
<li><p>健康）状况</p>
<p>用于同步对资源的访问的构造。在其他条件明确指示条件之前，不允许等待条件的线程继续进行。</p>
</li>
<li><p>关键部分</p>
<p>一次只能由一个线程执行的一部分代码。</p>
</li>
<li><p>输入源</p>
<p>线程的异步事件的源。输入源可以基于端口或手动触发，并且必须附加到线程的运行循环中。</p>
</li>
<li><p>可连接线程</p>
<p>终止后不会立即回收其资源的线程。必须先显式地分离可连接线程，否则必须由另一个线程将其连接，才能回收资源。可连接线程为与它们连接的线程提供返回值。</p>
</li>
<li><p>主线</p>
<p>创建其拥有进程时创建的一种特殊类型的<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Glossary/Glossary.html#//apple_ref/doc/uid/10000057i-CH13-SW1">线程</a>。当程序的主线程退出时，该过程结束。</p>
</li>
<li><p>互斥体</p>
<p>提供互斥访问共享资源的锁。互斥锁一次只能由一个线程持有。尝试获取由其他线程持有的互斥锁会使当前线程进入休眠状态，直到最终获取该锁为止。</p>
</li>
<li><p>操作对象</p>
<p><code>NSOperation</code>类的实例。操作对象将与任务关联的代码和数据包装到可执行单元中。</p>
</li>
<li><p>操作队列</p>
<p><code>NSOperationQueue</code>类的实例。操作队列管理操作对象的执行。</p>
</li>
<li><p>处理</p>
<p>应用程序或程序的运行时实例。进程具有自己的虚拟内存空间和系统资源（包括端口权限），与分配给其他程序的资源无关。一个进程始终至少包含一个线程（主线程），并且可以包含任意数量的附加线程。</p>
</li>
<li><p>程序</p>
<p>可以运行代码和资源以执行某些任务的组合。程序无需具有图形用户界面，尽管图形应用程序也被视为程序。</p>
</li>
<li><p>递归锁</p>
<p>可以由同一线程多次锁定的锁。</p>
</li>
<li><p>运行循环</p>
<p>事件处理循环，在此循环中，事件被接收并调度到适当的处理程序。</p>
</li>
<li><p>运行循环模式</p>
<p>与特定名称关联的输入源，计时器源和运行循环观察器的集合。当以特定的“模式”运行时，运行循环仅监视与该模式关联的源和观察者。</p>
</li>
<li><p>运行循环对象</p>
<p><code>NSRunLoop</code>类或<code>CFRunLoopRef</code>不透明类型的实例。这些对象提供了用于在线程中实现事件处理循环的接口。</p>
</li>
<li><p>运行循环观察器</p>
<p>运行循环执行的不同阶段中的通知的接收者。</p>
</li>
<li><p>信号</p>
<p>受保护的变量，用于限制对共享资源的访问。互斥量和条件都是信号灯的不同类型。</p>
</li>
<li><p>任务</p>
<p>要执行的工作量。</p>
</li>
<li><p>线</p>
<p>流程中的执行流程。每个线程都有自己的堆栈空间，但在同一进程中与其他线程共享内存。</p>
</li>
<li><p>计时器源</p>
<p>线程的同步事件的源。计时器在预定的将来时间生成一次或重复事件。</p>
</li>
</ul>
<h2 id="文档修订历史"><a href="#文档修订历史" class="headerlink" title="文档修订历史"></a>文档修订历史</h2><p>下表描述了对《<em>线程编程指南》</em>的更改。</p>
<table>
<thead>
<tr>
<th><strong>日期</strong></th>
<th><strong>笔记</strong></th>
</tr>
</thead>
<tbody><tr>
<td>2014-07-15</td>
<td>从线程安全的类列表中删除了 NSXMLDocument。</td>
</tr>
<tr>
<td>2013-10-22</td>
<td>将 NSXMLParser 和 NSXMLDocument 添加到线程安全对象列表。</td>
</tr>
<tr>
<td>2013-08-08</td>
<td>删除了过时的信息。</td>
</tr>
<tr>
<td>2010-04-28</td>
<td>更正了错别字。</td>
</tr>
<tr>
<td>2009-05-22</td>
<td>有关操作对象的信息已移至《并发编程指南》。仅将本书重点放在线程上。</td>
</tr>
<tr>
<td>2008-10-15</td>
<td>更新了有关操作对象和操作队列的示例代码。</td>
</tr>
<tr>
<td>2008-03-21</td>
<td>已针对 iOS 更新。</td>
</tr>
<tr>
<td>2008-02-08</td>
<td>对线程相关的概念和任务进行了重大的重写和更新。</td>
</tr>
<tr>
<td></td>
<td>添加了有关配置线程的更多信息。</td>
</tr>
<tr>
<td></td>
<td>将同步工具部分重组为一章，并添加了有关原子操作，内存屏障和易失变量的信息。</td>
</tr>
<tr>
<td></td>
<td>添加了有关运行循环的使用和配置的更多详细信息。</td>
</tr>
<tr>
<td></td>
<td>更改了<em>多线程编程主题中的</em>文档标题。</td>
</tr>
<tr>
<td>2007-10-31</td>
<td>添加了有关 NSOperation 和 NSOperationQueue 对象的信息。</td>
</tr>
<tr>
<td>2006-04-04</td>
<td>添加了一些新准则并更新了有关运行循环的信息。验证了分布式目标代码示例的准确性，并在其他几篇文章中更新了代码示例。</td>
</tr>
<tr>
<td>2005-03-03</td>
<td>更新了端口示例，以使用 NSPort 而不是 NSMessagePort。</td>
</tr>
<tr>
<td>2005-01-11</td>
<td>重组文章和扩展文档，使其不仅涵盖可可线程技术。</td>
</tr>
<tr>
<td></td>
<td>更新了线程概念信息，并添加了涵盖 OS X 中不同线程包的信息。</td>
</tr>
<tr>
<td></td>
<td>合并了 Core Foundation 多线程文档中的材料。</td>
</tr>
<tr>
<td></td>
<td>添加了有关在线程之间执行基于套接字的通信的信息。</td>
</tr>
<tr>
<td></td>
<td>添加了有关创建和使用 Carbon 线程的示例代码和信息。</td>
</tr>
<tr>
<td></td>
<td>添加了线程安全准则。</td>
</tr>
<tr>
<td></td>
<td>添加了有关 POSIX 线程和锁的信息。</td>
</tr>
<tr>
<td></td>
<td>添加了示例代码，以演示基于端口的通信。</td>
</tr>
<tr>
<td></td>
<td>本文档替换了以前在“ <em>多</em>线程”中发布的有关线程的信息。</td>
</tr>
<tr>
<td>2003-07-28</td>
<td>更新了有关在第三方库中使用锁的建议。</td>
</tr>
<tr>
<td>2003-04-08</td>
<td>在第三方库中有关锁定/解锁平衡的已重述信息。</td>
</tr>
<tr>
<td>2002-11-12</td>
<td>修订历史记录已添加到现有主题。</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>Interview</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程指南</title>
    <url>/cn/Concurrency-Programming-Guide/</url>
    <content><![CDATA[<h1 id="Concurrency-Programming-Guide"><a href="#Concurrency-Programming-Guide" class="headerlink" title="Concurrency Programming Guide"></a><a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091-CH1-SW1">Concurrency Programming Guide</a></h1><p>感觉线程相关的面试题都能在 👆 这个 🔗 里找到答案呢</p>
<a id="more"></a>

<p>👇 是 Google AI 翻译 (jifan)</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>并发是指同时发生多件事的概念。随着多核 CPU 的激增以及每个处理器中核数只会增加的认识，软件开发人员需要新的方法来利用它们。尽管 OS X 和 iOS 之类的操作系统能够并行运行多个程序，但是其中大多数程序都在后台运行，并执行需要很少的连续处理器时间的任务。当前的前台应用程序既可以吸引用户的注意力，又可以使计算机保持繁忙。如果应用程序有很多工作要做，但只占用了一部分可用内核，那么这些额外的处理资源就会被浪费掉。</p>
<p>过去，将并发引入应用程序需要创建一个或多个其他线程。不幸的是，编写线程代码具有挑战性。线程是必须手动管理的低级工具。鉴于应用程序的最佳线程数可以根据当前系统负载和底层硬件动态变化，因此即使不是不可能实现，实现正确的线程解决方案也变得非常困难。另外，通常与线程一起使用的同步机制增加了软件设计的复杂性和风险，而没有任何保证性能提高的保证。</p>
<p>与传统的基于线程的系统和应用程序相比，OS X 和 iOS 都采用了更多的异步方法来执行并发任务。应用程序无需直接创建线程，而仅需要定义特定任务，然后让系统执行它们。通过让系统管理线程，应用程序可以获得原始线程无法实现的可伸缩性级别。应用程序开发人员还可以获得更简单，更有效的编程模型。</p>
<p>本文档介绍了应在应用程序中实现并发的一种或多种技术。本文档中描述的技术在 OS X 和 iOS 中均可用。</p>
<h4 id="本文件的组织"><a href="#本文件的组织" class="headerlink" title="本文件的组织"></a>本文件的组织</h4><p>本文档包含以下章节：</p>
<ul>
<li><a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/ConcurrencyandApplicationDesign/ConcurrencyandApplicationDesign.html#//apple_ref/doc/uid/TP40008091-CH100-SW1">并发和应用程序设计</a>介绍了异步应用程序设计的基础知识以及用于异步执行自定义任务的技术。</li>
<li><a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW1">“操作队列”</a>向您展示了如何使用 Objective-C 对象封装和执行任务。</li>
<li><a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW1">调度队列</a>显示了如何在基于 C 的应用程序中同时执行任务。</li>
<li><a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW1">调度源</a>向您展示如何异步处理系统事件。</li>
<li><a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/ThreadMigration/ThreadMigration.html#//apple_ref/doc/uid/TP40008091-CH105-SW1">远离线程迁移</a>提供了一些技巧和技术，可以将现有的基于线程的代码迁移到新的技术上。</li>
</ul>
<p>本文档还包括定义相关术语的词汇表。</p>
<h4 id="有关术语的注释"><a href="#有关术语的注释" class="headerlink" title="有关术语的注释"></a>有关术语的注释</h4><p>在讨论并发之前，有必要定义一些相关术语以防止混淆。对 UNIX 系统或较早的 OS X 技术更加熟悉的开发人员可能会在本文中发现“任务”，“进程”和“线程”这两个词的用法有所不同。本文档以下列方式使用这些术语：</p>
<ul>
<li>术语<em>线程</em>用于指代代码的独立执行路径。OS X 中线程的基础实现基于 POSIX 线程 API。</li>
<li>术语“ <em>进程”</em>用于指代一个正在运行的可执行文件，它可以包含多个线程。</li>
<li>术语“ <em>任务”</em>用于指代需要执行的工作的抽象概念。</li>
</ul>
<p>有关本文档使用的这些术语和其他关键术语的完整定义，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW2">词汇表</a>。</p>
<h4 id="也可以看看"><a href="#也可以看看" class="headerlink" title="也可以看看"></a>也可以看看</h4><p>本文档重点介绍在您的应用程序中实现并发性的首选技术，并且不涉及线程的使用。如果您需要有关使用线程和其他线程相关技术的信息，请参见《_<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i">线程编程指南》</a>_。</p>
<h2 id="并发与应用程序设计"><a href="#并发与应用程序设计" class="headerlink" title="并发与应用程序设计"></a>并发与应用程序设计</h2><p>在计算的早期，计算机可以执行的每单位时间的最大工作量取决于 CPU 的时钟速度。但是，随着技术的进步和处理器设计变得更加紧凑，热量和其他物理限制开始限制处理器的最大时钟速度。因此，芯片制造商正在寻找其他方法来提高其芯片的总体性能。他们确定的解决方案是增加每个芯片上的处理器内核数量。通过增加内核数量，单个芯片可以每秒执行更多指令，而无需提高 CPU 速度或更改芯片尺寸或散热特性。唯一的问题是如何利用额外的内核。</p>
<p>为了利用多个内核，计算机需要可以同时执行多项操作的软件。对于像 OS X 或 iOS 这样的现代多任务操作系统，在任何给定时间可以运行一百个或更多程序，因此应该可以在不同的内核上调度每个程序。但是，这些程序大多数是系统守护程序或后台应用程序，它们消耗很少的实际处理时间。相反，真正需要的是使各个应用程序更有效地利用额外内核的方式。</p>
<p>应用程序使用多个内核的传统方式是创建多个线程。但是，随着内核数量的增加，线程解决方案存在问题。最大的问题是线程代码无法很好地扩展到任意数量的内核。您不能创建与内核一样多的线程，并且期望程序运行良好。您需要知道的是可以有效使用的内核数量，这对于应用程序自己进行计算是一项挑战。即使您设法使数字正确，也仍然面临着对如此多的线程进行编程，使其高效运行以及防止它们相互干扰的挑战。</p>
<p>因此，总结问题，需要为应用程序提供一种利用可变数量的计算机内核的方法。单个应用程序执行的工作量还需要能够动态扩展以适应不断变化的系统条件。解决方案必须足够简单，以免增加利用这些内核所需的工作量。好消息是，Apple 的操作系统为所有这些问题提供了解决方案，本章介绍了构成该解决方案的技术以及可以对代码进行的设计调整，以利用它们。</p>
<h4 id="远离线程"><a href="#远离线程" class="headerlink" title="远离线程"></a>远离线程</h4><p>尽管线程已经存在很多年了并且继续使用它们，但是它们并不能解决以可伸缩方式执行多个任务的一般问题。使用线程，创建可伸缩解决方案的负担完全由开发人员承担。您必须决定要创建多少个线程，并随着系统条件的变化动态地调整该数量。另一个问题是您的应用程序承担了与创建和维护其使用的任何线程相关的大部分成本。</p>
<p>OS X 和 iOS 无需依赖线程，而是采用<em>异步设计方法</em>解决并发问题。异步功能已经存在于操作系统中多年，通常用于启动可能需要很长时间的任务，例如从磁盘读取数据。调用异步函数时，它会在后台执行一些工作以启动任务运行，但在该任务可能实际完成之前返回。通常，这项工作涉及获取后台线程，在该线程上启动所需的任务，然后在任务完成时向调用者发送通知（通常通过回调函数）。过去，如果要执行的操作不存在异步函数，则必须编写自己的异步函数并创建自己的线程。但现在，</p>
<p>异步启动任务的技术之一是<em>大中央调度（GCD）</em>。该技术采用了您通常在自己的应用程序中编写的线程管理代码，并将该代码下移至系统级别。您所要做的就是定义要执行的任务，并将其添加到适当的调度队列中。GCD 负责创建所需的线程，并安排任务在这些线程上运行。由于线程管理现在是系统的一部分，因此 GCD 提供了一种用于任务管理和执行的整体方法，比传统线程提供了更高的效率。</p>
<p><em>操作队列</em>是 Objective-C 对象，其行为与分派队列非常相似。您定义要执行的任务，然后将它们添加到操作队列中，该队列处理这些任务的调度和执行。与 GCD 一样，操作队列为您处理所有线程管理，以确保任务在系统上尽可能快且高效地执行。</p>
<p>以下各节提供有关可在应用程序中使用的调度队列，操作队列和其他一些相关异步技术的更多信息。</p>
<h6 id="调度队列"><a href="#调度队列" class="headerlink" title="调度队列"></a>调度队列</h6><p>调度队列是用于执行自定义任务的基于 C 的机制。一个<em>调度队列</em>执行任务的顺序或同时却总是先入先出的顺序。（换句话说，调度队列始终以添加任务到队列的顺序出队列并启动任务。）串行调度队列一次仅运行一个任务，直到该任务完成后才出队列并启动任务。新的一个。相比之下，并发调度队列可以启动尽可能多的任务，而不必等待已经启动的任务完成。</p>
<p>调度队列还有其他好处：</p>
<ul>
<li>它们提供了简单明了的编程界面。</li>
<li>它们提供自动的整体线程池管理。</li>
<li>它们提供了调优装配的速度。</li>
<li>它们具有更高的内存效率（因为线程堆栈不会停留在应用程序内存中）。</li>
<li>它们不会在负载下捕获到内核。</li>
<li>任务到调度队列的异步调度不能使队列死锁。</li>
<li>他们在竞争中优雅地扩展。</li>
<li>串行分派队列为锁和其他同步原语提供了更有效的替代方法。</li>
</ul>
<p>您提交给分派队列的任务必须封装在函数或块对象中。<em>块对象</em>是 OS X v10.6 和 iOS 4.0 中引入的 C 语言功能，从概念上讲类似于函数指针，但还有一些其他好处。通常，不是在自己的词法范围内定义块，而是通常在另一个函数或方法内定义块，以便它们可以从该函数或方法访问其他变量。块也可以移出其原始范围并复制到堆上，这是将它们提交到调度队列时发生的情况。所有这些语义使得使用相对较少的代码即可实现非常动态的任务。</p>
<p>调度队列是 Grand Central Dispatch 技术的一部分，并且是 C 运行时的一部分。有关在应用程序中使用调度队列的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW1">调度队列</a>。有关块及其好处的更多信息，请参见*<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40007502">块编程主题</a>*。</p>
<h6 id="派遣来源"><a href="#派遣来源" class="headerlink" title="派遣来源"></a>派遣来源</h6><p>调度源是一种基于 C 的机制，用于异步处理特定类型的系统事件。调度源封装有关特定类型系统事件的信息，并在该事件发生时将特定的块对象或功能提交给调度队列。您可以使用调度源来监视以下类型的系统事件：</p>
<ul>
<li>计时器</li>
<li>信号处理器</li>
<li>描述符相关事件</li>
<li>与流程相关的事件</li>
<li>马赫港口事件</li>
<li>您触发的自定义事件</li>
</ul>
<p>调度源是大中央调度技术的一部分。有关使用调度源接收应用程序中的事件的信息，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW1">调度源</a>。</p>
<h6 id="操作队列"><a href="#操作队列" class="headerlink" title="操作队列"></a>操作队列</h6><p>操作队列在 Cocoa 中等同于并发调度队列，由<code>NSOperationQueue</code>类实现。调度队列始终按先进先出的顺序执行任务，而操作队列在确定任务的执行顺序时会考虑其他因素。这些因素中最主要的是给定任务是否取决于其他任务的完成。您可以在定义任务时配置依赖关系，并可以使用它们来为任务创建复杂的执行顺序图。</p>
<p>您提交给操作队列的任务必须是<code>NSOperation</code>该类的实例。的<em>操作对象</em>是 Objective-C 的对象，它封装了要执行的工作，并执行它所需要的任何数据。因为<code>NSOperation</code>该类实质上是抽象基类，所以通常定义自定义子类来执行任务。但是，Foundation 框架确实包含一些具体的子类，您可以直接创建和使用这些子类来执行任务。</p>
<p>操作对象会生成键值观察（KVO）通知，这可以是监视任务进度的有用方法。尽管操作队列总是同时执行操作，但是您可以使用依赖项来确保在需要时按顺序执行它们。</p>
<p>有关如何使用操作队列以及如何定义自定义操作对象的更多信息，请参见《<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW1">操作队列》</a>。</p>
<h4 id="异步设计技术"><a href="#异步设计技术" class="headerlink" title="异步设计技术"></a>异步设计技术</h4><p>在甚至考虑重新设计代码以支持并发之前，您应该问自己是否这样做。并发可以确保您的主线程可以自由地响应用户事件，从而可以提高代码的响应速度。通过利用更多的内核在相同的时间内完成更多的工作，它甚至可以提高代码的效率。但是，这也增加了开销并增加了代码的整体复杂性，从而使编写和调试代码变得更加困难。</p>
<p>因为并发性增加了复杂性，所以您不能在产品周期结束时将并发性移植到应用程序上。正确执行此操作需要仔细考虑应用程序执行的任务以及用于执行这些任务的数据结构。如果处理不正确，您可能会发现代码运行速度比以前慢，并且对用户的响应速度也较慢。因此，值得在设计周期开始时花一些时间设定一些目标并考虑需要采取的方法。</p>
<p>每个应用程序都有不同的要求和执行的不同任务集。文档不可能准确地告诉您如何设计应用程序及其相关任务。但是，以下各节试图提供一些指导，以帮助您在设计过程中做出正确的选择。</p>
<h6 id="定义应用程序的预期行为"><a href="#定义应用程序的预期行为" class="headerlink" title="定义应用程序的预期行为"></a>定义应用程序的预期行为</h6><p>在甚至考虑向应用程序添加并发之前，您应该始终从定义您认为正确的应用程序行为开始。了解应用程序的预期行为为您提供了一种稍后验证设计的方法。它还应该使您对通过引入并发可能获得的预期性能收益有所了解。</p>
<p>您应该做的第一件事是枚举应用程序执行的任务以及与每个任务关联的对象或数据结构。最初，您可能想从用户选择菜单项或单击按钮时执行的任务开始。这些任务提供了离散的行为，并具有明确定义的起点和终点。您还应该枚举应用程序无需用户交互即可执行的其他类型的任务，例如基于计时器的任务。</p>
<p>在获得高级任务列表之后，开始将每个任务进一步细分为成功完成任务必须采取的步骤。在此级别上，您应该主要关注需要对任何数据结构和对象进行的修改，以及这些修改如何影响应用程序的整体状态。您还应该注意对象与数据结构之间的任何依赖关系。例如，如果一项任务涉及对一组对象进行相同的更改，则值得注意的是对一个对象的更改是否会影响其他任何对象。如果可以相互独立地修改对象，则可能是可以同时进行这些修改的地方。</p>
<h6 id="排除可执行的工作单元"><a href="#排除可执行的工作单元" class="headerlink" title="排除可执行的工作单元"></a>排除可执行的工作单元</h6><p>通过了解应用程序的任务，您应该已经能够确定代码可以从并发中受益的地方。如果更改任务中一个或多个步骤的顺序会改变结果，则可能需要继续按顺序继续执行这些步骤。但是，如果更改顺序对输出没有影响，则应考虑同时执行这些步骤。在这两种情况下，您都定义了代表要执行的一个或多个步骤的可执行工作单元。然后，该工作单元将成为您使用块或操作对象封装的内容，并分派到适当的队列中。</p>
<p>对于您标识的每个可执行工作单元，至少在最初阶段，不必过多担心执行的工作量。尽管拆分线程始终会产生成本，但是分派队列和操作队列的优点之一是，在许多情况下，这些成本比传统线程要小得多。因此，与使用线程相比，使用队列可以更有效地执行较小的工作单元。当然，您应该始终测量实际性能并根据需要调整任务的大小，但是一开始，不应将任何任务视为太小。</p>
<h6 id="确定您需要的队列"><a href="#确定您需要的队列" class="headerlink" title="确定您需要的队列"></a>确定您需要的队列</h6><p>现在，您的任务已分解为不同的工作单元，并使用块对象或操作对象进行了封装，现在您需要定义要用于执行该代码的队列。对于给定的任务，请检查您创建的块或操作对象以及必须执行它们才能正确执行任务的顺序。</p>
<p>如果使用块来实现任务，则可以将块添加到串行或并发调度队列中。如果需要特定的命令，则始终将块添加到串行调度队列中。如果不需要特定的顺序，则可以根据需要将块添加到并发调度队列中，或将它们添加到几个不同的调度队列中。</p>
<p>如果使用操作对象实现任务，则选择队列通常比配置对象有趣。要串行执行操作对象，必须配置相关对象之间的依赖关系。依赖关系会阻止一个操作执行到它所依赖的对象完成工作为止。</p>
<h6 id="提高效率的技巧"><a href="#提高效率的技巧" class="headerlink" title="提高效率的技巧"></a>提高效率的技巧</h6><p>除了简单地将代码分解为较小的任务并将其添加到队列之外，还有其他方法可以使用队列来提高代码的整体效率：</p>
<ul>
<li><strong>如果内存使用是一个因素，请考虑直接在任务中计算值。</strong>如果您的应用程序已经受内存限制，那么现在直接计算值可能比从主内存加载缓存的值要快。计算值直接使用给定处理器内核的寄存器和缓存，这比主内存快得多。当然，只有在测试表明这是性能上的胜利时，才应该这样做。</li>
<li><strong>尽早识别串行任务，并尽力使它们更加并行。</strong>如果由于某个任务依赖某些共享资源而必须串行执行该任务，请考虑更改体系结构以删除该共享资源。您可以考虑为每个需要一个的客户端制作资源副本，或者完全消除该资源。</li>
<li><strong>避免使用锁。</strong>分派队列和操作队列提供的支持使得在大多数情况下不需要锁。与其使用锁来保护某些共享资源，不如指定一个串行队列（或使用操作对象依赖项）以正确的顺序执行任务。</li>
<li><strong>尽可能依靠系统框架。</strong>实现并发的最佳方法是利用系统框架提供的内置并发。许多框架在内部使用线程和其他技术来实现并发行为。在定义任务时，请查看现有框架是否定义了可以完全满足您期望并同时实现的功能或方法。使用该 API 可以节省您的精力，并且更有可能为您提供最大的并发性。</li>
</ul>
<h4 id="性能影响"><a href="#性能影响" class="headerlink" title="性能影响"></a>性能影响</h4><p>提供了操作队列，调度队列和调度源，使您可以更轻松地同时执行更多代码。但是，这些技术不能保证提高应用程序的效率或响应能力。使用队列既可以满足您的需求，又不会给应用程序的其他资源带来过多负担，仍然是您的责任。例如，尽管您可以创建 10,000 个操作对象并将其提交到操作队列，但是这样做将导致您的应用程序分配潜在的重要内存量，这可能导致分页和性能下降。</p>
<p>在为代码引入任何数量的并发之前（无论使用队列还是线程），您应该始终收集一组反映应用程序当前性能的基准度量。引入更改后，您应该收集其他指标并将其与基准进行比较，以查看应用程序的整体效率是否有所提高。如果并发性引入使您的应用程序效率或响应速度降低，则应使用可用的性能工具来检查潜在原因。</p>
<p>有关性能和可用性能工具的介绍，以及指向更多与性能相关的高级主题的链接，请参见*<a href="https://developer.apple.com/library/archive/documentation/Performance/Conceptual/PerformanceOverview/Introduction/Introduction.html#//apple_ref/doc/uid/TP40001410">性能概述</a>*。</p>
<h4 id="并发和其他技术"><a href="#并发和其他技术" class="headerlink" title="并发和其他技术"></a>并发和其他技术</h4><p>将代码分解为模块化任务是尝试并提高应用程序中并发性的最佳方法。但是，这种设计方法可能无法满足每种情况下每种应用程序的需求。根据您的任务，可能还有其他选项可以为应用程序的整体并发性提供其他改进。本节概述了设计中要考虑使用的其他一些技术。</p>
<h6 id="OpenCL-和并发"><a href="#OpenCL-和并发" class="headerlink" title="OpenCL 和并发"></a>OpenCL 和并发</h6><p>在 OS X 中，<em>开放计算语言（OpenCL）</em>是一种基于标准的技术，用于在计算机的图形处理器上执行通用计算。如果您要对大型数据集应用一组定义明确的计算，则 OpenCL 是一项很好的技术。例如，您可以使用 OpenCL 对图像的像素执行过滤器计算，或一次对多个值执行复杂的数学计算。换句话说，OpenCL 更适合问题集，这些问题集的数据可以并行处理。</p>
<p>尽管 OpenCL 可以很好地执行大量数据并行操作，但它不适用于更通用的计算。将数据和所需的工作内核准备并传输到图形卡需要大量的精力，以便可以通过 GPU 对其进行操作。同样，检索 OpenCL 生成的任何结果都需要花费大量精力。因此，通常不建议与系统交互的任何任务与 OpenCL 一起使用。例如，您不会使用 OpenCL 处理文件或网络流中的数据。相反，您使用 OpenCL 执行的工作必须更加独立，以便可以将其传输到图形处理器并进行独立计算。</p>
<p>有关 OpenCL 及其使用方式的详细信息，请参阅*<a href="https://developer.apple.com/library/archive/documentation/Performance/Conceptual/OpenCL_MacProgGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008312">《适用于 Mac 的 OpenCL 编程指南》</a>*。</p>
<h6 id="何时使用线程"><a href="#何时使用线程" class="headerlink" title="何时使用线程"></a>何时使用线程</h6><p>尽管操作队列和调度队列是同时执行任务的首选方式，但它们不是万能药。根据您的应用程序，有时仍然需要创建自定义线程。如果确实创建自定义线程，则应努力自己创建尽可能少的线程，并且应仅将这些线程用于无法以其他任何方式实现的特定任务。</p>
<p>线程仍然是实现必须实时运行的代码的好方法。调度队列会尽一切努力尽可能快地运行其任务，但不能解决实时约束。如果您需要从后台运行的代码中获得更多可预测的行为，则线程可能仍然是更好的选择。</p>
<p>与任何线程编程一样，您应始终明智地使用线程，并且仅在绝对必要时使用。有关线程包及其使用方式的更多信息，请参见《_<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i">线程编程指南》</a>_。</p>
<h2 id="操作队列-1"><a href="#操作队列-1" class="headerlink" title="操作队列"></a>操作队列</h2><p>可可操作是一种面向对象的方法，用于封装要异步执行的工作。操作被设计为与操作队列结合使用或单独使用。由于它们基于 Objective-C，因此在 OS X 和 iOS 的基于 Cocoa 的应用程序中最常使用操作。</p>
<p>本章介绍如何定义和使用操作。</p>
<h4 id="关于操作对象"><a href="#关于操作对象" class="headerlink" title="关于操作对象"></a>关于操作对象</h4><p>的<em>操作对象</em>是的实例<code>NSOperation</code>类（Foundation 框架），您使用您希望您的应用程序执行封装工作。在<code>NSOperation</code>类本身是一个抽象基类，必须按顺序做任何有用的工作被继承。尽管是抽象类，但此类确实提供了大量的基础结构，以最大程度地减少您必须在自己的子类中完成的工作量。另外，Foundation 框架提供了两个具体的子类，您可以按原样使用现有代码。表 2-1 列出了这些类，以及如何使用每种类的摘要。</p>
<table>
<thead>
<tr>
<th align="left">类</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>NSInvocationOperation</code></td>
<td align="left">您原样使用的类基于应用程序中的对象和选择器创建操作对象。如果您具有已经执行所需任务的现有方法，则可以使用此类。由于不需要子类，因此您也可以使用此类以更动态的方式创建操作对象。有关如何使用此类的信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW6">创建 NSInvocationOperation 对象</a>。</td>
</tr>
<tr>
<td align="left"><code>NSBlockOperation</code></td>
<td align="left">按原样使用的类可同时执行一个或多个块对象。因为可以执行多个块，所以块操作对象使用组语义进行操作；仅当所有相关块已完成执行时，操作本身才视为完成。有关如何使用此类的信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW2">创建 NSBlockOperation 对象</a>。此类在 OS X v10.6 和更高版本中可用。有关块的更多信息，请参见*<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40007502">块编程主题</a>*。</td>
</tr>
<tr>
<td align="left"><code>NSOperation</code></td>
<td align="left">定义自定义操作对象的基类。子类化<code>NSOperation</code>使您可以完全控制自己的操作的实现，包括更改操作执行和报告其状态的默认方式的能力。有关如何定义自定义操作对象的信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW16">定义自定义操作对象</a>。</td>
</tr>
</tbody></table>
<p>所有操作对象都支持以下关键功能：</p>
<ul>
<li>支持在操作对象之间建立基于图的依赖关系。这些依赖关系会阻止给定操作运行，直到它所依赖的所有操作都已运行完毕。有关如何配置依赖关系的信息，请参阅《<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW17">配置互操作依赖关系》</a>。</li>
<li>支持可选的完成块，该块在操作的主要任务完成后执行。（仅适用于 OS X v10.6 和更高版本。）有关如何设置完成块的信息，请参阅《<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW33">设置完成块》</a>。</li>
<li>支持使用 KVO 通知监视对操作的执行状态的更改。有关如何观察 KVO 通知的信息，请参阅《_<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177i">键值观察编程指南》</a>_。</li>
<li>支持对操作进行优先级排序，从而影响其相对执行顺序。有关更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW31">更改操作的执行优先级</a>。</li>
<li>支持取消语义，使您可以在执行过程中暂停操作。有关如何取消操作的信息，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW39">取消操作</a>。有关如何在自己的操作中支持取消的信息，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW24">响应取消事件</a>。</li>
</ul>
<p>操作旨在帮助您提高应用程序中的并发级别。操作也是将应用程序的行为组织和封装为简单的离散块的好方法。您可以在一个队列中提交一个或多个操作对象，而不是在应用程序的主线程上运行一些代码，而可以在一个或多个单独的线程上异步执行相应的工作。</p>
<h4 id="并行与非并行操作"><a href="#并行与非并行操作" class="headerlink" title="并行与非并行操作"></a>并行与非并行操作</h4><p>尽管通常通过将操作添加到操作队列来执行操作，但这不是必需的。也可以通过调用操作对象的<code>start</code>方法来手动执行操作对象，但这样做不能保证操作与代码的其余部分同时运行。该类的<code>isConcurrent</code>方法<code>NSOperation</code>告诉您操作相对于<code>start</code>调用其方法的线程是同步还是异步运行。默认情况下，此方法返回<code>NO</code>，这意味着该操作在调用线程中同步运行。</p>
<p>如果要实现<em>并发操作（</em>即相对于调用线程异步运行的<em>操作</em>），则必须编写其他代码以异步启动操作。例如，您可以生成单独的线程，调用异步系统函数或执行任何其他操作以确保该<code>start</code>方法启动任务并立即返回，并且很可能在任务完成之前返回。</p>
<p>大多数开发人员永远都不需要实现并发操作对象。如果始终将操作添加到操作队列中，则无需实现并发操作。当您将非并行操作提交给操作队列时，队列本身会创建一个线程来在其上运行您的操作。因此，向操作队列中添加非并发操作仍然会导致操作目标代码的异步执行。仅在需要异步执行操作而不将其添加到操作队列的情况下，才需要定义并发操作的功能。</p>
<p>有关如何创建并发操作的信息，请参阅《<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW8">配置</a>并发操作和*<a href="https://developer.apple.com/documentation/foundation/nsoperation">NSOperation 类参考》</a>*。</p>
<h4 id="创建一个-NSInvocationOperation-对象"><a href="#创建一个-NSInvocationOperation-对象" class="headerlink" title="创建一个 NSInvocationOperation 对象"></a>创建一个 NSInvocationOperation 对象</h4><p>该<code>NSInvocationOperation</code>班是一个具体子类<code>NSOperation</code>是在运行时调用选择你指定的对象上注明。使用此类可避免为应用程序中的每个任务定义大量的自定义操作对象；特别是如果您正在修改现有应用程序，并且已经具有执行必要任务所需的对象和方法。当您要调用的方法可以根据情况改变时，也可以使用它。例如，您可以使用调用操作来执行根据用户输入动态选择的选择器。</p>
<p>创建调用操作的过程很简单。您创建并初始化该类的新实例，并将所需的对象和选择器传递给初始化方法。清单 2-1 显示了来自自定义类的两种方法，它们演示了创建过程。该<code>taskWithData:</code>方法创建一个新的调用对象，并为其提供另一个方法的名称，该名称包含任务实现。</p>
<p><strong>清单 2-1</strong> 创建一个<code>NSInvocationOperation</code>对象</p>
<table>
<thead>
<tr>
<th><code>@implementation MyCustomClass</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>-（NSOperation *）taskWithData：（id）data &#123;</code></td>
</tr>
<tr>
<td><code>NSInvocationOperation * theOp = [[NSInvocationOperation alloc] initWithTarget：self</code></td>
</tr>
<tr>
<td><code>选择器：@选择器（myTaskMethod :)对象：数据];</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>返回theOp;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//这是执行任务实际工作的方法。</code></td>
</tr>
<tr>
<td><code>-（void）myTaskMethod：（id）data &#123;</code></td>
</tr>
<tr>
<td><code>//执行任务。</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>@结束</code></td>
</tr>
</tbody></table>
<h4 id="创建一个-NSBlockOperation-对象"><a href="#创建一个-NSBlockOperation-对象" class="headerlink" title="创建一个 NSBlockOperation 对象"></a>创建一个 NSBlockOperation 对象</h4><p>的<code>NSBlockOperation</code>类是的具体子类<code>NSOperation</code>充当用于一个或多个的包装块的对象。此类为已经在使用操作队列并且不想创建调度队列的应用程序提供面向对象的包装。您还可以使用块操作来利用操作依赖性，KVO 通知和分派队列可能不提供的其他功能。</p>
<p>创建块操作时，通常在初始化时至少添加一个块。您可以稍后根据需要添加更多块。当需要执行一个<code>NSBlockOperation</code>对象时，该对象将其所有块提交给默认优先级的并发调度队列。然后，对象等待直到所有块完成执行。当最后一个块完成执行时，操作对象将自身标记为完成。因此，您可以使用块操作来跟踪一组正在执行的块，就像使用线程联接合并来自多个线程的结果一样。区别在于，由于块操作本身在单独的线程上运行，因此应用程序的其他线程可以在等待块操作完成的同时继续进行工作。</p>
<p>清单 2-2 显示了如何创建<code>NSBlockOperation</code>对象的简单示例。该块本身没有参数，也没有明显的返回结果。</p>
<p><strong>清单 2-2</strong> 创建一个<code>NSBlockOperation</code>对象</p>
<table>
<thead>
<tr>
<th><code>NSBlockOperation * theOp = [NSBlockOperation blockOperationWithBlock：^ &#123;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>NSLog（@“开始操作。\ n”）;</code></td>
</tr>
<tr>
<td><code>// 做一些工作。</code></td>
</tr>
<tr>
<td><code>&#125;];</code></td>
</tr>
</tbody></table>
<p>创建块操作对象后，可以使用该<code>addExecutionBlock:</code>方法向其添加更多块。如果需要顺序执行块，则必须将它们直接提交给所需的调度队列。</p>
<h4 id="定义自定义操作对象"><a href="#定义自定义操作对象" class="headerlink" title="定义自定义操作对象"></a>定义自定义操作对象</h4><p>如果块操作和调用操作对象不能完全满足应用程序的需求，则可以<code>NSOperation</code>直接子类化并添加所需的任何行为。本<code>NSOperation</code>类提供的所有操作对象的通用子类点。该类还提供了大量的基础结构来处理依赖项和 KVO 通知所需的大部分工作。但是，有时仍然需要补充现有的基础架构以确保您的操作正常进行。您必须执行的额外工作量取决于您要实现的是非并发操作还是并发操作。</p>
<p>定义非并发操作比定义并发操作要简单得多。对于非并行操作，您所需要做的就是执行主要任务并适当地响应取消事件；现有的班级基础架构会为您完成所有其他工作。对于并发操作，必须用自定义代码替换一些现有的基础结构。以下各节向您展示如何实现两种类型的对象。</p>
<h6 id="执行主要任务"><a href="#执行主要任务" class="headerlink" title="执行主要任务"></a>执行主要任务</h6><p>每个操作对象至少应实现至少以下方法：</p>
<ul>
<li>自定义初始化方法</li>
<li><code>main</code></li>
</ul>
<p>您需要一个自定义的初始化方法来将操作对象置于已知状态，并需要一个自定义的<code>main</code>方法来执行任务。当然，您可以根据需要实现其他方法，例如：</p>
<ul>
<li>您计划从<code>main</code>方法的实现中调用的自定义方法</li>
<li>用于设置数据值和访问操作结果的访问器方法</li>
<li><code>NSCoding</code>允许您归档和取消归档操作对象的协议方法</li>
</ul>
<p>清单 2-3 显示了自定义<code>NSOperation</code>子类的起始模板。（此清单未显示如何处理取消，但显示了通常具有的方法。有关处理取消的信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW24">响应取消事件</a>。）此类的初始化方法将单个对象作为数据参数并存储一个对象。在操作对象内部对其的引用。该<code>main</code>方法表面上将对该数据对象起作用，然后再将结果返回给您的应用程序。</p>
<p><strong>清单 2-3</strong> 定义一个简单的操作对象</p>
<table>
<thead>
<tr>
<th><code>@interface MyNonConcurrentOperation：NSOperation</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>@property id（strong）myData;</code></td>
</tr>
<tr>
<td><code>-（id）initWithData：（id）数据;</code></td>
</tr>
<tr>
<td><code>@结束</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>@implementation MyNonConcurrentOperation</code></td>
</tr>
<tr>
<td><code>-（id）initWithData：（id）data &#123;</code></td>
</tr>
<tr>
<td><code>如果（自我= [超级初始化]）</code></td>
</tr>
<tr>
<td><code>myData =数据；</code></td>
</tr>
<tr>
<td><code>返回自我</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>-（void）main &#123;</code></td>
</tr>
<tr>
<td><code>@尝试&#123;</code></td>
</tr>
<tr>
<td><code>//对myData做一些工作并报告结果。</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>@catch（...）&#123;</code></td>
</tr>
<tr>
<td><code>//不要抛出异常。</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>@结束</code></td>
</tr>
<tr>
<td>``</td>
</tr>
</tbody></table>
<p>有关如何实现<code>NSOperation</code>子类的详细示例，请参见*<a href="https://developer.apple.com/library/archive/samplecode/NSOperationSample/Introduction/Intro.html#//apple_ref/doc/uid/DTS10004184">NSOperationSample</a>*。</p>
<h6 id="响应取消事件"><a href="#响应取消事件" class="headerlink" title="响应取消事件"></a>响应取消事件</h6><p>操作开始执行后，它将继续执行其任务，直到完成为止，或者直到您的代码明确取消了该操作。取消可以随时发生，甚至在操作开始执行之前。尽管<code>NSOperation</code>该类为客户提供了取消操作的方法，但是识别取消事件是必要的，是自愿的。如果操作被彻底终止，则可能没有办法回收已分配的资源。结果，期望操作对象检查取消事件，并在它们出现在操作中间时正常退出。</p>
<p>为了支持取消操作对象中的操作，您要做的就是<code>isCancelled</code>从您的自定义代码中定期调用该对象的方法，并在返回时立即返回<code>YES</code>。无论操作时间长短，是<code>NSOperation</code>直接子类化还是使用其具体子类之一，支持取消都很重要。该<code>isCancelled</code>方法本身非常轻巧，可以频繁调用而不会造成任何明显的性能损失。设计操作对象时，应考虑<code>isCancelled</code>在代码的以下位置调用该方法：</p>
<ul>
<li>在您执行任何实际工作之前</li>
<li>在循环的每次迭代中至少一次，如果每次迭代相对较长，则更频繁</li>
<li>在代码中的任何时候，相对容易中止操作</li>
</ul>
<p>清单 2-4 提供了一个非常简单的示例，说明如何以<code>main</code>操作对象的方法响应取消事件。在这种情况下，<code>isCancelled</code>每次通过<code>while</code>循环都会调用该方法，这样可以在工作开始之前快速退出，并有规律地间隔一次。</p>
<p><strong>清单 2-4</strong> 响应取消请求</p>
<table>
<thead>
<tr>
<th><code>-（void）main &#123;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>@尝试&#123;</code></td>
</tr>
<tr>
<td><code>BOOL isDone = NO;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>while（！[self isCancelled] &amp;&amp;！isDone）&#123;</code></td>
</tr>
<tr>
<td><code>//做一些工作，完成后将isDone设置为YES</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>@catch（...）&#123;</code></td>
</tr>
<tr>
<td><code>//不要抛出异常。</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>尽管前面的示例不包含清除代码，但是您自己的代码应确保释放您的自定义代码分配的所有资源。</p>
<h6 id="配置并发执行操作"><a href="#配置并发执行操作" class="headerlink" title="配置并发执行操作"></a>配置并发执行操作</h6><p>默认情况下，操作对象以同步方式执行-也就是说，它们在调用其<code>start</code>方法的线程中执行其任务。但是，由于操作队列为非并发操作提供了线程，因此大多数操作仍然异步运行。但是，如果您打算手动执行操作，但仍希望它们异步运行，则必须采取适当的措施以确保它们能够执行。通过将操作对象定义为并发操作来执行此操作。</p>
<p>表 2-2 列出了通常为实现并发操作而重写的方法。</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>start</code></td>
<td align="left">（必需）所有并发操作都必须重写此方法，并用其自己的自定义实现替换默认行为。要手动执行操作，请调用其<code>start</code>方法。因此，此方法的实现是您操作的起点，并且是您在其中设置执行任务的线程或其他执行环境的地方。您的实现不得<code>super</code>在任何时候调用。</td>
</tr>
<tr>
<td align="left"><code>main</code></td>
<td align="left">（可选）此方法通常用于实现与操作对象关联的任务。尽管您可以在<code>start</code>方法中执行任务，但是使用此方法实现任务可以使您的设置和任务代码更加清晰。</td>
</tr>
<tr>
<td align="left"><code>isExecuting``isFinished</code></td>
<td align="left">（必需）并发操作负责设置其执行环境，并向外部客户端报告该环境的状态。因此，并发操作必须维护一些状态信息，以了解何时执行任务以及何时完成该任务。然后，必须使用这些方法报告该状态。您可以安全地同时从其他线程调用这些方法的实现。在更改这些方法报告的值时，还必须为预期的键路径生成适当的 KVO 通知。</td>
</tr>
<tr>
<td align="left"><code>isConcurrent</code></td>
<td align="left">（必需）要将操作标识为并发操作，请覆盖此方法并返回<code>YES</code>。</td>
</tr>
</tbody></table>
<p>本节的其余部分显示了<code>MyOperation</code>该类的示例实现，该示例演示了实现并发操作所需的基本代码。将<code>MyOperation</code>类简单地执行它自己的<code>main</code>一个单独的线程方法，它创造。该<code>main</code>方法执行的实际工作无关紧要。该示例的重点是演示定义并发操作时需要提供的基础结构。</p>
<p>清单 2-5 显示了<code>MyOperation</code>该类的接口和部分实现。的的实现<code>isConcurrent</code>，<code>isExecuting</code>和<code>isFinished</code>方法的<code>MyOperation</code>类是相对简单的。该<code>isConcurrent</code>方法应该简单地返回<code>YES</code>以指示这是一个并发操作。该<code>isExecuting</code>和<code>isFinished</code>方法简单地返回保存在类本身的实例变量的值。</p>
<p><strong>清单 2-5</strong> 定义并发操作</p>
<table>
<thead>
<tr>
<th><code>@interface MyOperation：NSOperation &#123;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>布尔执行；</code></td>
</tr>
<tr>
<td><code>BOOL完成；</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>-（void）completeOperation；</code></td>
</tr>
<tr>
<td><code>@结束</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>@implementation MyOperation</code></td>
</tr>
<tr>
<td><code>-（id）init &#123;</code></td>
</tr>
<tr>
<td><code>自我= [超级初始化];</code></td>
</tr>
<tr>
<td><code>如果（自己）&#123;</code></td>
</tr>
<tr>
<td><code>执行=否;</code></td>
</tr>
<tr>
<td><code>完成=否；</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>返回自我</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>-（BOOL）是并发&#123;</code></td>
</tr>
<tr>
<td><code>返回是；</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>-（BOOL）正在执行&#123;</code></td>
</tr>
<tr>
<td><code>返回执行；</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>-（BOOL）已完成&#123;</code></td>
</tr>
<tr>
<td><code>返回完成；</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>@结束</code></td>
</tr>
</tbody></table>
<p>清单 2-6 显示了的<code>start</code>方法<code>MyOperation</code>。此方法的实现是最少的，以便演示您绝对必须执行的任务。在这种情况下，该方法仅启动一个新线程并将其配置为调用该<code>main</code>方法。该方法还更新<code>executing</code>成员变量并为<code>isExecuting</code>键路径生成 KVO 通知以反映该值的更改。完成工作后，此方法将简单地返回，保留新分离的线程来执行实际任务。</p>
<p><strong>清单 2-6</strong> start 方法</p>
<table>
<thead>
<tr>
<th><code>-（void）开始&#123;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>//在启动任务之前，请务必检查是否取消。</code></td>
</tr>
<tr>
<td><code>如果（[self isCancelled]）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//如果取消操作，则必须将操作移至完成状态。</code></td>
</tr>
<tr>
<td><code>[self willChangeValueForKey：@“ isFinished”]；</code></td>
</tr>
<tr>
<td><code>完成=是；</code></td>
</tr>
<tr>
<td><code>[self didChangeValueForKey：@“ isFinished”]；</code></td>
</tr>
<tr>
<td><code>返回;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//如果未取消操作，则开始执行任务。</code></td>
</tr>
<tr>
<td><code>[self willChangeValueForKey：@“ isExecuting”];</code></td>
</tr>
<tr>
<td><code>[NSThread detachNewThreadSelector：@selector（main）toTarget：self withObject：nil];</code></td>
</tr>
<tr>
<td><code>执行=是;</code></td>
</tr>
<tr>
<td><code>[self didChangeValueForKey：@“ isExecuting”];</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>清单 2-7 显示了<code>MyOperation</code>该类的其余实现。如<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW11">清单 2-6 所示</a>，该<code>main</code>方法是新线程的入口点。它执行与操作对象关联的工作，并在<code>completeOperation</code>最终完成该工作时调用自定义方法。<code>completeOperation</code>然后，该方法为<code>isExecuting</code>和<code>isFinished</code>路径生成所需的 KVO 通知，以反映操作状态的变化。</p>
<p><strong>清单 2-7</strong> 在完成时更新操作</p>
<table>
<thead>
<tr>
<th><code>-（void）main &#123;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>@尝试&#123;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//在此执行操作的主要工作。</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>[自我完成操作];</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>@catch（...）&#123;</code></td>
</tr>
<tr>
<td><code>//不要抛出异常。</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>-（void）completeOperation &#123;</code></td>
</tr>
<tr>
<td><code>[self willChangeValueForKey：@“ isFinished”]；</code></td>
</tr>
<tr>
<td><code>[self willChangeValueForKey：@“ isExecuting”];</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>执行=否;</code></td>
</tr>
<tr>
<td><code>完成=是；</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>[self didChangeValueForKey：@“ isExecuting”];</code></td>
</tr>
<tr>
<td><code>[self didChangeValueForKey：@“ isFinished”]；</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>即使取消了操作，也应始终通知 KVO 观察者您的操作现已完成。当一个操作对象依赖于其他操作对象的完成时，它将监视<code>isFinished</code>那些对象的键路径。仅当所有对象都报告它们完成时，相关操作才会发出信号，表明它已准备好运行。因此，无法生成完成通知可能会阻止应用程序中其他操作的执行。</p>
<h6 id="保持-KVO-合规性"><a href="#保持-KVO-合规性" class="headerlink" title="保持 KVO 合规性"></a>保持 KVO 合规性</h6><p>的<code>NSOperation</code>类是键-值观察（KVO）兼容以下关键路径：</p>
<ul>
<li><code>isCancelled</code></li>
<li><code>isConcurrent</code></li>
<li><code>isExecuting</code></li>
<li><code>isFinished</code></li>
<li><code>isReady</code></li>
<li><code>dependencies</code></li>
<li><code>queuePriority</code></li>
<li><code>completionBlock</code></li>
</ul>
<p>如果您重写该<code>start</code>方法或对<code>NSOperation</code>对象进行任何重要的自定义（而不是 override）<code>main</code>，则必须确保您的自定义对象对这些关键路径保持 KVO 兼容。覆盖该<code>start</code>方法时，您应该最关注的关键路径是<code>isExecuting</code>和<code>isFinished</code>。这些是重新实现该方法最常影响的关键路径。</p>
<p>如果要实现对除其他操作对象之外的其他对象的依赖关系的支持，则还可以重写该<code>isReady</code>方法并强制其返回，<code>NO</code>直到满足您的自定义依赖关系为止。（如果实现自定义依赖项，则如果仍然支持该类提供的默认依赖项管理系统，请确保<code>super</code>从<code>isReady</code>方法中调用<code>NSOperation</code>。）当操作对象的就绪状态更改时，请为<code>isReady</code>关键路径生成 KVO 通知以报告这些更改。除非您重写<code>addDependency:</code>or <code>removeDependency:</code>方法，否则您不必担心会为<code>dependencies</code>密钥路径生成 KVO 通知。</p>
<p>尽管您可以为的其他关键路径生成 KVO 通知<code>NSOperation</code>，但您不太可能需要这样做。如果您需要取消操作，则只需调用现有<code>cancel</code>方法即可。同样，您几乎不需要修改操作对象中的队列优先级信息。最后，除非您的操作能够动态更改其并发状态，否则您不需要为<code>isConcurrent</code>密钥路径提供 KVO 通知。</p>
<p>有关键值观察以及如何在自定义对象中支持键值的更多信息，请参见《_<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177i">键值观察编程指南》</a>_。</p>
<h4 id="自定义操作对象的执行行为"><a href="#自定义操作对象的执行行为" class="headerlink" title="自定义操作对象的执行行为"></a>自定义操作对象的执行行为</h4><p>操作对象的配置在创建对象之后但将它们添加到队列之前进行。本节中描述的配置类型可以应用于所有操作对象，而不管您是<code>NSOperation</code>自己继承还是使用现有的子类。</p>
<h6 id="配置互操作依赖性"><a href="#配置互操作依赖性" class="headerlink" title="配置互操作依赖性"></a>配置互操作依赖性</h6><p>依赖关系是您序列化不同操作对象的执行的一种方法。依赖于其他操作的操作要等到它所依赖的所有操作完成执行后才能开始执行。因此，您可以使用依赖关系在两个操作对象之间创建简单的一对一依赖关系或构建复杂的对象依赖关系图。</p>
<p>要建立两个操作对象之间的依赖关系，请使用的<code>addDependency:</code>方法<code>NSOperation</code>。此方法创建从当前操作对象到您指定为参数的目标操作的单向依赖关系。这种依赖性意味着在目标对象完成执行之前，当前对象无法开始执行。依赖关系也不限于同一队列中的操作。操作对象管理它们自己的依赖关系，因此完全可以在操作之间创建依赖关系并将它们全部添加到不同的队列中。但是，不可接受的一件事是在操作之间创建循环依赖关系。这样做是程序员的错误，它将阻止受影响的操作运行。</p>
<p>当所有操作的依赖项本身都已完成执行时，操作对象通常可以执行。（如果自定义<code>isReady</code>方法的行为，则操作的就绪状态由您设置的条件决定。）如果操作对象在队列中，则该队列可随时开始执行该操作。如果您打算手动执行该操作，则取决于您调用该操作的<code>start</code>方法。</p>
<p><strong>要点：</strong> 在运行操作或将它们添加到操作队列之前，应始终配置依赖关系。之后添加的依赖关系可能不会阻止给定的操作对象运行。</p>
<p>依赖关系依赖于每一个操作对象每当对象状态发生变化时就发出适当的 KVO 通知。如果自定义操作对象的行为，则可能需要从自定义代码生成适当的 KVO 通知，以避免引起依赖关系问题。有关 KVO 通知和操作对象的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW10">维护 KVO 合规性</a>。有关配置依赖项的其他信息，请参见《_<a href="https://developer.apple.com/documentation/foundation/nsoperation">NSOperation 类参考》</a>_。</p>
<h6 id="更改工序的执行优先级"><a href="#更改工序的执行优先级" class="headerlink" title="更改工序的执行优先级"></a>更改工序的执行优先级</h6><p>对于添加到队列中的操作，执行顺序首先由排队的操作的就绪状态确定，然后由其相对优先级确定。就绪状态由操作对其他操作的依赖关系确定，但是优先级是操作对象本身的属性。默认情况下，所有新操作对象都具有“普通”优先级，但是您可以根据需要通过调用对象的<code>setQueuePriority:</code>方法来增加或减少该优先级。</p>
<p>优先级仅适用于同一操作队列中的操作。如果您的应用程序具有多个操作队列，则每个队列都将独立于其他队列的优先级分配给自己的操作。因此，低优先级操作仍然有可能在不同队列中先于高优先级操作执行。</p>
<p>优先级不能替代依赖关系。优先级确定操作队列开始仅执行当前准备就绪的那些操作的顺序。例如，如果队列同时包含高优先级和低优先级操作，并且两个操作都准备就绪，则该队列首先执行高优先级操作。但是，如果高优先级操作尚未准备就绪，但低优先级操作已就绪，则队列首先执行低优先级操作。如果要阻止一个操作在另一个操作完成之前开始，则必须使用依赖项（如<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW17">配置互操作依赖项中所述</a>）。</p>
<h6 id="更改底层线程优先级"><a href="#更改底层线程优先级" class="headerlink" title="更改底层线程优先级"></a>更改底层线程优先级</h6><p>在 OS X v10.6 和更高版本中，可以配置操作的基础线程的执行优先级。系统中的线程策略本身由内核管理，但通常，优先级较高的线程比低优先级的线程有更多的运行机会。在操作对象中，将线程优先级指定为 0.0 到 1.0 范围内的浮点值，其中 0.0 是最低优先级，而 1.0 是最高优先级。如果未指定显式线程优先级，则该操作将以默认线程优先级 0.5 运行。</p>
<p>若要设置操作的线程优先级，必须先将<code>setThreadPriority:</code>操作对象的方法添加到队列中（或手动执行），然后再调用该方法。当需要执行该操作时，默认<code>start</code>方法将使用您指定的值来修改当前线程的优先级。此新优先级<code>main</code>仅在您的操作方法期间有效。所有其他代码（包括操作的完成块）均以默认线程优先级运行。如果创建并发操作并因此覆盖该<code>start</code>方法，则必须自己配置线程优先级。</p>
<h6 id="设定完成区块"><a href="#设定完成区块" class="headerlink" title="设定完成区块"></a>设定完成区块</h6><p>在 OS X v10.6 和更高版本中，某个操作可以在其主要任务完成执行时执行完成块。您可以使用完成块来执行任何不属于主要任务的工作。例如，您可以使用此块来通知感兴趣的客户端操作本身已完成。并发操作对象可能使用此块来生成其最终的 KVO 通知。</p>
<p>要设置完成块，请使用的<code>setCompletionBlock:</code>方法<code>NSOperation</code>。传递给此方法的块应该没有参数，也没有返回值。</p>
<h4 id="实施操作对象的技巧"><a href="#实施操作对象的技巧" class="headerlink" title="实施操作对象的技巧"></a>实施操作对象的技巧</h4><p>尽管操作对象相当容易实现，但是在编写代码时，您应该注意几件事。以下各节描述了为操作对象编写代码时应考虑的因素。</p>
<h6 id="管理操作对象中的内存"><a href="#管理操作对象中的内存" class="headerlink" title="管理操作对象中的内存"></a>管理操作对象中的内存</h6><p>以下各节描述了操作对象中良好的内存管理的关键元素。有关 Objective-C 程序中的内存管理的一般信息，请参阅《_<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html#//apple_ref/doc/uid/10000011i">高级内存管理编程指南》</a>_。</p>
<p>######## 避免按线程存储</p>
<p>尽管大多数操作在线程上执行，但在非并行操作的情况下，该线程通常由操作队列提供。如果操作队列为您提供了一个线程，则应考虑该线程归队列所有，而不应被您的操作触及。特别是，您永远不要将任何数据与您自己创建或管理的线程无关。由操作队列管理的线程来来往往取决于系统和应用程序的需求。因此，使用每线程存储在操作之间传递数据是不可靠的，并且很可能失败。</p>
<p>对于操作对象，无论如何都没有理由使用每线程存储。初始化操作对象时，应为该对象提供完成其工作所需的一切。因此，操作对象本身提供了所需的上下文存储。所有传入和传出的数据都应存储在此处，直到可以将其重新集成到您的应用程序中或不再需要为止。</p>
<p>######## 根据需要保留对操作对象的引用</p>
<p>仅仅因为操作对象是异步运行的，您不应该假设您可以创建它们而忘记它们。它们仍然只是对象，您需要管理代码需要的对它们的任何引用。如果您需要在操作完成后从结果数据中检索结果，这尤其重要。</p>
<p>您应该始终保留自己对操作的引用的原因是，您以后可能没有机会向该队列询问对象。队列尽一切努力尽快分配和执行操作。在许多情况下，队列在添加后几乎立即开始执行操作。等到您自己的代码返回队列以获取对该操作的引用时，该操作可能已经完成并从队列中删除。</p>
<h6 id="处理错误和异常"><a href="#处理错误和异常" class="headerlink" title="处理错误和异常"></a>处理错误和异常</h6><p>因为操作本质上是应用程序内部的离散实体，所以它们负责处理出现的任何错误或异常。在 OS X v10.6 和更高版本中，该类<code>start</code>提供的默认方法<code>NSOperation</code>不会捕获异常。（在 OS X v10.5 中，start 方法确实捕获和抑制异常。）您自己的代码应始终直接捕获和抑制异常。它还应检查错误代码，并根据需要通知应用程序的适当部分。并且，如果替换了该<code>start</code>方法，则必须类似地在自定义实现中捕获任何异常，以防止它们离开基础线程的范围。</p>
<p>在错误情况类型中，您应该准备处理以下几种：</p>
<ul>
<li>检查并处理 UNIX <code>errno</code>风格的错误代码。</li>
<li>检查方法和函数返回的显式错误代码。</li>
<li>捕获由您自己的代码或其他系统框架引发的异常。</li>
<li>捕获由<code>NSOperation</code>类本身引发的异常，在以下情况下会引发异常：<ul>
<li>当操作尚未准备好执行但其<code>start</code>方法被调用时</li>
<li>当操作正在执行或完成时（可能是因为已取消），并且<code>start</code>再次调用了其方法</li>
<li>当您尝试将完成块添加到已执行或已完成的操作中时</li>
<li>当您尝试检索<code>NSInvocationOperation</code>已取消对象的结果时</li>
</ul>
</li>
</ul>
<p>如果您的自定义代码确实遇到异常或错误，则应采取所需的任何步骤将该错误传播到应用程序的其余部分。本<code>NSOperation</code>类不沿着错误的结果代码或例外传递给你的应用程序的其他部分提供了明确的方法。因此，如果此类信息对您的应用程序很重要，则必须提供必要的代码。</p>
<h4 id="确定操作对象的适当范围"><a href="#确定操作对象的适当范围" class="headerlink" title="确定操作对象的适当范围"></a>确定操作对象的适当范围</h4><p>尽管可以向操作队列中添加任意数量的操作，但是这样做通常是不切实际的。像任何对象一样，<code>NSOperation</code>该类的实例会消耗内存，并具有与其执行相关的实际成本。如果每个操作对象仅执行少量工作，并且创建了数以万计的对象，则可能会发现与实际工作相比，您花费的时间更多。而且，如果您的应用程序已经受到内存的限制，您可能会发现，在内存中只有成千上万个操作对象可能会进一步降低性能。</p>
<p>有效使用操作的关键是在需要做的工作量和保持计算机忙之间找到适当的平衡。尝试确保您的操作完成了合理的工作量。例如，如果您的应用程序创建了 100 个操作对象以对 100 个不同的值执行相同的任务，请考虑创建 10 个操作对象以分别处理 10 个值。</p>
<p>您还应该避免一次将大量操作添加到队列中，或者避免将操作对象连续添加到队列中的速度比处理对象快。而不是用操作对象填充队列，而是分批创建这些对象。当一个批处理完成执行时，请使用完成块告诉您的应用程序创建一个新的批处理。当您有很多工作要做时，您希望使队列中充满足够的操作，以使计算机保持繁忙状态，但是您不想一次创建太多的操作，而导致应用程序内存不足。</p>
<p>当然，您创建的操作对象的数量以及在每个对象中执行的工作量是可变的，并且完全取决于您的应用程序。您应该始终使用仪器之类的工具来帮助您在效率和速度之间找到适当的平衡。有关可用于收集代码指标的工具和其他性能工具的<em><a href="https://developer.apple.com/library/archive/documentation/Performance/Conceptual/PerformanceOverview/Introduction/Introduction.html#//apple_ref/doc/uid/TP40001410">概述</a>*，请参见</em><a href="https://developer.apple.com/library/archive/documentation/Performance/Conceptual/PerformanceOverview/Introduction/Introduction.html#//apple_ref/doc/uid/TP40001410">性能概述</a>*。</p>
<h4 id="执行操作"><a href="#执行操作" class="headerlink" title="执行操作"></a>执行操作</h4><p>最终，您的应用程序需要执行操作才能完成关联的工作。在本节中，您将学习几种执行操作的方法，以及如何在运行时操纵操作的执行。</p>
<h6 id="将操作添加到操作队列"><a href="#将操作添加到操作队列" class="headerlink" title="将操作添加到操作队列"></a>将操作添加到操作队列</h6><p>到目前为止，执行操作的最简单方法是使用操作队列，它是<code>NSOperationQueue</code>类的实例。您的应用程序负责创建和维护打算使用的任何操作队列。一个应用程序可以有任意数量的队列，但是在给定的时间点可能要执行多少操作有实际的限制。操作队列与系统一起使用，以将并发操作的数量限制为适合于可用核心和系统负载的值。因此，创建其他队列并不意味着您可以执行其他操作。</p>
<p>要创建队列，可以像在任何其他对象中一样在应用程序中分配它：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NSOperationQueue * aQueue &#x3D; [[NSOperationQueue alloc] init];</span><br></pre></td></tr></table></figure>

<p>要将操作添加到队列，请使用<code>addOperation:</code>方法。在 OS X v10.6 和更高版本中，您可以使用<code>addOperations:waitUntilFinished:</code>方法添加操作组，也可以使用以下方法将块对象直接添加到队列中（没有相应的操作对象）<code>addOperationWithBlock:</code>方法。这些方法中的每一个都将一个操作（或多个操作）排队，并通知队列它应该开始处理它们。在大多数情况下，操作会在添加到队列后立即执行，但是由于多种原因，操作队列可能会延迟排队操作的执行。具体来说，如果排队的操作依赖于尚未完成的其他操作，则执行可能会延迟。如果操作队列本身被挂起或已经在执行其最大数量的并发操作，则执行也可能会延迟。以下示例显示了将操作添加到队列的基本语法。</p>
<table>
<thead>
<tr>
<th><code>[aQueue addOperation：anOp]; //添加一个操作</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>[aQueue addOperations：anArrayOfOps waitUntilFinished：NO]；//添加多个操作</code></td>
</tr>
<tr>
<td><code>[aQueue addOperationWithBlock：^ &#123;</code></td>
</tr>
<tr>
<td><code>/* 做一点事。* /</code></td>
</tr>
<tr>
<td><code>&#125;];</code></td>
</tr>
</tbody></table>
<p><strong>重要：</strong></p>
<p>在将操作对象添加到队列之前，应该对其进行所有必要的配置和修改，因为一旦添加了操作对象，该操作就可以在任何时间运行，对于进行更改以达到预期效果而言可能为时已晚。</p>
<p>尽管<code>NSOperationQueue</code>该类是为同时执行操作而设计的，但是可以强制单个队列一次仅运行一个操作。的<code>setMaxConcurrentOperationCount:</code>方法可让您配置操作队列对象的最大并发操作数。将值 1 传递给此方法将导致队列一次仅执行一个操作。尽管一次只能执行一个操作，但是执行的顺序仍然基于其他因素，例如每个操作的就绪性及其分配的优先级。因此，串行化操作队列所提供的行为与 Grand Central Dispatch 中的串行调度队列所提供的行为完全不同。如果操作对象的执行顺序对您很重要，则应在将操作添加到队列之前使用依赖关系来建立顺序。有关配置依赖关系的信息，请参阅《<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW17">配置互操作依赖关系》</a>。</p>
<p>有关使用操作队列的信息，请参见*<a href="https://developer.apple.com/documentation/foundation/nsoperationqueue">NSOperationQueue 类参考</a>*。有关串行调度队列的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW6">创建串行调度队列</a>。</p>
<h6 id="手动执行操作"><a href="#手动执行操作" class="headerlink" title="手动执行操作"></a>手动执行操作</h6><p>尽管操作队列是运行操作对象的最方便的方法，但是也可以在没有队列的情况下执行操作。但是，如果选择手动执行操作，则应在代码中采取一些预防措施。特别是，该操作必须准备就绪可以运行，并且您必须始终使用其<code>start</code>方法启动它。</p>
<p>直到操作的<code>isReady</code>方法返回后，才认为该操作可以运行<code>YES</code>。该<code>isReady</code>方法被集成到<code>NSOperation</code>该类的依赖管理系统中，以提供操作的依赖状态。只有清除了其依赖性后，才可以开始执行操作。</p>
<p>手动执行操作时，应始终使用该<code>start</code>方法开始执行。您使用此方法，而不是<code>main</code>其他方法，因为该<code>start</code>方法在实际运行您的自定义代码之前会执行多项安全检查。特别是，默认<code>start</code>方法会生成操作正确处理其依赖关系所需的 KVO 通知。如果该操作已被取消，则此方法还可以正确避免执行该操作，并且如果您的操作实际上尚未准备好运行，则该方法将引发异常。</p>
<p>如果您的应用程序定义了并发操作对象，则还应该考虑<code>isConcurrent</code>在启动它们之前调用操作方法。在此方法返回的情况下<code>NO</code>，您的本地代码可以决定是在当前线程中同步执行操作还是首先创建单独的线程。但是，实施这种检查完全取决于您。</p>
<p>清单 2-8 显示了在手动执行操作之前应执行的检查类型的简单示例。如果该方法返回<code>NO</code>，则可以安排一个计时器，稍后再调用该方法。然后，您将继续重新安排计时器的时间，直到方法返回<code>YES</code>，这可能是由于操作被取消而发生的。</p>
<p><strong>清单 2-8</strong> 手动执行操作对象</p>
<table>
<thead>
<tr>
<th><code>-（BOOL）performOperation：（NSOperation *）anOp</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>BOOL ranIt = NO;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>如果（[anOp isReady] &amp;&amp;！[anOp isCancelled]）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>如果（！[anOp isConcurrent]）</code></td>
</tr>
<tr>
<td><code>[anOp开始]；</code></td>
</tr>
<tr>
<td><code>其他</code></td>
</tr>
<tr>
<td><code>[NSThread detachNewThreadSelector：@selector（开始）</code></td>
</tr>
<tr>
<td><code>toTarget：anOp withObject：nil];</code></td>
</tr>
<tr>
<td><code>ranIt =是；</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>否则，如果（[anOp isCancelled]）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//如果在开始之前已将其取消，</code></td>
</tr>
<tr>
<td><code>//将操作移至完成状态。</code></td>
</tr>
<tr>
<td><code>[self willChangeValueForKey：@“ isFinished”]；</code></td>
</tr>
<tr>
<td><code>[self willChangeValueForKey：@“ isExecuting”];</code></td>
</tr>
<tr>
<td><code>执行=否;</code></td>
</tr>
<tr>
<td><code>完成=是；</code></td>
</tr>
<tr>
<td><code>[self didChangeValueForKey：@“ isExecuting”];</code></td>
</tr>
<tr>
<td><code>[self didChangeValueForKey：@“ isFinished”]；</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//将ranIt设置为YES，以防止操作</code></td>
</tr>
<tr>
<td><code>//将来再次传递给此方法。</code></td>
</tr>
<tr>
<td><code>ranIt =是；</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>返回ranIt;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<h6 id="取消操作"><a href="#取消操作" class="headerlink" title="取消操作"></a>取消操作</h6><p>一旦添加到操作队列中，操作对象将有效地归队列所有，并且无法删除。使操作出队的唯一方法是取消操作。您可以通过调用单个操作对象的<code>cancel</code>方法来取消它，也可以通过调用<code>cancelAllOperations</code>队列对象的方法来取消队列中的所有操作对象。</p>
<p>仅当确定不再需要操作时，才应取消操作。发出取消命令会将操作对象置于“已取消”状态，这将阻止其运行。由于取消的操作仍被认为是“完成”的，因此依赖于该操作的对象将收到适当的 KVO 通知以清除该依赖关系。因此，更常见的是响应某些重大事件来取消所有排队的操作，例如应用程序退出或用户明确要求取消，而不是有选择地取消操作。</p>
<h6 id="等待操作完成"><a href="#等待操作完成" class="headerlink" title="等待操作完成"></a>等待操作完成</h6><p>为了获得最佳性能，您应将操作设计为尽可能异步，使应用程序在执行操作时可以自由执行其他工作。如果创建操作的代码也处理该操作的结果，则可以使用<code>waitUntilFinished</code>方法<code>NSOperation</code>来阻止该代码，直到操作完成。但是，通常，如果可以帮助，最好避免调用此方法。阻塞当前线程可能是一个方便的解决方案，但是它的确在代码中引入了更多的序列化，并限制了并发的总量。</p>
<p><strong>重要：</strong> 永远不要等待应用程序主线程中的操作。您只能从辅助线程或其他操作中执行此操作。阻塞主线程会阻止您的应用程序响应用户事件，并可能使您的应用程序显示为无响应。</p>
<p>除了等待单个操作完成之外，您还可以通过调用的<code>waitUntilAllOperationsAreFinished</code>方法来等待队列中的所有操作<code>NSOperationQueue</code>。等待整个队列结束时，请注意您的应用程序的其他线程仍可以向队列添加操作，从而延长了等待时间。</p>
<h6 id="挂起和恢复队列"><a href="#挂起和恢复队列" class="headerlink" title="挂起和恢复队列"></a>挂起和恢复队列</h6><p>如果要暂时停止操作的执行，则可以使用<code>setSuspended:</code>方法暂停相应的操作队列。暂停队列不会导致已经执行的操作在其任务中间暂停。它只是防止新操作被安排执行。您可能会暂停队列以响应用户暂停任何正在进行的工作的请求，因为期望用户最终可能希望恢复该工作。</p>
<h2 id="调度队列-1"><a href="#调度队列-1" class="headerlink" title="调度队列"></a>调度队列</h2><p>大中央调度（GCD）调度队列是执行任务的强大工具。调度队列使您可以相对于调用者异步或同步执行任意代码块。您可以使用调度队列来执行几乎在单独的线程上执行过的所有任务。调度队列的优点是，与相应的线程代码相比，它们更易于使用并且在执行这些任务时效率更高。</p>
<p>本章介绍了分派队列，以及有关如何在应用程序中使用它们执行常规任务的信息。如果要用调度队列替换现有的线程代码，可以在<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/ThreadMigration/ThreadMigration.html#//apple_ref/doc/uid/TP40008091-CH105-SW1">《从线程迁移》中</a>找到一些其他技巧。</p>
<h4 id="关于调度队列"><a href="#关于调度队列" class="headerlink" title="关于调度队列"></a>关于调度队列</h4><p>调度队列是在应用程序中异步并发执行任务的简便方法。一个<em>任务</em>很简单，就是你的应用程序需要执行一些工作。例如，您可以定义任务来执行一些计算，创建或修改数据结构，处理从文件中读取的某些数据或任何其他事物。通过将相应的代码放在函数或块对象内并将其添加到调度队列中，可以定义任务。</p>
<p>调度队列是一个类似对象的结构，用于管理您提交给它的任务。所有调度队列均为先进先出数据结构。因此，添加到队列中的任务始终以与添加任务相同的顺序启动。GCD 自动为您提供了一些调度队列，但您可以为特定目的创建其他调度队列。表 3-1 列出了可用于您的应用程序的调度队列的类型以及如何使用它们。</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">序列号</td>
<td align="left">串行队列（也称为<em>专用调度队列</em>）按添加到队列的顺序一次执行一个任务。当前执行的任务在分派队列管理的不同线程（随任务的不同而不同）上运行。串行队列通常用于同步对特定资源的访问。您可以根据需要创建任意数量的串行队列，并且每个队列相对于所有其他队列可以同时运行。换句话说，如果创建四个串行队列，则每个队列一次只能执行一个任务，但是最多仍可以同时执行四个任务，每个队列一个。有关如何创建串行队列的信息，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW6">创建串行调度队列</a>。</td>
</tr>
<tr>
<td align="left">同时</td>
<td align="left">并发队列（也称为<em>全局调度队列的一种</em>）可以并发执行一个或多个任务，但是任务仍然按照它们添加到队列中的顺序启动。当前执行的任务在分派队列管理的不同线程上运行。在任何给定点执行的任务的确切数量是可变的，并且取决于系统条件。在 iOS 5 及更高版本中，您可以通过指定<code>DISPATCH_QUEUE_CONCURRENT</code>作为队列类型来自己创建并发调度队列。另外，有四个预定义的全局并发队列供您的应用程序使用。有关如何获取全局并发队列的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW5">获取全局并发调度队列</a>。</td>
</tr>
<tr>
<td align="left">主调度队列</td>
<td align="left">主调度队列是全局可用的串行队列，可在应用程序的主线程上执行任务。该队列与应用程序的运行循环（如果存在）一起工作，以使排队任务的执行与附加到运行循环的其他事件源的执行交织在一起。因为它在应用程序的主线程上运行，所以通常将其用作应用程序的关键同步点。尽管您无需创建主调度队列，但仍需要确保应用程序适当地耗尽它。有关如何管理此队列的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW15">在主线程上执行任务</a>。</td>
</tr>
</tbody></table>
<p>当涉及到向应用程序添加并发时，分派队列提供了一些优于线程的优点。最直接的好处是工作队列编程模型的简单性。使用线程，您必须为要执行的工作以及线程本身的创建和管理编写代码。调度队列使您可以专注于实际要执行的工作，而不必担心线程的创建和管理。而是由系统为您处理所有线程的创建和管理。优点是该系统比任何单个应用程序都能够更有效地管理线程。系统可以根据可用资源和当前系统状况动态扩展线程数量。此外，</p>
<p>尽管您可能认为很难为调度队列重写代码，但是为调度队列编写代码通常比为线程编写代码容易。编写代码的关键是设计独立且能够异步运行的任务。（实际上，这对于线程和调度队列都是正确的。）但是，调度队列具有优势的是可预测性。如果您有两个任务访问相同的共享资源但在不同的线程上运行，则每个线程都可以首先修改资源，并且您需要使用锁来确保这两个任务不会同时修改该资源。使用调度队列，您可以将两个任务都添加到串行调度队列中，以确保在任何给定时间只有一个任务修改了资源。</p>
<p>尽管您可能正确地指出了在串行队列中运行的两个任务不能同时运行，但是您必须记住，如果两个线程同时进行锁定，则线程提供的任何并发性都会丢失或显着减少。更重要的是，线程模型需要创建两个线程，这两个线程同时占用内核和用户空间内存。调度队列不会为它们的线程支付相同的内存损失，并且它们使用的线程将保持繁忙并且不会被阻塞。</p>
<p>关于调度队列，需要记住的其他一些关键点包括：</p>
<ul>
<li>调度队列相对于其他调度队列同时执行其任务。任务的序列化仅限于单个调度队列中的任务。</li>
<li>系统确定任何一次执行的任务总数。因此，在 100 个不同的队列中具有 100 个任务的应用程序可能不会并发执行所有这些任务（除非它具有 100 个或更多个有效内核）。</li>
<li>选择要启动的新任务时，系统会考虑队列优先级。有关如何设置串行队列的优先级的信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW7">为</a>队列<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW7">提供清理功能</a>。</li>
<li>队列中的任务在添加到队列时必须准备就绪才能执行。（如果您以前使用过 Cocoa 操作对象，请注意，此行为不同于模型操作使用的行为。）</li>
<li>专用调度队列是引用计数的对象。请注意，除了将队列保留在您自己的代码中之外，还可以将调度源附加到队列并增加其保留计数。因此，您必须确保取消所有调度源，并通过适当的释放调用平衡所有保留调用。有关保留和释放队列的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW11">调度队列的内存管理</a>。有关调度源的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW12">关于调度源</a>。</li>
</ul>
<p>有关用于操作调度队列的接口的更多信息，请参见<em>Grand Central Dispatch（GCD）参考</em>。</p>
<h4 id="队列相关技术"><a href="#队列相关技术" class="headerlink" title="队列相关技术"></a>队列相关技术</h4><p>除了调度队列，Grand Central Dispatch 还提供了几种使用队列的技术来帮助您管理代码。表 3-2 列出了这些技术，并提供了指向您可以找到有关它们的更多信息的链接。</p>
<table>
<thead>
<tr>
<th align="left">技术</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">派遣组</td>
<td align="left">调度组是一种监视一组块对象是否完成的方法。（您可以根据需要同步或异步监视这些块。）组为依赖于其他任务完成的代码提供了一种有用的同步机制。有关使用组的更多信息，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW25">等待队列中的任务组</a>。</td>
</tr>
<tr>
<td align="left">调度信号量</td>
<td align="left">调度信号量与传统信号量相似，但通常更为有效。仅当由于信号量不可用而需要阻塞调用线程时，调度信号量才调用内核。如果信号灯可用，则不进行内核调用。有关如何使用调度信号量的示例，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW24">使用调度信号量来调节有限资源的使用</a>。</td>
</tr>
<tr>
<td align="left">派遣来源</td>
<td align="left">调度源响应于特定类型的系统事件而生成通知。您可以使用调度源来监视事件，例如流程通知，信号和描述符事件。发生事件时，调度源将您的任务代码异步提交到指定的调度队列进行处理。有关创建和使用调度源的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW1">调度源</a>。</td>
</tr>
</tbody></table>
<h4 id="使用块实现任务"><a href="#使用块实现任务" class="headerlink" title="使用块实现任务"></a>使用块实现任务</h4><p>块对象是一种基于 C 的语言功能，可以在 C， Objective-C 和 C ++代码中使用。块使定义一个独立的工作单元变得容易。尽管它们看起来类似于函数指针，但实际上是由类似于对象的基础数据结构表示一个块，并由编译器为您创建和管理该块。编译器打包您提供的代码（以及所有相关数据），并将其封装为可存在于堆中并在应用程序中传递的形式。</p>
<p>块的主要优点之一是它们能够使用其词法范围之外的变量。当您在函数或方法中定义一个块时，该块在某些方面可以充当传统代码块。例如，一个块可以读取在父作用域中定义的变量的值。块访问的变量被复制到堆上的块数据结构中，以便块稍后可以访问它们。将块添加到调度队列时，通常必须将这些值保留为只读格式。但是，同步执行的块也可以使用带有<code>__block</code>关键字前缀的变量，以将数据返回到父级的调用范围。</p>
<p>您可以使用类似于函数指针的语法来声明与代码内联的块。块和函数指针之间的主要区别在于，块名前面带有脱字符号（<code>^</code>）而不是星号（<code>*</code>）。像函数指针一样，您可以将参数传递给块并从中接收返回值。清单 3-1 显示了如何在代码中同步声明和执行块。该变量<code>aBlock</code>声明为采用单个整数参数且不返回任何值的块。然后将与该原型匹配的实际块分配给<code>aBlock</code>并声明为内联。最后一行立即执行该块，将指定的整数打印到标准输出中。</p>
<p><strong>清单 3-1</strong> 一个简单的块示例</p>
<table>
<thead>
<tr>
<th><code>int x = 123;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>整数y = 456;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//块声明和赋值</code></td>
</tr>
<tr>
<td><code>无效（^ aBlock）（int）= ^（int z）&#123;</code></td>
</tr>
<tr>
<td><code>printf（“％d％d％d \ n”，x，y，z）;</code></td>
</tr>
<tr>
<td><code>&#125;;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//执行块</code></td>
</tr>
<tr>
<td><code>aBlock（789）; //打印：123456789</code></td>
</tr>
</tbody></table>
<p>以下是设计模块时应考虑的一些关键准则的摘要：</p>
<ul>
<li>对于计划使用分派队列异步执行的块，可以从父函数或方法中捕获标量变量并将其用于块中，这是安全的。但是，您不应尝试捕获由调用上下文分配和删除的大型结构或其他基于指针的变量。在您的块执行时，该指针引用的内存可能会消失。当然，自己分配内存（或对象）并将该内存的所有权明确移交给该块是安全的。</li>
<li>调度队列复制添加到其中的块，并在完成执行时释放块。换句话说，在将块添加到队列之前，无需显式复制块。</li>
<li>尽管在执行小任务时，队列比原始线程更有效，但是创建块并在队列上执行它们仍然有开销。如果一个块的工作量太少，则以内联方式执行它比将其分配到队列中要便宜。判断某个块是否工作量太少的方法是使用性能工具收集每个路径的指标并进行比较。</li>
<li>不要缓存相对于基础线程的数据，并希望可以从其他块访问该数据。如果同一队列中的任务需要共享数据，请改用分派队列的上下文指针存储数据。有关如何访问调度队列的上下文数据的更多信息，请参见使用队列<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW13">存储自定义上下文信息</a>。</li>
<li>如果您的块创建了多个 Objective-C 对象，则可能需要将部分代码的代码封装在@autorelease 块中，以处理这些对象的内存管理。尽管 GCD 调度队列具有自己的自动释放池，但它们不保证这些池何时耗尽。如果您的应用程序受内存限制，则创建自己的自动释放池可让您以更规则的时间间隔释放自动释放对象的内存。</li>
</ul>
<p>有关块的更多信息，包括如何声明和使用它们，请参见*<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40007502">块编程主题</a>*。有关如何将块添加到调度队列中的信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW20">将任务添加到队列中</a>。</p>
<h4 id="创建和管理调度队列"><a href="#创建和管理调度队列" class="headerlink" title="创建和管理调度队列"></a>创建和管理调度队列</h4><p>在将任务添加到队列之前，必须确定要使用的队列类型以及打算如何使用它。调度队列可以串行或并行执行任务。另外，如果您对队列有特定的用途，则可以相应地配置队列属性。以下各节说明如何创建调度队列并配置它们以供使用。</p>
<h6 id="获取全局并发调度队列"><a href="#获取全局并发调度队列" class="headerlink" title="获取全局并发调度队列"></a>获取全局并发调度队列</h6><p>当您有多个可以并行运行的任务时，并发调度队列很有用。并发队列仍然是一个队列，因为它按照先进先出的顺序使任务出队。但是，并发队列可能会在其他先前任务完成之前使其他任务出队。并发队列在任何给定时刻执行的实际任务数是可变的，并且可以随着应用程序条件的变化而动态变化。许多因素会影响并发队列执行的任务数量，包括可用核心的数量，其他进程正在完成的工作量以及其他串行调度队列中任务的数量和优先级。</p>
<p>系统为每个应用程序提供四个并发调度队列。这些队列对于应用程序是全局的，仅按优先级进行区分。因为它们是全局的，所以您无需显式创建它们。相反，您可以使用<code>dispatch_get_global_queue</code>函数来请求队列之一，如以下示例所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dispatch_queue_t aQueue &#x3D; dispatch_get_global_queue（DISPATCH_QUEUE_PRIORITY_DEFAULT，0）;</span><br></pre></td></tr></table></figure>

<p>除了获取默认的并发队列外，还可以通过将<code>DISPATCH_QUEUE_PRIORITY_HIGH</code>和<code>DISPATCH_QUEUE_PRIORITY_LOW</code>常量传递给函数来获取高优先级和低优先级级别的队列，或者通过传递常量来获取背景队列<code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code>。如您所料，高优先级并发队列中的任务比默认队列和低优先级队列中的任务先执行。同样，默认队列中的任务在低优先级队列中的任务之前执行。</p>
<p><strong>注意：</strong> 该<code>dispatch_get_global_queue</code>函数的第二个参数保留给以后的扩展。现在，您应该始终通过<code>0</code>此参数。</p>
<p>尽管调度队列是引用计数的对象，但是您无需保留和释放全局并发队列。因为它们对于您的应用程序是全局的，所以将忽略对这些队列的保留和释放调用。因此，您不需要存储对这些队列的引用。<code>dispatch_get_global_queue</code>只要需要引用其中之一，就可以调用该函数。</p>
<h6 id="创建串行调度队列"><a href="#创建串行调度队列" class="headerlink" title="创建串行调度队列"></a>创建串行调度队列</h6><p>当您希望任务以特定顺序执行时，串行队列很有用。串行队列一次只执行一个任务，并且总是从队列的开头拉任务。您可以使用串行队列而不是锁来保护共享资源或可变数据结构。与锁不同，串行队列可确保任务以可预测的顺序执行。而且，只要您异步地将任务提交到串行队列，该队列就永远不会死锁。</p>
<p>与为您创建的并发队列不同，您必须显式创建和管理要使用的任何串行队列。您可以为您的应用程序创建任意数量的串行队列，但应避免创建大量串行队列，这仅仅是为了同时执行尽可能多的任务。如果要同时执行大量任务，请将其提交到全局并发队列之一。创建串行队列时，请尝试确定每个队列的用途，例如保护资源或同步应用程序的某些关键行为。</p>
<p>清单 3-2 显示了创建自定义串行队列所需的步骤。该<code>dispatch_queue_create</code>函数有两个参数：队列名称和一组队列属性。调试器和性能工具显示队列名称，以帮助您跟踪任务的执行方式。队列属性保留供将来使用，应为<code>NULL</code>。</p>
<p><strong>清单 3-2</strong> 创建一个新的串行队列</p>
<table>
<thead>
<tr>
<th><code>dispatch_queue_t队列；</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>队列= dispatch_queue_create（“ com.example.MyQueue”，NULL）;</code></td>
</tr>
</tbody></table>
<p>除了您创建的任何自定义队列之外，系统还会自动创建一个串行队列并将其绑定到应用程序的主线程。有关获取主线程队列的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW3">在运行时获取公共队列</a>。</p>
<h6 id="在运行时获取通用队列"><a href="#在运行时获取通用队列" class="headerlink" title="在运行时获取通用队列"></a>在运行时获取通用队列</h6><p>Grand Central Dispatch 提供的功能使您可以从应用程序访问几个常见的调度队列：</p>
<ul>
<li>使用该<code>dispatch_get_current_queue</code>功能进行调试或测试当前队列的身份。从一个块对象内部调用该函数将返回该块已提交到的队列（现在大概在该队列上运行）。从块外部调用此函数将为您的应用程序返回默认的并发队列。</li>
<li>使用该<code>dispatch_get_main_queue</code>函数获取与应用程序的主线程关联的串行调度队列。此队列是为 Cocoa 应用程序以及在主线程上调用该<code>dispatch_main</code>函数或配置运行循环（使用<code>CFRunLoopRef</code>类型或<code>NSRunLoop</code>对象）的应用程序自动创建的。</li>
<li>使用该<code>dispatch_get_global_queue</code>函数获取任何共享的并发队列。有关更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW5">获取全局并发调度队列</a>。</li>
</ul>
<h6 id="调度队列的内存管理"><a href="#调度队列的内存管理" class="headerlink" title="调度队列的内存管理"></a>调度队列的内存管理</h6><p>调度队列和其他调度对象是引用计数的数据类型。创建串行调度队列时，它的初始引用计数为 1。可以使用<code>dispatch_retain</code>和<code>dispatch_release</code>函数根据需要增加和减少引用计数。当队列的引用计数达到零时，系统异步取消分配该队列。</p>
<p>保留和释放调度对象（例如队列）很重要，以确保它们在使用时仍保留在内存中。与内存管理的 Cocoa 对象一样，一般规则是，如果计划使用传递给代码的队列，则应在使用该队列之前保留该队列，并在不再需要时释放它。这种基本模式可确保队列在您使用期间一直保留在内存中。</p>
<p><strong>注意：</strong> 您不需要保留或释放任何全局调度队列，包括并发调度队列或主调度队列。保留或释放队列的任何尝试都将被忽略。</p>
<p>即使实现垃圾收集的应用程序，您仍然必须保留并释放您的调度队列和其他调度对象。Grand Central Dispatch 不支持垃圾回收模型来回收内存。</p>
<h6 id="使用队列存储自定义上下文信息"><a href="#使用队列存储自定义上下文信息" class="headerlink" title="使用队列存储自定义上下文信息"></a>使用队列存储自定义上下文信息</h6><p>所有调度对象（包括调度队列）都允许您将自定义上下文数据与该对象相关联。要在给定对象上设置并获取此数据，请使用<code>dispatch_set_context</code>和<code>dispatch_get_context</code>函数。系统不会以任何方式使用您的自定义数据，这取决于您在适当的时间分配和取消分配数据。</p>
<p>对于队列，您可以使用上下文数据来存储指向 Objective-C 对象或其他数据结构的指针，该指针或数据结构有助于识别队列或其在代码中的预期用途。您可以使用队列的终结器函数在释放上下文数据之前从队列中取消分配（或取消关联）您的上下文数据。<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW8">清单 3-3</a>给出了如何编写一个终结器函数来清除队列上下文数据的示例。</p>
<h6 id="提供队列的清理功能"><a href="#提供队列的清理功能" class="headerlink" title="提供队列的清理功能"></a>提供队列的清理功能</h6><p>创建串行调度队列后，可以附加终结器函数，以在释放队列时执行任何自定义清除。调度队列是引用计数的对象，您可以使用该<code>dispatch_set_finalizer_f</code>函数指定当队列的引用计数达到零时要执行的函数。您可以使用此函数清除与队列关联的上下文数据，并且仅当上下文指针不是时才调用该函数<code>NULL</code>。</p>
<p>清单 3-3 显示了一个自定义的终结器函数和一个创建队列并安装该终结器的函数。队列使用终结器功能释放存储在队列上下文指针中的数据。（从代码引用的<code>myInitializeDataContextFunction</code>和<code>myCleanUpDataContextFunction</code>函数是自定义函数，您将提供这些函数来初始化和清除数据结构本身的内容。）传递给 finalizer 函数的上下文指针包含与队列关联的数据对象。</p>
<p><strong>清单 3-3</strong> 安装队列清除功能</p>
<table>
<thead>
<tr>
<th><code>无效myFinalizerFunction（无效*上下文）</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>MyDataContext * theData =（MyDataContext *）上下文;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//清理结构的内容</code></td>
</tr>
<tr>
<td><code>myCleanUpDataContextFunction（theData）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//现在释放结构本身。</code></td>
</tr>
<tr>
<td><code>免费（theData）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>dispatch_queue_t createMyQueue（）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>MyDataContext *数据=（MyDataContext *）malloc（sizeof（MyDataContext））;</code></td>
</tr>
<tr>
<td><code>myInitializeDataContextFunction（data）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//创建队列并设置上下文数据。</code></td>
</tr>
<tr>
<td><code>dispatch_queue_t serialQueue = dispatch_queue_create（“ com.example.CriticalTaskQueue”，NULL）;</code></td>
</tr>
<tr>
<td><code>dispatch_set_context（serialQueue，data）;</code></td>
</tr>
<tr>
<td><code>dispatch_set_finalizer_f（serialQueue，＆myFinalizerFunction）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>返回serialQueue;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<h4 id="将任务添加到队列"><a href="#将任务添加到队列" class="headerlink" title="将任务添加到队列"></a>将任务添加到队列</h4><p>要执行任务，必须将其分派到适当的分派队列。您可以同步或异步分配任务，也可以单个或成组分配任务。进入队列后，鉴于队列的约束和队列中已有的任务，该队列将负责尽快执行您的任务。本节介绍了一些将任务分配到队列的技术，并介绍了每种方法的优点。</p>
<h6 id="将单个任务添加到队列"><a href="#将单个任务添加到队列" class="headerlink" title="将单个任务添加到队列"></a>将单个任务添加到队列</h6><p>有两种将任务添加到队列的方法：异步或同步。如果可能，与同步方法相比，首选使用<code>dispatch_async</code>和<code>dispatch_async_f</code>函数进行异步执行。将块对象或函数添加到队列时，无法知道该代码何时执行。结果，异步添加块或函数使您可以调度代码的执行，并继续从调用线程执行其他工作。如果您是从应用程序的主线程中调度任务的，那么这尤其重要-可能是响应某些用户事件。</p>
<p>尽管您应该尽可能异步地添加任务，但是有时仍然需要同步添加任务以防止出现竞争情况或其他同步错误。在这些情况下，可以使用<code>dispatch_sync</code>和<code>dispatch_sync_f</code>函数将任务添加到队列中。这些函数将阻止当前执行线程，直到指定任务完成执行为止。</p>
<p><strong>重要说明：</strong> 切勿在计划传递给该函数的队列中执行的任务中调用<code>dispatch_sync</code>or <code>dispatch_sync_f</code>函数。这对于保证死锁的串行队列特别重要，但对于并发队列也应避免。</p>
<p>以下示例显示如何使用基于块的变体异步和同步地调度任务：</p>
<table>
<thead>
<tr>
<th><code>dispatch_queue_t myCustomQueue;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>myCustomQueue = dispatch_queue_create（“ com.example.MyCustomQueue”，NULL）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>dispatch_async（myCustomQueue，^ &#123;</code></td>
</tr>
<tr>
<td><code>printf（“在这里做一些工作。\ n”）;</code></td>
</tr>
<tr>
<td><code>&#125;）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>printf（“第一个块可能已经运行，也可能没有运行。\ n”）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>dispatch_sync（myCustomQueue，^ &#123;</code></td>
</tr>
<tr>
<td><code>printf（“在这里做更多的工作。\ n”）;</code></td>
</tr>
<tr>
<td><code>&#125;）;</code></td>
</tr>
<tr>
<td><code>printf（“两个块都已完成。\ n”）;</code></td>
</tr>
</tbody></table>
<h6 id="完成任务后执行补全"><a href="#完成任务后执行补全" class="headerlink" title="完成任务后执行补全"></a>完成任务后执行补全</h6><p>就其性质而言，分派到队列的任务独立于创建任务的代码运行。但是，当任务完成后，您的应用程序可能仍希望得到该事实的通知，以便可以合并结果。在传统的异步编程中，您可以使用回调机制来执行此操作，但是对于调度队列，您可以使用完成块。</p>
<p>完成块只是您在原始任务结束时分派到队列的另一段代码。调用代码通常在启动任务时将完成块作为参数提供。任务代码要做的就是在完成工作后将指定的块或函数提交到指定的队列。</p>
<p>清单 3-4 显示了使用 blocks 实现的平均函数。平均函数的最后两个参数允许调用者指定在报告结果时要使用的队列和块。在求平均值函数的值之后，它将结果传递到指定的块并将其分派到队列。为了防止过早释放队列，至关重要的是首先保留该队列，并在分派完成块后将其释放。</p>
<p><strong>清单 3-4</strong> 在任务执行后执行完成回调</p>
<table>
<thead>
<tr>
<th><code>void average_async（int * data，size_t len，</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>dispatch_queue_t队列，无效（^ block）（int））</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//保留用户提供的队列</code></td>
</tr>
<tr>
<td><code>//确保它在完成之前不会消失</code></td>
</tr>
<tr>
<td><code>//可以调用块。</code></td>
</tr>
<tr>
<td><code>dispatch_retain（queue）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//在默认的并发队列上进行工作，然后</code></td>
</tr>
<tr>
<td><code>//用结果调用用户提供的块。</code></td>
</tr>
<tr>
<td><code>dispatch_async（dispatch_get_global_queue（DISPATCH_QUEUE_PRIORITY_DEFAULT，0），^ &#123;</code></td>
</tr>
<tr>
<td><code>int avg = average（data，len）;</code></td>
</tr>
<tr>
<td><code>dispatch_async（queue，^ &#123;block（avg）;&#125;）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//完成后释放用户提供的队列</code></td>
</tr>
<tr>
<td><code>dispatch_release（queue）;</code></td>
</tr>
<tr>
<td><code>&#125;）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<h6 id="同时执行循环迭代"><a href="#同时执行循环迭代" class="headerlink" title="同时执行循环迭代"></a>同时执行循环迭代</h6><p>并发调度队列可能会提高性能的一个地方是您的循环执行固定数量的迭代。例如，假设您有一个<code>for</code>循环，该循环在每次循环迭代中都完成了一些工作：</p>
<table>
<thead>
<tr>
<th>`对于（i = 0; i</th>
</tr>
</thead>
<tbody><tr>
<td><code>printf（“％u \ n”，i）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>如果在每次迭代过程中执行的工作与在所有其他迭代过程中执行的工作不同，并且每个连续循环的完成顺序并不重要，则可以使用<code>dispatch_apply</code>或<code>dispatch_apply_f</code>函数的调用来替换循环。这些函数为每次循环迭代将指定的块或函数提交到队列一次。因此，当调度到并发队列时，可以同时执行多个循环迭代。</p>
<p>您可以在调用<code>dispatch_apply</code>或时指定串行队列或并发队列<code>dispatch_apply_f</code>。传递并发队列使您可以同时执行多个循环迭代，这是使用这些功能的最常用方法。尽管使用串行队列是允许的，并且可以为您的代码做正确的事，但是使用这种队列与将循环保留在原处相比并没有真正的性能优势。</p>
<p><strong>重要说明：</strong> 和常规<code>for</code>循环一样，<code>dispatch_apply</code>and <code>dispatch_apply_f</code>函数直到所有循环迭代完成后才返回。因此，当从已经从队列上下文执行的代码中调用它们时，应该小心。如果您作为参数传递给函数的队列是一个串行队列，并且与执行当前代码的队列相同，则调用这些函数将使队列死锁。</p>
<p>因为它们有效地阻塞了当前线程，所以从主线程调用这些函数时也应小心，因为它们可能阻止事件处理循环及时响应事件。如果您的循环代码需要大量的处理时间，则可能需要从其他线程调用这些函数。</p>
<p>清单 3-5 显示了如何<code>for</code>用<code>dispatch_apply</code>语法替换前面的循环。传递给<code>dispatch_apply</code>函数的块必须包含一个标识当前循环迭代的参数。执行该块时，此参数的值<code>0</code>用于第一次迭代，<code>1</code>用于第二次迭代，依此类推。最后一次迭代的参数值是<code>count - 1</code>，其中<code>count</code>是迭代的总数。</p>
<p><strong>清单 3-5 同时</strong> 执行<code>for</code>循环的迭代</p>
<table>
<thead>
<tr>
<th><code>dispatch_queue_t队列= dispatch_get_global_queue（DISPATCH_QUEUE_PRIORITY_DEFAULT，0）;</code></th>
</tr>
</thead>
<tbody><tr>
<td>``</td>
</tr>
<tr>
<td><code>dispatch_apply（count，queue，^（size_t i）&#123;</code></td>
</tr>
<tr>
<td><code>printf（“％u \ n”，i）;</code></td>
</tr>
<tr>
<td><code>&#125;）;</code></td>
</tr>
</tbody></table>
<p>您应该确保您的任务代码在每次迭代中都进行合理的工作量。与您调度到队列中的任何块或函数一样，安排该代码执行的开销。如果循环的每次迭代仅执行少量工作，则调度代码的开销可能会超过将其分派到队列可能带来的性能收益。如果在测试期间发现这是正确的，则可以使用跨步来增加每次循环迭代期间执行的工作量。通过跨步，您可以将原始循环的多个迭代组合到一个块中，并按比例减少迭代计数。例如，如果您最初执行 100 次迭代，但决定使用 4 的步幅，则现在从每个块执行 4 次循环迭代，您的迭代计数为 25。<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/ThreadMigration/ThreadMigration.html#//apple_ref/doc/uid/TP40008091-CH105-SW2">循环代码的改进</a>。</p>
<h6 id="在主线程上执行任务"><a href="#在主线程上执行任务" class="headerlink" title="在主线程上执行任务"></a>在主线程上执行任务</h6><p>Grand Central Dispatch 提供了一个特殊的调度队列，您可以使用该队列在应用程序的主线程上执行任务。该队列是为所有应用程序自动提供的，并由在其主线程上设置运行循环（由<code>CFRunLoopRef</code>类型或<code>NSRunLoop</code>对象管理）的任何应用程序自动耗尽。如果您不是要创建 Cocoa 应用程序，并且不想显式设置运行循环，则必须调用该<code>dispatch_main</code>函数以显式消耗主调度队列。您仍然可以将任务添加到队列中，但是如果不调用此函数，则这些任务将永远不会执行。</p>
<p>您可以通过调用该<code>dispatch_get_main_queue</code>函数来获取应用程序主线程的调度队列。添加到此队列的任务在主线程本身上串行执行。因此，您可以将此队列用作在应用程序其他部分中完成工作的同步点。</p>
<h6 id="在任务中使用-Objective-C-对象"><a href="#在任务中使用-Objective-C-对象" class="headerlink" title="在任务中使用 Objective-C 对象"></a>在任务中使用 Objective-C 对象</h6><p>GCD 为 Cocoa 内存管理技术提供了内置支持，因此您可以在提交给分派队列的块中自由使用 Objective-C 对象。每个调度队列都维护自己的自动释放池，以确保自动释放的对象在某个时刻被释放；队列不保证它们实际释放这些对象的时间。</p>
<p>如果您的应用程序受内存限制，并且您的块创建了多个自动释放的对象，则创建自己的自动释放池是确保及时释放对象的唯一方法。如果您的块创建了数百个对象，则可能要创建多个自动释放池或定期排空池。</p>
<p>有关自动释放池和 Objective-C 内存管理的更多信息，请参见《_<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html#//apple_ref/doc/uid/10000011i">高级内存管理编程指南》</a>_。</p>
<h4 id="挂起和恢复队列-1"><a href="#挂起和恢复队列-1" class="headerlink" title="挂起和恢复队列"></a>挂起和恢复队列</h4><p>您可以通过挂起队列来阻止队列临时执行块对象。您可以使用<code>dispatch_suspend</code>函数挂起调度队列，然后使用函数来恢复它<code>dispatch_resume</code>。调用<code>dispatch_suspend</code>增加队列的挂起引用计数，调用<code>dispatch_resume</code>减少引用计数。当引用计数大于零时，队列保持挂起状态。因此，您必须平衡所有挂起的调用与匹配的恢复调用，以恢复处理块。</p>
<p><strong>重要：</strong> 挂起和恢复调用是异步的，仅在执行块之间生效。挂起队列不会导致已经执行的块停止。</p>
<h4 id="使用调度信号量来调节有限资源的使用"><a href="#使用调度信号量来调节有限资源的使用" class="headerlink" title="使用调度信号量来调节有限资源的使用"></a>使用调度信号量来调节有限资源的使用</h4><p>如果要提交给分派队列的任务访问某些有限资源，则可能要使用分派信号量来调节同时访问该资源的任务数。调度信号量的工作方式类似于常规信号量，但有一个例外。当资源可用时，获取调度信号的时间比获取传统系统信号的时间要少。这是因为对于这种特殊情况，Grand Central Dispatch 不会调用内核。它唯一调用内核的时间是当资源不可用时，系统需要停放线程，直到发信号为止。</p>
<p>使用调度信号量的语义如下：</p>
<ol>
<li>创建信号量（使用<code>dispatch_semaphore_create</code>函数）时，可以指定一个正整数，指示可用资源的数量。</li>
<li>在每个任务中，呼叫<code>dispatch_semaphore_wait</code>以等待信号量。</li>
<li>等待调用返回时，获取资源并进行工作。</li>
<li>处理完资源后，请释放该资源并通过调用该<code>dispatch_semaphore_signal</code>函数来指示信号量。</li>
</ol>
<p>有关这些步骤如何工作的示例，请考虑在系统上使用文件描述符。每个应用程序都可以使用有限数量的文件描述符。如果您有一个处理大量文件的任务，那么您不想一次打开这么多文件而导致文件描述符用尽。相反，您可以使用信号量来限制文件处理代码在任何时候使用的文件描述符的数量。您将合并到任务中的基本代码如下：</p>
<table>
<thead>
<tr>
<th><code>//创建信号量，指定初始池大小</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>dispatch_semaphore_t fd_sema = dispatch_semaphore_create（getdtablesize（）/ 2）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//等待一个免费的文件描述符</code></td>
</tr>
<tr>
<td><code>dispatch_semaphore_wait（fd_sema，DISPATCH_TIME_FOREVER）;</code></td>
</tr>
<tr>
<td><code>fd = open（“ / etc / services”，O_RDONLY）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//完成后释放文件描述符</code></td>
</tr>
<tr>
<td><code>关闭（FD）;</code></td>
</tr>
<tr>
<td><code>dispatch_semaphore_signal（fd_sema）;</code></td>
</tr>
</tbody></table>
<p>创建信号量时，请指定可用资源的数量。该值成为信号量的初始计数变量。每次您等待信号量时，该<code>dispatch_semaphore_wait</code>函数都会将变量 count 减 1。如果结果值为负，则该函数告诉内核阻塞您的线程。另一方面，该<code>dispatch_semaphore_signal</code>函数将 count 变量增加 1 以指示资源已释放。如果有任务被阻塞并等待资源，则随后其中一个将被解除阻塞并被允许执行其工作。</p>
<h4 id="等待排队的任务组"><a href="#等待排队的任务组" class="headerlink" title="等待排队的任务组"></a>等待排队的任务组</h4><p>调度组是一种阻塞线程的方法，直到一个或多个任务完成执行。您可以在所有指定任务完成之前无法取得进展的地方使用此行为。例如，在分派了多个任务以计算一些数据之后，您可以使用一个组来等待这些任务，然后在完成时处理结果。使用调度组的另一种方法是替代线程连接。您可以将相应的任务添加到调度组中，然后等待整个组，而不是启动几个子线程然后再与每个子线程联接。</p>
<p>清单 3-6 显示了建立组，向其分派任务并等待结果的基本过程。<code>dispatch_async</code>您可以使用<code>dispatch_group_async</code>函数代替使用该函数将任务调度到队列。此功能将任务与组关联，并将其排队等待执行。要等待一组任务完成，请使用该<code>dispatch_group_wait</code>函数，传入适当的组。</p>
<p><strong>清单 3-6</strong> 等待异步任务</p>
<table>
<thead>
<tr>
<th><code>dispatch_queue_t队列= dispatch_get_global_queue（DISPATCH_QUEUE_PRIORITY_DEFAULT，0）;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>dispatch_group_t组= dispatch_group_create（）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//将任务添加到组</code></td>
</tr>
<tr>
<td><code>dispatch_group_async（group，queue，^ &#123;</code></td>
</tr>
<tr>
<td><code>//一些异步工作</code></td>
</tr>
<tr>
<td><code>&#125;）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//在任务执行时做其他工作。</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//如果无法再取得进步，</code></td>
</tr>
<tr>
<td><code>//等待组阻止当前线程。</code></td>
</tr>
<tr>
<td><code>dispatch_group_wait（group，DISPATCH_TIME_FOREVER）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//不再需要该组时，将其释放。</code></td>
</tr>
<tr>
<td><code>dispatch_release（group）;</code></td>
</tr>
</tbody></table>
<h4 id="调度队列和线程安全"><a href="#调度队列和线程安全" class="headerlink" title="调度队列和线程安全"></a>调度队列和线程安全</h4><p>在调度队列的上下文中谈论线程安全性似乎很奇怪，但是线程安全性仍然是一个相关主题。每当您在应用程序中实现并发时，您应该了解以下几点：</p>
<ul>
<li>调度队列本身是线程安全的。换句话说，您可以从系统上的任何线程将任务提交到调度队列，而无需先获取锁或同步对该队列的访问。</li>
<li>不要<code>dispatch_sync</code>从传递给函数调用的同一队列中正在执行的任务中调用函数。这样做将死锁队列。如果需要分派到当前队列，请使用<code>dispatch_async</code>函数异步进行。</li>
<li>避免从提交到调度队列的任务中获取锁定。尽管可以安全地从任务中使用锁，但是当您获取锁时，如果该锁不可用，则可能会完全阻塞串行队列。同样，对于并发队列，等待锁可能会阻止其他任务执行。如果需要同步部分代码，请使用串行分派队列而不是锁。</li>
<li>尽管您可以获得有关运行任务的基础线程的信息，但最好避免这样做。有关调度队列与线程的兼容性的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/ThreadMigration/ThreadMigration.html#//apple_ref/doc/uid/TP40008091-CH105-SW18">与 POSIX 线程的兼容性</a>。</li>
</ul>
<p>有关如何更改现有线程代码以使用调度队列的其他提示，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/ThreadMigration/ThreadMigration.html#//apple_ref/doc/uid/TP40008091-CH105-SW1">《从线程迁移》</a>。</p>
<h2 id="派遣来源-1"><a href="#派遣来源-1" class="headerlink" title="派遣来源"></a>派遣来源</h2><p>每当您与基础系统进行交互时，您都必须为该任务做好准备而花费大量时间。调用内核或其他系统层涉及上下文的更改，与您自己的进程中发生的调用相比，更改成本相当高。结果，许多系统库提供了异步接口，以使您的代码可以向系统提交请求，并在处理该请求时继续执行其他工作。通过允许您提交请求并使用块和调度队列将结果报告回代码，Grand Central Dispatch 以此一般行为为基础。</p>
<h4 id="关于调度源"><a href="#关于调度源" class="headerlink" title="关于调度源"></a>关于调度源</h4><p>甲<em>调度源</em>是一个基本数据类型的坐标特定低层系统事件的处理。大中央调度支持以下类型的调度源：</p>
<ul>
<li><em>计时器调度源</em>生成定期通知。</li>
<li>UNIX 信号到达时，<em>信号分发源会</em>通知您。</li>
<li><em>描述符源会</em>通知您各种基于文件和套接字的操作，例如：<ul>
<li>当数据可供读取时</li>
<li>何时可以写入数据</li>
<li>在文件系统中删除，移动或重命名文件时</li>
<li>文件元信息更改时</li>
</ul>
</li>
<li><em>流程调度源会</em>通知您与流程相关的事件，例如：<ul>
<li>进程退出时</li>
<li>当流程发出呼叫<code>fork</code>或<code>exec</code>呼叫类型时</li>
<li>当信号传递到过程时</li>
</ul>
</li>
<li><em>Mach 端口调度源会</em>通知您与 Mach 相关的事件。</li>
<li><em>自定义调度源</em>是您定义并触发自己的源。</li>
</ul>
<p>调度源替换了通常用于处理系统相关事件的异步回调函数。配置调度源时，可以指定要监视的事件以及用于处理这些事件的调度队列和代码。您可以使用块对象或功能指定代码。当感兴趣的事件到达时，调度源将您的块或函数提交到指定的调度队列以执行。</p>
<p>与您手动提交到队列的任务不同，调度源为应用程序提供了连续的事件源。调度源将一直附加到其调度队列，直到您明确取消它为止。附加后，无论何时发生相应事件，它都会将其关联的任务代码提交到调度队列。某些事件（例如计时器事件）以固定的间隔发生，但大多数仅在特定条件出现时才偶尔发生。因此，调度源保留其关联的调度队列，以防止在事件可能仍未决时过早地将其释放。</p>
<p>为了防止事件积压在调度队列中，调度源实施事件合并方案。如果新事件到达前一个事件的事件处理程序之前已经出队并执行，则调度源将新事件数据中的数据与旧事件中的数据合并。根据事件的类型，合并可能会替换旧事件或更新其持有的信息。例如，基于信号的调度源仅提供有关最新信号的信息，而且还报告自从上次调用事件处理程序以来已传递了多少总信号。</p>
<h4 id="创建调度源"><a href="#创建调度源" class="headerlink" title="创建调度源"></a>创建调度源</h4><p>创建调度源涉及创建事件源和调度源本身。事件的来源是处理事件所需的任何本机数据结构。例如，对于基于描述符的调度源，您将需要打开描述符，而对于基于进程的源，则需要获取目标程序的进程 ID。有了事件源后，就可以按照以下方式创建相应的调度源：</p>
<ol>
<li>使用<code>dispatch_source_create</code>函数创建调度源。</li>
<li>配置调度源：<ul>
<li>将事件处理程序分配给调度源；请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW13">编写和安装事件处理程序</a>。</li>
<li>对于计时器源，使用<code>dispatch_source_set_timer</code>功能设置计时器信息；请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW2">创建计时器</a>。</li>
</ul>
</li>
<li>（可选）将取消处理程序分配给调度源；请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW14">安装取消处理程序</a>。</li>
<li>调用该<code>dispatch_resume</code>函数以开始处理事件；请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW8">暂停和恢复派遣源</a>。</li>
</ol>
<p>由于调度源在使用前需要进行一些其他配置，因此该<code>dispatch_source_create</code>函数以挂起状态返回调度源。挂起时，调度源将接收事件，但不对其进行处理。这使您有时间安装事件处理程序并执行处理实际事件所需的任何其他配置。</p>
<p>以下各节向您展示如何配置调度源的各个方面。有关显示如何配置特定类型的调度源的详细示例，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW22">调度源示例</a>。有关用于创建和配置调度源的功能的其他信息，请参阅《_Grand Central Dispatch（GCD）参考》_。</p>
<h6 id="编写和安装事件处理程序"><a href="#编写和安装事件处理程序" class="headerlink" title="编写和安装事件处理程序"></a>编写和安装事件处理程序</h6><p>要处理由调度源生成的事件，必须定义事件处理程序以处理这些事件。事件处理程序是您使用或函数安装在调度源上的函数或块对象。当事件到达时，调度源将您的事件处理程序提交到指定的调度队列以进行处理。<code>dispatch_source_set_event_handler``dispatch_source_set_event_handler_f</code></p>
<p>事件处理程序的主体负责处理任何到达的事件。如果事件处理程序已经排队，并在新事件到达时等待处理事件，则调度源将两个事件合并。事件处理程序通常只看到有关最新事件的信息，但是根据调度源的类型，事件处理程序也可能能够获取有关发生并合并的其他事件的信息。如果在事件处理程序开始执行之后到达一个或多个新事件，则调度源将保留这些事件，直到当前事件处理程序完成执行为止。此时，它将使用新事件再次将事件处理程序提交到队列。</p>
<p>基于函数的事件处理程序采用单个上下文指针，其中包含调度源对象，并且不返回任何值。基于块的事件处理程序不带参数，也没有返回值。</p>
<table>
<thead>
<tr>
<th><code>//基于块的事件处理程序</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>无效（^ dispatch_block_t）（无效）</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//基于函数的事件处理程序</code></td>
</tr>
<tr>
<td><code>无效（* dispatch_function_t）（无效*）</code></td>
</tr>
</tbody></table>
<p>在事件处理程序内部，您可以从调度源本身获取有关给定事件的信息。尽管将基于函数的事件处理程序作为参数传递给调度源的指针，但是基于块的事件处理程序必须自己捕获该指针。您可以通过正常引用包含调度源的变量来为您的块执行此操作。例如，以下代码片段捕获了<code>source</code>在块范围之外声明的变量。</p>
<table>
<thead>
<tr>
<th><code>dispatch_source_t source = dispatch_source_create（DISPATCH_SOURCE_TYPE_READ，</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>myDescriptor，0，myQueue）；</code></td>
</tr>
<tr>
<td><code>dispatch_source_set_event_handler（source，^ &#123;</code></td>
</tr>
<tr>
<td><code>//从捕获的源变量中获取一些数据</code></td>
</tr>
<tr>
<td><code>//来自父上下文。</code></td>
</tr>
<tr>
<td><code>估计的size_t = dispatch_source_get_data（source）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//继续阅读描述符...</code></td>
</tr>
<tr>
<td><code>&#125;）;</code></td>
</tr>
<tr>
<td><code>dispatch_resume（源）;</code></td>
</tr>
</tbody></table>
<p>通常会在块内部捕获变量，以实现更大的灵活性和动态性。当然，默认情况下，捕获的变量在块内是只读的。尽管块功能提供了在特定情况下修改捕获的变量的支持，但您不应在与分派源关联的事件处理程序中尝试这样做。调度源始终异步执行其事件处理程序，因此捕获的所有变量的定义范围可能在事件处理程序执行时就消失了。有关如何在块内捕获和使用变量的更多信息，请参见*<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40007502">块编程主题</a>*。</p>
<p>表 4-1 列出了可以从事件处理程序代码中调用以获取有关事件的信息的功能。</p>
<table>
<thead>
<tr>
<th align="left">功能</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>dispatch_source_get_handle</code></td>
<td align="left">此函数返回调度源管理的基础系统数据类型。对于描述符调度源，此函数返回一个<code>int</code>包含与调度源关联的描述符的类型。对于信号分配源，此函数返回一个<code>int</code>类型，该类型包含最近事件的信号编号。对于流程调度源，此函数返回<code>pid_t</code>要监视的流程的数据结构。对于马赫端口分配源，此函数返回<code>mach_port_t</code>数据结构。对于其他调度源，此函数返回的值是不确定的。</td>
</tr>
<tr>
<td align="left"><code>dispatch_source_get_data</code></td>
<td align="left">此函数返回与事件关联的所有未决数据。对于从文件读取数据的描述符调度源，此函数返回可读取的字节数。对于将数据写入文件的描述符分派源，如果有可用的写入空间，则此函数返回正整数。对于监视文件系统活动的描述符分发源，此函数返回一个常量，指示发生的事件的类型。有关常量的列表，请参见<code>dispatch_source_vnode_flags_t</code>枚举类型。对于流程调度源，此函数返回一个常量，指示发生的事件的类型。有关常量的列表，请参见<code>dispatch_source_proc_flags_t</code>枚举类型。对于 Mach 端口调度源，此函数返回一个常量，指示发生的事件的类型。有关常量的列表，请参见<code>dispatch_source_machport_flags_t</code>枚举类型。对于自定义调度源，此函数返回从现有数据创建的新数据值以及传递给该<code>dispatch_source_merge_data</code>函数的新数据。</td>
</tr>
<tr>
<td align="left"><code>dispatch_source_get_mask</code></td>
<td align="left">此函数返回用于创建调度源的事件标志。对于流程调度源，此函数返回调度源接收的事件的掩码。有关常量的列表，请参见<code>dispatch_source_proc_flags_t</code>枚举类型。对于具有发送权限的 Mach 端口调度源，此函数返回所需事件的掩码。有关常量的列表，请参见<code>dispatch_source_mach_send_flags_t</code>枚举类型。对于自定义 OR 调度源，此函数返回用于合并数据值的掩码。</td>
</tr>
</tbody></table>
<p>有关如何为特定类型的调度源编写和安装事件处理程序的<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW22">示例</a>，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW22">调度源示例</a>。</p>
<h6 id="安装取消处理程序"><a href="#安装取消处理程序" class="headerlink" title="安装取消处理程序"></a>安装取消处理程序</h6><p>取消处理程序用于在发布源之前对其进行清理。对于大多数类型的调度源，取消处理程序是可选的，并且仅当您有一些与调度源相关联的自定义行为也需要更新时才需要取消处理程序。但是，对于使用描述符或 Mach 端口的调度源，必须提供取消处理程序以关闭描述符或释放 Mach 端口。否则，由于代码或系统其他部分无意识地重用了那些结构，可能导致代码中的细微错误。</p>
<p>您可以随时安装取消处理程序，但通常在创建调度源时会这样做。您可以使用<code>dispatch_source_set_cancel_handler</code>或<code>dispatch_source_set_cancel_handler_f</code>函数来安装取消处理程序，具体取决于您是要在实现中使用块对象还是函数。以下示例显示了一个简单的取消处理程序，该处理程序关闭了为调度源打开的描述符。该<code>fd</code>变量是包含描述符的捕获变量。</p>
<table>
<thead>
<tr>
<th><code>dispatch_source_set_cancel_handler（mySource，^ &#123;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>关闭（FD）; //关闭先前打开的文件描述符。</code></td>
</tr>
<tr>
<td><code>&#125;）;</code></td>
</tr>
</tbody></table>
<p>要查看使用取消处理程序的调度源的完整代码示例，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW6">从描述符读取数据</a>。</p>
<h6 id="更改目标队列"><a href="#更改目标队列" class="headerlink" title="更改目标队列"></a>更改目标队列</h6><p>尽管在创建调度源时指定了要在其上运行事件和取消处理程序的队列，但是您可以随时使用该<code>dispatch_set_target_queue</code>函数来更改该队列。您可以这样做来更改处理分发源事件的优先级。</p>
<p>更改调度源的队列是异步操作，调度源会尽最大努力尽快进行更改。如果事件处理程序已经在队列中并等待处理，它将在前一个队列上执行。但是，大约在您进行更改时到达的其他事件可以在任一队列中处理。</p>
<h6 id="将自定义数据与调度源关联"><a href="#将自定义数据与调度源关联" class="headerlink" title="将自定义数据与调度源关联"></a>将自定义数据与调度源关联</h6><p>与 Grand Central Dispatch 中的许多其他数据类型一样，您可以使用该<code>dispatch_set_context</code>功能将自定义数据与调度源相关联。您可以使用上下文指针存储事件处理程序处理事件所需的任何数据。如果你存储在上下文指针任何自定义数据，您还应该安装的取消处理程序（如中所述<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW14">安装取消处理程序</a>来释放数据时，不再需要派遣源）。</p>
<p>如果使用 blocks 实现事件处理程序，则还可以捕获局部变量并在基于块的代码中使用它们。尽管这可以减轻将数据存储在调度源的上下文指针中的需要，但您应始终谨慎使用此功能。因为调度源可能在您的应用程序中存在很长一段时间，所以在捕获包含指针的变量时应格外小心。如果可以随时释放指针所指向的数据，则应该复制数据或保留数据以防止发生这种情况。无论哪种情况，您都需要提供一个取消处理程序，以便以后释放数据。</p>
<h6 id="调度源的内存管理"><a href="#调度源的内存管理" class="headerlink" title="调度源的内存管理"></a>调度源的内存管理</h6><p>与其他调度对象一样，调度源也是引用计数的数据类型。调度源的初始引用计数为 1，可以使用<code>dispatch_retain</code>和<code>dispatch_release</code>函数保留和释放该调度源。当队列的引用计数达到零时，系统将自动取消分配调度源数据结构。</p>
<p>由于使用了它们的方式，可以在调度源本身内部或外部管理调度源的所有权。有了外部所有权，另一个对象或代码段就拥有了调度源的所有权，并负责在不再需要时释放它。对于内部所有权，调度源拥有自己，并负责在适当的时间释放自己。尽管外部所有权很常见，但是在要创建自主调度源并让其管理代码的某些行为而无需任何进一步交互的情况下，可以使用内部所有权。例如，如果调度源被设计为响应单个全局事件，则可以让它处理该事件然后立即退出。</p>
<h4 id="调度源示例"><a href="#调度源示例" class="headerlink" title="调度源示例"></a>调度源示例</h4><p>以下各节说明如何创建和配置一些更常用的调度源。有关配置特定类型的调度源的更多信息，请参见<em>Grand Central Dispatch（GCD）参考</em>。</p>
<h6 id="创建一个计时器"><a href="#创建一个计时器" class="headerlink" title="创建一个计时器"></a>创建一个计时器</h6><p>计时器分派源按规则的基于时间的间隔生成事件。您可以使用计时器来启动需要定期执行的特定任务。例如，游戏和其他图形密集型应用程序可能使用计时器来启动屏幕或动画更新。您还可以设置计时器并使用产生的事件来检查频繁更新的服务器上的新信息。</p>
<p>所有计时器分派源都是间隔计时器，也就是说，一旦创建，它们就会以您指定的间隔传递常规事件。创建计时器分派源时，必须指定的值之一是回旋值，以使系统对计时器事件的期望精度有所了解。Leeway 的价值使系统在管理电源和唤醒内核方面具有一定的灵活性。例如，系统可以使用余量值来提前或延迟点火时间，并使它与其他系统事件更好地保持一致。因此，您应尽可能为自己的计时器指定一个回程值。</p>
<p><strong>注意：</strong> 即使您指定的回程值为 0，也永远不要期望计时器在您要求的确切纳秒时触发。该系统会尽力满足您的需求，但不能保证准确的点火时间。</p>
<p>当计算机进入睡眠状态时，所有计时器分派源都将被挂起。当计算机唤醒时，这些计时器分派源也会自动唤醒。根据计时器的配置，这种性质的暂停可能会影响计时器的下一次触发时间。如果使用<code>dispatch_time</code>函数或<code>DISPATCH_TIME_NOW</code>常量设置计时器分派源，则计时器分派源将使用默认系统时钟来确定何时触发。但是，计算机睡眠时默认时钟不会提前。相比之下，当您使用<code>dispatch_walltime</code>功能，计时器分派源将其触发时间跟踪到挂钟时间。后一个选项通常适用于触发间隔相对较大的计时器，因为它可以防止事件时间之间的漂移过大。</p>
<p>清单 4-1 展示了一个计时器的示例，该计时器每 30 秒触发一次，回旋值为 1 秒。因为计时器间隔相对较大，所以使用该<code>dispatch_walltime</code>函数创建了调度源。计时器的第一次触发立即发生，随后的事件每 30 秒到达一次。该<code>MyPeriodicTask</code>和<code>MyStoreTimer</code>符号代表的自定义功能，你会写实施定时行为，并存储在应用程序中的数据结构的定时器地方。</p>
<p><strong>清单 4-1</strong> 创建计时器分派源</p>
<table>
<thead>
<tr>
<th><code>dispatch_source_t CreateDispatchTimer（uint64_t时间间隔，</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>uint64_t leeway，</code></td>
</tr>
<tr>
<td><code>dispatch_queue_t队列，</code></td>
</tr>
<tr>
<td><code>dispatch_block_t块）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>dispatch_source_t计时器= dispatch_source_create（DISPATCH_SOURCE_TYPE_TIMER，</code></td>
</tr>
<tr>
<td><code>0，0，队列）；</code></td>
</tr>
<tr>
<td><code>如果（定时器）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>dispatch_source_set_timer（timer，dispatch_walltime（NULL，0），interval，leeway）;</code></td>
</tr>
<tr>
<td><code>dispatch_source_set_event_handler（timer，block）;</code></td>
</tr>
<tr>
<td><code>dispatch_resume（timer）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>返回计时器；</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>无效的MyCreateTimer（）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>dispatch_source_t aTimer = CreateDispatchTimer（30ull * NSEC_PER_SEC，</code></td>
</tr>
<tr>
<td><code>1ull * NSEC_PER_SEC，</code></td>
</tr>
<tr>
<td><code>dispatch_get_main_queue（），</code></td>
</tr>
<tr>
<td><code>^ &#123;MyPeriodicTask（）; &#125;）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//将其存储在以后的地方。</code></td>
</tr>
<tr>
<td><code>如果（aTimer）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>MyStoreTimer（aTimer）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
</tbody></table>
<p>尽管创建计时器分派源是接收基于时间的事件的主要方法，但是还有其他可用选项。如果要在指定的时间间隔后执行一次块，可以使用<code>dispatch_after</code>或<code>dispatch_after_f</code>函数。该函数的行为与该<code>dispatch_async</code>函数非常相似，不同之处在于，它允许您指定将块提交到队列的时间值。可以根据需要将时间值指定为相对或绝对时间值。</p>
<h6 id="从描述符读取数据"><a href="#从描述符读取数据" class="headerlink" title="从描述符读取数据"></a>从描述符读取数据</h6><p>要从文件或套接字读取数据，必须打开文件或套接字并创建类型的调度源<code>DISPATCH_SOURCE_TYPE_READ</code>。您指定的事件处理程序应该能够读取和处理文件描述符的内容。对于文件，这相当于读取文件数据（或该数据的子集）并为您的应用程序创建适当的数据结构。对于网络套接字，这涉及处理新接收到的网络数据。</p>
<p>每当读取数据时，都应始终将描述符配置为使用非阻塞操作。尽管您可以使用该<code>dispatch_source_get_data</code>函数查看可读取的数据量，但该函数返回的数字可能会在调用时间和实际读取数据的时间之间发生变化。如果基础文件被截断或发生网络错误，则从阻止当前线程的描述符读取将使事件处理程序停滞在执行中，并阻止调度队列调度其他任务。对于串行队列，这可能会死锁您的队列，甚至对于并发队列，这也会减少可以启动的新任务的数量。</p>
<p>清单 4-2 显示了一个示例，该示例将调度源配置为从文件读取数据。在此示例中，事件处理程序将指定文件的全部内容读取到缓冲区中，并调用自定义函数（您将在自己的代码中定义）以处理数据。（此函数的调用者将在读取操作完成后使用返回的分派源将其取消。）为确保在没有要读取的数据时分派队列不会不必要地阻塞，此示例使用此<code>fcntl</code>函数来配置文件描述符以执行非阻塞操作。安装在调度源上的取消处理程序可确保在读取数据后关闭文件描述符。</p>
<p><strong>清单 4-2</strong> 从文件读取数据</p>
<table>
<thead>
<tr>
<th><code>dispatch_source_t ProcessContentsOfFile（const char *文件名）</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//准备要读取的文件。</code></td>
</tr>
<tr>
<td><code>int fd = open（文件名，O_RDONLY）;</code></td>
</tr>
<tr>
<td><code>如果（fd == -1）</code></td>
</tr>
<tr>
<td><code>返回NULL;</code></td>
</tr>
<tr>
<td><code>fcntl（fd，F_SETFL，O_NONBLOCK）; //避免阻塞读取操作</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>dispatch_queue_t队列= dispatch_get_global_queue（DISPATCH_QUEUE_PRIORITY_DEFAULT，0）;</code></td>
</tr>
<tr>
<td><code>dispatch_source_t readSource = dispatch_source_create（DISPATCH_SOURCE_TYPE_READ，</code></td>
</tr>
<tr>
<td><code>fd，0，队列）;</code></td>
</tr>
<tr>
<td><code>如果（！readSource）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>关闭（FD）;</code></td>
</tr>
<tr>
<td><code>返回NULL;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//安装事件处理程序</code></td>
</tr>
<tr>
<td><code>dispatch_source_set_event_handler（readSource，^ &#123;</code></td>
</tr>
<tr>
<td><code>估计的size_t = dispatch_source_get_data（readSource）+ 1;</code></td>
</tr>
<tr>
<td><code>//将数据读入文本缓冲区。</code></td>
</tr>
<tr>
<td><code>char *缓冲区=（char *）malloc（估计）;</code></td>
</tr>
<tr>
<td><code>如果（缓冲区）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>ssize_t actual = read（fd，buffer，（estimated））;</code></td>
</tr>
<tr>
<td><code>布尔值完成= MyProcessFileData（缓冲区，实际）; //处理数据。</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//完成后释放缓冲区。</code></td>
</tr>
<tr>
<td><code>免费（缓冲区）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//如果没有更多数据，请取消源。</code></td>
</tr>
<tr>
<td><code>如果（完成）</code></td>
</tr>
<tr>
<td><code>dispatch_source_cancel（readSource）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>&#125;）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//安装取消处理程序</code></td>
</tr>
<tr>
<td><code>dispatch_source_set_cancel_handler（readSource，^ &#123;close（fd）;&#125;）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//开始读取文件。</code></td>
</tr>
<tr>
<td><code>dispatch_resume（readSource）;</code></td>
</tr>
<tr>
<td><code>返回readSource;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>在前面的示例中，自定义<code>MyProcessFileData</code>函数确定何时已读取足够的文件数据以及可以取消调度源。默认情况下，配置为从描述符读取的调度源在仍有数据需要读取的情况下重复调度其事件处理程序。如果套接字连接关闭或到达文件末尾，则调度源将自动停止调度事件处理程序。如果您知道自己不需要调度源，则可以直接取消它。</p>
<h6 id="将数据写入描述符"><a href="#将数据写入描述符" class="headerlink" title="将数据写入描述符"></a>将数据写入描述符</h6><p>将数据写入文件或套接字的过程与读取数据的过程非常相似。配置用于写操作的描述符后，您将创建类型的调度源<code>DISPATCH_SOURCE_TYPE_WRITE</code>。创建该调度源后，系统将调用事件处理程序，使其有机会开始将数据写入文件或套接字。完成数据写入后，请使用该<code>dispatch_source_cancel</code>功能取消调度源。</p>
<p>每当写入数据时，都应始终将文件描述符配置为使用非阻塞操作。尽管可以使用该<code>dispatch_source_get_data</code>函数查看有多少空间可用于写入，但是该函数返回的值仅是建议性的，并且可能在调用时间和实际写入数据的时间之间发生变化。如果发生错误，将数据写入阻塞文件描述符可能会使事件处理程序停滞在执行中，并阻止调度队列调度其他任务。对于串行队列，这可能会死锁您的队列，甚至对于并发队列，这也会减少可以启动的新任务的数量。</p>
<p>清单 4-3 显示了使用调度源将数据写入文件的基本方法。创建新文件后，此函数将结果文件描述符传递到其事件处理程序。该<code>MyGetData</code>函数提供了放入文件中的数据，您可以将其替换为生成文件数据所需的任何代码。将数据写入文件后，事件处理程序将取消调度源，以防止再次调用该调度源。然后，调度源的所有者将负责释放它。</p>
<p><strong>清单 4-3</strong> 将数据写入文件</p>
<table>
<thead>
<tr>
<th><code>dispatch_source_t WriteDataToFile（const char *文件名）</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td>`int fd = open（filename，O_WRONLY</td>
</tr>
<tr>
<td>`（S_IRUSR</td>
</tr>
<tr>
<td><code>如果（fd == -1）</code></td>
</tr>
<tr>
<td><code>返回NULL;</code></td>
</tr>
<tr>
<td><code>fcntl（fd，F_SETFL）; //在写入期间阻塞。</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>dispatch_queue_t队列= dispatch_get_global_queue（DISPATCH_QUEUE_PRIORITY_DEFAULT，0）;</code></td>
</tr>
<tr>
<td><code>dispatch_source_t writeSource = dispatch_source_create（DISPATCH_SOURCE_TYPE_WRITE，</code></td>
</tr>
<tr>
<td><code>fd，0，队列）;</code></td>
</tr>
<tr>
<td><code>如果（！writeSource）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>关闭（FD）;</code></td>
</tr>
<tr>
<td><code>返回NULL;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>dispatch_source_set_event_handler（writeSource，^ &#123;</code></td>
</tr>
<tr>
<td><code>size_t bufferSize = MyGetDataSize（）;</code></td>
</tr>
<tr>
<td><code>void * buffer = malloc（bufferSize）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>size_t实际= MyGetData（缓冲区，bufferSize）;</code></td>
</tr>
<tr>
<td><code>写（fd，缓冲区，实际）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>免费（缓冲区）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//完成后取消并释放调度源。</code></td>
</tr>
<tr>
<td><code>dispatch_source_cancel（writeSource）;</code></td>
</tr>
<tr>
<td><code>&#125;）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>dispatch_source_set_cancel_handler（writeSource，^ &#123;close（fd）;&#125;）;</code></td>
</tr>
<tr>
<td><code>dispatch_resume（writeSource）;</code></td>
</tr>
<tr>
<td><code>返回（writeSource）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<h6 id="监视文件系统对象"><a href="#监视文件系统对象" class="headerlink" title="监视文件系统对象"></a>监视文件系统对象</h6><p>如果要监视文件系统对象的更改，则可以设置类型的调度源<code>DISPATCH_SOURCE_TYPE_VNODE</code>。当文件被删除，写入或重命名时，可以使用这种类型的调度源来接收通知。当文件的特定类型的元信息（例如文件的大小和链接数）发生变化时，您还可以使用它来发出警报。</p>
<p><strong>注意：</strong> 当源本身正在处理事件时，您为调度源指定的文件描述符必须保持打开状态。</p>
<p>清单 4-4 显示了一个示例，该示例监视文件的名称更改并在文件更改时执行一些自定义行为。（您将提供实际的行为来代替<code>MyUpdateFileName</code>示例中所调用的函数。）由于已为调度源专门打开了描述符，所以调度源包括一个取消处理程序，用于关闭描述符。因为该示例创建的文件描述符与基础文件系统对象相关联，所以可以使用此相同的调度源来检测任意数量的文件名更改。</p>
<p><strong>清单 4-4</strong> 监视文件名更改</p>
<table>
<thead>
<tr>
<th><code>dispatch_source_t MonitorNameChangesToFile（const char *文件名）</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>int fd = open（文件名，O_EVTONLY）;</code></td>
</tr>
<tr>
<td><code>如果（fd == -1）</code></td>
</tr>
<tr>
<td><code>返回NULL;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>dispatch_queue_t队列= dispatch_get_global_queue（DISPATCH_QUEUE_PRIORITY_DEFAULT，0）;</code></td>
</tr>
<tr>
<td><code>dispatch_source_t source = dispatch_source_create（DISPATCH_SOURCE_TYPE_VNODE，</code></td>
</tr>
<tr>
<td><code>fd，DISPATCH_VNODE_RENAME，队列）；</code></td>
</tr>
<tr>
<td><code>如果（来源）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//复制文件名以供以后使用。</code></td>
</tr>
<tr>
<td><code>int length = strlen（文件名）;</code></td>
</tr>
<tr>
<td><code>char * newString =（char *）malloc（长度+1）;</code></td>
</tr>
<tr>
<td><code>newString = strcpy（newString，文件名）;</code></td>
</tr>
<tr>
<td><code>dispatch_set_context（source，newString）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//安装事件处理程序以处理名称更改</code></td>
</tr>
<tr>
<td><code>dispatch_source_set_event_handler（source，^ &#123;</code></td>
</tr>
<tr>
<td><code>const char * oldFilename =（char *）dispatch_get_context（源）;</code></td>
</tr>
<tr>
<td><code>MyUpdateFileName（oldFilename，fd）;</code></td>
</tr>
<tr>
<td><code>&#125;）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//安装取消处理程序以释放描述符</code></td>
</tr>
<tr>
<td><code>//和存储的字符串。</code></td>
</tr>
<tr>
<td><code>dispatch_source_set_cancel_handler（来源，^ &#123;</code></td>
</tr>
<tr>
<td><code>char * fileStr =（char *）dispatch_get_context（源）;</code></td>
</tr>
<tr>
<td><code>free（fileStr）;</code></td>
</tr>
<tr>
<td><code>关闭（FD）;</code></td>
</tr>
<tr>
<td><code>&#125;）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//开始处理事件。</code></td>
</tr>
<tr>
<td><code>dispatch_resume（源）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>其他</code></td>
</tr>
<tr>
<td><code>关闭（FD）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>返回源</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<h6 id="监控信号"><a href="#监控信号" class="headerlink" title="监控信号"></a>监控信号</h6><p>UNIX 信号允许从其域外部操纵应用程序。应用程序可以接收许多不同类型的信号，范围从不可恢复的错误（例如非法指令）到有关重要信息的通知（例如子进程退出时）。传统上，应用程序使用该<code>sigaction</code>功能来安装信号处理程序功能，该功能在信号到达后立即进行同步处理。如果您只想收到信号到达的通知，而实际上却不想处理该信号，则可以使用信号分配源来异步处理信号。</p>
<p>信号分发源不能替代您使用该<code>sigaction</code>功能安装的同步信号处理程序。同步信号处理程序实际上可以捕获信号并防止其终止您的应用程序。信号分发源允许您仅监视信号的到达。此外，您不能使用信号分发源来检索所有类型的信号。特别是，你不能用它们来监控<code>SIGILL</code>，<code>SIGBUS</code>以及<code>SIGSEGV</code>信号。</p>
<p>因为信号调度源在调度队列上异步执行，所以它们不受与同步信号处理程序相同的限制。例如，您可以从信号分配源的事件处理程序调用的函数没有任何限制。这种灵活性的折衷是，在信号到达的时间与调度源的事件处理程序被调用之间的延迟可能会有所增加。</p>
<p>清单 4-5 显示了如何配置信号分发源来处理<code>SIGHUP</code>信号。调度源的事件处理程序调用该<code>MyProcessSIGHUP</code>函数，您可以在应用程序中将其替换为用于处理信号的代码。</p>
<p><strong>清单 4-5</strong> 安装一个监视信号的块</p>
<table>
<thead>
<tr>
<th><code>无效InstallSignalHandler（）</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>//确保信号不会终止应用程序。</code></td>
</tr>
<tr>
<td><code>信号（SIGHUP，SIG_IGN）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>dispatch_queue_t队列= dispatch_get_global_queue（DISPATCH_QUEUE_PRIORITY_DEFAULT，0）;</code></td>
</tr>
<tr>
<td><code>dispatch_source_t source = dispatch_source_create（DISPATCH_SOURCE_TYPE_SIGNAL，SIGHUP，0，队列）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>如果（来源）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>dispatch_source_set_event_handler（source，^ &#123;</code></td>
</tr>
<tr>
<td><code>MyProcessSIGHUP（）;</code></td>
</tr>
<tr>
<td><code>&#125;）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>//开始处理信号</code></td>
</tr>
<tr>
<td><code>dispatch_resume（源）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>如果您正在为自定义框架开发代码，则使用信号分发源的优点是您的代码可以独立于与其链接的任何应用程序监视信号。信号调度源不会干扰应用程序可能已安装的其他调度源或任何同步信号处理程序。</p>
<p>有关实现同步信号处理程序的更多信息，以及信号名称的列表，请参见<code>signal</code>手册页。</p>
<h6 id="监控过程"><a href="#监控过程" class="headerlink" title="监控过程"></a>监控过程</h6><p>流程调度源使您可以监视特定流程的行为并做出适当响应。父进程可能使用这种类型的调度源来监视它创建的任何子进程。例如，父进程可以使用它来监视子进程的死亡。同样，子进程可以使用它来监视其父进程并在父进程退出时退出。</p>
<p>清单 4-6 显示了安装调度源以监视父进程终止的步骤。当父进程死亡时，调度源将设置一些内部状态信息，以使子进程知道应该退出。（您自己的应用程序将需要实现<code>MySetAppExitFlag</code>为终止设置适当标志的功能。）由于调度源是自动运行的，因此拥有自己的资源，因此它在预期程序关闭时也会取消并释放自身。</p>
<p><strong>清单 4-6</strong> 监视父进程的死亡</p>
<table>
<thead>
<tr>
<th><code>void MonitorParentProcess（）</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>pid_t parentPID = getppid（）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>dispatch_queue_t队列= dispatch_get_global_queue（DISPATCH_QUEUE_PRIORITY_DEFAULT，0）;</code></td>
</tr>
<tr>
<td><code>dispatch_source_t source = dispatch_source_create（DISPATCH_SOURCE_TYPE_PROC，</code></td>
</tr>
<tr>
<td><code>parentPID，DISPATCH_PROC_EXIT，队列）；</code></td>
</tr>
<tr>
<td><code>如果（来源）</code></td>
</tr>
<tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>dispatch_source_set_event_handler（source，^ &#123;</code></td>
</tr>
<tr>
<td><code>MySetAppExitFlag（）;</code></td>
</tr>
<tr>
<td><code>dispatch_source_cancel（source）;</code></td>
</tr>
<tr>
<td><code>dispatch_release（源代码）;</code></td>
</tr>
<tr>
<td><code>&#125;）;</code></td>
</tr>
<tr>
<td><code>dispatch_resume（源）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<h4 id="取消派遣源"><a href="#取消派遣源" class="headerlink" title="取消派遣源"></a>取消派遣源</h4><p>调度源将保持活动状态，直到您使用该<code>dispatch_source_cancel</code>功能明确取消它们为止。取消调度源将停止新事件的传递，并且无法撤消。因此，通常您取消调度源，然后立即释放它，如下所示：</p>
<table>
<thead>
<tr>
<th><code>void RemoveDispatchSource（dispatch_source_t mySource）</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;</code></td>
</tr>
<tr>
<td><code>dispatch_source_cancel（mySource）;</code></td>
</tr>
<tr>
<td><code>dispatch_release（mySource）;</code></td>
</tr>
<tr>
<td><code>&#125;</code></td>
</tr>
</tbody></table>
<p>取消调度源是异步操作。尽管在调用<code>dispatch_source_cancel</code>函数后没有任何新事件被处理，但是调度源已经处理的事件将继续被处理。完成任何最终事件的处理后，如果存在一个派发源，则派发源执行其取消处理程序。</p>
<p>取消处理程序是您释放内存或清理代表调度源获取的任何资源的机会。如果您的调度源使用描述符或马赫端口，则必须提供取消处理程序以关闭描述符或在发生取消时销毁端口。其他类型的调度源不需要取消处理程序，但是如果将任何内存或数据与调度源关联，您仍应提供取消处理程序。例如，如果将数据存储在调度源的上下文指针中，则应提供一个。有关取消处理程序的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW14">安装取消处理程序</a>。</p>
<h4 id="挂起和恢复派遣源"><a href="#挂起和恢复派遣源" class="headerlink" title="挂起和恢复派遣源"></a>挂起和恢复派遣源</h4><p>您可以使用<code>dispatch_suspend</code>和<code>dispatch_resume</code>方法临时暂停和恢复分发源事件的传递。这些方法增加和减少调度对象的挂起计数。因此，在恢复事件传递之前，您必须在<code>dispatch_suspend</code>与每个呼叫之间找到一个与之匹配的呼叫<code>dispatch_resume</code>。</p>
<p>当您挂起调度源时，该调度源被挂起时发生的任何事件都将被累积，直到恢复队列为止。当队列恢复时，而不是传递所有事件，而是在传递之前将事件合并为单个事件。例如，如果您正在监视文件中的名称更改，则传递的事件将仅包括姓氏更改。以这种方式合并事件可以防止它们在队列中建立，并在工作恢复时使您的应用程序不堪重负。</p>
<h2 id="远离线程-1"><a href="#远离线程-1" class="headerlink" title="远离线程"></a>远离线程</h2><p>有多种方法可以使现有的线程代码适应使用 Grand Central Dispatch 和操作对象的优势。尽管并非在所有情况下都可能远离线程，但是在您进行切换的地方，性能（以及代码的简单性）可以显着提高。特别是，使用调度队列和操作队列而不是线程具有多个优点：</p>
<ul>
<li>它减少了您的应用程序为将线程堆栈存储在应用程序的内存空间中而付出的内存损失。</li>
<li>它消除了创建和配置线程所需的代码。</li>
<li>它消除了管理和调度线程上的工作所需的代码。</li>
<li>它简化了您必须编写的代码。</li>
</ul>
<p>本章提供有关如何替换现有的基于线程的代码以及如何使用分派队列和操作队列来实现相同类型行为的提示和准则。</p>
<h4 id="用调度队列替换线程"><a href="#用调度队列替换线程" class="headerlink" title="用调度队列替换线程"></a>用调度队列替换线程</h4><p>要了解如何用调度队列替换线程，请首先考虑您今天在应用程序中使用线程的一些方式：</p>
<ul>
<li><strong>单任务线程</strong>。创建一个线程来执行一个任务，并在任务完成后释放线程。</li>
<li><strong>工作者线程</strong>。创建一个或多个工作线程，并为每个线程记住特定的任务。定期将任务分配给每个线程。</li>
<li><strong>线程池</strong>。创建一个通用线程池，并为每个线程建立运行循环。当您有任务要执行时，请从池中获取一个线程，然后将任务分派给该线程。如果没有可用线程，则将任务排队并等待线程可用。</li>
</ul>
<p>尽管这些技术看似截然不同，但它们实际上只是相同原理的变体。在每种情况下，都使用线程来运行应用程序必须执行的某些任务。它们之间的唯一区别是用于管理线程和任务排队的代码。使用调度队列和操作队列，您可以消除所有线程和线程通信代码，而只专注于要执行的任务。</p>
<p>如果您正在使用上述线程模型之一，则应该已经对应用程序执行的任务类型有一个很好的了解。与其将任务提交给您的自定义线程之一，不如将该任务封装在一个操作对象或一个块对象中，然后将其分派到适当的队列中。对于不是特别有争议的任务（即不带锁的任务），您应该能够进行以下直接替换：</p>
<ul>
<li>对于单个任务线程，将任务封装在块或操作对象中，然后将其提交到并发队列。</li>
<li>对于辅助线程，您需要确定是使用串行队列还是并发队列。如果使用工作线程来同步特定任务集的执行，请使用串行队列。如果确实使用工作线程执行没有相互依赖性的任意任务，请使用并发队列。</li>
<li>对于线程池，将您的任务封装在一个块或操作对象中，然后将它们分派到并发队列中以执行。</li>
</ul>
<p>当然，像这样的简单替换不一定在所有情况下都有效。如果您正在执行的任务争用共享资源，则理想的解决方案是尝试首先删除或最小化该争用。如果有一些方法可以重构或重新构造代码以消除对共享资源的相互依赖，那当然是可取的。但是，如果这样做是不可能的或效率可能较低，则仍然可以利用队列的方法。队列的一大优点是它们提供了一种更可预测的方式来执行代码。这种可预测性意味着，仍有许多方法可以在不使用锁或其他重量级同步机制的情况下同步代码的执行。除了使用锁，您还可以使用队列来执行许多相同的任务：</p>
<ul>
<li>如果您有必须按特定顺序执行的任务，请将其提交到串行调度队列。如果您更喜欢使用操作队列，请使用操作对象依赖性来确保这些对象以特定顺序执行。</li>
<li>如果当前正在使用锁来保护共享资源，请创建一个串行队列以执行任何修改该资源的任务。然后，串行队列将您现有的锁替换为同步机制。有关摆脱锁的更多信息技术，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/ThreadMigration/ThreadMigration.html#//apple_ref/doc/uid/TP40008091-CH105-SW3">消除基于锁的代码</a>。</li>
<li>如果使用线程连接等待后台任务完成，请考虑改用调度组。您还可以使用 <code>NSBlockOperation</code>对象或操作对象依赖项来实现类似的组完成行为。有关如何跟踪执行任务组的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/ThreadMigration/ThreadMigration.html#//apple_ref/doc/uid/TP40008091-CH105-SW6">替换线程联接</a>。</li>
<li>如果您使用生产者－消费者算法来管理有限的资源池，请考虑将您的实现<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/ThreadMigration/ThreadMigration.html#//apple_ref/doc/uid/TP40008091-CH105-SW7">更改为“更改生产者－消费者实现”中显示的方法</a>。</li>
<li>如果您正在使用线程从描述符读取和写入，或监视文件操作，请按照<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW1">Dispatch Sources 中的</a>说明使用<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW1">调度源</a>。</li>
</ul>
<p>重要的是要记住，队列不是替换线程的灵丹妙药。队列提供的异步编程模型适合于延迟不成问题的情况。即使队列提供了配置队列中任务执行优先级的方法，但是较高的执行优先级也不能保证在特定时间执行任务。因此，在需要最小延迟的情况下，例如在音频和视频播放中，线程仍然是更合适的选择。</p>
<h4 id="消除基于锁的代码"><a href="#消除基于锁的代码" class="headerlink" title="消除基于锁的代码"></a>消除基于锁的代码</h4><p>对于线程代码，锁是同步对线程之间共享的资源的访问的传统方法之一。但是，使用锁是有代价的。即使在无争议的情况下，始终会因锁定而导致性能下降。并且在有争议的情况下，在等待释放锁的同时，一个或多个线程有可能在不确定的时间内阻塞。</p>
<p>用队列替换基于锁的代码可以消除许多与锁相关的惩罚，还可以简化剩余的代码。您可以使用创建队列来序列化访问该资源的任务，而不必使用锁来保护共享资源。队列不会施加与锁相同的惩罚。例如，排队任务不需要陷入内核即可获取互斥量。</p>
<p>在对任务进行排队时，您必须做出的主要决定是同步还是异步进行。异步提交任务可以使当前线程在执行任务时继续运行。同步提交任务会阻塞当前线程，直到任务完成。这两个选项都有适当的用途，尽管在可能的情况下异步提交任务无疑是有利的。</p>
<p>以下各节说明如何用等效的基于队列的代码替换现有的基于锁的代码。</p>
<h6 id="实现异步锁"><a href="#实现异步锁" class="headerlink" title="实现异步锁"></a>实现异步锁</h6><p>异步锁定是一种保护共享资源而又不会阻止任何修改该资源的代码的方法。当需要修改数据结构时，您可能会使用异步锁，这是代码正在执行的其他一些工作的副作用。使用传统线程，通常实现此代码的方式是对共享资源进行锁定，进行必要的更改，释放该锁定，然后继续执行任务的主要部分。但是，使用调度队列，调用代码可以异步进行修改，而无需等待这些更改完成。</p>
<p>清单 5-1 显示了一个异步锁实现的示例。在此示例中，受保护的资源定义了自己的串行调度队列。调用代码向该队列提交一个块对象，该对象包含需要对资源进行的修改。由于队列本身是串行执行块的，因此可以确保对资源的更改按照接收到的顺序进行。但是，由于任务是异步执行的，因此调用线程不会阻塞。</p>
<p><strong>清单 5-1</strong> 异步修改受保护的资源</p>
<table>
<thead>
<tr>
<th><code>dispatch_async（obj-&gt; serial_queue，^ &#123;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>//关键部分</code></td>
</tr>
<tr>
<td><code>&#125;）;</code></td>
</tr>
</tbody></table>
<h6 id="同步执行关键部分"><a href="#同步执行关键部分" class="headerlink" title="同步执行关键部分"></a>同步执行关键部分</h6><p>如果在给定任务完成之前当前代码无法继续，则可以使用<code>dispatch_sync</code>函数同步提交任务。此函数将任务添加到调度队列，然后阻塞当前线程，直到任务完成执行。分派队列本身可以是串行或并发队列，具体取决于您的需求。由于此函数会阻止当前线程，因此，仅应在必要时使用它。清单 5-2 显示了使用来包装代码的关键部分的技术<code>dispatch_sync</code>。</p>
<p><strong>清单 5-2</strong> 同步运行关键部分</p>
<table>
<thead>
<tr>
<th><code>dispatch_sync（my_queue，^ &#123;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>//关键部分</code></td>
</tr>
<tr>
<td><code>&#125;）;</code></td>
</tr>
</tbody></table>
<p>如果您已经在使用串行队列来保护共享资源，则与异步分发相比，同步分派到该队列不会更多地保护共享资源。同步分派的唯一原因是防止当前代码在关键部分结束之前继续执行。例如，如果您想从共享资源中获取一些价值并立即使用它，则需要同步调度。如果当前代码不需要等待关键部分完成，或者可以简单地将其他后续任务提交到同一串行队列，则通常首选异步提交。</p>
<h4 id="改进循环代码"><a href="#改进循环代码" class="headerlink" title="改进循环代码"></a>改进循环代码</h4><p>如果您的代码具有循环，并且每次循环执行的工作都与其他迭代中完成的工作无关，则可以考虑使用<code>dispatch_apply</code>or <code>dispatch_apply_f</code>函数重新实现该循环代码。这些函数将循环的每次迭代分别提交给调度队列进行处理。与并发队列一起使用时，此功能使您可以同时执行循环的多次迭代。</p>
<p>该<code>dispatch_apply</code>和<code>dispatch_apply_f</code>功能是阻止执行的当前线程，直到所有的循环迭代是完全同步的函数调用。当提交到并发队列时，不能保证循环迭代的执行顺序。运行每次迭代的线程可能会阻塞并导致给定的迭代在其周围的其他线程之前或之后完成。因此，用于每次循环迭代的块对象或函数必须是可重入的。</p>
<p>清单 5-3 显示了如何<code>for</code>用基于派遣的等效项替换循环。您传递给的块或函数<code>dispatch_apply</code>或<code>dispatch_apply_f</code>必须采用指示当前循环迭代的整数值。在此示例中，代码仅将当前循环号打印到控制台。</p>
<p><strong>清单 5-3</strong><code>for</code>不跨步地 替换循环</p>
<table>
<thead>
<tr>
<th><code>队列= dispatch_get_global_queue（DISPATCH_QUEUE_PRIORITY_DEFAULT，0）;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>dispatch_apply（count，queue，^（size_t i）&#123;</code></td>
</tr>
<tr>
<td><code>printf（“％u \ n”，i）;</code></td>
</tr>
<tr>
<td><code>&#125;）;</code></td>
</tr>
</tbody></table>
<p>尽管前面的示例是一个简单的示例，但是它演示了使用分派队列替换循环的基本技术。尽管这可能是提高基于循环的代码性能的好方法，但仍必须谨慎地使用此技术。尽管分派队列的开销非常低，但是在线程上安排每次循环迭代仍然有成本。因此，您应该确保您的循环代码能够完成足够的工作以保证成本。您到底需要做多少工作，这是您必须使用性能工具来衡量的。</p>
<p>一种增加每次循环迭代中的工作量的简单方法是使用跨步。跨步时，您可以重写块代码以执行原始循环的多次迭代。然后，您可以<code>dispatch_apply</code>按比例减少为函数指定的计数值。清单 5-4 显示了如何实现<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/ThreadMigration/ThreadMigration.html#//apple_ref/doc/uid/TP40008091-CH105-SW5">清单 5-3</a>所示的循环代码的跨步。在清单 5-4 中，该块调用该<code>printf</code>语句的次数与步幅值的次数相同，在本例中为 137。（实际步幅值应根据代码所完成的工作进行配置。）当将迭代总数除以步幅值时，会剩下余数，任何余下的迭代都将内联执行。</p>
<p><strong>清单 5-4</strong> 在已调度的 for 循环中添加跨步</p>
<table>
<thead>
<tr>
<th><code>国际步幅= 137;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>dispatch_queue_t队列= dispatch_get_global_queue（DISPATCH_QUEUE_PRIORITY_DEFAULT，0）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>dispatch_apply（计数/步幅，队列，^（size_t idx）&#123;</code></td>
</tr>
<tr>
<td><code>size_t j = idx *步幅；</code></td>
</tr>
<tr>
<td><code>size_t j_stop = j +步幅；</code></td>
</tr>
<tr>
<td><code>做&#123;</code></td>
</tr>
<tr>
<td><code>printf（“％u \ n”，（unsigned int）j ++）;</code></td>
</tr>
<tr>
<td>` }同时（j</td>
</tr>
<tr>
<td><code>&#125;）;</code></td>
</tr>
<tr>
<td>``</td>
</tr>
<tr>
<td><code>size_t i;</code></td>
</tr>
<tr>
<td><code>对于（i =计数-（计数％步幅）; i &lt;计数; i ++）</code></td>
</tr>
<tr>
<td><code>printf（“％u \ n”，（unsigned int）i）;</code></td>
</tr>
</tbody></table>
<p>使用跨步有一定的性能优势。特别是，相对于跨度，当循环迭代的原始数量较高时，跨度会带来好处。同时分派更少的块意味着比分派它们花费更多的时间来执行那些块的代码。但是，与任何性能指标一样，您可能必须使用跨步值才能找到代码的最有效值。</p>
<h4 id="替换线程连接"><a href="#替换线程连接" class="headerlink" title="替换线程连接"></a>替换线程连接</h4><p>线程连接允许您生成一个或多个线程，然后让当前线程等待，直到这些线程完成。为了实现线程连接，父级将子线程创建为<em>可连接线程</em>。如果父级在没有子线程的结果的情况下无法取得进展时，它将与子级一起加入。此过程将阻塞父线程，直到子线程完成其任务并退出为止，此时，父线程可以从子线程收集结果并继续自己的工作。如果父级需要与多个子线程联接，则一次联接一个。</p>
<p>调度组提供的语义类似于线程联接的语义，但具有一些其他优点。像线程连接一样，调度组是线程阻塞直到一个或多个子任务完成执行的一种方式。与线程连接不同，调度组同时等待其所有子任务。并且由于调度组使用调度队列执行工作，因此它们非常高效。</p>
<p>要使用调度组来执行可连接线程执行的相同工作，请执行以下操作：</p>
<ol>
<li>使用<code>dispatch_group_create</code>函数创建一个新的调度组。</li>
<li>使用<code>dispatch_group_async</code>或<code>dispatch_group_async_f</code>函数将任务添加到组中。提交给组的每个任务代表您通常在可连接线程上执行的工作。</li>
<li>当当前线程无法再进行任何转发时，请调用该<code>dispatch_group_wait</code>函数以等待该组。该功能将阻塞当前线程，直到该组中的所有任务完成执行为止。</li>
</ol>
<p>如果使用操作对象来实现任务，则还可以使用依赖项来实现线程联接。无需让父线程等待一个或多个任务完成，您可以将父代码移动到操作对象。然后，您将在父操作对象和任意数量的子操作对象之间建立依赖关系，以建立可连接线程通常执行的工作。依赖于其他操作对象会阻止父操作对象在所有操作完成之前执行。</p>
<p>有关如何使用调度组的示例，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW25">等待队列中的任务组</a>。有关在操作对象之间设置依赖关系的信息，请参阅<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101-SW17">配置互操作依赖关系</a>。</p>
<h4 id="更改生产者-消费者实施"><a href="#更改生产者-消费者实施" class="headerlink" title="更改生产者-消费者实施"></a>更改生产者-消费者实施</h4><p>生产者－消费者模型使您可以管理有限数量的动态产生的资源。生产者创建新资源（或工作）时，一个或多个消费者等待这些资源（或工作）准备就绪并在使用时消费它们。实现生产者－消费者模型的典型机制是条件或信号量。</p>
<p>使用条件，生产者线程通常执行以下操作：</p>
<ol>
<li>锁定与条件关联的互斥锁（使用<code>pthread_mutex_lock</code>）。</li>
<li>生产要消耗的资源或工作。</li>
<li>向条件变量发出要消耗一些东西的信号（使用<code>pthread_cond_signal</code>）</li>
<li>解锁互斥锁（使用<code>pthread_mutex_unlock</code>）。</li>
</ol>
<p>反过来，相应的使用者线程执行以下操作：</p>
<ol>
<li>锁定与条件关联的互斥锁（使用<code>pthread_mutex_lock</code>）。</li>
<li>设置<code>while</code>循环以执行以下操作：<ol>
<li>检查是否确实有工作要做。</li>
<li>如果没有工作要做（或没有可用资源），请调用<code>pthread_cond_wait</code>以阻塞当前线程，直到出现相应的信号为止。</li>
</ol>
</li>
<li>获取制作人提供的作品（或资源）。</li>
<li>解锁互斥锁（使用<code>pthread_mutex_unlock</code>）。</li>
<li>处理工作。</li>
</ol>
<p>使用调度队列，您可以将生产者和使用者实现简化为一个调用：</p>
<table>
<thead>
<tr>
<th><code>dispatch_async（queue，^ &#123;</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>//处理工作项。</code></td>
</tr>
<tr>
<td><code>&#125;）;</code></td>
</tr>
</tbody></table>
<p>当您的生产者有工作要做时，它要做的就是将工作添加到队列中，并让队列处理该项目。前面代码中唯一更改的部分是队列类型。如果生产者生成的任务需要按特定顺序执行，则可以使用串行队列。如果生产者生成的任务可以同时执行，则可以将它们添加到并发队列中，并让系统同时执行尽可能多的任务。</p>
<h4 id="替换信号量代码"><a href="#替换信号量代码" class="headerlink" title="替换信号量代码"></a>替换信号量代码</h4><p>如果当前正在使用信号量来限制对共享资源的访问，则应考虑使用调度信号量。传统的信号量始终要求调用内核来测试信号量。相反，调度信号量会在用户空间中快速测试信号量状态，并仅在测试失败并且需要阻塞调用线程时才捕获到内核中。这种情况导致在没有争议的情况下，调度信号量比传统信号量快得多。但是，在所有其他方面，调度信号量提供的行为与传统信号量相同。</p>
<p>有关如何使用调度信号量的示例，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW24">使用调度信号量来调节有限资源的使用</a>。</p>
<h4 id="替换运行循环代码"><a href="#替换运行循环代码" class="headerlink" title="替换运行循环代码"></a>替换运行循环代码</h4><p>如果您使用运行循环来管理在一个或多个线程上执行的工作，则可能会发现队列的实现和维护更加简单。设置自定义运行循环涉及设置基础线程和运行循环本身。运行循环代码包括设置一个或多个运行循环源以及编写回调以处理到达这些源的事件。除了完成所有工作之外，您只需创建一个串行队列并将任务分派给它即可。因此，您可以用一行代码替换所有线程和运行循环创建代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dispatch_queue_t myNewRunLoop &#x3D; dispatch_queue_create（“ com.apple.MyQueue”，NULL）;</span><br></pre></td></tr></table></figure>

<p>因为队列自动执行添加到队列中的所有任务，所以不需要额外的代码来管理队列。您不必创建或配置线程，也不必创建或附加任何运行循环源。此外，您只需在队列中添加任务即可执行新的工作类型。要对运行循环执行相同的操作，您将需要修改现有的运行循环源或创建一个新的源来处理新数据。</p>
<p>运行循环的一种常见配置是处理异步到达网络套接字的数据。您可以将调度源附加到所需的队列，而不是为此类型的行为配置运行循环。与传统的运行循环源相比，调度源还提供了更多的数据处理选项。除了处理计时器和网络端口事件，您还可以使用调度源来读取和写入文件，监视文件系统对象，监视进程和监视信号。您甚至可以定义自定义调度源，并从代码的其他部分异步触发它们。有关设置调度源的更多信息，请参见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html#//apple_ref/doc/uid/TP40008091-CH103-SW1">调度源</a>。</p>
<h4 id="与-POSIX-线程的兼容性"><a href="#与-POSIX-线程的兼容性" class="headerlink" title="与 POSIX 线程的兼容性"></a>与 POSIX 线程的兼容性</h4><p>因为 Grand Central Dispatch 管理着您提供的任务和运行这些任务的线程之间的关系，所以通常应该避免从任务代码中调用 POSIX 线程例程。如果确实由于某种原因需要调用它们，则应非常谨慎地调用哪些例程。本节向您说明在排队的任务中哪些例程可以安全调用，哪些例程不安全。该列表并不完整，但是应该告诉您什么是安全的，什么不是。</p>
<p>通常，您的应用程序不得删除或变异未创建的对象或数据结构。因此，使用分派队列执行的块对象不得调用以下函数：</p>
<ul>
<li><code>pthread_detach</code></li>
<li><code>pthread_cancel</code></li>
<li><code>pthread_join</code></li>
<li><code>pthread_kill</code></li>
<li><code>pthread_exit</code></li>
</ul>
<p>尽管可以在任务运行时修改线程的状态，但是必须在任务返回之前将线程返回到其原始状态。因此，只要将线程返回到其原始状态，就可以安全地调用以下函数：</p>
<ul>
<li><code>pthread_setcancelstate</code></li>
<li><code>pthread_setcanceltype</code></li>
<li><code>pthread_setschedparam</code></li>
<li><code>pthread_sigmask</code></li>
<li><code>pthread_setspecific</code></li>
</ul>
<p>用于执行给定块的基础线程可以在调用之间变化。因此，您的应用程序不应依赖以下函数，这些函数在块调用之间返回可预测的结果：</p>
<ul>
<li><code>pthread_self</code></li>
<li><code>pthread_getschedparam</code></li>
<li><code>pthread_get_stacksize_np</code></li>
<li><code>pthread_get_stackaddr_np</code></li>
<li><code>pthread_mach_thread_np</code></li>
<li><code>pthread_from_mach_thread_np</code></li>
<li><code>pthread_getspecific</code></li>
</ul>
<p><strong>重要提示：</strong> 块必须捕获并抑制其中抛出的任何语言级异常。在执行块期间发生的其他错误应类似地由该块处理或用于通知应用程序的其他部分。</p>
<h2 id="词汇表"><a href="#词汇表" class="headerlink" title="词汇表"></a>词汇表</h2><ul>
<li>应用</li>
</ul>
<p>一种特定的<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW13">程序</a>样式，向用户显示图形界面。</p>
<ul>
<li>异步设计方法</li>
</ul>
<p>围绕可以与应用程序的主线程或其他执行线程同时运行的代码块组织应用程序的原理。异步任务由一个线程启动，但实际上在另一个线程上运行，从而利用了额外的处理器资源来更快地完成其工作。</p>
<ul>
<li>块对象</li>
</ul>
<p>一个 AC 结构，用于封装内联代码和数据，以便以后可以执行。您可以使用块来封装要执行的任务，这些任务可以内联在当前线程中，也可以使用分派队列在单独的线程中。有关更多信息，请参见*<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40007502">块编程主题</a>*。</p>
<ul>
<li>并发操作</li>
</ul>
<p><code>start</code>在调用其方法的线程中未执行其任务的操作对象。并发操作通常会建立自己的线程或调用一个接口，该接口会建立一个单独的线程来执行工作。</p>
<ul>
<li>健康）状况</li>
</ul>
<p>用于同步对资源的访问的构造。在其他条件明确指示条件之前，不允许等待条件的线程继续进行。</p>
<ul>
<li>关键部分</li>
</ul>
<p>一次只能由一个线程执行的一部分代码。</p>
<ul>
<li>自订来源</li>
</ul>
<p>甲<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW19">调度源</a>用于过程应用定义的事件。定制源调用定制事件处理程序以响应应用程序生成的事件。</p>
<ul>
<li>描述符</li>
</ul>
<p>用于访问文件，套接字或其他系统资源的抽象标识符。</p>
<ul>
<li>调度队列</li>
</ul>
<p>您用于执行应用程序任务的<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW23">Grand Central Dispatch（GCD）</a>结构。GCD 定义了分派队列以串行或并行执行任务。</p>
<ul>
<li>派遣源</li>
</ul>
<p>您创建的用来处理与系统相关的事件的<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW23">Grand Central Dispatch（GCD）</a>数据结构。</p>
<ul>
<li>描述符分发源</li>
</ul>
<p>一个<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW19">调度源</a>用来处理文件相关的事件。当文件数据可用于读取或写入或响应文件系统更改时，文件描述符源将调用您的自定义事件处理程序。</p>
<ul>
<li>动态共享库</li>
</ul>
<p>二进制可执行文件，可动态加载到应用程序的进程空间中，而不是作为应用程序二进制文件的一部分静态链接。</p>
<ul>
<li>构架</li>
</ul>
<p>一种捆绑包，它将动态共享库与支持该库的资源和头文件打包在一起。有关更多信息，请参见《_<a href="https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPFrameworks/Frameworks.html#//apple_ref/doc/uid/10000183i">Framework 编程指南》</a>_。</p>
<ul>
<li>全局调度队列</li>
</ul>
<p><a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW23">Grand Central Dispatch（GCD）</a>自动为您的应用程序提供一个<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW9">调度队列</a>。您不必自己创建全局队列，也不必保留或释放它们。而是使用系统提供的功能检索它们。</p>
<ul>
<li>大中央派遣（GCD）</li>
</ul>
<p>同时执行异步任务的技术。GCD 在 OS X v10.6 和更高版本以及 iOS 4.0 和更高版本中可用。</p>
<ul>
<li>输入源</li>
</ul>
<p>线程的异步事件的源。输入源可以基于端口，也可以手动触发，并且必须附加到线程的运行循环中。</p>
<ul>
<li>可连接线程</li>
</ul>
<p>终止后不会立即回收其资源的线程。必须先显式地分离可连接线程，否则必须由另一个线程将其连接，才能回收资源。可连接线程为与它们连接的线程提供返回值。</p>
<ul>
<li>图书馆</li>
</ul>
<p>用于监视低级系统事件的 UNIX 功能。有关更多信息，请参见 <code>kqueue</code>手册页。</p>
<ul>
<li>马赫港调度源</li>
</ul>
<p>一个<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW19">调度源</a>用来到达一个 Mach 端口上处理事件。</p>
<ul>
<li>主线</li>
</ul>
<p>创建其拥有进程时创建的一种特殊类型的<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW1">线程</a>。当程序的主线程退出时，该过程结束。</p>
<ul>
<li>互斥体</li>
</ul>
<p>提供互斥访问共享资源的锁。互斥锁一次只能由一个线程持有。尝试获取由其他线程持有的互斥锁会使当前线程进入休眠状态，直到最终获取该锁为止。</p>
<ul>
<li>开放计算语言（OpenCL）</li>
</ul>
<p>一种基于标准的技术，用于在计算机的图形处理器上执行通用计算。有关更多信息，请参阅*<a href="https://developer.apple.com/library/archive/documentation/Performance/Conceptual/OpenCL_MacProgGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008312">《 Mac 版 OpenCL 编程指南》</a>*。</p>
<ul>
<li>操作对象</li>
</ul>
<p><code>NSOperation</code>类的实例。操作对象将与任务关联的代码和数据包装到可执行单元中。</p>
<ul>
<li>操作队列</li>
</ul>
<p><code>NSOperationQueue</code>类的实例。操作队列管理操作对象的执行。</p>
<ul>
<li>私人调度队列</li>
</ul>
<p>一个<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW9">调度队列</a>您创建，保存，并明确释放。</p>
<ul>
<li>处理</li>
</ul>
<p>应用程序或程序的运行时实例。进程具有自己的虚拟内存空间和系统资源（包括端口权限），与分配给其他程序的资源无关。一个进程始终至少包含一个线程（主线程），并且可以包含任意数量的附加线程。</p>
<ul>
<li>流程调度源</li>
</ul>
<p>一个<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW19">调度源</a>用于处理进程相关的事件。流程源调用您的自定义事件处理程序，以响应对指定流程的更改。</p>
<ul>
<li>程序</li>
</ul>
<p>可以运行代码和资源以执行某些任务的组合。程序无需具有图形用户界面，尽管图形应用程序也被视为程序。</p>
<ul>
<li>可折返</li>
</ul>
<p>已经在另一个线程上运行的新线程上可以安全地启动的代码。</p>
<ul>
<li>运行循环</li>
</ul>
<p>事件处理循环，在此循环中，事件被接收并调度到适当的处理程序。</p>
<ul>
<li>运行循环模式</li>
</ul>
<p>与特定名称关联的输入源，计时器源和运行循环观察器的集合。当以特定的“模式”运行时，运行循环仅监视与该模式关联的源和观察者。</p>
<ul>
<li>运行循环对象</li>
</ul>
<p><code>NSRunLoop</code>类或<code>CFRunLoopRef</code>不透明类型的实例。这些对象提供了用于在线程中实现事件处理循环的接口。</p>
<ul>
<li>运行循环观察器</li>
</ul>
<p>运行循环执行的不同阶段中的通知的接收者。</p>
<ul>
<li>信号</li>
</ul>
<p>受保护的变量，用于限制对共享资源的访问。互斥量和条件都是信号灯的不同类型。</p>
<ul>
<li>信号</li>
</ul>
<p>一种用于从其域外部操纵进程的 UNIX 机制。系统使用信号将重要消息传递给应用程序，例如应用程序是否执行了非法指令。有关更多信息，请参见<code>signal</code>手册页。</p>
<ul>
<li>信号分配源</li>
</ul>
<p>甲<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW19">调度源</a>用于处理 UNIX 信号。每当进程收到 UNIX 信号时，信号源就会调用您的自定义事件处理程序。</p>
<ul>
<li>任务</li>
</ul>
<p>要执行的工作量。尽管某些技术（最著名的是 Carbon Multiprocessing Services）以不同的方式使用该术语，但首选用法是作为抽象概念，指示要执行的工作量。</p>
<ul>
<li>线</li>
</ul>
<p>流程中的执行流程。每个线程都有自己的堆栈空间，但在同一进程中与其他线程共享内存。</p>
<ul>
<li>计时器调度源</li>
</ul>
<p>一个<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Glossary/Glossary.html#//apple_ref/doc/uid/TP40008091-CH104-SW19">调度源</a>用于处理周期性事件。计时器源会定期（基于时间）调用自定义事件处理程序。</p>
<p>有关 POSIX 线程和本节中提到的功能的更多信息，请参见<code>pthread</code>手册页。</p>
<h2 id="文档修订历史"><a href="#文档修订历史" class="headerlink" title="文档修订历史"></a>文档修订历史</h2><p>下表描述了对“ <em>并发编程指南”</em>的更改。</p>
<table>
<thead>
<tr>
<th><strong>日期</strong></th>
<th><strong>笔记</strong></th>
</tr>
</thead>
<tbody><tr>
<td>2012-12-13</td>
<td>更正了调度队列的说明。</td>
</tr>
<tr>
<td>2012-07-17</td>
<td>删除了有关自动释放池在操作中的使用情况的过时信息。</td>
</tr>
<tr>
<td>2011-01-19</td>
<td>更新了用于手动执行操作的代码以正确处理取消。</td>
</tr>
<tr>
<td></td>
<td>添加了有关将 Objective-C 对象与调度队列结合使用的信息。</td>
</tr>
<tr>
<td>2010-04-13</td>
<td>更新以反映对 iOS 的支持。</td>
</tr>
<tr>
<td>2009-08-07</td>
<td>更正了非并行操作对象示例的启动方法。</td>
</tr>
<tr>
<td>2009-05-22</td>
<td>新文档描述了用于以并行方式执行多个代码路径的技术。</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>Interview</tag>
      </tags>
  </entry>
  <entry>
    <title>🇺🇸-0-2</title>
    <url>/cn/USA-0-2/</url>
    <content><![CDATA[<h2 id="WWDC-16"><a href="#WWDC-16" class="headerlink" title="WWDC 16"></a>WWDC 16</h2><p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-20.jpg" alt=""></p>
<a id="more"></a>

<p>第一次参加这样的大会兴奋到爆炸 💥<br>之前买 Soylent 担心多余了<br>场外无限提供 食品 水果 饮料<br>以及健康午餐</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-00.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-08.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-17.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-05.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-13.jpg" alt=""></div></div></div>

<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>Session 其实没那么重要，毕竟有录播<br>现场 Demo 还经常翻车<br>比如当时演示 Sticker 的小姐姐的 iMessage 不停的 Crash<br>折腾了十几分钟，终于成功了，场上发出阵阵欢呼<br>这些在后来的录播里都是剪掉的</p>
<p>Swift 2.0, 图解内存泄漏, Tabs 大战 Spaces, Metal 引擎渲染, Storyboard</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-01.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-02.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-03.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-04.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-07.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-09.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-19.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-14.jpg" alt=""></div></div></div>

<h2 id="Lab"><a href="#Lab" class="headerlink" title="Lab"></a>Lab</h2><p>真正重要的是 lab<br>可以带着不会的问题，去友好的<strong>质问</strong>苹果工程师</p>
<p>虽然口语不行，但还是去勇敢去相关的 Lab 问了下以前比较疑惑的一些问题</p>
<ol>
<li><a href="/cn/How-to-add-Xib-on-StoryBoard">如何在 StoryBoard 上添加 Xib</a></li>
<li><a href="/cn/Reflection-in-Swift-via-Mirror">通过镜像在 Swift 中进行反射</a></li>
<li><a href="/cn/Swift-Generics-in-protocol-and-enum">协议和枚举中的 Swift 通用</a></li>
</ol>
<p>还记得有个八卦的是 Navigation Bar 下面为什么有个横线<br>工程师打开源码（Obj-C) 看了下，然后说是设计这样要求的 😓</p>
<p>中场场间有其他分享</p>
<h2 id="家园-amp-漫威宇宙"><a href="#家园-amp-漫威宇宙" class="headerlink" title="家园 &amp; 漫威宇宙"></a>家园 &amp; 漫威宇宙</h2><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-10.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-11.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-23.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-24.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-25.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-26.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-16.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-15.jpg" alt=""></div></div></div>

<h2 id="The-Bash"><a href="#The-Bash" class="headerlink" title="The Bash"></a>The Bash</h2><p>周四晚上 7 点有 Bash</p>
<p>以前一直避免这样的活动<br>硅谷 S01E01 开头就描绘了这么一副场景<br>上面演唱会拼命营造气氛<br>下面程序员们静悄悄<br>连稀稀拉拉的鼓掌声都没有</p>
<p>后来 TL 老友记群里名字只差一个字母的同学说<br>效果非常好，大家摩肩接踵跟着音乐摇摆，非常 High</p>
<h2 id="周边"><a href="#周边" class="headerlink" title="周边"></a>周边</h2><p>排队人龙老长了<br>不过杭州的一位小姐姐说一定要带个 T 桖回去<br>本来打算等最后一天没人了再去买<br>结果只有儿童款了…</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-06.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-12.jpg" alt=""></div></div></div>

<h2 id="返程"><a href="#返程" class="headerlink" title="返程"></a>返程</h2><p>那时国内以及锁区了，在这边还可以抓小精灵</p>
<p>然后回去收拾收拾去机场<br>帮朋友在免税店带了个 Bose QuietComfort 25<br>还车，过安检<br>结束了</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-22.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/usa-02-21.jpg" alt=""></div></div><div class="group-picture-row"></div></div>
]]></content>
      <tags>
        <tag>Travel</tag>
        <tag>LittleMaster</tag>
        <tag>USA</tag>
        <tag>🇺🇸</tag>
        <tag>WWDC</tag>
      </tags>
  </entry>
  <entry>
    <title>Dali-0</title>
    <url>/cn/dali-0/</url>
    <content><![CDATA[<p>从美帝回来后开启了暴走模式</p>
<p>登机前看到国航活动<br>可以加钱升舱</p>
<p>记得 2015 过年<br>戏谑 CTO 买了头等舱<br>票那么贵<br>一定是比经济舱先到</p>
<p>这次轮到自己就成了 真香<br>虽然先到 是没有的<br>但优先登机，优先下飞机<br>整个过程没见过经济舱的小伙伴们</p>
<hr>
<h2 id="大理"><a href="#大理" class="headerlink" title="大理"></a>大理</h2><p>整体印象不错<br>民宿十分整洁<br>床垫也很舒服</p>
<p>虽然下着小雨，反而有些<br>天街小雨润如酥 的感觉<br>另外还吃到了正宗美味的<br>过桥米线</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/dali-0-00.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/dali-0-01.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/dali-0-02.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/dali-0-03.jpg" alt=""></div></div></div>

<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/dali-0-04.jpg" alt=""></p>
<h2 id="洱海"><a href="#洱海" class="headerlink" title="洱海"></a>洱海</h2><p>2016 年的洱海已经被民宿围得严严实实<br>绕行只能看到房子<br>完全见不到洱海真面目</p>
<p>再加上预定的房顶漏水<br>只能高价换了一个对着洱海的酒店</p>
<p>深夜一群人结伴出门看银河<br>回旅馆的小路上<br>遥闻深巷中犬吠<br>一群人自我恐吓<br>越说越害怕<br>仿佛碰到了怪兽<br>做鸟兽散</p>
<p>原本在酒店聊天的妹子<br>看到一大群人闯进来<br>以为碰到了抢劫<br>哇的一下哭了出来</p>
<p>总体来说<br>体验极差</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/dali-0-05.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/dali-0-06.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/dali-0-07.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/dali-0-08.jpg" alt=""></div></div></div>

<p>不过人眼看起来一片漆黑的天空<br>在 索尼大法 阿尔法 7 下呈现了这么一副景象</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/dali-0-09.jpg" alt=""></p>
]]></content>
      <tags>
        <tag>Travel</tag>
        <tag>LittleMaster</tag>
        <tag>Dali</tag>
        <tag>🇨🇳</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode N-ary Tree</title>
    <url>/cn/leetcode-n-ary-tree/</url>
    <content><![CDATA[<h2 id="N-ary-Tree-Preorder-Traversal"><a href="#N-ary-Tree-Preorder-Traversal" class="headerlink" title="N-ary Tree Preorder Traversal"></a>N-ary Tree Preorder Traversal</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">preorder</span><span class="params">(<span class="number">_</span> root: Node?)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">    	<span class="keyword">var</span> stack = [root], ans = [<span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> node = stack.popLast(), <span class="keyword">let</span> n = node &#123;</span><br><span class="line">            ans.append(n.val)</span><br><span class="line">            stack += n.children.reversed()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="N-ary-Tree-Postorder-Traversal"><a href="#N-ary-Tree-Postorder-Traversal" class="headerlink" title="N-ary Tree Postorder Traversal"></a>N-ary Tree Postorder Traversal</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">postorder</span><span class="params">(<span class="number">_</span> root: Node?)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">    	<span class="keyword">var</span> stack = [root], ans = [<span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> node = stack.popLast(), <span class="keyword">let</span> n = node &#123;</span><br><span class="line">            ans.append(n.val)</span><br><span class="line">            stack += n.children</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.reversed()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="N-ary-Tree-Level-Order-Traversal"><a href="#N-ary-Tree-Level-Order-Traversal" class="headerlink" title="N-ary Tree Level Order Traversal"></a>N-ary Tree Level Order Traversal</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">levelOrder</span><span class="params">(<span class="number">_</span> root: Node?)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">        <span class="keyword">var</span> cur = [root], ans = [[root.val]]</span><br><span class="line">        <span class="keyword">while</span> !cur.isEmpty &#123;</span><br><span class="line">            <span class="keyword">let</span> children = cur.flatMap &#123; $<span class="number">0</span>.children &#125;</span><br><span class="line">            <span class="keyword">if</span> !children.isEmpty &#123; ans.append( children.<span class="built_in">map</span> &#123; $<span class="number">0</span>.val &#125; ) &#125;</span><br><span class="line">            cur = children</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Maximum-Depth-of-N-ary-Tree"><a href="#Maximum-Depth-of-N-ary-Tree" class="headerlink" title="Maximum Depth of N-ary Tree"></a>Maximum Depth of N-ary Tree</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">maxDepth</span><span class="params">(<span class="number">_</span> root: Node?)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> cur = root == <span class="literal">nil</span> ? [] : [root!], depth = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> !cur.isEmpty &#123;</span><br><span class="line">            cur = cur.flatMap &#123; $<span class="number">0</span>.children &#125;</span><br><span class="line">            depth += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Encode-N-ary-Tree-to-Binary-Tree"><a href="#Encode-N-ary-Tree-to-Binary-Tree" class="headerlink" title="Encode N-ary Tree to Binary Tree"></a>Encode N-ary Tree to Binary Tree</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Codec</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">encode</span><span class="params">(<span class="number">_</span> root: Node?)</span></span> -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">let</span> tn = <span class="type">TreeNode</span>(root.val); <span class="keyword">var</span> p: <span class="type">TreeNode?</span> = tn</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> n = root.children.first &#123;</span><br><span class="line">            p?.<span class="keyword">left</span> = encode(n); p = p?.<span class="keyword">left</span></span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> root.children[<span class="number">1</span>...] &#123;</span><br><span class="line">                p?.<span class="keyword">right</span> = encode(n); p = p?.<span class="keyword">right</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tn</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">decode</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Node?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">let</span> n = <span class="type">Node</span>(root.val); <span class="keyword">var</span> p = root.<span class="keyword">left</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> l = decode(p) &#123; n.children.append(l) &#125;</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> q = p?.<span class="keyword">right</span>, <span class="keyword">let</span> r = decode(q) &#123;</span><br><span class="line">            n.children.append(r); p = q</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Serialize-and-Deserialize-N-ary-Tree"><a href="#Serialize-and-Deserialize-N-ary-Tree" class="headerlink" title="Serialize and Deserialize N-ary Tree"></a>Serialize and Deserialize N-ary Tree</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Codec</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">serialize</span><span class="params">(<span class="number">_</span> root: Node?)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="string">&quot;$&quot;</span> &#125;</span><br><span class="line">    	<span class="keyword">var</span> s = <span class="string">&quot;\(root.val),\(root.children.count),&quot;</span></span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> root.children &#123;</span><br><span class="line">            s += serialize(child)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deserialize</span><span class="params">(<span class="number">_</span> data: String)</span></span> -&gt; <span class="type">Node?</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> arr = data.components(separatedBy: <span class="string">&quot;,&quot;</span>).<span class="built_in">compactMap</span> &#123; <span class="type">Int</span>($<span class="number">0</span>) &#125;; <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">deserialize</span><span class="params">()</span></span> -&gt; <span class="type">Node?</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> i &gt;= arr.<span class="built_in">count</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">            <span class="keyword">let</span> n = <span class="type">Node</span>(arr[i])</span><br><span class="line">            i += <span class="number">2</span>; <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;arr[i-<span class="number">1</span>] &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> a = deserialize() &#123; n.children.append(a) &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> deserialize()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>LeetCode</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>🇯🇵-0-0</title>
    <url>/cn/japan-0-0/</url>
    <content><![CDATA[<div id="googleMap2031" style="
            height: 450px;
            width: 100%;
            margin: 0px;
            padding: 0px
            ">
</div>
<style>.gmnoprint img {max-width: none !important;}</style>
<script defer="defer">
  window.hexoGmaps = window.hexoGmaps || { maps: {}};
  window.hexoGmaps.maps['initgoogleMap2031'] = function init() {
    var mapOptions = {
       'scrollwheel': false,
       'zoom': 11,
       'center': new window.google.maps.LatLng( 35.6388171 , 139.6897329 ),
     },
     target = document.getElementById('googleMap2031'),
     map = new window.google.maps.Map(target, mapOptions);
      
     
     
     var opts0 = {
        'position': new window.google.maps.LatLng( 35.665289 , 139.7241853 ),
        'map': map,
        'title': 'The National Art Center',
        'zIndex' : 0,
        'icon': ''
      };

     var infowindow0 = new window.google.maps.InfoWindow({
       content: 'The National Art Center'
     });

     var marker0 = new window.google.maps.Marker(opts0);

     marker0.addListener('click', function(){
       infowindow0.open(map, marker0)
     })
     
     
     var opts1 = {
        'position': new window.google.maps.LatLng( 35.5471701 , 139.7683526 ),
        'map': map,
        'title': 'Haneda Airport',
        'zIndex' : 1,
        'icon': ''
      };

     var infowindow1 = new window.google.maps.InfoWindow({
       content: 'Haneda Airport'
     });

     var marker1 = new window.google.maps.Marker(opts1);

     marker1.addListener('click', function(){
       infowindow1.open(map, marker1)
     })
     
     
     var opts2 = {
        'position': new window.google.maps.LatLng( 35.695398 , 139.7018829 ),
        'map': map,
        'title': 'Hotel Gracery Shinjuku',
        'zIndex' : 2,
        'icon': ''
      };

     var infowindow2 = new window.google.maps.InfoWindow({
       content: 'Hotel Gracery Shinjuku'
     });

     var marker2 = new window.google.maps.Marker(opts2);

     marker2.addListener('click', function(){
       infowindow2.open(map, marker2)
     })
   

  }
  function makeMaps() {
    for (var map in window.hexoGmaps.maps) {
       console.log('map #', map);
       window.hexoGmaps.maps[map]();
    }
  }
  function loadScript() {
    window.hexoGmaps.googleScriptLoaded = true;
    var script = document.createElement('script');
    script.type = 'text/javascript';
        script.src = '//maps.googleapis.com/maps/api/js?v=3.exp&callback=makeMaps&key=AIzaSyB6JxSOGlpKd-7pPtKKG_BIEOiLlaRHxMQ';
    document.body.appendChild(script);
  }
  if (!window.hexoGmaps.googleScriptLoaded) {
    loadScript();
  }
</script>

<a id="more"></a>

<h2 id="三年往返签证"><a href="#三年往返签证" class="headerlink" title="三年往返签证"></a>三年往返签证</h2><p>和美签不同，无法自己预约，只能通过指定旅行社办理</p>
<ul>
<li>税后 25W+</li>
<li>淘宝邮寄护照和税单等材料</li>
</ul>
<p>整个过程全靠邮寄，以为会丢件<br>没想到两周就顺利办下来了</p>
<h2 id="商务舱"><a href="#商务舱" class="headerlink" title="商务舱"></a>商务舱</h2><p>大多数亚洲航空公司的 商务舱 和 头等舱 是一样的</p>
<p>比如这个 波音 787 机型， 一排只有四个座位 💺<br>两旁靠窗，没有邻居，中间情侣座<br>1 商务舱座椅所占面积 == 6 经济舱</p>
<p>因为 全日空 做活动 票价只贵了一倍 所以还是蛮划算的</p>
<p>上机提供热毛巾，后续香槟 🍾️ 及各种饮料<br>午餐可以提前预约日式料理或西餐<br>餐具换成了厚重的瓷盘和金属刀叉 🍴</p>
<p>最棒的是座椅按小按钮可以放平成 180 度<br>WC 🚾 再也不是门庭若市络绎不绝<br>碰的的孩子们也彬彬有礼，一路没有哭闹</p>
<p>引擎的轰鸣也小了很多，默认耳机 🎧 是 Bose QC 25</p>
<p>因为帝都直飞东京只需 3 小时</p>
<p>基本流程是<br>上飞机吃顿饭喝点饮料<br>看会你的名字<br>躺平睡一觉<br>就到了</p>
<p>整体体验超赞</p>
<p>不过商务舱后面空空如也<br>一度担心 下次再去日本<br>全日空 不会就倒闭了吧</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-04.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-03.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-06.jpg" alt=""></div></div></div>

<h2 id="羽田空港"><a href="#羽田空港" class="headerlink" title="羽田空港"></a>羽田空港</h2><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-08.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-10.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-11.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-15.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-18.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-19.jpg" alt=""></div></div></div>

<h2 id="观景台"><a href="#观景台" class="headerlink" title="观景台"></a>观景台</h2><p>羽田空港楼顶有个巨大的观景台<br>可以看飞机起降，感受比 IMAX 还要真实的引擎轰鸣</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-12.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-13.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-14.jpg" alt=""></div></div></div>

<h2 id="ホテルグレイスリー新宿"><a href="#ホテルグレイスリー新宿" class="headerlink" title="ホテルグレイスリー新宿"></a>ホテルグレイスリー新宿</h2><p>因为方便，住在了新宿站<br>没想到是哥斯拉酒店<br>上面有个很大的头<br>平时在国内见惯了盗版<br>碰到正版的还听不习惯</p>
<p>旁边是歌舞伎町<br>有一家一兰拉面很好吃<br>夜里 11 点下楼夜宵还排了很长的队伍</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-24.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-25.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-26.jpg" alt=""></div></div></div>

<h2 id="かに道楽-amp-鳗鱼饭"><a href="#かに道楽-amp-鳗鱼饭" class="headerlink" title="かに道楽 &amp; 鳗鱼饭"></a>かに道楽 &amp; 鳗鱼饭</h2><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-31.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-34.jpg" alt=""></div></div></div>

<p>日本真的好干净呀<br>不，应该说是洁净<br>这个公寓让人想起了<br>小林家的龙女仆</p>
<p>感觉能住在这里多幸福<br>不知租金要多少呢</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-36.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-37.jpg" alt=""></div></div></div>

<h2 id="国立新美術館"><a href="#国立新美術館" class="headerlink" title="国立新美術館"></a>国立新美術館</h2><p>第一次逛美术馆 🎨<br>完全看不懂<br>不过这不就是逛美术馆的目的吗</p>
<p>出来看到张海报<br>不知是广告还是公益活动</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-38.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-39.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-40.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-42.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-43.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-44.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-45.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-46.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-48.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-49.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-50.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-51.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-52.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-54.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-55.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-56.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-57.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-0-62.jpg" alt=""></div></div></div>
]]></content>
      <tags>
        <tag>Travel</tag>
        <tag>LittleMaster</tag>
        <tag>Japan</tag>
        <tag>🇯🇵</tag>
      </tags>
  </entry>
  <entry>
    <title>🇯🇵-0-1</title>
    <url>/cn/japan-0-1/</url>
    <content><![CDATA[<div id="googleMap6617" style="
            height: 450px;
            width: 100%;
            margin: 0px;
            padding: 0px
            ">
</div>
<style>.gmnoprint img {max-width: none !important;}</style>
<script defer="defer">
  window.hexoGmaps = window.hexoGmaps || { maps: {}};
  window.hexoGmaps.maps['initgoogleMap6617'] = function init() {
    var mapOptions = {
       'scrollwheel': false,
       'zoom': 12.5,
       'center': new window.google.maps.LatLng( 35.6888043 , 139.7464185 ),
     },
     target = document.getElementById('googleMap6617'),
     map = new window.google.maps.Map(target, mapOptions);
      
     
     
     var opts0 = {
        'position': new window.google.maps.LatLng( 35.6599167 , 139.7287036 ),
        'map': map,
        'title': '六本木ヒルズ展望台',
        'zIndex' : 0,
        'icon': ''
      };

     var infowindow0 = new window.google.maps.InfoWindow({
       content: '六本木ヒルズ展望台'
     });

     var marker0 = new window.google.maps.Marker(opts0);

     marker0.addListener('click', function(){
       infowindow0.open(map, marker0)
     })
     
     
     var opts1 = {
        'position': new window.google.maps.LatLng( 35.6714459 , 139.6955955 ),
        'map': map,
        'title': '代々木公園',
        'zIndex' : 1,
        'icon': ''
      };

     var infowindow1 = new window.google.maps.InfoWindow({
       content: '代々木公園'
     });

     var marker1 = new window.google.maps.Marker(opts1);

     marker1.addListener('click', function(){
       infowindow1.open(map, marker1)
     })
     
     
     var opts2 = {
        'position': new window.google.maps.LatLng( 35.7099661 , 139.8098755 ),
        'map': map,
        'title': 'Tokyo Skytree',
        'zIndex' : 2,
        'icon': ''
      };

     var infowindow2 = new window.google.maps.InfoWindow({
       content: 'Tokyo Skytree'
     });

     var marker2 = new window.google.maps.Marker(opts2);

     marker2.addListener('click', function(){
       infowindow2.open(map, marker2)
     })
   

  }
  function makeMaps() {
    for (var map in window.hexoGmaps.maps) {
       console.log('map #', map);
       window.hexoGmaps.maps[map]();
    }
  }
  function loadScript() {
    window.hexoGmaps.googleScriptLoaded = true;
    var script = document.createElement('script');
    script.type = 'text/javascript';
        script.src = '//maps.googleapis.com/maps/api/js?v=3.exp&callback=makeMaps&key=AIzaSyB6JxSOGlpKd-7pPtKKG_BIEOiLlaRHxMQ';
    document.body.appendChild(script);
  }
  if (!window.hexoGmaps.googleScriptLoaded) {
    loadScript();
  }
</script>

<h2 id="六本木ヒルズ展望台-東京シティビュー"><a href="#六本木ヒルズ展望台-東京シティビュー" class="headerlink" title="六本木ヒルズ展望台 東京シティビュー"></a>六本木ヒルズ展望台 東京シティビュー</h2><p>可以环顾整个东京</p>
<p>这一片是互通的建筑群<br>和玩开放沙盒游戏不同<br>这里可以进店穿过模型</p>
<p>这次终于体会到了小时候老爸说的<br>站在东方明珠上往下看<br>车像火柴盒人像蚂蚁</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-13.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-12.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-01.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-02.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-03.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-04.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-06.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-07.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-08.jpg" alt=""></div></div></div>

<p>虽然才 6 月份，但天气已然炎热起来<br>看到一个人造喷泉，可以洒水喷雾辅助散热</p>
<p>建筑内部一直很有设计感<br>还碰到了一对牵手的情侣</p>
<p>然后去吃了真正的和牛烤肉<br>第一次亲身经历了入口即化</p>
<p>最神奇的是价格<br>本来不敢在这里喝杯咖啡看风景<br>惯性思维以为会像楼层一样天价<br>事实上只比楼下贵了几块钱而已</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-00.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-09.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-11.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-10.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-14.jpg" alt=""></div></div></div>

<h2 id="代々木公園"><a href="#代々木公園" class="headerlink" title="代々木公園"></a>代々木公園</h2><blockquote>
<p>代代木公园位于该地点，1910 年 12 月 19 日，德川吉俊上尉在日本进行了首次成功的动力飞机飞行。该地区后来成为了阅兵场。从 1945 年 9 月开始，该地点在盟军占领日本期间为美国军官安置了称为“华盛顿高地”的军事营房<br>2014 年，东京经历了 100 年来最严重的登革热暴发，也是 70 年来首次记录的病例，已确诊近 200 例</p>
</blockquote>
<p>没想到还爆发过登革热</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-15.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-18.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-19.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-20.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-21.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-22.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-23.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-24.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-25.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-26.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-27.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-28.jpg" alt=""></div></div></div>

<p>以往出门，说都会带上 1.5L 的动脉<br>日本到处都有贩卖机，所以不用带水<br>唯一尴尬的是没有垃圾桶，喝完只能拿着瓶子，期待下一个贩卖机有回收桶</p>
<p>WC 还提供 LGBT 🏳️‍🌈</p>
<p>路过 雷门，旁边有小火车展览海报</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-31.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-32.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-33.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-30.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-34.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-35.jpg" alt=""></div></div></div>

<h2 id="すみだ水族館"><a href="#すみだ水族館" class="headerlink" title="すみだ水族館"></a>すみだ水族館</h2><p>晴空塔下是个水族馆</p>
<p>海底总动员 的 尼莫？<br>寄居蟹，龙虾，乌贼<br>海底大强…</p>
<p>🐠 🦞 🦑</p>
<p>水族馆里扫地的雇员</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-57.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-37.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-39.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-41.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-42.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-43.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-44.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-47.jpg" alt=""></div></div></div>

<p>出来当然是纪念品啦<br>各种萌到不行的毛茸茸的海底小动物<br>差点没忍住买一个回去当抱枕</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-48.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-49.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-50.jpg" alt=""></div></div></div>

<h2 id="進撃の巨人"><a href="#進撃の巨人" class="headerlink" title="進撃の巨人"></a>進撃の巨人</h2><p>正好赶上 进击的巨人 主题<br>可惜当时还没看过<br>不知道这俩人是谁<br>毫无波澜</p>
<p>之后补上这部动漫后<br>只能庆幸还好随手拍了下 兵长 和 艾伦</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-53.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-36.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-52.jpg" alt=""></div></div></div>

<h2 id="東京スカイツリー"><a href="#東京スカイツリー" class="headerlink" title="東京スカイツリー"></a>東京スカイツリー</h2><p>原来这塔不光是为了高和景点盖的，而是广播电台啊</p>
<blockquote>
<p>塔是关东地区的主要电视和广播站点; 较旧的东京铁塔周围环绕着高层建筑，因此无法再提供完整的数字地面电视广播覆盖。Skytree 大楼于 2012 年 2 月 29 日的 Day 日竣工<br>东京晴空塔还类似于日本历史悠久的 5 层宝塔。[11]塔的底部具有类似于三脚架的结构；从约 350 m（1,150 ft）以上的高度起，塔的结构是圆柱形的，可以欣赏到河流和城市的全景。[12]在 350 m（1,150 ft）处有可容纳 2,000 人的天文台，在 450 m（1,480 ft）处可容纳 900 人的天文台。[13]上层天文台有一个螺旋形玻璃覆盖的空中步道，游客可以在最后一个 5 米处上升到上层平台的最高点。玻璃地板的一部分可让游客直接观看下面的街道。<br>该塔具有防震功能，包括由钢筋混凝土制成的中心轴。主内部支柱连接到地面上方第一 125 米（410 英尺）的外部塔架结构。从那里一直到 375 米（1,230 英尺）处，支柱通过减震器固定在塔架上，减震器在地震中充当缓冲垫。通过“附加的质量控制机制”（或调谐质量阻尼器）获得额外的弹性-一种阻尼系统，在发生地震时，它会与建筑物的结构不同步，以使重心尽可能地保持中心到塔的底部。[15]根据设计者的观点，阻尼器可以吸收地震中 50％的能量</p>
</blockquote>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-38.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-58.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-60.jpg" alt=""></div></div></div>

<p>本来就有恐高症<br>不知是不是幻觉<br>感觉塔在轻微的摇摆</p>
<p>嘴上说着不怕<br>实际瑟瑟发抖<br>上去后身体一直贴着内边走<br>鼓起勇气向外面玻璃看了下</p>
<p>最高点的玻璃地板还好，有点不真实<br>试探性的踩了一脚 🦶</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-51.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-55.jpg" alt=""></div></div></div>

<h2 id="返程"><a href="#返程" class="headerlink" title="返程"></a>返程</h2><p>回去后趁着在宾馆，赶紧把各种垃圾扔了<br>没有垃圾桶真的太伤了 😂</p>
<p>看了下窗外<br>一片岁月静好</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-63.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-64.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-66.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-65.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-67.jpg" alt=""></div></div></div>

<p>然后打车 🚖 去 羽田空港<br>10w 日元 💴 就这么没了</p>
<p>耳闻这边老年人开出租车 🚕<br>目睹怎么忍心让老爷爷去搬运行李 🧳 呢</p>
<p>检票后时间还早，来到全日空头等舱休息室<br>水果 牛奶 饮料 面包 蛋糕 无限供应<br>🍉 🥛 🥤 🍞 🍰<br>就差真的去洗澡了<br>🛀 😂</p>
<p>在飞机上看到了富士山 🗻<br>因为在休息室已经吃饱了<br>只好放平睡觉 💤</p>
<p>然后就结束了这第一次短暂的 🇯🇵 日本之旅</p>
<p>十分喜欢日本的洁净以及秩序井然<br>买的鞋子直到离开还是像刚买的一样</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-68.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-69.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-70.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/japan-0-1-71.jpg" alt=""></div></div></div>

<p>三年往返签<br>下次还会再来</p>
<p>✌️✌️✌️</p>
]]></content>
      <tags>
        <tag>Travel</tag>
        <tag>LittleMaster</tag>
        <tag>Japan</tag>
        <tag>🇯🇵</tag>
      </tags>
  </entry>
  <entry>
    <title>🇮🇹-0-0</title>
    <url>/cn/italy-0-0/</url>
    <content><![CDATA[<div id="googleMap8438" style="
            height: 450px;
            width: 100%;
            margin: 0px;
            padding: 0px
            ">
</div>
<style>.gmnoprint img {max-width: none !important;}</style>
<script defer="defer">
  window.hexoGmaps = window.hexoGmaps || { maps: {}};
  window.hexoGmaps.maps['initgoogleMap8438'] = function init() {
    var mapOptions = {
       'scrollwheel': false,
       'zoom': 10,
       'center': new window.google.maps.LatLng( 40.6973724 , 14.1294367 ),
     },
     target = document.getElementById('googleMap8438'),
     map = new window.google.maps.Map(target, mapOptions);
      
     
     
     var opts0 = {
        'position': new window.google.maps.LatLng( 40.853053 , 14.1791543 ),
        'map': map,
        'title': 'Naples',
        'zIndex' : 0,
        'icon': ''
      };

     var infowindow0 = new window.google.maps.InfoWindow({
       content: 'Naples'
     });

     var marker0 = new window.google.maps.Marker(opts0);

     marker0.addListener('click', function(){
       infowindow0.open(map, marker0)
     })
     
     
     var opts1 = {
        'position': new window.google.maps.LatLng( 40.8223812 , 14.4113963 ),
        'map': map,
        'title': 'Mount Vesuvius',
        'zIndex' : 1,
        'icon': ''
      };

     var infowindow1 = new window.google.maps.InfoWindow({
       content: 'Mount Vesuvius'
     });

     var marker1 = new window.google.maps.Marker(opts1);

     marker1.addListener('click', function(){
       infowindow1.open(map, marker1)
     })
     
     
     var opts2 = {
        'position': new window.google.maps.LatLng( 40.7466183 , 14.4761726 ),
        'map': map,
        'title': 'Pompei',
        'zIndex' : 2,
        'icon': ''
      };

     var infowindow2 = new window.google.maps.InfoWindow({
       content: 'Pompei'
     });

     var marker2 = new window.google.maps.Marker(opts2);

     marker2.addListener('click', function(){
       infowindow2.open(map, marker2)
     })
     
     
     var opts3 = {
        'position': new window.google.maps.LatLng( 40.6237862 , 14.3576818 ),
        'map': map,
        'title': 'Sorrento',
        'zIndex' : 3,
        'icon': ''
      };

     var infowindow3 = new window.google.maps.InfoWindow({
       content: 'Sorrento'
     });

     var marker3 = new window.google.maps.Marker(opts3);

     marker3.addListener('click', function(){
       infowindow3.open(map, marker3)
     })
     
     
     var opts4 = {
        'position': new window.google.maps.LatLng( 40.5489025 , 14.1960389 ),
        'map': map,
        'title': 'Capri',
        'zIndex' : 4,
        'icon': ''
      };

     var infowindow4 = new window.google.maps.InfoWindow({
       content: 'Capri'
     });

     var marker4 = new window.google.maps.Marker(opts4);

     marker4.addListener('click', function(){
       infowindow4.open(map, marker4)
     })
     
     
     var opts5 = {
        'position': new window.google.maps.LatLng( 0.6295773 , 14.4769233 ),
        'map': map,
        'title': 'Positano',
        'zIndex' : 5,
        'icon': ''
      };

     var infowindow5 = new window.google.maps.InfoWindow({
       content: 'Positano'
     });

     var marker5 = new window.google.maps.Marker(opts5);

     marker5.addListener('click', function(){
       infowindow5.open(map, marker5)
     })
   

  }
  function makeMaps() {
    for (var map in window.hexoGmaps.maps) {
       console.log('map #', map);
       window.hexoGmaps.maps[map]();
    }
  }
  function loadScript() {
    window.hexoGmaps.googleScriptLoaded = true;
    var script = document.createElement('script');
    script.type = 'text/javascript';
        script.src = '//maps.googleapis.com/maps/api/js?v=3.exp&callback=makeMaps&key=AIzaSyB6JxSOGlpKd-7pPtKKG_BIEOiLlaRHxMQ';
    document.body.appendChild(script);
  }
  if (!window.hexoGmaps.googleScriptLoaded) {
    loadScript();
  }
</script>

<a id="more"></a>

<p>从日本 🇯🇵 回来不到三个月赶上国庆大长假</p>
<p>因为办了美帝签证和日本三年往返签证<br>材料准备的一堆继续用<br>所以申根签证没怎么担心</p>
<h2 id="罗马"><a href="#罗马" class="headerlink" title="罗马"></a>罗马</h2><p>从帝都做意大利航空经过 11 小时飞到罗马 🇷🇴</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-00.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-03.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-04.jpg" alt=""></div></div></div>

<h2 id="索伦托"><a href="#索伦托" class="headerlink" title="索伦托"></a>索伦托</h2><p>不同于常见的第一次飞意大利的向北<br>罗马-弗洛伦萨-米兰-威尼斯 路线</p>
<p>小伙伴们反向操作<br>做小火车一路往南来到 索伦托</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-05.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-07.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-09.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-13.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-14.jpg" alt=""></div></div></div>

<p>远处的那个小山包应该就是 维苏威 了</p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.334ex" xmlns="http://www.w3.org/2000/svg" width="25.282ex" height="4.68ex" role="img" focusable="false" viewBox="0 -1479 11174.6 2068.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(742.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(1798.6, 0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(925, 394) scale(0.707)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g><g data-mml-node="mrow" transform="translate(220, -515.3) scale(0.707)"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="msqrt" transform="translate(571, 0)"><g transform="translate(853, 0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500, 0)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g></g><g data-mml-node="mo" transform="translate(0, 112.6)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="1070" height="42.4" x="853" y="870.1"></rect></g></g><rect width="1963.5" height="60" x="120" y="220"></rect></g><g data-mml-node="TeXAtom" transform="translate(2203.5, 599.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(778, 0)"><g data-mml-node="mrow" transform="translate(220, 516.8) scale(0.707)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(389, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(572, 363)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1511, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msup" transform="translate(2289, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(490, 363)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="msup" transform="translate(3329, 0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(389, 363)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g><g data-mml-node="mrow" transform="translate(1155.9, -515.3) scale(0.707)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msup" transform="translate(500, 0)"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(571, 289)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g><rect width="3217.9" height="60" x="120" y="220"></rect></g></g></g><g data-mml-node="mo" transform="translate(7047.3, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(7492, 0)"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="mo" transform="translate(8340.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(9396.6, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500, 0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(778, 0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(1278, 0)"></path></g></g></g></svg></mjx-container></p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-15.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-100.jpg" alt=""></div></div></div>

<h2 id="庞贝古城"><a href="#庞贝古城" class="headerlink" title="庞贝古城"></a>庞贝古城</h2><blockquote>
<p>在灰烬下保存了大量的出土城市，提供了一个独特的罗马生活的缩影，在它被埋葬的那一刻，它被冻结了，并提供了对其居民日常生活的异常详细的洞察，尽管许多证据在早期的挖掘中丢失了。这是一个富裕的城市，享有许多精美的公共建筑和豪华的私人住宅，其奢华的装饰、家具和艺术品是早期发掘者的主要吸引力。包括木制物品和人体在内的有机残骸被埋在灰烬中，腐烂后留下空隙，考古学家发现这些空隙可以用作模具，在生命的最后时刻制作独特的、往往是可怕的人物的石膏模型。墙壁上和房间内刻有大量的涂鸦，提供了大量的例子，说明了当时已基本失传的俗语拉丁语，与古典作家的正式语言形成鲜明对比。<br>庞贝是联合国教科文组织的世界文化遗产，是意大利最受欢迎的旅游景点之一，每年约有 250 万游客前来参观。</p>
</blockquote>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-17.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-18.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-19.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-22.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-24.jpg" alt=""></div></div></div>

<h2 id="维苏威火山大爆发"><a href="#维苏威火山大爆发" class="headerlink" title="维苏威火山大爆发"></a>维苏威火山大爆发</h2><blockquote>
<p>下午 1 点左右，维苏威火山猛烈喷发，喷出高空的火山柱，火山灰和浮石开始落下，笼罩了整个地区。在此期间，发生了一些救援和逃生事件。在夜间或第二天早些时候，火山附近开始出现火成岩流。在山上看到的灯光被解释为火灾。远在米塞努姆的人们纷纷逃命。火山碎石流移动迅速、密度大、温度高，全部或部分地摧毁了路径上的所有结构，焚烧或窒息了剩余的人口，并改变了景观，包括海岸线。与此同时，那不勒斯湾还发生了轻微的地震和轻微的海啸。到了第二天傍晚，火山喷发已经结束，只在大气中留下了雾气，阳光微弱地照射着。<br>年轻的普林尼写了一篇关于火山喷发的记录。<br>宽大的火焰照亮了维苏威火山的许多地方；它们的光和亮度比黑夜更生动……世界其他地方现在是白天，但那里的黑暗比任何夜晚都要黑暗和浓重。</p>
</blockquote>
<h3 id="庞贝大剧院"><a href="#庞贝大剧院" class="headerlink" title="庞贝大剧院"></a>庞贝大剧院</h3><blockquote>
<p>庞贝的剧场区位于城市的西南部地区。构成这一区域的主要建筑有三座：大剧院、颂歌厅（小剧场）和四合院。这里作为城市的娱乐和会议中心。<br>大剧院建于公元前二世纪的一座天然山丘上。这座剧院大约可容纳 5000 名观众，是罗马最初的永久性石质剧院之一。<br>剧院在现代一直被用来举办音乐会、歌剧和戏剧。2008 年，开始进行修复工作，以便能够进一步进行戏剧和音乐表演。重新开放后，2014 年上演了普契尼的《波西米亚》和比才的《卡门》。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-27.jpg" alt=""></p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-26.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-29.jpg" alt=""></div></div></div>

<p>远远到黑云压压的火山 🌋<br>很难想象岩浆可以覆盖到这里</p>
<h3 id="庞贝竞技场"><a href="#庞贝竞技场" class="headerlink" title="庞贝竞技场"></a>庞贝竞技场</h3><blockquote>
<p>现在的圆形剧场大约建于公元前 70 年，是目前已知最早的罗马圆形剧场，是用石头建造的，以前都是用木头建造的。<br>除了作为历史地标和考古研究对象外，露天剧场在现代还被用于举办音乐会和其他公共活动。</p>
</blockquote>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-30.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-28.jpg" alt=""></div></div></div>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-32.jpg" alt=""></p>
<h2 id="维苏威火山"><a href="#维苏威火山" class="headerlink" title="维苏威火山"></a>维苏威火山</h2><blockquote>
<p>公元 79 年维苏威火山的爆发摧毁了罗马的庞贝、赫库兰尼姆、奥普隆提斯和斯塔比亚等城市以及其他几个定居点，最终释放的热能是广岛和长崎原子弹爆炸所释放的热能的 10 万倍。<br>维苏威火山此后多次喷发，是欧洲大陆上唯一一座在过去一百年内喷发的火山。今天，维苏威火山被认为是世界上最危险的火山之一，因为它附近有 300 万人生活在足以受到火山爆发影响的地方，其中 60 万人处于危险区，使它成为世界上人口最稠密的火山地区，而且它还倾向于发生普利尼亚式的暴力爆炸性喷发。</p>
</blockquote>
<blockquote>
<p>维苏威火山是由非洲板块和欧亚板块这两个板块碰撞形成的。前者在后者的下方俯冲，深入地底。当大洋性非洲板块的水饱和沉积物被推到地球内部更热的深处时，水沸腾了，降低了上层地幔的熔点，足以使岩石部分熔化。由于岩浆的密度比周围的固体岩石小，所以它被向上推。找到了地球表面的薄弱点，岩浆冲破了，从而形成了火山。</p>
</blockquote>
<blockquote>
<p>1995 年 6 月 5 日，维苏威火山周围地区被正式宣布为国家公园。维苏威火山顶峰对游客开放，火山周围有一个小的道路网，周末由公园当局维护。在距离山顶 200 米(660 英尺)以内的地方(垂直测量)可以通过公路进入，但此后只能步行进入。从公路到火山口有一条环绕火山的螺旋形通道。</p>
</blockquote>
<p>之前以为是小山包<br>实际过来还是还蛮大的，海拔约 1km</p>
<p>如上面所诉<br>做巴士盘山上升，最后一段斜坡需要自己走上去<br>最好穿紧致的鞋子，不然都是火山灰</p>
<p>火山口内部没有岩浆，但有些地方在冒烟</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-35.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-38.jpg" alt=""></div></div><div class="group-picture-row"></div><div class="group-picture-row"></div></div>

<p>有些云下面像是有东西托着一样整整齐齐<br>有些不时的迎面扑来<br>让人联想到 《降临》 里云飘过山峰的场景<br>这次真的站在云彩里了</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-40.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-41.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-48.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-49.jpg" alt=""></div></div></div>

<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-50.jpg" alt=""></p>
<h2 id="波西塔诺"><a href="#波西塔诺" class="headerlink" title="波西塔诺"></a>波西塔诺</h2><blockquote>
<p>波西塔诺是一个梦乡，你在时，她不是很真切，你离开后，她变的栩栩如生。</p>
</blockquote>
<p>这种建在山上的小房子就很奇特，跑酷的绝佳场所<br>曾经玩刺客信条时， Ezio 就是在意大利翻檐走壁</p>
<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-53.jpg" alt=""></p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-55.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-57.jpg" alt=""></div></div></div>

<p>海边有小艇可以出海</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-62.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-63.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-68.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-69.jpg" alt=""></div></div></div>

<p>回来时已经晚上了<br>灯火通明像是电影里的场景</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-65.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-66.jpg" alt=""></div></div></div>

<p><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-67.jpg" alt=""></p>
<blockquote>
<p>丁达尔效应是胶体中或极细悬浮液中的粒子对光的散射。也被称为丁达尔散射，它与瑞利散射相似(Aldnoah Zero)，散射光的强度与波长的四次方成反比，所以蓝光比红光散射得更强烈。</p>
</blockquote>
<p>仿佛魔戒一样</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-70.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-71.jpg" alt=""></div></div></div>

<h2 id="卡普里岛"><a href="#卡普里岛" class="headerlink" title="卡普里岛"></a>卡普里岛</h2><blockquote>
<p>除了是作家和艺术家的天堂，卡普里也是外国男同性恋者相对安全的地方，他们可以过上更开放的生活；他们中的一小部分人被吸引到那里生活，在一定程度上与上面提到的创造性类型重叠。</p>
</blockquote>
<p>小艇绕行一周大概一小时<br>可惜小伙伴要提前回去赶飞机<br>所以只绕了 1/2 就回去了</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-74.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-76.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-77.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-86.jpg" alt=""></div></div></div>

<h2 id="蓝洞"><a href="#蓝洞" class="headerlink" title="蓝洞"></a>蓝洞</h2><blockquote>
<p>当光线通过水面进入洞窟时，红色的反射被过滤掉，只有蓝光进入洞窟。放在石窟水中的物体，著名的是呈现银色。这是由于细小的气泡造成的，当它们被放置在水下时，气泡覆盖在物体的外面。这些气泡导致光线折射的方式与周围的水不同，从而产生了银色效果。</p>
</blockquote>
<blockquote>
<p>部分原因是由于水面上的洞口发出的光有耀眼的效果，洞中的水比空气中的光更充沛。游客将手放在水中，可以看到水在这种光线下诡异地 “发光”。</p>
</blockquote>
<p>小艇的人和我们介绍岛上有最蓝的蓝洞<br>信以为真<br>晚上回去听隔海相望的在西班牙 🇪🇸 旅游的财务总监也说看到了最蓝的蓝洞</p>
<p>和她说一定是被骗子骗了<br>毕竟蓝洞只有</p>
<ul>
<li>蓝色洞穴（Biševo），克罗地亚的 Biševo 岛上的一个山洞</li>
<li>蓝色洞穴（卡普里岛），意大利卡普里岛上的一个山洞</li>
<li>蓝色洞穴（Kastelorizo​​），希腊的梅吉斯蒂岛（Kastelorizo​​）上的一个洞穴</li>
<li>蓝洞（马耳他），在马耳他的一个山洞</li>
<li>蓝洞，布鲁克林大桥曼哈顿尽头的区域</li>
<li>Grotta dello Smeraldo，在意大利阿马尔菲海岸的一个山洞</li>
</ul>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-88.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-89.jpg" alt=""></div></div></div>

<h2 id="地中海蓝"><a href="#地中海蓝" class="headerlink" title="地中海蓝"></a>地中海蓝</h2><p>不同于之前在加州见到的太平洋蓝<br>这地中海蓝像是浓稠的染料</p>
<blockquote>
<p>地中海几乎是内陆，这影响了地中海的条件：例如，由于与大西洋的狭窄连接，潮汐非常有限。地中海的特点是，它的深蓝色让人一目了然。</p>
</blockquote>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-83.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-79.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-78.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-85.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-84.jpg" alt=""></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/LeiHao0/BlogAssets/assets/ita-0-0-93.jpg" alt=""></div></div></div>
]]></content>
      <tags>
        <tag>Travel</tag>
        <tag>LittleMaster</tag>
        <tag>Italy</tag>
        <tag>🇮🇹</tag>
      </tags>
  </entry>
</search>
